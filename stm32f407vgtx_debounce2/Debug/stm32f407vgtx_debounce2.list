
stm32f407vgtx_debounce2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bf64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039a0  0801c0f4  0801c0f4  0002c0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fa94  0801fa94  00030174  2**0
                  CONTENTS
  4 .ARM          00000008  0801fa94  0801fa94  0002fa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fa9c  0801fa9c  00030174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fa9c  0801fa9c  0002fa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801faa0  0801faa0  0002faa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0801faa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030174  2**0
                  CONTENTS
 10 .bss          0000e584  20000174  20000174  00030174  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  2000e6f8  2000e6f8  00030174  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003952d  00000000  00000000  0003019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008e91  00000000  00000000  000696cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029f8  00000000  00000000  00072560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002810  00000000  00000000  00074f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000147e7  00000000  00000000  00077768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ef81  00000000  00000000  0008bf4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f35e0  00000000  00000000  000caed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001be4b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b6dc  00000000  00000000  001be500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  001c9bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000174 	.word	0x20000174
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c0dc 	.word	0x0801c0dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000178 	.word	0x20000178
 80001cc:	0801c0dc 	.word	0x0801c0dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14d      	bne.n	800035c <__udivmoddi4+0xac>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d968      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b152      	cbz	r2, 80002e2 <__udivmoddi4+0x32>
 80002cc:	fa01 f302 	lsl.w	r3, r1, r2
 80002d0:	f1c2 0120 	rsb	r1, r2, #32
 80002d4:	fa20 f101 	lsr.w	r1, r0, r1
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	ea41 0803 	orr.w	r8, r1, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80002e6:	0c21      	lsrs	r1, r4, #16
 80002e8:	fbb8 fef5 	udiv	lr, r8, r5
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	fb05 831e 	mls	r3, r5, lr, r8
 80002f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f8:	fb0e f107 	mul.w	r1, lr, r7
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d90b      	bls.n	8000318 <__udivmoddi4+0x68>
 8000300:	eb1c 0303 	adds.w	r3, ip, r3
 8000304:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000308:	f080 811e 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030c:	4299      	cmp	r1, r3
 800030e:	f240 811b 	bls.w	8000548 <__udivmoddi4+0x298>
 8000312:	f1ae 0e02 	sub.w	lr, lr, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000320:	fb05 3310 	mls	r3, r5, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x96>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 8108 	bcs.w	800054c <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8105 	bls.w	800054c <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	b11e      	cbz	r6, 8000358 <__udivmoddi4+0xa8>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c6 4300 	strd	r4, r3, [r6]
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0xc2>
 8000360:	2e00      	cmp	r6, #0
 8000362:	f000 80ee 	beq.w	8000542 <__udivmoddi4+0x292>
 8000366:	2100      	movs	r1, #0
 8000368:	e9c6 0500 	strd	r0, r5, [r6]
 800036c:	4608      	mov	r0, r1
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f183 	clz	r1, r3
 8000376:	2900      	cmp	r1, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb65 0303 	sbc.w	r3, r5, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e2      	beq.n	8000358 <__udivmoddi4+0xa8>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7df      	b.n	8000358 <__udivmoddi4+0xa8>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8091 	bne.w	80004c8 <__udivmoddi4+0x218>
 80003a6:	eba1 050c 	sub.w	r5, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2101      	movs	r1, #1
 80003b4:	fbb5 f3f7 	udiv	r3, r5, r7
 80003b8:	fb07 5013 	mls	r0, r7, r3, r5
 80003bc:	0c25      	lsrs	r5, r4, #16
 80003be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0505 	adds.w	r5, ip, r5
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	42a8      	cmp	r0, r5
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a2d      	subs	r5, r5, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb5 f0f7 	udiv	r0, r5, r7
 80003e4:	fb07 5510 	mls	r5, r7, r0, r5
 80003e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4628      	mov	r0, r5
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79e      	b.n	800034e <__udivmoddi4+0x9e>
 8000410:	f1c1 0720 	rsb	r7, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa05 f301 	lsl.w	r3, r5, r1
 8000426:	431c      	orrs	r4, r3
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f301 	lsl.w	r3, r0, r1
 8000432:	fbb5 f8f9 	udiv	r8, r5, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 5518 	mls	r5, r9, r8, r5
 8000440:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	42a8      	cmp	r0, r5
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0505 	adds.w	r5, ip, r5
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	42a8      	cmp	r0, r5
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4465      	add	r5, ip
 8000468:	1a2d      	subs	r5, r5, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000470:	fb09 5510 	mls	r5, r9, r0, r5
 8000474:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	45ae      	cmp	lr, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	45ae      	cmp	lr, r5
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba5 050e 	sub.w	r5, r5, lr
 800049e:	42a5      	cmp	r5, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15e      	cbz	r6, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb65 050e 	sbc.w	r5, r5, lr
 80004b2:	fa05 f707 	lsl.w	r7, r5, r7
 80004b6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c6 7500 	strd	r7, r5, [r6]
 80004c2:	2100      	movs	r1, #0
 80004c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c8:	f1c2 0320 	rsb	r3, r2, #32
 80004cc:	fa20 f103 	lsr.w	r1, r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa25 f303 	lsr.w	r3, r5, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	430d      	orrs	r5, r1
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f1f7 	udiv	r1, r3, r7
 80004e8:	fb07 3011 	mls	r0, r7, r1, r3
 80004ec:	0c2b      	lsrs	r3, r5, #16
 80004ee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004f2:	fb01 f00e 	mul.w	r0, r1, lr
 80004f6:	4298      	cmp	r0, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f101 38ff 	add.w	r8, r1, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	4298      	cmp	r0, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3902      	subs	r1, #2
 800050e:	4463      	add	r3, ip
 8000510:	1a1b      	subs	r3, r3, r0
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3310 	mls	r3, r7, r0, r3
 800051c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000520:	fb00 f30e 	mul.w	r3, r0, lr
 8000524:	42ab      	cmp	r3, r5
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0505 	adds.w	r5, ip, r5
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3802      	subs	r0, #2
 8000538:	4465      	add	r5, ip
 800053a:	1aed      	subs	r5, r5, r3
 800053c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	4631      	mov	r1, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e707      	b.n	8000358 <__udivmoddi4+0xa8>
 8000548:	4686      	mov	lr, r0
 800054a:	e6e5      	b.n	8000318 <__udivmoddi4+0x68>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fa      	b.n	8000346 <__udivmoddi4+0x96>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4640      	mov	r0, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4641      	mov	r1, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4465      	add	r5, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4608      	mov	r0, r1
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb9c 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f816 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f87e 	bl	8000690 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000594:	f007 fd76 	bl	8008084 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <main+0x2c>)
 800059a:	2100      	movs	r1, #0
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <main+0x30>)
 800059e:	f007 fdce 	bl	800813e <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <main+0x34>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a8:	f007 fd8e 	bl	80080c8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  //Suite* aa = mqtt_suite();
  //START_TEST();
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x28>
 80005ae:	bf00      	nop
 80005b0:	0801f7c0 	.word	0x0801f7c0
 80005b4:	0800079d 	.word	0x0800079d
 80005b8:	20000190 	.word	0x20000190

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f01a fef0 	bl	801b3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000630:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063a:	2307      	movs	r3, #7
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	4618      	mov	r0, r3
 8000644:	f002 ff0a 	bl	800345c <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064e:	f000 f8c5 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2105      	movs	r1, #5
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f96b 	bl	800394c <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800067c:	f000 f8ae 	bl	80007dc <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <MX_GPIO_Init+0x100>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a38      	ldr	r2, [pc, #224]	; (8000790 <MX_GPIO_Init+0x100>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b36      	ldr	r3, [pc, #216]	; (8000790 <MX_GPIO_Init+0x100>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <MX_GPIO_Init+0x100>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a31      	ldr	r2, [pc, #196]	; (8000790 <MX_GPIO_Init+0x100>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_GPIO_Init+0x100>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_GPIO_Init+0x100>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MX_GPIO_Init+0x100>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0x100>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_GPIO_Init+0x100>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a23      	ldr	r2, [pc, #140]	; (8000790 <MX_GPIO_Init+0x100>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_GPIO_Init+0x100>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_GPIO_Init+0x100>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_GPIO_Init+0x100>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_GPIO_Init+0x100>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000738:	4816      	ldr	r0, [pc, #88]	; (8000794 <MX_GPIO_Init+0x104>)
 800073a:	f001 fbdb 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073e:	2301      	movs	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <MX_GPIO_Init+0x108>)
 8000754:	f001 fa34 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000758:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <MX_GPIO_Init+0x104>)
 8000772:	f001 fa25 	bl	8001bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2105      	movs	r1, #5
 800077a:	2006      	movs	r0, #6
 800077c:	f000 fbb9 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000780:	2006      	movs	r0, #6
 8000782:	f000 fbd2 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020c00 	.word	0x40020c00
 8000798:	40020000 	.word	0x40020000

0800079c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007a4:	f019 feb0 	bl	801a508 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 80007a8:	f005 f9e6 	bl	8005b78 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  START_TEST();
 80007ac:	f000 f9f2 	bl	8000b94 <START_TEST>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f007 fd56 	bl	8008262 <osDelay>
 80007b6:	e7fb      	b.n	80007b0 <StartDefaultTask+0x14>

080007b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d101      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ca:	f000 fa9d 	bl	8000d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010000 	.word	0x40010000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_MspInit+0x54>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <HAL_MspInit+0x54>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fb60 	bl	8000ef2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	2019      	movs	r0, #25
 8000856:	f000 fb4c 	bl	8000ef2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800085a:	2019      	movs	r0, #25
 800085c:	f000 fb65 	bl	8000f2a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <HAL_InitTick+0xa4>)
 8000866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000868:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <HAL_InitTick+0xa4>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6453      	str	r3, [r2, #68]	; 0x44
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_InitTick+0xa4>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800087c:	f107 0210 	add.w	r2, r7, #16
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fa70 	bl	8003d6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800088c:	f003 fa5a 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8000890:	4603      	mov	r3, r0
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <HAL_InitTick+0xa8>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	3b01      	subs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_InitTick+0xac>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <HAL_InitTick+0xb0>)
 80008a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_InitTick+0xac>)
 80008ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_InitTick+0xac>)
 80008b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_InitTick+0xac>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_InitTick+0xac>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <HAL_InitTick+0xac>)
 80008c6:	f003 fa81 	bl	8003dcc <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d104      	bne.n	80008da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <HAL_InitTick+0xac>)
 80008d2:	f003 fad3 	bl	8003e7c <HAL_TIM_Base_Start_IT>
 80008d6:	4603      	mov	r3, r0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3730      	adds	r7, #48	; 0x30
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	20000194 	.word	0x20000194
 80008f0:	40010000 	.word	0x40010000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000922:	2001      	movs	r0, #1
 8000924:	f001 fafe 	bl	8001f24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000932:	f003 fb11 	bl	8003f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000194 	.word	0x20000194

08000940 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <OTG_FS_IRQHandler+0x10>)
 8000946:	f001 fc5f 	bl	8002208 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000dfbc 	.word	0x2000dfbc

08000954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	return 1;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
	...

08000964 <_kill>:

int _kill(int pid, int sig)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <_kill+0x20>)
 8000970:	2216      	movs	r2, #22
 8000972:	601a      	str	r2, [r3, #0]
	return -1;
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000e6f4 	.word	0x2000e6f4

08000988 <_exit>:

void _exit (int status)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffe5 	bl	8000964 <_kill>
	while (1) {}		/* Make sure we hang here */
 800099a:	e7fe      	b.n	800099a <_exit+0x12>

0800099c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e00a      	b.n	80009c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	4601      	mov	r1, r0
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <_read+0x12>
	}

return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e009      	b.n	80009fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf1      	blt.n	80009e8 <_write+0x12>
	}
	return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_close>:

int _close(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a34:	605a      	str	r2, [r3, #4]
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <_isatty>:

int _isatty(int file)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	return 1;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
	return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
	...

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d205      	bcs.n	8000aac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <_sbrk+0x6c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	371c      	adds	r7, #28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20020000 	.word	0x20020000
 8000ad0:	00004000 	.word	0x00004000
 8000ad4:	200001dc 	.word	0x200001dc
 8000ad8:	2000e6f8 	.word	0x2000e6f8
 8000adc:	2000e6f4 	.word	0x2000e6f4

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <test_mqtt_netif_output>:
const ip_addr_t test_mqtt_remote_ip = IPADDR4_INIT_BYTES(192, 168, 220, 1);
const ip_addr_t test_mqtt_netmask = IPADDR4_INIT_BYTES(255, 255, 255, 0);

static err_t test_mqtt_netif_output(struct netif *netif, struct pbuf *p,
       const ip4_addr_t *ipaddr)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(ipaddr);
  LWIP_UNUSED_ARG(p);
  return ERR_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <test_mqtt_init_netif>:

static void
test_mqtt_init_netif(struct netif *netif, const ip_addr_t *ip_addr, const ip_addr_t *netmask)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  struct netif *n;
  memset(netif, 0, sizeof(struct netif));
 8000b10:	2238      	movs	r2, #56	; 0x38
 8000b12:	2100      	movs	r1, #0
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f01a fc4b 	bl	801b3b0 <memset>
  netif->output = test_mqtt_netif_output;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <test_mqtt_init_netif+0x70>)
 8000b1e:	615a      	str	r2, [r3, #20]
  netif->flags |= NETIF_FLAG_UP | NETIF_FLAG_LINK_UP;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000b26:	f043 0305 	orr.w	r3, r3, #5
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  ip_addr_copy_from_ip4(netif->netmask, *ip_2_ip4(netmask));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	609a      	str	r2, [r3, #8]
  ip_addr_copy_from_ip4(netif->ip_addr, *ip_2_ip4(ip_addr));
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	605a      	str	r2, [r3, #4]
  for (n = netif_list; n != NULL; n = n->next) {
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <test_mqtt_init_netif+0x74>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e006      	b.n	8000b58 <test_mqtt_init_netif+0x54>
    if (n == netif) {
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d00c      	beq.n	8000b6c <test_mqtt_init_netif+0x68>
  for (n = netif_list; n != NULL; n = n->next) {
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f5      	bne.n	8000b4a <test_mqtt_init_netif+0x46>
      return;
    }
  }
  netif->next = NULL;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <test_mqtt_init_netif+0x74>)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e000      	b.n	8000b6e <test_mqtt_init_netif+0x6a>
      return;
 8000b6c:	bf00      	nop
}
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08000aed 	.word	0x08000aed
 8000b78:	2000c940 	.word	0x2000c940

08000b7c <test_mqtt_connection_cb>:
  netif_default = old_netif_default;
  lwip_check_ensure_no_alloc(SKIP_POOL(MEMP_SYS_TIMEOUT));
}

static void test_mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(client);
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(status);
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <START_TEST>:

void START_TEST(void)
{
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b09c      	sub	sp, #112	; 0x70
 8000b98:	af02      	add	r7, sp, #8
  mqtt_client_t* client;
  struct netif netif;
  err_t err;
  struct mqtt_connect_client_info_t client_info = {
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <START_TEST+0xc8>)
 8000b9c:	f107 0408 	add.w	r4, r7, #8
 8000ba0:	461d      	mov	r5, r3
 8000ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    NULL, NULL,
    10,
    NULL, NULL, 0, 0
  };
  struct pbuf *p;
  unsigned char rxbuf[] = {0x20, 0x02, 0x00, 0x00};
 8000bae:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000bb2:	607b      	str	r3, [r7, #4]
  //LWIP_UNUSED_ARG(_i);

  test_mqtt_init_netif(&netif, &test_mqtt_local_ip, &test_mqtt_netmask);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <START_TEST+0xcc>)
 8000bba:	492a      	ldr	r1, [pc, #168]	; (8000c64 <START_TEST+0xd0>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ffa1 	bl	8000b04 <test_mqtt_init_netif>

  client = mqtt_client_new();
 8000bc2:	f00c f96b 	bl	800ce9c <mqtt_client_new>
 8000bc6:	6678      	str	r0, [r7, #100]	; 0x64
  //fail_unless(client != NULL);
  err = mqtt_client_connect(client, &test_mqtt_remote_ip, 1234, test_mqtt_connection_cb, NULL, &client_info);
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <START_TEST+0xd4>)
 8000bd4:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000bd8:	4924      	ldr	r1, [pc, #144]	; (8000c6c <START_TEST+0xd8>)
 8000bda:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000bdc:	f00c f968 	bl	800ceb0 <mqtt_client_connect>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  //fail_unless(err == ERR_OK);

  client->conn->connected(client->conn->callback_arg, client->conn, ERR_OK);
 8000be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000bf0:	68d2      	ldr	r2, [r2, #12]
 8000bf2:	6910      	ldr	r0, [r2, #16]
 8000bf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000bf6:	68d1      	ldr	r1, [r2, #12]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4798      	blx	r3
  p = pbuf_alloc(PBUF_RAW, sizeof(rxbuf), PBUF_REF);
 8000bfc:	2241      	movs	r2, #65	; 0x41
 8000bfe:	2104      	movs	r1, #4
 8000c00:	2000      	movs	r0, #0
 8000c02:	f00d fd75 	bl	800e6f0 <pbuf_alloc>
 8000c06:	65f8      	str	r0, [r7, #92]	; 0x5c
  //fail_unless(p != NULL);
  p->payload = rxbuf;
 8000c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c0a:	1d3a      	adds	r2, r7, #4
 8000c0c:	605a      	str	r2, [r3, #4]
  /* since we hack the rx path, we have to hack the rx window, too: */
  client->conn->rcv_wnd -= p->tot_len;
 8000c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c16:	891a      	ldrh	r2, [r3, #8]
 8000c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	851a      	strh	r2, [r3, #40]	; 0x28
  if (client->conn->recv(client->conn->callback_arg, client->conn, p, ERR_OK) != ERR_OK) {
 8000c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8000c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	6918      	ldr	r0, [r3, #16]
 8000c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c32:	68d9      	ldr	r1, [r3, #12]
 8000c34:	2300      	movs	r3, #0
 8000c36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c38:	47a0      	blx	r4
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <START_TEST+0xb2>
    pbuf_free(p);
 8000c40:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c42:	f00e f839 	bl	800ecb8 <pbuf_free>
  }

  mqtt_disconnect(client);
 8000c46:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c48:	f00c fbae 	bl	800d3a8 <mqtt_disconnect>
  /* fixme: mqtt_client_fre() is missing... */
  mem_free(client);
 8000c4c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c4e:	f00c fe19 	bl	800d884 <mem_free>
}
 8000c52:	bf00      	nop
 8000c54:	3768      	adds	r7, #104	; 0x68
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	0801c108 	.word	0x0801c108
 8000c60:	0801f804 	.word	0x0801f804
 8000c64:	0801f7fc 	.word	0x0801f7fc
 8000c68:	08000b7d 	.word	0x08000b7d
 8000c6c:	0801f800 	.word	0x0801f800

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ff21 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f01a fad5 	bl	801b24c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc6f 	bl	8000584 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000cb4:	0801faa4 	.word	0x0801faa4
  ldr r2, =_sbss
 8000cb8:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000cbc:	2000e6f8 	.word	0x2000e6f8

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f8f5 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f7ff fda4 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fd76 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_IncTick+0x20>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200001e0 	.word	0x200001e0

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_GetTick+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	200001e0 	.word	0x200001e0

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff fff0 	bl	8000d2c <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffe0 	bl	8000d2c <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4906      	ldr	r1, [pc, #24]	; (8000e20 <__NVIC_EnableIRQ+0x34>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff4f 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff64 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ffb2 	bl	8000e78 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff81 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff57 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e06c      	b.n	8001034 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2223      	movs	r2, #35	; 0x23
 8000f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f869 	bl	8001044 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <HAL_ETH_Init+0xf4>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a30      	ldr	r2, [pc, #192]	; (800103c <HAL_ETH_Init+0xf4>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <HAL_ETH_Init+0xf4>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_ETH_Init+0xf8>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <HAL_ETH_Init+0xf8>)
 8000f94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_ETH_Init+0xf8>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	4927      	ldr	r1, [pc, #156]	; (8001040 <HAL_ETH_Init+0xf8>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <HAL_ETH_Init+0xf8>)
 8000faa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff feb2 	bl	8000d2c <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fca:	e011      	b.n	8000ff0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000fcc:	f7ff feae 	bl	8000d2c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fda:	d909      	bls.n	8000ff0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2204      	movs	r2, #4
 8000fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	22e0      	movs	r2, #224	; 0xe0
 8000fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e021      	b.n	8001034 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1e4      	bne.n	8000fcc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fb3a 	bl	800167c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fbdf 	bl	80017cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fc34 	bl	800187c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	461a      	mov	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fb9f 	bl	8001760 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2210      	movs	r2, #16
 800102e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800

08001044 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e045      	b.n	8001106 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001080:	2b23      	cmp	r3, #35	; 0x23
 8001082:	d13f      	bne.n	8001104 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800108c:	2201      	movs	r2, #1
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fc5f 	bl	8001954 <ETH_Prepare_Tx_Descriptors>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d009      	beq.n	80010b0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	f043 0202 	orr.w	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e02a      	b.n	8001106 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010b0:	f3bf 8f4f 	dsb	sy
}
 80010b4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d904      	bls.n	80010d2 <HAL_ETH_Transmit_IT+0x7c>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	1f1a      	subs	r2, r3, #4
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00d      	beq.n	8001100 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ec:	461a      	mov	r2, r3
 80010ee:	2304      	movs	r3, #4
 80010f0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010fa:	461a      	mov	r2, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	e000      	b.n	8001106 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
  }
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b088      	sub	sp, #32
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112c:	f043 0201 	orr.w	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0a8      	b.n	800128c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001140:	2b23      	cmp	r3, #35	; 0x23
 8001142:	d001      	beq.n	8001148 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0a1      	b.n	800128c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	3212      	adds	r2, #18
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800115e:	f1c3 0304 	rsb	r3, r3, #4
 8001162:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001164:	e06a      	b.n	800123c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	69da      	ldr	r2, [r3, #28]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <HAL_ETH_ReadData+0x88>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d040      	beq.n	8001218 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00c      	beq.n	80011da <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0c1b      	lsrs	r3, r3, #16
 80011c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011ca:	3b04      	subs	r3, #4
 80011cc:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80011f2:	461a      	mov	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f004 ff40 	bl	800607c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	441a      	add	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3301      	adds	r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d902      	bls.n	800122a <HAL_ETH_ReadData+0x11c>
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3b04      	subs	r3, #4
 8001228:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	3212      	adds	r2, #18
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db06      	blt.n	8001252 <HAL_ETH_ReadData+0x144>
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	429a      	cmp	r2, r3
 800124a:	d202      	bcs.n	8001252 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d089      	beq.n	8001166 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	441a      	add	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f814 	bl	8001294 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80012a0:	2301      	movs	r3, #1
 80012a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	3212      	adds	r2, #18
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80012bc:	e03e      	b.n	800133c <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d112      	bne.n	80012ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fea6 	bl	800601c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	74fb      	strb	r3, [r7, #19]
 80012da:	e007      	b.n	80012ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	461a      	mov	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	461a      	mov	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80012ec:	7cfb      	ldrb	r3, [r7, #19]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d024      	beq.n	800133c <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012f2:	f3bf 8f5f 	dmb	sy
}
 80012f6:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012fe:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <ETH_UpdateDescriptor+0xe0>)
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	e003      	b.n	8001318 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8001316:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	3301      	adds	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d902      	bls.n	800132a <ETH_UpdateDescriptor+0x96>
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3b04      	subs	r3, #4
 8001328:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	3212      	adds	r2, #18
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	617b      	str	r3, [r7, #20]
      desccount--;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	3b01      	subs	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <ETH_UpdateDescriptor+0xb4>
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ba      	bne.n	80012be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	429a      	cmp	r2, r3
 8001350:	d00c      	beq.n	800136c <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135a:	461a      	mov	r2, r3
 800135c:	2300      	movs	r3, #0
 800135e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	800043e8 	.word	0x800043e8

08001378 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3318      	adds	r3, #24
 8001384:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001396:	e03f      	b.n	8001418 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001398:	2301      	movs	r3, #1
 800139a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3b01      	subs	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3304      	adds	r3, #4
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	3301      	adds	r3, #1
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d028      	beq.n	8001418 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db1b      	blt.n	8001414 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3304      	adds	r3, #4
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fe86 	bl	80060fa <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3304      	adds	r3, #4
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	3301      	adds	r3, #1
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
 8001412:	e001      	b.n	8001418 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <HAL_ETH_ReleaseTxPacket+0xac>
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1b9      	bne.n	8001398 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <ETH_SetMACConfig+0x134>)
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	7c1b      	ldrb	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <ETH_SetMACConfig+0x28>
 8001452:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001456:	e000      	b.n	800145a <ETH_SetMACConfig+0x2a>
 8001458:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7c5b      	ldrb	r3, [r3, #17]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <ETH_SetMACConfig+0x38>
 8001462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001466:	e000      	b.n	800146a <ETH_SetMACConfig+0x3a>
 8001468:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800146a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001470:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	7fdb      	ldrb	r3, [r3, #31]
 8001476:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001478:	431a      	orrs	r2, r3
                        macconf->Speed |
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800147e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	7f92      	ldrb	r2, [r2, #30]
 8001484:	2a00      	cmp	r2, #0
 8001486:	d102      	bne.n	800148e <ETH_SetMACConfig+0x5e>
 8001488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148c:	e000      	b.n	8001490 <ETH_SetMACConfig+0x60>
 800148e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001490:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	7f1b      	ldrb	r3, [r3, #28]
 8001496:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001498:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800149e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	791b      	ldrb	r3, [r3, #4]
 80014a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d102      	bne.n	80014b8 <ETH_SetMACConfig+0x88>
 80014b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b6:	e000      	b.n	80014ba <ETH_SetMACConfig+0x8a>
 80014b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	7bdb      	ldrb	r3, [r3, #15]
 80014c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014d2:	4313      	orrs	r3, r2
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff fc28 	bl	8000d40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001506:	4013      	ands	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001516:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 800151c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001524:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800152c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001534:	4313      	orrs	r3, r2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff fbf7 	bl	8000d40 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	ff20810f 	.word	0xff20810f

08001568 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <ETH_SetDMAConfig+0x110>)
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7b1b      	ldrb	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <ETH_SetDMAConfig+0x2c>
 800158e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001592:	e000      	b.n	8001596 <ETH_SetDMAConfig+0x2e>
 8001594:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7b5b      	ldrb	r3, [r3, #13]
 800159a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800159c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	7f52      	ldrb	r2, [r2, #29]
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <ETH_SetDMAConfig+0x44>
 80015a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015aa:	e000      	b.n	80015ae <ETH_SetDMAConfig+0x46>
 80015ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	7b9b      	ldrb	r3, [r3, #14]
 80015b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	7f1b      	ldrb	r3, [r3, #28]
 80015c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	7f9b      	ldrb	r3, [r3, #30]
 80015ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015dc:	4313      	orrs	r3, r2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ec:	461a      	mov	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fb9e 	bl	8000d40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	791b      	ldrb	r3, [r3, #4]
 8001616:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800161c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001622:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001628:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001630:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001632:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800163a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001640:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800164a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800164e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff fb6f 	bl	8000d40 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	f8de3f23 	.word	0xf8de3f23

0800167c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0a6      	sub	sp, #152	; 0x98
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001690:	2300      	movs	r3, #0
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800169a:	2301      	movs	r3, #1
 800169c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016b8:	2300      	movs	r3, #0
 80016ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f4:	4619      	mov	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fe9a 	bl	8001430 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001700:	2301      	movs	r3, #1
 8001702:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001722:	2301      	movs	r3, #1
 8001724:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001728:	2301      	movs	r3, #1
 800172a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800172c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001730:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001736:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff08 	bl	8001568 <ETH_SetDMAConfig>
}
 8001758:	bf00      	nop
 800175a:	3798      	adds	r7, #152	; 0x98
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3305      	adds	r3, #5
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	3204      	adds	r2, #4
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <ETH_MACAddressConfig+0x64>)
 8001782:	4413      	add	r3, r2
 8001784:	461a      	mov	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3303      	adds	r3, #3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	061a      	lsls	r2, r3, #24
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3302      	adds	r3, #2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	4313      	orrs	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <ETH_MACAddressConfig+0x68>)
 80017b2:	4413      	add	r3, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	6013      	str	r3, [r2, #0]
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40028040 	.word	0x40028040
 80017c8:	40028044 	.word	0x40028044

080017cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e03e      	b.n	8001858 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68d9      	ldr	r1, [r3, #12]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2200      	movs	r2, #0
 8001802:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	3206      	adds	r2, #6
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d80c      	bhi.n	800183c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68d9      	ldr	r1, [r3, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e004      	b.n	8001846 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d9bd      	bls.n	80017da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001870:	611a      	str	r2, [r3, #16]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e046      	b.n	8001918 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6919      	ldr	r1, [r3, #16]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018c6:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80018ce:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	3212      	adds	r2, #18
 80018e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d80c      	bhi.n	8001908 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	e004      	b.n	8001912 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	461a      	mov	r2, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d9b5      	bls.n	800188a <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	60da      	str	r2, [r3, #12]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001954:	b480      	push	{r7}
 8001956:	b08d      	sub	sp, #52	; 0x34
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3318      	adds	r3, #24
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001996:	d007      	beq.n	80019a8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	3304      	adds	r3, #4
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80019a8:	2302      	movs	r3, #2
 80019aa:	e103      	b.n	8001bb4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	3301      	adds	r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80019c4:	f023 031f 	bic.w	r3, r3, #31
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	6852      	ldr	r2, [r2, #4]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001a32:	f3bf 8f5f 	dmb	sy
}
 8001a36:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001a44:	e084      	b.n	8001b50 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e005      	b.n	8001a72 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	3301      	adds	r3, #1
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d902      	bls.n	8001a84 <ETH_Prepare_Tx_Descriptors+0x130>
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	3b04      	subs	r3, #4
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aa6:	d007      	beq.n	8001ab8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	3304      	adds	r3, #4
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d029      	beq.n	8001b0c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aca:	e019      	b.n	8001b00 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001acc:	f3bf 8f5f 	dmb	sy
}
 8001ad0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d902      	bls.n	8001af0 <ETH_Prepare_Tx_Descriptors+0x19c>
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	3b04      	subs	r3, #4
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	3301      	adds	r3, #1
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3e1      	bcc.n	8001acc <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e053      	b.n	8001bb4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	3301      	adds	r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001b2a:	f023 031f 	bic.w	r3, r3, #31
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	6852      	ldr	r2, [r2, #4]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b3e:	f3bf 8f5f 	dmb	sy
}
 8001b42:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f af76 	bne.w	8001a46 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e005      	b.n	8001b7a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8a:	6979      	ldr	r1, [r7, #20]
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	3304      	adds	r3, #4
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b9a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001bae:	b662      	cpsie	i
}
 8001bb0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3734      	adds	r7, #52	; 0x34
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e16b      	b.n	8001eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 815a 	bne.w	8001eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d005      	beq.n	8001c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d130      	bne.n	8001c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 0201 	and.w	r2, r3, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d017      	beq.n	8001cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d123      	bne.n	8001d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80b4 	beq.w	8001eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <HAL_GPIO_Init+0x308>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a5e      	ldr	r2, [pc, #376]	; (8001ec8 <HAL_GPIO_Init+0x308>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HAL_GPIO_Init+0x308>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d62:	4a5a      	ldr	r2, [pc, #360]	; (8001ecc <HAL_GPIO_Init+0x30c>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a51      	ldr	r2, [pc, #324]	; (8001ed0 <HAL_GPIO_Init+0x310>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d02b      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <HAL_GPIO_Init+0x314>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d025      	beq.n	8001de2 <HAL_GPIO_Init+0x222>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <HAL_GPIO_Init+0x318>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <HAL_GPIO_Init+0x21e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <HAL_GPIO_Init+0x31c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x21a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <HAL_GPIO_Init+0x320>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x216>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_GPIO_Init+0x324>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x212>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_GPIO_Init+0x328>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x20e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <HAL_GPIO_Init+0x32c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x20a>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e00e      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dca:	2308      	movs	r3, #8
 8001dcc:	e00c      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dce:	2306      	movs	r3, #6
 8001dd0:	e00a      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e008      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001de6:	2300      	movs	r3, #0
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f002 0203 	and.w	r2, r2, #3
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	4093      	lsls	r3, r2
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df8:	4934      	ldr	r1, [pc, #208]	; (8001ecc <HAL_GPIO_Init+0x30c>)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2a:	4a31      	ldr	r2, [pc, #196]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5a:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_GPIO_Init+0x330>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	f67f ae90 	bls.w	8001bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40021400 	.word	0x40021400
 8001ee8:	40021800 	.word	0x40021800
 8001eec:	40021c00 	.word	0x40021c00
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f806 	bl	8001f54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	b08f      	sub	sp, #60	; 0x3c
 8001f6c:	af0a      	add	r7, sp, #40	; 0x28
 8001f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e10f      	b.n	800219a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d106      	bne.n	8001f9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f018 fc93 	bl	801a8c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fabd 	bl	8004538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	687e      	ldr	r6, [r7, #4]
 8001fc6:	466d      	mov	r5, sp
 8001fc8:	f106 0410 	add.w	r4, r6, #16
 8001fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fdc:	1d33      	adds	r3, r6, #4
 8001fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f002 f995 	bl	8004310 <USB_CoreInit>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0d0      	b.n	800219a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 faaa 	bl	8004558 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e04a      	b.n	80020a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	333d      	adds	r3, #61	; 0x3d
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	333c      	adds	r3, #60	; 0x3c
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	b298      	uxth	r0, r3
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3344      	adds	r3, #68	; 0x44
 8002046:	4602      	mov	r2, r0
 8002048:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3340      	adds	r3, #64	; 0x40
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3348      	adds	r3, #72	; 0x48
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	334c      	adds	r3, #76	; 0x4c
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3354      	adds	r3, #84	; 0x54
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3af      	bcc.n	800200a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	e044      	b.n	800213a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	3301      	adds	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d3b5      	bcc.n	80020b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	687e      	ldr	r6, [r7, #4]
 800214c:	466d      	mov	r5, sp
 800214e:	f106 0410 	add.w	r4, r6, #16
 8002152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800215e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002162:	1d33      	adds	r3, r6, #4
 8002164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	f002 fa42 	bl	80045f0 <USB_DevInit>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00d      	b.n	800219a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fb85 	bl	80058a2 <USB_DevDisconnect>

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_PCD_Start+0x1c>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e020      	b.n	8002200 <HAL_PCD_Start+0x5e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d109      	bne.n	80021e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 f996 	bl	8004518 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fb36 	bl	8005862 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08d      	sub	sp, #52	; 0x34
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fbed 	bl	80059fe <USB_GetMode>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 848a 	bne.w	8002b40 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fb56 	bl	80058e2 <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8480 	beq.w	8002b3e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fb43 	bl	80058e2 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d107      	bne.n	8002276 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 0202 	and.w	r2, r2, #2
 8002274:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 fb31 	bl	80058e2 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d161      	bne.n	800234e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0210 	bic.w	r2, r2, #16
 8002298:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	3304      	adds	r3, #4
 80022b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	0c5b      	lsrs	r3, r3, #17
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d124      	bne.n	8002310 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d035      	beq.n	800233e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	6a38      	ldr	r0, [r7, #32]
 80022e6:	f003 f96e 	bl	80055c6 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f6:	441a      	add	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002308:	441a      	add	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	621a      	str	r2, [r3, #32]
 800230e:	e016      	b.n	800233e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2b06      	cmp	r3, #6
 800231a:	d110      	bne.n	800233e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002322:	2208      	movs	r2, #8
 8002324:	4619      	mov	r1, r3
 8002326:	6a38      	ldr	r0, [r7, #32]
 8002328:	f003 f94d 	bl	80055c6 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	6a1a      	ldr	r2, [r3, #32]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002338:	441a      	add	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0210 	orr.w	r2, r2, #16
 800234c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fac5 	bl	80058e2 <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002362:	f040 80a7 	bne.w	80024b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 fac9 	bl	8005906 <USB_ReadDevAllOutEpInterrupt>
 8002374:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002376:	e099      	b.n	80024ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 808e 	beq.w	80024a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f003 faeb 	bl	800596a <USB_ReadDevOutEPInterrupt>
 8002394:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fec1 	bl	800313c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	461a      	mov	r2, r3
 80023d2:	2308      	movs	r3, #8
 80023d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 ff97 	bl	800330c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	2310      	movs	r3, #16
 80023f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d030      	beq.n	8002466 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d109      	bne.n	8002424 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800241e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002422:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	78db      	ldrb	r3, [r3, #3]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4619      	mov	r1, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f018 fb3c 	bl	801aacc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	2302      	movs	r3, #2
 8002464:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247c:	461a      	mov	r2, r3
 800247e:	2320      	movs	r3, #32
 8002480:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	085b      	lsrs	r3, r3, #1
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f47f af62 	bne.w	8002378 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fa12 	bl	80058e2 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024c8:	f040 80db 	bne.w	8002682 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 fa31 	bl	8005938 <USB_ReadDevAllInEpInterrupt>
 80024d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024dc:	e0cd      	b.n	800267a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80c2 	beq.w	800266e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fa55 	bl	80059a4 <USB_ReadDevInEPInterrupt>
 80024fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d057      	beq.n	80025b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	2201      	movs	r2, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	69f9      	ldr	r1, [r7, #28]
 8002522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002526:	4013      	ands	r3, r2
 8002528:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002536:	461a      	mov	r2, r3
 8002538:	2301      	movs	r3, #1
 800253a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d132      	bne.n	80025aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334c      	adds	r3, #76	; 0x4c
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4403      	add	r3, r0
 8002564:	3348      	adds	r3, #72	; 0x48
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4419      	add	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4403      	add	r3, r0
 8002578:	334c      	adds	r3, #76	; 0x4c
 800257a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d113      	bne.n	80025aa <HAL_PCD_IRQHandler+0x3a2>
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3354      	adds	r3, #84	; 0x54
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d108      	bne.n	80025aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025a2:	461a      	mov	r2, r3
 80025a4:	2101      	movs	r1, #1
 80025a6:	f003 fa59 	bl	8005a5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f018 fa06 	bl	801a9c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025cc:	461a      	mov	r2, r3
 80025ce:	2308      	movs	r3, #8
 80025d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e8:	461a      	mov	r2, r3
 80025ea:	2310      	movs	r3, #16
 80025ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	2340      	movs	r3, #64	; 0x40
 8002608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002616:	6a38      	ldr	r0, [r7, #32]
 8002618:	f002 f94e 	bl	80048b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800261c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	3304      	adds	r3, #4
 800262e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	78db      	ldrb	r3, [r3, #3]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d108      	bne.n	800264a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2200      	movs	r2, #0
 800263c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f018 fa53 	bl	801aaf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002656:	461a      	mov	r2, r3
 8002658:	2302      	movs	r3, #2
 800265a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fcda 	bl	8003022 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f af2e 	bne.w	80024de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f003 f92b 	bl	80058e2 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002696:	d122      	bne.n	80026de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 febf 	bl	8003444 <HAL_PCDEx_LPM_Callback>
 80026c6:	e002      	b.n	80026ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f018 f9f1 	bl	801aab0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 f8fd 	bl	80058e2 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f2:	d112      	bne.n	800271a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f018 f9ad 	bl	801aa64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002718:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f8df 	bl	80058e2 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272e:	f040 80b7 	bne.w	80028a0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2110      	movs	r1, #16
 800274c:	4618      	mov	r0, r3
 800274e:	f002 f8b3 	bl	80048b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002756:	e046      	b.n	80027e6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002764:	461a      	mov	r2, r3
 8002766:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800276a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	440a      	add	r2, r1
 8002782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800278a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002798:	461a      	mov	r2, r3
 800279a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800279e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	3301      	adds	r3, #1
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d3b3      	bcc.n	8002758 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002802:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	2b00      	cmp	r3, #0
 800280a:	d016      	beq.n	800283a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281c:	f043 030b 	orr.w	r3, r3, #11
 8002820:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002832:	f043 030b 	orr.w	r3, r3, #11
 8002836:	6453      	str	r3, [r2, #68]	; 0x44
 8002838:	e015      	b.n	8002866 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800284c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002850:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002860:	f043 030b 	orr.w	r3, r3, #11
 8002864:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002874:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002878:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800288a:	461a      	mov	r2, r3
 800288c:	f003 f8e6 	bl	8005a5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 f81c 	bl	80058e2 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b4:	d124      	bne.n	8002900 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 f8ac 	bl	8005a18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 f873 	bl	80049b0 <USB_GetDevSpeed>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681c      	ldr	r4, [r3, #0]
 80028d6:	f001 fa2b 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 80028da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	4620      	mov	r0, r4
 80028e6:	f001 fd75 	bl	80043d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f018 f891 	bl	801aa12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f002 ffec 	bl	80058e2 <USB_ReadInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d10a      	bne.n	800292a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f018 f86e 	bl	801a9f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f002 0208 	and.w	r2, r2, #8
 8002928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 ffd7 	bl	80058e2 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b80      	cmp	r3, #128	; 0x80
 800293c:	d122      	bne.n	8002984 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800294a:	2301      	movs	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	e014      	b.n	800297a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fb26 	bl	8002fc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	3301      	adds	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	429a      	cmp	r2, r3
 8002982:	d3e5      	bcc.n	8002950 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f002 ffaa 	bl	80058e2 <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002998:	d13b      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800299a:	2301      	movs	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	e02b      	b.n	80029f8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3340      	adds	r3, #64	; 0x40
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d115      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da12      	bge.n	80029f2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	333f      	adds	r3, #63	; 0x3f
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fae7 	bl	8002fc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3301      	adds	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3ce      	bcc.n	80029a0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 ff63 	bl	80058e2 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a26:	d155      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a28:	2301      	movs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2c:	e045      	b.n	8002aba <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d12e      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da2b      	bge.n	8002ab4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d121      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab0:	6053      	str	r3, [r2, #4]
            break;
 8002ab2:	e007      	b.n	8002ac4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3b4      	bcc.n	8002a2e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 ff02 	bl	80058e2 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d10a      	bne.n	8002b00 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f018 f812 	bl	801ab14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 feec 	bl	80058e2 <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d115      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f018 f802 	bl	801ab30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	e000      	b.n	8002b40 <HAL_PCD_IRQHandler+0x938>
      return;
 8002b3e:	bf00      	nop
    }
  }
}
 8002b40:	3734      	adds	r7, #52	; 0x34
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd90      	pop	{r4, r7, pc}

08002b46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_SetAddress+0x1a>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e013      	b.n	8002b88 <HAL_PCD_SetAddress+0x42>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fe4d 	bl	8005818 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	70fb      	strb	r3, [r7, #3]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	803b      	strh	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da0f      	bge.n	8002bd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	3338      	adds	r3, #56	; 0x38
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	705a      	strb	r2, [r3, #1]
 8002bd4:	e00f      	b.n	8002bf6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 020f 	and.w	r2, r3, #15
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	3304      	adds	r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c02:	883a      	ldrh	r2, [r7, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	78ba      	ldrb	r2, [r7, #2]
 8002c0c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d004      	beq.n	8002c20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c20:	78bb      	ldrb	r3, [r7, #2]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d102      	bne.n	8002c2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_PCD_EP_Open+0xaa>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e00e      	b.n	8002c58 <HAL_PCD_EP_Open+0xc8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68f9      	ldr	r1, [r7, #12]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fed5 	bl	80049f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c56:	7afb      	ldrb	r3, [r7, #11]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da0f      	bge.n	8002c94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	3338      	adds	r3, #56	; 0x38
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	705a      	strb	r2, [r3, #1]
 8002c92:	e00f      	b.n	8002cb4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	3304      	adds	r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_EP_Close+0x6e>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e00e      	b.n	8002cec <HAL_PCD_EP_Close+0x8c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 ff11 	bl	8004b04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	460b      	mov	r3, r1
 8002d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d04:	7afb      	ldrb	r3, [r7, #11]
 8002d06:	f003 020f 	and.w	r2, r3, #15
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	f002 f9f0 	bl	800514c <USB_EP0StartXfer>
 8002d6c:	e008      	b.n	8002d80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6979      	ldr	r1, [r7, #20]
 8002d7c:	f001 ff9e 	bl	8004cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002dac:	681b      	ldr	r3, [r3, #0]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3338      	adds	r3, #56	; 0x38
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2200      	movs	r2, #0
 8002df0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d102      	bne.n	8002e12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	6979      	ldr	r1, [r7, #20]
 8002e2a:	f002 f98f 	bl	800514c <USB_EP0StartXfer>
 8002e2e:	e008      	b.n	8002e42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6979      	ldr	r1, [r7, #20]
 8002e3e:	f001 ff3d 	bl	8004cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d901      	bls.n	8002e6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e050      	b.n	8002f0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	da0f      	bge.n	8002e92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	3338      	adds	r3, #56	; 0x38
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	705a      	strb	r2, [r3, #1]
 8002e90:	e00d      	b.n	8002eae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_PCD_EP_SetStall+0x82>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e01e      	b.n	8002f0c <HAL_PCD_EP_SetStall+0xc0>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fbc9 	bl	8005674 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	b2d9      	uxtb	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002efc:	461a      	mov	r2, r3
 8002efe:	f002 fdad 	bl	8005a5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 020f 	and.w	r2, r3, #15
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d901      	bls.n	8002f32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e042      	b.n	8002fb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	da0f      	bge.n	8002f5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	3338      	adds	r3, #56	; 0x38
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	705a      	strb	r2, [r3, #1]
 8002f58:	e00f      	b.n	8002f7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 020f 	and.w	r2, r3, #15
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_PCD_EP_ClrStall+0x86>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e00e      	b.n	8002fb8 <HAL_PCD_EP_ClrStall+0xa4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fbd0 	bl	800574e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da0c      	bge.n	8002fee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 020f 	and.w	r2, r3, #15
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3338      	adds	r3, #56	; 0x38
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e00c      	b.n	8003008 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 020f 	and.w	r2, r3, #15
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	3304      	adds	r3, #4
 8003006:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	4618      	mov	r0, r3
 8003010:	f002 f9f3 	bl	80053fa <USB_EPStopXfer>
 8003014:	4603      	mov	r3, r0
 8003016:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003018:	7afb      	ldrb	r3, [r7, #11]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b08a      	sub	sp, #40	; 0x28
 8003026:	af02      	add	r7, sp, #8
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3338      	adds	r3, #56	; 0x38
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	429a      	cmp	r2, r3
 8003054:	d901      	bls.n	800305a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06c      	b.n	8003134 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	429a      	cmp	r2, r3
 800306e:	d902      	bls.n	8003076 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3303      	adds	r3, #3
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800307e:	e02b      	b.n	80030d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	429a      	cmp	r2, r3
 8003094:	d902      	bls.n	800309c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3303      	adds	r3, #3
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6919      	ldr	r1, [r3, #16]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f002 fa46 	bl	800554c <USB_WritePacket>

    ep->xfer_buff  += len;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1a      	ldr	r2, [r3, #32]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d809      	bhi.n	8003102 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d203      	bcs.n	8003102 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1be      	bne.n	8003080 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	429a      	cmp	r2, r3
 800310c:	d811      	bhi.n	8003132 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	2201      	movs	r2, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	43db      	mvns	r3, r3
 8003128:	6939      	ldr	r1, [r7, #16]
 800312a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800312e:	4013      	ands	r3, r2
 8003130:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	333c      	adds	r3, #60	; 0x3c
 8003154:	3304      	adds	r3, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d17b      	bne.n	800326a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	4a61      	ldr	r2, [pc, #388]	; (8003304 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	f240 80b9 	bls.w	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80b3 	beq.w	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a4:	6093      	str	r3, [r2, #8]
 80031a6:	e0a7      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	2320      	movs	r3, #32
 80031c2:	6093      	str	r3, [r2, #8]
 80031c4:	e098      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 8093 	bne.w	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	; (8003304 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d90f      	bls.n	80031fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f6:	6093      	str	r3, [r2, #8]
 80031f8:	e07e      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	440b      	add	r3, r1
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d114      	bne.n	800325c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003244:	461a      	mov	r2, r3
 8003246:	2101      	movs	r1, #1
 8003248:	f002 fc08 	bl	8005a5c <USB_EP0_OutStart>
 800324c:	e006      	b.n	800325c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f017 fb92 	bl	801a98c <HAL_PCD_DataOutStageCallback>
 8003268:	e046      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d124      	bne.n	80032bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e032      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	2320      	movs	r3, #32
 80032ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f017 fb69 	bl	801a98c <HAL_PCD_DataOutStageCallback>
 80032ba:	e01d      	b.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d114      	bne.n	80032ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d108      	bne.n	80032ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032e4:	461a      	mov	r2, r3
 80032e6:	2100      	movs	r1, #0
 80032e8:	f002 fbb8 	bl	8005a5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f017 fb4a 	bl	801a98c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	4f54300a 	.word	0x4f54300a
 8003308:	4f54310a 	.word	0x4f54310a

0800330c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	333c      	adds	r3, #60	; 0x3c
 8003324:	3304      	adds	r3, #4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a15      	ldr	r2, [pc, #84]	; (8003394 <PCD_EP_OutSetupPacket_int+0x88>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d90e      	bls.n	8003360 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f017 fb01 	bl	801a968 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <PCD_EP_OutSetupPacket_int+0x88>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d90c      	bls.n	8003388 <PCD_EP_OutSetupPacket_int+0x7c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d108      	bne.n	8003388 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003380:	461a      	mov	r2, r3
 8003382:	2101      	movs	r1, #1
 8003384:	f002 fb6a 	bl	8005a5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	4f54300a 	.word	0x4f54300a

08003398 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
 80033a4:	4613      	mov	r3, r2
 80033a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033b6:	883b      	ldrh	r3, [r7, #0]
 80033b8:	0419      	lsls	r1, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
 80033c4:	e028      	b.n	8003418 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e00d      	b.n	80033f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	3340      	adds	r3, #64	; 0x40
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	3301      	adds	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d3ec      	bcc.n	80033da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003400:	883b      	ldrh	r3, [r7, #0]
 8003402:	0418      	lsls	r0, r3, #16
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	3b01      	subs	r3, #1
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	4302      	orrs	r2, r0
 8003410:	3340      	adds	r3, #64	; 0x40
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	887a      	ldrh	r2, [r7, #2]
 8003436:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
	...

0800345c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e267      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d075      	beq.n	8003566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800347a:	4b88      	ldr	r3, [pc, #544]	; (800369c <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b04      	cmp	r3, #4
 8003484:	d00c      	beq.n	80034a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003486:	4b85      	ldr	r3, [pc, #532]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348e:	2b08      	cmp	r3, #8
 8003490:	d112      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b82      	ldr	r3, [pc, #520]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349e:	d10b      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	4b7e      	ldr	r3, [pc, #504]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05b      	beq.n	8003564 <HAL_RCC_OscConfig+0x108>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d157      	bne.n	8003564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e242      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x74>
 80034c2:	4b76      	ldr	r3, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a75      	ldr	r2, [pc, #468]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e01d      	b.n	800350c <HAL_RCC_OscConfig+0xb0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x98>
 80034da:	4b70      	ldr	r3, [pc, #448]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6f      	ldr	r2, [pc, #444]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b6d      	ldr	r3, [pc, #436]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6c      	ldr	r2, [pc, #432]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0xb0>
 80034f4:	4b69      	ldr	r3, [pc, #420]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a68      	ldr	r2, [pc, #416]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fc0a 	bl	8000d2c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	f7fd fc06 	bl	8000d2c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e207      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b5b      	ldr	r3, [pc, #364]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0xc0>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fd fbf6 	bl	8000d2c <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003544:	f7fd fbf2 	bl	8000d2c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1f3      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0xe8>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d063      	beq.n	800363a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003586:	2b08      	cmp	r3, #8
 8003588:	d11c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b44      	ldr	r3, [pc, #272]	; (800369c <HAL_RCC_OscConfig+0x240>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d116      	bne.n	80035c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	4b41      	ldr	r3, [pc, #260]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x152>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e1c7      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4937      	ldr	r1, [pc, #220]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	e03a      	b.n	800363a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035cc:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCC_OscConfig+0x244>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fbab 	bl	8000d2c <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035da:	f7fd fba7 	bl	8000d2c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e1a8      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4925      	ldr	r1, [pc, #148]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCC_OscConfig+0x244>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fd fb8a 	bl	8000d2c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361c:	f7fd fb86 	bl	8000d2c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e187      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d036      	beq.n	80036b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_RCC_OscConfig+0x248>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fd fb6a 	bl	8000d2c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365c:	f7fd fb66 	bl	8000d2c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e167      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_OscConfig+0x240>)
 8003670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x200>
 800367a:	e01b      	b.n	80036b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_OscConfig+0x248>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003682:	f7fd fb53 	bl	8000d2c <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003688:	e00e      	b.n	80036a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368a:	f7fd fb4f 	bl	8000d2c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d907      	bls.n	80036a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e150      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
 800369c:	40023800 	.word	0x40023800
 80036a0:	42470000 	.word	0x42470000
 80036a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a8:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80036aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1ea      	bne.n	800368a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8097 	beq.w	80037f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b81      	ldr	r3, [pc, #516]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	4b7d      	ldr	r3, [pc, #500]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a7c      	ldr	r2, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b7a      	ldr	r3, [pc, #488]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f2:	4b77      	ldr	r3, [pc, #476]	; (80038d0 <HAL_RCC_OscConfig+0x474>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d118      	bne.n	8003730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036fe:	4b74      	ldr	r3, [pc, #464]	; (80038d0 <HAL_RCC_OscConfig+0x474>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a73      	ldr	r2, [pc, #460]	; (80038d0 <HAL_RCC_OscConfig+0x474>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370a:	f7fd fb0f 	bl	8000d2c <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003712:	f7fd fb0b 	bl	8000d2c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e10c      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_OscConfig+0x474>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x2ea>
 8003738:	4b64      	ldr	r3, [pc, #400]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a63      	ldr	r2, [pc, #396]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	e01c      	b.n	8003780 <HAL_RCC_OscConfig+0x324>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b05      	cmp	r3, #5
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x30c>
 800374e:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a5e      	ldr	r2, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	4b5c      	ldr	r3, [pc, #368]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a5b      	ldr	r2, [pc, #364]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0x324>
 8003768:	4b58      	ldr	r3, [pc, #352]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	4a57      	ldr	r2, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6713      	str	r3, [r2, #112]	; 0x70
 8003774:	4b55      	ldr	r3, [pc, #340]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a54      	ldr	r2, [pc, #336]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 800377a:	f023 0304 	bic.w	r3, r3, #4
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d015      	beq.n	80037b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fd fad0 	bl	8000d2c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fd facc 	bl	8000d2c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0cb      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	4b49      	ldr	r3, [pc, #292]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ee      	beq.n	8003790 <HAL_RCC_OscConfig+0x334>
 80037b2:	e014      	b.n	80037de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b4:	f7fd faba 	bl	8000d2c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fd fab6 	bl	8000d2c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0b5      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d2:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ee      	bne.n	80037bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e4:	4b39      	ldr	r3, [pc, #228]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	4a38      	ldr	r2, [pc, #224]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80a1 	beq.w	800393c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d05c      	beq.n	80038c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d141      	bne.n	8003892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fd fa8a 	bl	8000d2c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fd fa86 	bl	8000d2c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e087      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382e:	4b27      	ldr	r3, [pc, #156]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	491b      	ldr	r1, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fd fa5f 	bl	8000d2c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003872:	f7fd fa5b 	bl	8000d2c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e05c      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x416>
 8003890:	e054      	b.n	800393c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCC_OscConfig+0x478>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fd fa48 	bl	8000d2c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd fa44 	bl	8000d2c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e045      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_OscConfig+0x470>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x444>
 80038be:	e03d      	b.n	800393c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e038      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x4ec>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d028      	beq.n	8003938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d121      	bne.n	8003938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	429a      	cmp	r2, r3
 8003900:	d11a      	bne.n	8003938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800390e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	4293      	cmp	r3, r2
 8003912:	d111      	bne.n	8003938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	3b01      	subs	r3, #1
 8003922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d107      	bne.n	8003938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0cc      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003960:	4b68      	ldr	r3, [pc, #416]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d90c      	bls.n	8003988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b63      	ldr	r3, [pc, #396]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0b8      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a0:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b8:	4b53      	ldr	r3, [pc, #332]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a52      	ldr	r2, [pc, #328]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c4:	4b50      	ldr	r3, [pc, #320]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	494d      	ldr	r1, [pc, #308]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d044      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d119      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e07f      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0a:	4b3f      	ldr	r3, [pc, #252]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e06f      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e067      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2a:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 0203 	bic.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4934      	ldr	r1, [pc, #208]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd f976 	bl	8000d2c <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a44:	f7fd f972 	bl	8000d2c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e04f      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 020c 	and.w	r2, r3, #12
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1eb      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d20c      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e032      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4916      	ldr	r1, [pc, #88]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	490e      	ldr	r1, [pc, #56]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ad2:	f000 f821 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	490a      	ldr	r1, [pc, #40]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	5ccb      	ldrb	r3, [r1, r3]
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fc fea4 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023c00 	.word	0x40023c00
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	0801f7e4 	.word	0x0801f7e4
 8003b10:	20000000 	.word	0x20000000
 8003b14:	20000004 	.word	0x20000004

08003b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b094      	sub	sp, #80	; 0x50
 8003b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	647b      	str	r3, [r7, #68]	; 0x44
 8003b24:	2300      	movs	r3, #0
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	2300      	movs	r3, #0
 8003b2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b30:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d00d      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x40>
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	f200 80e7 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x34>
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d003      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b4a:	e0e1      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x210>)
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b50:	e0e1      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x214>)
 8003b54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b56:	e0de      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b58:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b62:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d065      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	099b      	lsrs	r3, r3, #6
 8003b74:	2200      	movs	r2, #0
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
 8003b82:	2300      	movs	r3, #0
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
 8003b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	f04f 0000 	mov.w	r0, #0
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	0159      	lsls	r1, r3, #5
 8003b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9c:	0150      	lsls	r0, r2, #5
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	1a51      	subs	r1, r2, r1
 8003ba6:	6139      	str	r1, [r7, #16]
 8003ba8:	4629      	mov	r1, r5
 8003baa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	018b      	lsls	r3, r1, #6
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	018a      	lsls	r2, r1, #6
 8003bca:	46d4      	mov	ip, sl
 8003bcc:	ebb2 080c 	subs.w	r8, r2, ip
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bea:	4690      	mov	r8, r2
 8003bec:	4699      	mov	r9, r3
 8003bee:	4623      	mov	r3, r4
 8003bf0:	eb18 0303 	adds.w	r3, r8, r3
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	eb49 0303 	adc.w	r3, r9, r3
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	024b      	lsls	r3, r1, #9
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	4604      	mov	r4, r0
 8003c14:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003c18:	4601      	mov	r1, r0
 8003c1a:	024a      	lsls	r2, r1, #9
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c22:	2200      	movs	r2, #0
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c2c:	f7fc fb28 	bl	8000280 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4613      	mov	r3, r2
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	e05c      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	2200      	movs	r2, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	4611      	mov	r1, r2
 8003c46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	f04f 0000 	mov.w	r0, #0
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	0159      	lsls	r1, r3, #5
 8003c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c66:	0150      	lsls	r0, r2, #5
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	46c4      	mov	ip, r8
 8003c6e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003c72:	4640      	mov	r0, r8
 8003c74:	4649      	mov	r1, r9
 8003c76:	468c      	mov	ip, r1
 8003c78:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c90:	ebb2 040a 	subs.w	r4, r2, sl
 8003c94:	eb63 050b 	sbc.w	r5, r3, fp
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	00eb      	lsls	r3, r5, #3
 8003ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca6:	00e2      	lsls	r2, r4, #3
 8003ca8:	4614      	mov	r4, r2
 8003caa:	461d      	mov	r5, r3
 8003cac:	4603      	mov	r3, r0
 8003cae:	18e3      	adds	r3, r4, r3
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	eb45 0303 	adc.w	r3, r5, r3
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	028b      	lsls	r3, r1, #10
 8003cca:	4620      	mov	r0, r4
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4604      	mov	r4, r0
 8003cd0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	028a      	lsls	r2, r1, #10
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	61fa      	str	r2, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	f7fc faca 	bl	8000280 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x210>)
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3750      	adds	r7, #80	; 0x50
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b02      	ldr	r3, [pc, #8]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	20000000 	.word	0x20000000

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d48:	f7ff fff2 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0b5b      	lsrs	r3, r3, #13
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	0801f7f4 	.word	0x0801f7f4

08003d6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	220f      	movs	r2, #15
 8003d7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0203 	and.w	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCC_GetClockConfig+0x58>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40023c00 	.word	0x40023c00

08003dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f839 	bl	8003e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 f9d0 	bl	80041b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d001      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e04e      	b.n	8003f32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_TIM_Base_Start_IT+0xc0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	e007      	b.n	8003f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40010400 	.word	0x40010400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40001800 	.word	0x40001800

08003f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d122      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0202 	mvn.w	r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8ed 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8e0 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8ef 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d122      	bne.n	8004008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d11b      	bne.n	8004008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0204 	mvn.w	r2, #4
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8c3 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8b6 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8c5 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b08      	cmp	r3, #8
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0208 	mvn.w	r2, #8
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f899 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f88c 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f89b 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0210 	mvn.w	r2, #16
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2208      	movs	r2, #8
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f86f 	bl	800417a <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f862 	bl	8004168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f871 	bl	800418c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0201 	mvn.w	r2, #1
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fb6e 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8fb 	bl	80042fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d10e      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d107      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f835 	bl	800419e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b20      	cmp	r3, #32
 8004140:	d10e      	bne.n	8004160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b20      	cmp	r3, #32
 800414e:	d107      	bne.n	8004160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0220 	mvn.w	r2, #32
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8c6 	bl	80042ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a3f      	ldr	r2, [pc, #252]	; (80042c0 <TIM_Base_SetConfig+0x110>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d00f      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a3c      	ldr	r2, [pc, #240]	; (80042c4 <TIM_Base_SetConfig+0x114>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a3b      	ldr	r2, [pc, #236]	; (80042c8 <TIM_Base_SetConfig+0x118>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d007      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3a      	ldr	r2, [pc, #232]	; (80042cc <TIM_Base_SetConfig+0x11c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d003      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a39      	ldr	r2, [pc, #228]	; (80042d0 <TIM_Base_SetConfig+0x120>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d108      	bne.n	8004202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2e      	ldr	r2, [pc, #184]	; (80042c0 <TIM_Base_SetConfig+0x110>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02b      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d027      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <TIM_Base_SetConfig+0x114>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d023      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <TIM_Base_SetConfig+0x118>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01f      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a29      	ldr	r2, [pc, #164]	; (80042cc <TIM_Base_SetConfig+0x11c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01b      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <TIM_Base_SetConfig+0x120>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d017      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <TIM_Base_SetConfig+0x124>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <TIM_Base_SetConfig+0x128>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00f      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a25      	ldr	r2, [pc, #148]	; (80042dc <TIM_Base_SetConfig+0x12c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00b      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a24      	ldr	r2, [pc, #144]	; (80042e0 <TIM_Base_SetConfig+0x130>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a23      	ldr	r2, [pc, #140]	; (80042e4 <TIM_Base_SetConfig+0x134>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <TIM_Base_SetConfig+0x138>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d108      	bne.n	8004274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <TIM_Base_SetConfig+0x110>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0xf8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <TIM_Base_SetConfig+0x120>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d103      	bne.n	80042b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	615a      	str	r2, [r3, #20]
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40010400 	.word	0x40010400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800
 80042e0:	40001800 	.word	0x40001800
 80042e4:	40001c00 	.word	0x40001c00
 80042e8:	40002000 	.word	0x40002000

080042ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004310:	b084      	sub	sp, #16
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	f107 001c 	add.w	r0, r7, #28
 800431e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2b01      	cmp	r3, #1
 8004326:	d122      	bne.n	800436e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800433c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 fbd6 	bl	8005b14 <USB_CoreReset>
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e01a      	b.n	80043a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 fbca 	bl	8005b14 <USB_CoreReset>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
 8004396:	e005      	b.n	80043a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d10b      	bne.n	80043c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f043 0206 	orr.w	r2, r3, #6
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ce:	b004      	add	sp, #16
 80043d0:	4770      	bx	lr
	...

080043d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d165      	bne.n	80044b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a41      	ldr	r2, [pc, #260]	; (80044f0 <USB_SetTurnaroundTime+0x11c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d906      	bls.n	80043fe <USB_SetTurnaroundTime+0x2a>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <USB_SetTurnaroundTime+0x120>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d202      	bcs.n	80043fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043f8:	230f      	movs	r3, #15
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e062      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <USB_SetTurnaroundTime+0x120>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d306      	bcc.n	8004414 <USB_SetTurnaroundTime+0x40>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4a3b      	ldr	r2, [pc, #236]	; (80044f8 <USB_SetTurnaroundTime+0x124>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d202      	bcs.n	8004414 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800440e:	230e      	movs	r3, #14
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e057      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a38      	ldr	r2, [pc, #224]	; (80044f8 <USB_SetTurnaroundTime+0x124>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d306      	bcc.n	800442a <USB_SetTurnaroundTime+0x56>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a37      	ldr	r2, [pc, #220]	; (80044fc <USB_SetTurnaroundTime+0x128>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d202      	bcs.n	800442a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004424:	230d      	movs	r3, #13
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e04c      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4a33      	ldr	r2, [pc, #204]	; (80044fc <USB_SetTurnaroundTime+0x128>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d306      	bcc.n	8004440 <USB_SetTurnaroundTime+0x6c>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4a32      	ldr	r2, [pc, #200]	; (8004500 <USB_SetTurnaroundTime+0x12c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d802      	bhi.n	8004440 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800443a:	230c      	movs	r3, #12
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e041      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <USB_SetTurnaroundTime+0x12c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d906      	bls.n	8004456 <USB_SetTurnaroundTime+0x82>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <USB_SetTurnaroundTime+0x130>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d802      	bhi.n	8004456 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004450:	230b      	movs	r3, #11
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e036      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4a2a      	ldr	r2, [pc, #168]	; (8004504 <USB_SetTurnaroundTime+0x130>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d906      	bls.n	800446c <USB_SetTurnaroundTime+0x98>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4a29      	ldr	r2, [pc, #164]	; (8004508 <USB_SetTurnaroundTime+0x134>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d802      	bhi.n	800446c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004466:	230a      	movs	r3, #10
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e02b      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4a26      	ldr	r2, [pc, #152]	; (8004508 <USB_SetTurnaroundTime+0x134>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d906      	bls.n	8004482 <USB_SetTurnaroundTime+0xae>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <USB_SetTurnaroundTime+0x138>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d202      	bcs.n	8004482 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800447c:	2309      	movs	r3, #9
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e020      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4a21      	ldr	r2, [pc, #132]	; (800450c <USB_SetTurnaroundTime+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d306      	bcc.n	8004498 <USB_SetTurnaroundTime+0xc4>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <USB_SetTurnaroundTime+0x13c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d802      	bhi.n	8004498 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004492:	2308      	movs	r3, #8
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e015      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <USB_SetTurnaroundTime+0x13c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d906      	bls.n	80044ae <USB_SetTurnaroundTime+0xda>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <USB_SetTurnaroundTime+0x140>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d202      	bcs.n	80044ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044a8:	2307      	movs	r3, #7
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e00a      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ae:	2306      	movs	r3, #6
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e007      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044ba:	2309      	movs	r3, #9
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e001      	b.n	80044c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044c0:	2309      	movs	r3, #9
 80044c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	029b      	lsls	r3, r3, #10
 80044d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044dc:	431a      	orrs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	00d8acbf 	.word	0x00d8acbf
 80044f4:	00e4e1c0 	.word	0x00e4e1c0
 80044f8:	00f42400 	.word	0x00f42400
 80044fc:	01067380 	.word	0x01067380
 8004500:	011a499f 	.word	0x011a499f
 8004504:	01312cff 	.word	0x01312cff
 8004508:	014ca43f 	.word	0x014ca43f
 800450c:	016e3600 	.word	0x016e3600
 8004510:	01a6ab1f 	.word	0x01a6ab1f
 8004514:	01e84800 	.word	0x01e84800

08004518 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f023 0201 	bic.w	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d115      	bne.n	80045a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004586:	2001      	movs	r0, #1
 8004588:	f7fc fbda 	bl	8000d40 <HAL_Delay>
      ms++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 fa33 	bl	80059fe <USB_GetMode>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d01e      	beq.n	80045dc <USB_SetCurrentMode+0x84>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b31      	cmp	r3, #49	; 0x31
 80045a2:	d9f0      	bls.n	8004586 <USB_SetCurrentMode+0x2e>
 80045a4:	e01a      	b.n	80045dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d115      	bne.n	80045d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045b8:	2001      	movs	r0, #1
 80045ba:	f7fc fbc1 	bl	8000d40 <HAL_Delay>
      ms++;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 fa1a 	bl	80059fe <USB_GetMode>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <USB_SetCurrentMode+0x84>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b31      	cmp	r3, #49	; 0x31
 80045d4:	d9f0      	bls.n	80045b8 <USB_SetCurrentMode+0x60>
 80045d6:	e001      	b.n	80045dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e005      	b.n	80045e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b32      	cmp	r3, #50	; 0x32
 80045e0:	d101      	bne.n	80045e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045f0:	b084      	sub	sp, #16
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e009      	b.n	8004624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3340      	adds	r3, #64	; 0x40
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	2200      	movs	r2, #0
 800461c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3301      	adds	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b0e      	cmp	r3, #14
 8004628:	d9f2      	bls.n	8004610 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11c      	bne.n	800466a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463e:	f043 0302 	orr.w	r3, r3, #2
 8004642:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
 8004668:	e00b      	b.n	8004682 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004688:	461a      	mov	r2, r3
 800468a:	2300      	movs	r3, #0
 800468c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004694:	4619      	mov	r1, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469c:	461a      	mov	r2, r3
 800469e:	680b      	ldr	r3, [r1, #0]
 80046a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10c      	bne.n	80046c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046ae:	2100      	movs	r1, #0
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f965 	bl	8004980 <USB_SetDevSpeed>
 80046b6:	e008      	b.n	80046ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046b8:	2101      	movs	r1, #1
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f960 	bl	8004980 <USB_SetDevSpeed>
 80046c0:	e003      	b.n	80046ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046c2:	2103      	movs	r1, #3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f95b 	bl	8004980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046ca:	2110      	movs	r1, #16
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8f3 	bl	80048b8 <USB_FlushTxFifo>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f91f 	bl	8004920 <USB_FlushRxFifo>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	461a      	mov	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	461a      	mov	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	e043      	b.n	800479e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472c:	d118      	bne.n	8004760 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	461a      	mov	r2, r3
 8004742:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e013      	b.n	8004772 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004756:	461a      	mov	r2, r3
 8004758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e008      	b.n	8004772 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	461a      	mov	r2, r3
 800476e:	2300      	movs	r3, #0
 8004770:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477e:	461a      	mov	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	461a      	mov	r2, r3
 8004792:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004796:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	3301      	adds	r3, #1
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3b7      	bcc.n	8004716 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e043      	b.n	8004834 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c2:	d118      	bne.n	80047f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	461a      	mov	r2, r3
 80047d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e013      	b.n	8004808 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	461a      	mov	r2, r3
 80047ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	e008      	b.n	8004808 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	461a      	mov	r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	461a      	mov	r2, r3
 8004816:	2300      	movs	r3, #0
 8004818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004826:	461a      	mov	r2, r3
 8004828:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800482c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3301      	adds	r3, #1
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d3b7      	bcc.n	80047ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800484a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800484e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800485c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f043 0210 	orr.w	r2, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <USB_DevInit+0x2c4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f043 0208 	orr.w	r2, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d107      	bne.n	80048a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489c:	f043 0304 	orr.w	r3, r3, #4
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048b0:	b004      	add	sp, #16
 80048b2:	4770      	bx	lr
 80048b4:	803c3800 	.word	0x803c3800

080048b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <USB_FlushTxFifo+0x64>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e01b      	b.n	8004910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	daf2      	bge.n	80048c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	019b      	lsls	r3, r3, #6
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <USB_FlushTxFifo+0x64>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e006      	b.n	8004910 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b20      	cmp	r3, #32
 800490c:	d0f0      	beq.n	80048f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	00030d40 	.word	0x00030d40

08004920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a11      	ldr	r2, [pc, #68]	; (800497c <USB_FlushRxFifo+0x5c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e018      	b.n	8004970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	daf2      	bge.n	800492c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2210      	movs	r2, #16
 800494e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3301      	adds	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a08      	ldr	r2, [pc, #32]	; (800497c <USB_FlushRxFifo+0x5c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e006      	b.n	8004970 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d0f0      	beq.n	8004950 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	00030d40 	.word	0x00030d40

08004980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0306 	and.w	r3, r3, #6
 80049c8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049d0:	2300      	movs	r3, #0
 80049d2:	75fb      	strb	r3, [r7, #23]
 80049d4:	e00a      	b.n	80049ec <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d002      	beq.n	80049e2 <USB_GetDevSpeed+0x32>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d102      	bne.n	80049e8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049e2:	2302      	movs	r3, #2
 80049e4:	75fb      	strb	r3, [r7, #23]
 80049e6:	e001      	b.n	80049ec <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049e8:	230f      	movs	r3, #15
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d13a      	bne.n	8004a8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	2101      	movs	r1, #1
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d155      	bne.n	8004af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	791b      	ldrb	r3, [r3, #4]
 8004a66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	059b      	lsls	r3, r3, #22
 8004a6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a70:	4313      	orrs	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e036      	b.n	8004af8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11a      	bne.n	8004af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	791b      	ldrb	r3, [r3, #4]
 8004adc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d161      	bne.n	8004be4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b36:	d11f      	bne.n	8004b78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	68f9      	ldr	r1, [r7, #12]
 8004b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b98:	4013      	ands	r3, r2
 8004b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	0159      	lsls	r1, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <USB_DeactivateEndpoint+0x1b0>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
 8004be2:	e060      	b.n	8004ca6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfa:	d11f      	bne.n	8004c3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	43db      	mvns	r3, r3
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c80:	4013      	ands	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	0159      	lsls	r1, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	440b      	add	r3, r1
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <USB_DeactivateEndpoint+0x1b4>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	ec337800 	.word	0xec337800
 8004cb8:	eff37800 	.word	0xeff37800

08004cbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 815c 	bne.w	8004f96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d132      	bne.n	8004d4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d44:	0cdb      	lsrs	r3, r3, #19
 8004d46:	04db      	lsls	r3, r3, #19
 8004d48:	6113      	str	r3, [r2, #16]
 8004d4a:	e074      	b.n	8004e36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d66:	0cdb      	lsrs	r3, r3, #19
 8004d68:	04db      	lsls	r3, r3, #19
 8004d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6999      	ldr	r1, [r3, #24]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	440b      	add	r3, r1
 8004da8:	1e59      	subs	r1, r3, #1
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004db4:	4b9d      	ldr	r3, [pc, #628]	; (800502c <USB_EPStartXfer+0x370>)
 8004db6:	400b      	ands	r3, r1
 8004db8:	69b9      	ldr	r1, [r7, #24]
 8004dba:	0148      	lsls	r0, r1, #5
 8004dbc:	69f9      	ldr	r1, [r7, #28]
 8004dbe:	4401      	add	r1, r0
 8004dc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dde:	69b9      	ldr	r1, [r7, #24]
 8004de0:	0148      	lsls	r0, r1, #5
 8004de2:	69f9      	ldr	r1, [r7, #28]
 8004de4:	4401      	add	r1, r0
 8004de6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dea:	4313      	orrs	r3, r2
 8004dec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	791b      	ldrb	r3, [r3, #4]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d11f      	bne.n	8004e36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d14b      	bne.n	8004ed4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	791b      	ldrb	r3, [r3, #4]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d128      	bne.n	8004eb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d110      	bne.n	8004e92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e00f      	b.n	8004eb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e133      	b.n	800513c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	791b      	ldrb	r3, [r3, #4]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d015      	beq.n	8004f28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 811b 	beq.w	800513c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	69f9      	ldr	r1, [r7, #28]
 8004f1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f22:	4313      	orrs	r3, r2
 8004f24:	634b      	str	r3, [r1, #52]	; 0x34
 8004f26:	e109      	b.n	800513c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d110      	bne.n	8004f5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e00f      	b.n	8004f7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6919      	ldr	r1, [r3, #16]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781a      	ldrb	r2, [r3, #0]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	b298      	uxth	r0, r3
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fadc 	bl	800554c <USB_WritePacket>
 8004f94:	e0d2      	b.n	800513c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb0:	0cdb      	lsrs	r3, r3, #19
 8004fb2:	04db      	lsls	r3, r3, #19
 8004fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d126      	bne.n	8005030 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	0148      	lsls	r0, r1, #5
 8004ffc:	69f9      	ldr	r1, [r7, #28]
 8004ffe:	4401      	add	r1, r0
 8005000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005004:	4313      	orrs	r3, r2
 8005006:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005026:	6113      	str	r3, [r2, #16]
 8005028:	e03a      	b.n	80050a0 <USB_EPStartXfer+0x3e4>
 800502a:	bf00      	nop
 800502c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4413      	add	r3, r2
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	8afa      	ldrh	r2, [r7, #22]
 800504c:	fb03 f202 	mul.w	r2, r3, r2
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	8afb      	ldrh	r3, [r7, #22]
 8005064:	04d9      	lsls	r1, r3, #19
 8005066:	4b38      	ldr	r3, [pc, #224]	; (8005148 <USB_EPStartXfer+0x48c>)
 8005068:	400b      	ands	r3, r1
 800506a:	69b9      	ldr	r1, [r7, #24]
 800506c:	0148      	lsls	r0, r1, #5
 800506e:	69f9      	ldr	r1, [r7, #28]
 8005070:	4401      	add	r1, r0
 8005072:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005076:	4313      	orrs	r3, r2
 8005078:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005090:	69b9      	ldr	r1, [r7, #24]
 8005092:	0148      	lsls	r0, r1, #5
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	4401      	add	r1, r0
 8005098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800509c:	4313      	orrs	r3, r2
 800509e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10d      	bne.n	80050c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6919      	ldr	r1, [r3, #16]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	460a      	mov	r2, r1
 80050c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	791b      	ldrb	r3, [r3, #4]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d128      	bne.n	800511c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d110      	bne.n	80050fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e00f      	b.n	800511c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	440a      	add	r2, r1
 8005112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800513a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	1ff80000 	.word	0x1ff80000

0800514c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b01      	cmp	r3, #1
 800516a:	f040 80ce 	bne.w	800530a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d132      	bne.n	80051dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	0cdb      	lsrs	r3, r3, #19
 80051d6:	04db      	lsls	r3, r3, #19
 80051d8:	6113      	str	r3, [r2, #16]
 80051da:	e04e      	b.n	800527a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	0cdb      	lsrs	r3, r3, #19
 80051f8:	04db      	lsls	r3, r3, #19
 80051fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800521e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	429a      	cmp	r2, r3
 800522a:	d903      	bls.n	8005234 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526a:	6939      	ldr	r1, [r7, #16]
 800526c:	0148      	lsls	r0, r1, #5
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	4401      	add	r1, r0
 8005272:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005276:	4313      	orrs	r3, r2
 8005278:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d11e      	bne.n	80052be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	461a      	mov	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e097      	b.n	80053ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8083 	beq.w	80053ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	6979      	ldr	r1, [r7, #20]
 8005300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005304:	4313      	orrs	r3, r2
 8005306:	634b      	str	r3, [r1, #52]	; 0x34
 8005308:	e071      	b.n	80053ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005324:	0cdb      	lsrs	r3, r3, #19
 8005326:	04db      	lsls	r3, r3, #19
 8005328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800534c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800539c:	6939      	ldr	r1, [r7, #16]
 800539e:	0148      	lsls	r0, r1, #5
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	4401      	add	r1, r0
 80053a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053a8:	4313      	orrs	r3, r2
 80053aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10d      	bne.n	80053ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6919      	ldr	r1, [r3, #16]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	460a      	mov	r2, r1
 80053cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b087      	sub	sp, #28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d14a      	bne.n	80054ae <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005430:	f040 8086 	bne.w	8005540 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	7812      	ldrb	r2, [r2, #0]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005452:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005456:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005476:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800547a:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f242 7210 	movw	r2, #10000	; 0x2710
 8005488:	4293      	cmp	r3, r2
 800548a:	d902      	bls.n	8005492 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
          break;
 8005490:	e056      	b.n	8005540 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054aa:	d0e7      	beq.n	800547c <USB_EPStopXfer+0x82>
 80054ac:	e048      	b.n	8005540 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c6:	d13b      	bne.n	8005540 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	7812      	ldrb	r2, [r2, #0]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800550e:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f242 7210 	movw	r2, #10000	; 0x2710
 800551c:	4293      	cmp	r3, r2
 800551e:	d902      	bls.n	8005526 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75fb      	strb	r3, [r7, #23]
          break;
 8005524:	e00c      	b.n	8005540 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800553a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800553e:	d0e7      	beq.n	8005510 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	; 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	460b      	mov	r3, r1
 800555c:	71fb      	strb	r3, [r7, #7]
 800555e:	4613      	mov	r3, r2
 8005560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800556a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d123      	bne.n	80055ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005572:	88bb      	ldrh	r3, [r7, #4]
 8005574:	3303      	adds	r3, #3
 8005576:	089b      	lsrs	r3, r3, #2
 8005578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e018      	b.n	80055b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	031a      	lsls	r2, r3, #12
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558c:	461a      	mov	r2, r3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	3301      	adds	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d3e2      	bcc.n	8005580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3724      	adds	r7, #36	; 0x24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b08b      	sub	sp, #44	; 0x2c
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	4613      	mov	r3, r2
 80055d2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	089b      	lsrs	r3, r3, #2
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	e014      	b.n	800561c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	3301      	adds	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	3301      	adds	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	3301      	adds	r3, #1
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	d3e6      	bcc.n	80055f2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005624:	8bfb      	ldrh	r3, [r7, #30]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01e      	beq.n	8005668 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005634:	461a      	mov	r2, r3
 8005636:	f107 0310 	add.w	r3, r7, #16
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	b2da      	uxtb	r2, r3
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	701a      	strb	r2, [r3, #0]
      i++;
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	3301      	adds	r3, #1
 8005654:	623b      	str	r3, [r7, #32]
      pDest++;
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	3301      	adds	r3, #1
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800565c:	8bfb      	ldrh	r3, [r7, #30]
 800565e:	3b01      	subs	r3, #1
 8005660:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005662:	8bfb      	ldrh	r3, [r7, #30]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1ea      	bne.n	800563e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800566a:	4618      	mov	r0, r3
 800566c:	372c      	adds	r7, #44	; 0x2c
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d12c      	bne.n	80056ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	db12      	blt.n	80056c8 <USB_EPSetStall+0x54>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00f      	beq.n	80056c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e02b      	b.n	8005742 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db12      	blt.n	8005722 <USB_EPSetStall+0xae>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00f      	beq.n	8005722 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005720:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d128      	bne.n	80057bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005788:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	791b      	ldrb	r3, [r3, #4]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d003      	beq.n	800579a <USB_EPClearStall+0x4c>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d138      	bne.n	800580c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e027      	b.n	800580c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	791b      	ldrb	r3, [r3, #4]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d003      	beq.n	80057ec <USB_EPClearStall+0x9e>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	791b      	ldrb	r3, [r3, #4]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d10f      	bne.n	800580c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005836:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800583a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800587c:	f023 0303 	bic.w	r3, r3, #3
 8005880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005890:	f023 0302 	bic.w	r3, r3, #2
 8005894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4013      	ands	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058fa:	68fb      	ldr	r3, [r7, #12]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	4013      	ands	r3, r2
 8005928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	0c1b      	lsrs	r3, r3, #16
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4013      	ands	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	b29b      	uxth	r3, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005998:	68bb      	ldr	r3, [r7, #8]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
 80059d4:	01db      	lsls	r3, r3, #7
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4013      	ands	r3, r2
 80059f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059f2:	68bb      	ldr	r3, [r7, #8]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	460b      	mov	r3, r1
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	333c      	adds	r3, #60	; 0x3c
 8005a72:	3304      	adds	r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <USB_EP0_OutStart+0xb4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d90a      	bls.n	8005a96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a90:	d101      	bne.n	8005a96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e037      	b.n	8005b06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac4:	f043 0318 	orr.w	r3, r3, #24
 8005ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005adc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d10f      	bne.n	8005b04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	4f54300a 	.word	0x4f54300a

08005b14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <USB_CoreReset+0x60>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e01b      	b.n	8005b6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	daf2      	bge.n	8005b20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f043 0201 	orr.w	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <USB_CoreReset+0x60>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e006      	b.n	8005b6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d0f0      	beq.n	8005b4a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	00030d40 	.word	0x00030d40

08005b78 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005b7e:	2100      	movs	r1, #0
 8005b80:	2000      	movs	r0, #0
 8005b82:	f006 f94b 	bl	800be1c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005b86:	4b23      	ldr	r3, [pc, #140]	; (8005c14 <MX_LWIP_Init+0x9c>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005b8c:	4b22      	ldr	r3, [pc, #136]	; (8005c18 <MX_LWIP_Init+0xa0>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005b92:	4b22      	ldr	r3, [pc, #136]	; (8005c1c <MX_LWIP_Init+0xa4>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005b98:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <MX_LWIP_Init+0xa8>)
 8005b9a:	9302      	str	r3, [sp, #8]
 8005b9c:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <MX_LWIP_Init+0xac>)
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <MX_LWIP_Init+0xa4>)
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <MX_LWIP_Init+0xa0>)
 8005ba8:	491a      	ldr	r1, [pc, #104]	; (8005c14 <MX_LWIP_Init+0x9c>)
 8005baa:	481f      	ldr	r0, [pc, #124]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005bac:	f008 fa76 	bl	800e09c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005bb0:	481d      	ldr	r0, [pc, #116]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005bb2:	f008 fc2b 	bl	800e40c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005bb6:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005bb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005bc8:	4817      	ldr	r0, [pc, #92]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005bca:	f008 fc2d 	bl	800e428 <netif_set_up>
 8005bce:	e002      	b.n	8005bd6 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005bd0:	4815      	ldr	r0, [pc, #84]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005bd2:	f008 fc95 	bl	800e500 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005bd6:	4915      	ldr	r1, [pc, #84]	; (8005c2c <MX_LWIP_Init+0xb4>)
 8005bd8:	4813      	ldr	r0, [pc, #76]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005bda:	f008 fcc3 	bl	800e564 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005bde:	2224      	movs	r2, #36	; 0x24
 8005be0:	2100      	movs	r1, #0
 8005be2:	4813      	ldr	r0, [pc, #76]	; (8005c30 <MX_LWIP_Init+0xb8>)
 8005be4:	f015 fbe4 	bl	801b3b0 <memset>
  attributes.name = "EthLink";
 8005be8:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <MX_LWIP_Init+0xb8>)
 8005bea:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <MX_LWIP_Init+0xbc>)
 8005bec:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005bee:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <MX_LWIP_Init+0xb8>)
 8005bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bf4:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <MX_LWIP_Init+0xb8>)
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005bfc:	4a0c      	ldr	r2, [pc, #48]	; (8005c30 <MX_LWIP_Init+0xb8>)
 8005bfe:	490a      	ldr	r1, [pc, #40]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005c00:	480d      	ldr	r0, [pc, #52]	; (8005c38 <MX_LWIP_Init+0xc0>)
 8005c02:	f002 fa9c 	bl	800813e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005c06:	4808      	ldr	r0, [pc, #32]	; (8005c28 <MX_LWIP_Init+0xb0>)
 8005c08:	f010 fda8 	bl	801675c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c0c:	bf00      	nop
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000021c 	.word	0x2000021c
 8005c18:	20000220 	.word	0x20000220
 8005c1c:	20000224 	.word	0x20000224
 8005c20:	0800bd59 	.word	0x0800bd59
 8005c24:	08005f61 	.word	0x08005f61
 8005c28:	200001e4 	.word	0x200001e4
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	20000228 	.word	0x20000228
 8005c34:	0801c124 	.word	0x0801c124
 8005c38:	0800600b 	.word	0x0800600b

08005c3c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
	...

08005c50 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08e      	sub	sp, #56	; 0x38
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005c5e:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <low_level_init+0x148>)
 8005c60:	4a4e      	ldr	r2, [pc, #312]	; (8005d9c <low_level_init+0x14c>)
 8005c62:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005c64:	2300      	movs	r3, #0
 8005c66:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005c6c:	23e1      	movs	r3, #225	; 0xe1
 8005c6e:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005c70:	2300      	movs	r3, #0
 8005c72:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005c74:	2300      	movs	r3, #0
 8005c76:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005c7c:	4a46      	ldr	r2, [pc, #280]	; (8005d98 <low_level_init+0x148>)
 8005c7e:	f107 0308 	add.w	r3, r7, #8
 8005c82:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005c84:	4b44      	ldr	r3, [pc, #272]	; (8005d98 <low_level_init+0x148>)
 8005c86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005c8a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005c8c:	4b42      	ldr	r3, [pc, #264]	; (8005d98 <low_level_init+0x148>)
 8005c8e:	4a44      	ldr	r2, [pc, #272]	; (8005da0 <low_level_init+0x150>)
 8005c90:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005c92:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <low_level_init+0x148>)
 8005c94:	4a43      	ldr	r2, [pc, #268]	; (8005da4 <low_level_init+0x154>)
 8005c96:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005c98:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <low_level_init+0x148>)
 8005c9a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005c9e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005ca0:	483d      	ldr	r0, [pc, #244]	; (8005d98 <low_level_init+0x148>)
 8005ca2:	f7fb f951 	bl	8000f48 <HAL_ETH_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005cac:	2238      	movs	r2, #56	; 0x38
 8005cae:	2100      	movs	r1, #0
 8005cb0:	483d      	ldr	r0, [pc, #244]	; (8005da8 <low_level_init+0x158>)
 8005cb2:	f015 fb7d 	bl	801b3b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005cb6:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <low_level_init+0x158>)
 8005cb8:	2221      	movs	r2, #33	; 0x21
 8005cba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005cbc:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <low_level_init+0x158>)
 8005cbe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005cc2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005cc4:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <low_level_init+0x158>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005cca:	4838      	ldr	r0, [pc, #224]	; (8005dac <low_level_init+0x15c>)
 8005ccc:	f008 f8a2 	bl	800de14 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2206      	movs	r2, #6
 8005cd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005cd8:	4b2f      	ldr	r3, [pc, #188]	; (8005d98 <low_level_init+0x148>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ce4:	4b2c      	ldr	r3, [pc, #176]	; (8005d98 <low_level_init+0x148>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	785a      	ldrb	r2, [r3, #1]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005cf0:	4b29      	ldr	r3, [pc, #164]	; (8005d98 <low_level_init+0x148>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	789a      	ldrb	r2, [r3, #2]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005cfc:	4b26      	ldr	r3, [pc, #152]	; (8005d98 <low_level_init+0x148>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	78da      	ldrb	r2, [r3, #3]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005d08:	4b23      	ldr	r3, [pc, #140]	; (8005d98 <low_level_init+0x148>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	791a      	ldrb	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005d14:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <low_level_init+0x148>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	795a      	ldrb	r2, [r3, #5]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d2e:	f043 030a 	orr.w	r3, r3, #10
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f002 fbb8 	bl	80084b4 <osSemaphoreNew>
 8005d44:	4603      	mov	r3, r0
 8005d46:	4a1a      	ldr	r2, [pc, #104]	; (8005db0 <low_level_init+0x160>)
 8005d48:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f002 fbb0 	bl	80084b4 <osSemaphoreNew>
 8005d54:	4603      	mov	r3, r0
 8005d56:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <low_level_init+0x164>)
 8005d58:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005d5a:	f107 0310 	add.w	r3, r7, #16
 8005d5e:	2224      	movs	r2, #36	; 0x24
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f015 fb24 	bl	801b3b0 <memset>
  attributes.name = "EthIf";
 8005d68:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <low_level_init+0x168>)
 8005d6a:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005d6c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 8005d72:	2330      	movs	r3, #48	; 0x30
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 8005d76:	f107 0310 	add.w	r3, r7, #16
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	480f      	ldr	r0, [pc, #60]	; (8005dbc <low_level_init+0x16c>)
 8005d80:	f002 f9dd 	bl	800813e <osThreadNew>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8005d84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <low_level_init+0x140>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8005d8c:	f7fa fd26 	bl	80007dc <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005d90:	bf00      	nop
 8005d92:	3738      	adds	r7, #56	; 0x38
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20004d20 	.word	0x20004d20
 8005d9c:	40028000 	.word	0x40028000
 8005da0:	20004c78 	.word	0x20004c78
 8005da4:	20004bd8 	.word	0x20004bd8
 8005da8:	20004dd0 	.word	0x20004dd0
 8005dac:	0801f808 	.word	0x0801f808
 8005db0:	20004d18 	.word	0x20004d18
 8005db4:	20004d1c 	.word	0x20004d1c
 8005db8:	0801c12c 	.word	0x0801c12c
 8005dbc:	08005f0d 	.word	0x08005f0d

08005dc0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b092      	sub	sp, #72	; 0x48
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005dd8:	f107 030c 	add.w	r3, r7, #12
 8005ddc:	2230      	movs	r2, #48	; 0x30
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f015 fae5 	bl	801b3b0 <memset>

  for(q = p; q != NULL; q = q->next)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dea:	e045      	b.n	8005e78 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d902      	bls.n	8005df8 <low_level_output+0x38>
      return ERR_IF;
 8005df2:	f06f 030b 	mvn.w	r3, #11
 8005df6:	e065      	b.n	8005ec4 <low_level_output+0x104>

    Txbuffer[i].buffer = q->payload;
 8005df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfa:	6859      	ldr	r1, [r3, #4]
 8005dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfe:	4613      	mov	r3, r2
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	3348      	adds	r3, #72	; 0x48
 8005e08:	443b      	add	r3, r7
 8005e0a:	3b3c      	subs	r3, #60	; 0x3c
 8005e0c:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e10:	895b      	ldrh	r3, [r3, #10]
 8005e12:	4619      	mov	r1, r3
 8005e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	3348      	adds	r3, #72	; 0x48
 8005e20:	443b      	add	r3, r7
 8005e22:	3b38      	subs	r3, #56	; 0x38
 8005e24:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d011      	beq.n	8005e50 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2e:	1e5a      	subs	r2, r3, #1
 8005e30:	f107 000c 	add.w	r0, r7, #12
 8005e34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e36:	460b      	mov	r3, r1
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	440b      	add	r3, r1
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	18c1      	adds	r1, r0, r3
 8005e40:	4613      	mov	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	3348      	adds	r3, #72	; 0x48
 8005e4a:	443b      	add	r3, r7
 8005e4c:	3b34      	subs	r3, #52	; 0x34
 8005e4e:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8005e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	3348      	adds	r3, #72	; 0x48
 8005e64:	443b      	add	r3, r7
 8005e66:	3b34      	subs	r3, #52	; 0x34
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6e:	3301      	adds	r3, #1
 8005e70:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	643b      	str	r3, [r7, #64]	; 0x40
 8005e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1b6      	bne.n	8005dec <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	891b      	ldrh	r3, [r3, #8]
 8005e82:	461a      	mov	r2, r3
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <low_level_output+0x10c>)
 8005e86:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005e88:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <low_level_output+0x10c>)
 8005e8a:	f107 030c 	add.w	r3, r7, #12
 8005e8e:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005e90:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <low_level_output+0x10c>)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005e96:	6838      	ldr	r0, [r7, #0]
 8005e98:	f008 ffb2 	bl	800ee00 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005e9c:	490b      	ldr	r1, [pc, #44]	; (8005ecc <low_level_output+0x10c>)
 8005e9e:	480c      	ldr	r0, [pc, #48]	; (8005ed0 <low_level_output+0x110>)
 8005ea0:	f7fb f8d9 	bl	8001056 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005ea4:	bf00      	nop
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <low_level_output+0x114>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f002 fb8a 	bl	80085c8 <osSemaphoreAcquire>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f5      	bne.n	8005ea6 <low_level_output+0xe6>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005eba:	4805      	ldr	r0, [pc, #20]	; (8005ed0 <low_level_output+0x110>)
 8005ebc:	f7fb fa5c 	bl	8001378 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005ec0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3748      	adds	r7, #72	; 0x48
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20004dd0 	.word	0x20004dd0
 8005ed0:	20004d20 	.word	0x20004d20
 8005ed4:	20004d1c 	.word	0x20004d1c

08005ed8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ee4:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <low_level_input+0x2c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005eec:	f107 030c 	add.w	r3, r7, #12
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4805      	ldr	r0, [pc, #20]	; (8005f08 <low_level_input+0x30>)
 8005ef4:	f7fb f90b 	bl	800110e <HAL_ETH_ReadData>
  }

  return p;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20004bd4 	.word	0x20004bd4
 8005f08:	20004d20 	.word	0x20004d20

08005f0c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <ethernetif_input+0x50>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f04f 31ff 	mov.w	r1, #4294967295
 8005f24:	4618      	mov	r0, r3
 8005f26:	f002 fb4f 	bl	80085c8 <osSemaphoreAcquire>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f5      	bne.n	8005f1c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005f30:	68b8      	ldr	r0, [r7, #8]
 8005f32:	f7ff ffd1 	bl	8005ed8 <low_level_input>
 8005f36:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	4798      	blx	r3
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f008 feb2 	bl	800ecb8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ea      	bne.n	8005f30 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f5a:	e7df      	b.n	8005f1c <ethernetif_input+0x10>
 8005f5c:	20004d18 	.word	0x20004d18

08005f60 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <ethernetif_init+0x1c>
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <ethernetif_init+0x48>)
 8005f70:	f240 12af 	movw	r2, #431	; 0x1af
 8005f74:	490d      	ldr	r1, [pc, #52]	; (8005fac <ethernetif_init+0x4c>)
 8005f76:	480e      	ldr	r0, [pc, #56]	; (8005fb0 <ethernetif_init+0x50>)
 8005f78:	f015 fb00 	bl	801b57c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2273      	movs	r2, #115	; 0x73
 8005f80:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2274      	movs	r2, #116	; 0x74
 8005f88:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <ethernetif_init+0x54>)
 8005f90:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <ethernetif_init+0x58>)
 8005f96:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fe59 	bl	8005c50 <low_level_init>

  return ERR_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	0801c134 	.word	0x0801c134
 8005fac:	0801c150 	.word	0x0801c150
 8005fb0:	0801c160 	.word	0x0801c160
 8005fb4:	080185b1 	.word	0x080185b1
 8005fb8:	08005dc1 	.word	0x08005dc1

08005fbc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005fc8:	68f9      	ldr	r1, [r7, #12]
 8005fca:	4809      	ldr	r0, [pc, #36]	; (8005ff0 <pbuf_free_custom+0x34>)
 8005fcc:	f008 f812 	bl	800dff4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <pbuf_free_custom+0x38>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d107      	bne.n	8005fe8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <pbuf_free_custom+0x38>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <pbuf_free_custom+0x3c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f002 fb42 	bl	800866c <osSemaphoreRelease>
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	0801f808 	.word	0x0801f808
 8005ff4:	20004bd4 	.word	0x20004bd4
 8005ff8:	20004d18 	.word	0x20004d18

08005ffc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006000:	f7fa fe94 	bl	8000d2c <HAL_GetTick>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	bd80      	pop	{r7, pc}

0800600a <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006012:	2064      	movs	r0, #100	; 0x64
 8006014:	f002 f925 	bl	8008262 <osDelay>
 8006018:	e7fb      	b.n	8006012 <ethernet_link_thread+0x8>
	...

0800601c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af02      	add	r7, sp, #8
 8006022:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006024:	4812      	ldr	r0, [pc, #72]	; (8006070 <HAL_ETH_RxAllocateCallback+0x54>)
 8006026:	f007 ff71 	bl	800df0c <memp_malloc_pool>
 800602a:	60f8      	str	r0, [r7, #12]
  if (p)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d014      	beq.n	800605c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f103 0220 	add.w	r2, r3, #32
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a0d      	ldr	r2, [pc, #52]	; (8006074 <HAL_ETH_RxAllocateCallback+0x58>)
 8006040:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800604a:	9201      	str	r2, [sp, #4]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2241      	movs	r2, #65	; 0x41
 8006052:	2100      	movs	r1, #0
 8006054:	2000      	movs	r0, #0
 8006056:	f008 fc75 	bl	800e944 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800605a:	e005      	b.n	8006068 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_ETH_RxAllocateCallback+0x5c>)
 800605e:	2201      	movs	r2, #1
 8006060:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	0801f808 	.word	0x0801f808
 8006074:	08005fbd 	.word	0x08005fbd
 8006078:	20004bd4 	.word	0x20004bd4

0800607c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	; 0x24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3b20      	subs	r3, #32
 800609a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2200      	movs	r2, #0
 80060a6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	887a      	ldrh	r2, [r7, #2]
 80060ac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e003      	b.n	80060c6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	e009      	b.n	80060e8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	891a      	ldrh	r2, [r3, #8]
 80060d8:	887b      	ldrh	r3, [r7, #2]
 80060da:	4413      	add	r3, r2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f2      	bne.n	80060d4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	3724      	adds	r7, #36	; 0x24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f008 fdd8 	bl	800ecb8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006108:	bf00      	nop
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800611c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006120:	f014 fe9e 	bl	801ae60 <USBD_static_malloc>
 8006124:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d109      	bne.n	8006140 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	32b0      	adds	r2, #176	; 0xb0
 8006136:	2100      	movs	r1, #0
 8006138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800613c:	2302      	movs	r3, #2
 800613e:	e0d4      	b.n	80062ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006140:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006144:	2100      	movs	r1, #0
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f015 f932 	bl	801b3b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32b0      	adds	r2, #176	; 0xb0
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	32b0      	adds	r2, #176	; 0xb0
 8006166:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7c1b      	ldrb	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d138      	bne.n	80061ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006178:	4b5e      	ldr	r3, [pc, #376]	; (80062f4 <USBD_CDC_Init+0x1e4>)
 800617a:	7819      	ldrb	r1, [r3, #0]
 800617c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006180:	2202      	movs	r2, #2
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f014 fd49 	bl	801ac1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006188:	4b5a      	ldr	r3, [pc, #360]	; (80062f4 <USBD_CDC_Init+0x1e4>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f003 020f 	and.w	r2, r3, #15
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	3324      	adds	r3, #36	; 0x24
 800619e:	2201      	movs	r2, #1
 80061a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061a2:	4b55      	ldr	r3, [pc, #340]	; (80062f8 <USBD_CDC_Init+0x1e8>)
 80061a4:	7819      	ldrb	r1, [r3, #0]
 80061a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061aa:	2202      	movs	r2, #2
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f014 fd34 	bl	801ac1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061b2:	4b51      	ldr	r3, [pc, #324]	; (80062f8 <USBD_CDC_Init+0x1e8>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061ca:	2201      	movs	r2, #1
 80061cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061ce:	4b4b      	ldr	r3, [pc, #300]	; (80062fc <USBD_CDC_Init+0x1ec>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	3326      	adds	r3, #38	; 0x26
 80061e4:	2210      	movs	r2, #16
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	e035      	b.n	8006256 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061ea:	4b42      	ldr	r3, [pc, #264]	; (80062f4 <USBD_CDC_Init+0x1e4>)
 80061ec:	7819      	ldrb	r1, [r3, #0]
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	2202      	movs	r2, #2
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f014 fd11 	bl	801ac1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80061f8:	4b3e      	ldr	r3, [pc, #248]	; (80062f4 <USBD_CDC_Init+0x1e4>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	3324      	adds	r3, #36	; 0x24
 800620e:	2201      	movs	r2, #1
 8006210:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006212:	4b39      	ldr	r3, [pc, #228]	; (80062f8 <USBD_CDC_Init+0x1e8>)
 8006214:	7819      	ldrb	r1, [r3, #0]
 8006216:	2340      	movs	r3, #64	; 0x40
 8006218:	2202      	movs	r2, #2
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f014 fcfd 	bl	801ac1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006220:	4b35      	ldr	r3, [pc, #212]	; (80062f8 <USBD_CDC_Init+0x1e8>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006238:	2201      	movs	r2, #1
 800623a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800623c:	4b2f      	ldr	r3, [pc, #188]	; (80062fc <USBD_CDC_Init+0x1ec>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 020f 	and.w	r2, r3, #15
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	3326      	adds	r3, #38	; 0x26
 8006252:	2210      	movs	r2, #16
 8006254:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006256:	4b29      	ldr	r3, [pc, #164]	; (80062fc <USBD_CDC_Init+0x1ec>)
 8006258:	7819      	ldrb	r1, [r3, #0]
 800625a:	2308      	movs	r3, #8
 800625c:	2203      	movs	r2, #3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f014 fcdb 	bl	801ac1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006264:	4b25      	ldr	r3, [pc, #148]	; (80062fc <USBD_CDC_Init+0x1ec>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3324      	adds	r3, #36	; 0x24
 800627a:	2201      	movs	r2, #1
 800627c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	33b0      	adds	r3, #176	; 0xb0
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062b4:	2302      	movs	r3, #2
 80062b6:	e018      	b.n	80062ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7c1b      	ldrb	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <USBD_CDC_Init+0x1e8>)
 80062c2:	7819      	ldrb	r1, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f014 fd91 	bl	801adf6 <USBD_LL_PrepareReceive>
 80062d4:	e008      	b.n	80062e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <USBD_CDC_Init+0x1e8>)
 80062d8:	7819      	ldrb	r1, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062e0:	2340      	movs	r3, #64	; 0x40
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f014 fd87 	bl	801adf6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000093 	.word	0x20000093
 80062f8:	20000094 	.word	0x20000094
 80062fc:	20000095 	.word	0x20000095

08006300 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800630c:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <USBD_CDC_DeInit+0xf8>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f014 fca7 	bl	801ac66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006318:	4b37      	ldr	r3, [pc, #220]	; (80063f8 <USBD_CDC_DeInit+0xf8>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	3324      	adds	r3, #36	; 0x24
 800632e:	2200      	movs	r2, #0
 8006330:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006332:	4b32      	ldr	r3, [pc, #200]	; (80063fc <USBD_CDC_DeInit+0xfc>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f014 fc94 	bl	801ac66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800633e:	4b2f      	ldr	r3, [pc, #188]	; (80063fc <USBD_CDC_DeInit+0xfc>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f003 020f 	and.w	r2, r3, #15
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006356:	2200      	movs	r2, #0
 8006358:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800635a:	4b29      	ldr	r3, [pc, #164]	; (8006400 <USBD_CDC_DeInit+0x100>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f014 fc80 	bl	801ac66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006366:	4b26      	ldr	r3, [pc, #152]	; (8006400 <USBD_CDC_DeInit+0x100>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	3324      	adds	r3, #36	; 0x24
 800637c:	2200      	movs	r2, #0
 800637e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006380:	4b1f      	ldr	r3, [pc, #124]	; (8006400 <USBD_CDC_DeInit+0x100>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	3326      	adds	r3, #38	; 0x26
 8006396:	2200      	movs	r2, #0
 8006398:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	32b0      	adds	r2, #176	; 0xb0
 80063a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01f      	beq.n	80063ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	33b0      	adds	r3, #176	; 0xb0
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	32b0      	adds	r2, #176	; 0xb0
 80063ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f014 fd52 	bl	801ae78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32b0      	adds	r2, #176	; 0xb0
 80063de:	2100      	movs	r1, #0
 80063e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000093 	.word	0x20000093
 80063fc:	20000094 	.word	0x20000094
 8006400:	20000095 	.word	0x20000095

08006404 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	32b0      	adds	r2, #176	; 0xb0
 8006418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	e0bf      	b.n	80065b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800643c:	2b00      	cmp	r3, #0
 800643e:	d050      	beq.n	80064e2 <USBD_CDC_Setup+0xde>
 8006440:	2b20      	cmp	r3, #32
 8006442:	f040 80af 	bne.w	80065a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	88db      	ldrh	r3, [r3, #6]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d03a      	beq.n	80064c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b25b      	sxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	da1b      	bge.n	8006490 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	33b0      	adds	r3, #176	; 0xb0
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800646e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	88d2      	ldrh	r2, [r2, #6]
 8006474:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	88db      	ldrh	r3, [r3, #6]
 800647a:	2b07      	cmp	r3, #7
 800647c:	bf28      	it	cs
 800647e:	2307      	movcs	r3, #7
 8006480:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	89fa      	ldrh	r2, [r7, #14]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fd36 	bl	8007efa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800648e:	e090      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785a      	ldrb	r2, [r3, #1]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	88db      	ldrh	r3, [r3, #6]
 800649e:	2b3f      	cmp	r3, #63	; 0x3f
 80064a0:	d803      	bhi.n	80064aa <USBD_CDC_Setup+0xa6>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	88db      	ldrh	r3, [r3, #6]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	e000      	b.n	80064ac <USBD_CDC_Setup+0xa8>
 80064aa:	2240      	movs	r2, #64	; 0x40
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064b2:	6939      	ldr	r1, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80064ba:	461a      	mov	r2, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fd48 	bl	8007f52 <USBD_CtlPrepareRx>
      break;
 80064c2:	e076      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	33b0      	adds	r3, #176	; 0xb0
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	7850      	ldrb	r0, [r2, #1]
 80064da:	2200      	movs	r2, #0
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	4798      	blx	r3
      break;
 80064e0:	e067      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	2b0b      	cmp	r3, #11
 80064e8:	d851      	bhi.n	800658e <USBD_CDC_Setup+0x18a>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <USBD_CDC_Setup+0xec>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006521 	.word	0x08006521
 80064f4:	0800659d 	.word	0x0800659d
 80064f8:	0800658f 	.word	0x0800658f
 80064fc:	0800658f 	.word	0x0800658f
 8006500:	0800658f 	.word	0x0800658f
 8006504:	0800658f 	.word	0x0800658f
 8006508:	0800658f 	.word	0x0800658f
 800650c:	0800658f 	.word	0x0800658f
 8006510:	0800658f 	.word	0x0800658f
 8006514:	0800658f 	.word	0x0800658f
 8006518:	0800654b 	.word	0x0800654b
 800651c:	08006575 	.word	0x08006575
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b03      	cmp	r3, #3
 800652a:	d107      	bne.n	800653c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800652c:	f107 030a 	add.w	r3, r7, #10
 8006530:	2202      	movs	r2, #2
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fce0 	bl	8007efa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800653a:	e032      	b.n	80065a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fc6b 	bl	8007e1a <USBD_CtlError>
            ret = USBD_FAIL;
 8006544:	2303      	movs	r3, #3
 8006546:	75fb      	strb	r3, [r7, #23]
          break;
 8006548:	e02b      	b.n	80065a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d107      	bne.n	8006566 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006556:	f107 030d 	add.w	r3, r7, #13
 800655a:	2201      	movs	r2, #1
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 fccb 	bl	8007efa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006564:	e01d      	b.n	80065a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fc56 	bl	8007e1a <USBD_CtlError>
            ret = USBD_FAIL;
 800656e:	2303      	movs	r3, #3
 8006570:	75fb      	strb	r3, [r7, #23]
          break;
 8006572:	e016      	b.n	80065a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b03      	cmp	r3, #3
 800657e:	d00f      	beq.n	80065a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fc49 	bl	8007e1a <USBD_CtlError>
            ret = USBD_FAIL;
 8006588:	2303      	movs	r3, #3
 800658a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800658c:	e008      	b.n	80065a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fc42 	bl	8007e1a <USBD_CtlError>
          ret = USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	75fb      	strb	r3, [r7, #23]
          break;
 800659a:	e002      	b.n	80065a2 <USBD_CDC_Setup+0x19e>
          break;
 800659c:	bf00      	nop
 800659e:	e008      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>
          break;
 80065a0:	bf00      	nop
      }
      break;
 80065a2:	e006      	b.n	80065b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fc37 	bl	8007e1a <USBD_CtlError>
      ret = USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	75fb      	strb	r3, [r7, #23]
      break;
 80065b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32b0      	adds	r2, #176	; 0xb0
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e065      	b.n	80066b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	32b0      	adds	r2, #176	; 0xb0
 80065f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 020f 	and.w	r2, r3, #15
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3318      	adds	r3, #24
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02f      	beq.n	8006670 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	3318      	adds	r3, #24
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	f003 010f 	and.w	r1, r3, #15
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	460b      	mov	r3, r1
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	440b      	add	r3, r1
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4403      	add	r3, r0
 8006638:	3348      	adds	r3, #72	; 0x48
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006646:	2b00      	cmp	r3, #0
 8006648:	d112      	bne.n	8006670 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	3318      	adds	r3, #24
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006662:	78f9      	ldrb	r1, [r7, #3]
 8006664:	2300      	movs	r3, #0
 8006666:	2200      	movs	r2, #0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f014 fba3 	bl	801adb4 <USBD_LL_Transmit>
 800666e:	e01f      	b.n	80066b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	33b0      	adds	r3, #176	; 0xb0
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d010      	beq.n	80066b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	33b0      	adds	r3, #176	; 0xb0
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	32b0      	adds	r2, #176	; 0xb0
 80066d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	32b0      	adds	r2, #176	; 0xb0
 80066e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e01a      	b.n	8006722 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f014 fba1 	bl	801ae38 <USBD_LL_GetRxDataSize>
 80066f6:	4602      	mov	r2, r0
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	33b0      	adds	r3, #176	; 0xb0
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800671c:	4611      	mov	r1, r2
 800671e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	32b0      	adds	r2, #176	; 0xb0
 800673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006740:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006748:	2303      	movs	r3, #3
 800674a:	e025      	b.n	8006798 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	33b0      	adds	r3, #176	; 0xb0
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01a      	beq.n	8006796 <USBD_CDC_EP0_RxReady+0x6c>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006766:	2bff      	cmp	r3, #255	; 0xff
 8006768:	d015      	beq.n	8006796 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	33b0      	adds	r3, #176	; 0xb0
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006782:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800678a:	b292      	uxth	r2, r2
 800678c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067a8:	2182      	movs	r1, #130	; 0x82
 80067aa:	4818      	ldr	r0, [pc, #96]	; (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067ac:	f000 fcfe 	bl	80071ac <USBD_GetEpDesc>
 80067b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067b2:	2101      	movs	r1, #1
 80067b4:	4815      	ldr	r0, [pc, #84]	; (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067b6:	f000 fcf9 	bl	80071ac <USBD_GetEpDesc>
 80067ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067bc:	2181      	movs	r1, #129	; 0x81
 80067be:	4813      	ldr	r0, [pc, #76]	; (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067c0:	f000 fcf4 	bl	80071ac <USBD_GetEpDesc>
 80067c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2210      	movs	r2, #16
 80067d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d006      	beq.n	80067e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2200      	movs	r2, #0
 80067dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e0:	711a      	strb	r2, [r3, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f4:	711a      	strb	r2, [r3, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2243      	movs	r2, #67	; 0x43
 80067fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006800:	4b02      	ldr	r3, [pc, #8]	; (800680c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000050 	.word	0x20000050

08006810 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006818:	2182      	movs	r1, #130	; 0x82
 800681a:	4818      	ldr	r0, [pc, #96]	; (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800681c:	f000 fcc6 	bl	80071ac <USBD_GetEpDesc>
 8006820:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006822:	2101      	movs	r1, #1
 8006824:	4815      	ldr	r0, [pc, #84]	; (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006826:	f000 fcc1 	bl	80071ac <USBD_GetEpDesc>
 800682a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800682c:	2181      	movs	r1, #129	; 0x81
 800682e:	4813      	ldr	r0, [pc, #76]	; (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006830:	f000 fcbc 	bl	80071ac <USBD_GetEpDesc>
 8006834:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2210      	movs	r2, #16
 8006840:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d006      	beq.n	8006856 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2200      	movs	r2, #0
 800684c:	711a      	strb	r2, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f042 0202 	orr.w	r2, r2, #2
 8006854:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	711a      	strb	r2, [r3, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f042 0202 	orr.w	r2, r2, #2
 8006868:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2243      	movs	r2, #67	; 0x43
 800686e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000050 	.word	0x20000050

08006880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006888:	2182      	movs	r1, #130	; 0x82
 800688a:	4818      	ldr	r0, [pc, #96]	; (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800688c:	f000 fc8e 	bl	80071ac <USBD_GetEpDesc>
 8006890:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006892:	2101      	movs	r1, #1
 8006894:	4815      	ldr	r0, [pc, #84]	; (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006896:	f000 fc89 	bl	80071ac <USBD_GetEpDesc>
 800689a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800689c:	2181      	movs	r1, #129	; 0x81
 800689e:	4813      	ldr	r0, [pc, #76]	; (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068a0:	f000 fc84 	bl	80071ac <USBD_GetEpDesc>
 80068a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2210      	movs	r2, #16
 80068b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d006      	beq.n	80068c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c0:	711a      	strb	r2, [r3, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d4:	711a      	strb	r2, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2243      	movs	r2, #67	; 0x43
 80068de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068e0:	4b02      	ldr	r3, [pc, #8]	; (80068ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000050 	.word	0x20000050

080068f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	220a      	movs	r2, #10
 80068fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80068fe:	4b03      	ldr	r3, [pc, #12]	; (800690c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	2000000c 	.word	0x2000000c

08006910 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e009      	b.n	8006938 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	33b0      	adds	r3, #176	; 0xb0
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006942:	b480      	push	{r7}
 8006944:	b087      	sub	sp, #28
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	32b0      	adds	r2, #176	; 0xb0
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006964:	2303      	movs	r3, #3
 8006966:	e008      	b.n	800697a <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	32b0      	adds	r2, #176	; 0xb0
 8006998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e004      	b.n	80069b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	32b0      	adds	r2, #176	; 0xb0
 80069ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	32b0      	adds	r2, #176	; 0xb0
 80069de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e018      	b.n	8006a1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7c1b      	ldrb	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <USBD_CDC_ReceivePacket+0x68>)
 80069f4:	7819      	ldrb	r1, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f014 f9f8 	bl	801adf6 <USBD_LL_PrepareReceive>
 8006a06:	e008      	b.n	8006a1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <USBD_CDC_ReceivePacket+0x68>)
 8006a0a:	7819      	ldrb	r1, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f014 f9ee 	bl	801adf6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000094 	.word	0x20000094

08006a28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e01f      	b.n	8006a80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	79fa      	ldrb	r2, [r7, #7]
 8006a72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f014 f869 	bl	801ab4c <USBD_LL_Init>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e025      	b.n	8006aec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	32ae      	adds	r2, #174	; 0xae
 8006ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00f      	beq.n	8006adc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32ae      	adds	r2, #174	; 0xae
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	f107 020e 	add.w	r2, r7, #14
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f014 f871 	bl	801abe4 <USBD_LL_Start>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	4611      	mov	r1, r2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	4611      	mov	r1, r2
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	4798      	blx	r3
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 f901 	bl	8007da6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d01a      	beq.n	8006bfe <USBD_LL_SetupStage+0x72>
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d822      	bhi.n	8006c12 <USBD_LL_SetupStage+0x86>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <USBD_LL_SetupStage+0x4a>
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d00a      	beq.n	8006bea <USBD_LL_SetupStage+0x5e>
 8006bd4:	e01d      	b.n	8006c12 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fb58 	bl	8007294 <USBD_StdDevReq>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	e020      	b.n	8006c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fbc0 	bl	8007378 <USBD_StdItfReq>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006bfc:	e016      	b.n	8006c2c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fc22 	bl	8007450 <USBD_StdEPReq>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c10:	e00c      	b.n	8006c2c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f014 f83f 	bl	801aca4 <USBD_LL_StallEP>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
      break;
 8006c2a:	bf00      	nop
  }

  return ret;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d16e      	bne.n	8006d2c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	f040 8098 	bne.w	8006d92 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d913      	bls.n	8006c96 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	bf28      	it	cs
 8006c88:	4613      	movcs	r3, r2
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 f97c 	bl	8007f8c <USBD_CtlContinueRx>
 8006c94:	e07d      	b.n	8006d92 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d014      	beq.n	8006cce <USBD_LL_DataOutStage+0x98>
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d81d      	bhi.n	8006ce4 <USBD_LL_DataOutStage+0xae>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <USBD_LL_DataOutStage+0x7c>
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d003      	beq.n	8006cb8 <USBD_LL_DataOutStage+0x82>
 8006cb0:	e018      	b.n	8006ce4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75bb      	strb	r3, [r7, #22]
            break;
 8006cb6:	e018      	b.n	8006cea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fa5a 	bl	800717c <USBD_CoreFindIF>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	75bb      	strb	r3, [r7, #22]
            break;
 8006ccc:	e00d      	b.n	8006cea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fa5b 	bl	8007194 <USBD_CoreFindEP>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ce2:	e002      	b.n	8006cea <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ce8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006cea:	7dbb      	ldrb	r3, [r7, #22]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d119      	bne.n	8006d24 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d113      	bne.n	8006d24 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006cfc:	7dba      	ldrb	r2, [r7, #22]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	32ae      	adds	r2, #174	; 0xae
 8006d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006d0c:	7dba      	ldrb	r2, [r7, #22]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006d14:	7dba      	ldrb	r2, [r7, #22]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	32ae      	adds	r2, #174	; 0xae
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f001 f942 	bl	8007fae <USBD_CtlSendStatus>
 8006d2a:	e032      	b.n	8006d92 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	4619      	mov	r1, r3
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fa2c 	bl	8007194 <USBD_CoreFindEP>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d40:	7dbb      	ldrb	r3, [r7, #22]
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d025      	beq.n	8006d92 <USBD_LL_DataOutStage+0x15c>
 8006d46:	7dbb      	ldrb	r3, [r7, #22]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d122      	bne.n	8006d92 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d117      	bne.n	8006d88 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d58:	7dba      	ldrb	r2, [r7, #22]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	32ae      	adds	r2, #174	; 0xae
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00f      	beq.n	8006d88 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d68:	7dba      	ldrb	r2, [r7, #22]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d70:	7dba      	ldrb	r2, [r7, #22]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	32ae      	adds	r2, #174	; 0xae
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	7afa      	ldrb	r2, [r7, #11]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	4798      	blx	r3
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	e000      	b.n	8006d94 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	460b      	mov	r3, r1
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006daa:	7afb      	ldrb	r3, [r7, #11]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d16f      	bne.n	8006e90 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3314      	adds	r3, #20
 8006db4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d15a      	bne.n	8006e76 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d914      	bls.n	8006df6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	1ad2      	subs	r2, r2, r3
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f001 f8a4 	bl	8007f30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f014 f801 	bl	801adf6 <USBD_LL_PrepareReceive>
 8006df4:	e03f      	b.n	8006e76 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d11c      	bne.n	8006e3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d316      	bcc.n	8006e3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d20f      	bcs.n	8006e3c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f001 f885 	bl	8007f30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f013 ffde 	bl	801adf6 <USBD_LL_PrepareReceive>
 8006e3a:	e01c      	b.n	8006e76 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d10f      	bne.n	8006e68 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d009      	beq.n	8006e68 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f013 ff1a 	bl	801aca4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f001 f8af 	bl	8007fd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d03a      	beq.n	8006ef6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff fe43 	bl	8006b0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e8e:	e032      	b.n	8006ef6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4619      	mov	r1, r3
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f97a 	bl	8007194 <USBD_CoreFindEP>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2bff      	cmp	r3, #255	; 0xff
 8006ea8:	d025      	beq.n	8006ef6 <USBD_LL_DataInStage+0x15a>
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d122      	bne.n	8006ef6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d11c      	bne.n	8006ef6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ebc:	7dfa      	ldrb	r2, [r7, #23]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	32ae      	adds	r2, #174	; 0xae
 8006ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d014      	beq.n	8006ef6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ecc:	7dfa      	ldrb	r2, [r7, #23]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006ed4:	7dfa      	ldrb	r2, [r7, #23]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	32ae      	adds	r2, #174	; 0xae
 8006eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	7afa      	ldrb	r2, [r7, #11]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	4798      	blx	r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006eec:	7dbb      	ldrb	r3, [r7, #22]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ef2:	7dbb      	ldrb	r3, [r7, #22]
 8006ef4:	e000      	b.n	8006ef8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d014      	beq.n	8006f66 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00e      	beq.n	8006f66 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6852      	ldr	r2, [r2, #4]
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	4611      	mov	r1, r2
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f66:	2340      	movs	r3, #64	; 0x40
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f013 fe54 	bl	801ac1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2240      	movs	r2, #64	; 0x40
 8006f7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f82:	2340      	movs	r3, #64	; 0x40
 8006f84:	2200      	movs	r2, #0
 8006f86:	2180      	movs	r1, #128	; 0x80
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f013 fe46 	bl	801ac1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2240      	movs	r2, #64	; 0x40
 8006f98:	621a      	str	r2, [r3, #32]

  return ret;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	78fa      	ldrb	r2, [r7, #3]
 8006fb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bc80      	pop	{r7}
 8006fc0:	4770      	bx	lr

08006fc2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d106      	bne.n	800700e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007006:	b2da      	uxtb	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr

0800701a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b03      	cmp	r3, #3
 800702c:	d110      	bne.n	8007050 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00b      	beq.n	8007050 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	32ae      	adds	r2, #174	; 0xae
 8007070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	e01c      	b.n	80070b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b03      	cmp	r3, #3
 8007086:	d115      	bne.n	80070b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	32ae      	adds	r2, #174	; 0xae
 8007092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	32ae      	adds	r2, #174	; 0xae
 80070a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	4611      	mov	r1, r2
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	32ae      	adds	r2, #174	; 0xae
 80070d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80070dc:	2303      	movs	r3, #3
 80070de:	e01c      	b.n	800711a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d115      	bne.n	8007118 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32ae      	adds	r2, #174	; 0xae
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	32ae      	adds	r2, #174	; 0xae
 800710a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	4611      	mov	r1, r2
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr

08007136 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00e      	beq.n	8007172 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6852      	ldr	r2, [r2, #4]
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	4611      	mov	r1, r2
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4798      	blx	r3
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800716e:	2303      	movs	r3, #3
 8007170:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007188:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80071a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	885b      	ldrh	r3, [r3, #2]
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d920      	bls.n	8007216 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80071dc:	e013      	b.n	8007206 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80071de:	f107 030a 	add.w	r3, r7, #10
 80071e2:	4619      	mov	r1, r3
 80071e4:	6978      	ldr	r0, [r7, #20]
 80071e6:	f000 f81b 	bl	8007220 <USBD_GetNextDesc>
 80071ea:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b05      	cmp	r3, #5
 80071f2:	d108      	bne.n	8007206 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	789b      	ldrb	r3, [r3, #2]
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d008      	beq.n	8007214 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	885b      	ldrh	r3, [r3, #2]
 800720a:	b29a      	uxth	r2, r3
 800720c:	897b      	ldrh	r3, [r7, #10]
 800720e:	429a      	cmp	r2, r3
 8007210:	d8e5      	bhi.n	80071de <USBD_GetEpDesc+0x32>
 8007212:	e000      	b.n	8007216 <USBD_GetEpDesc+0x6a>
          break;
 8007214:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007216:	693b      	ldr	r3, [r7, #16]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	881a      	ldrh	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4413      	add	r3, r2
 800723a:	b29a      	uxth	r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4413      	add	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr

08007258 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	3301      	adds	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007276:	8a3b      	ldrh	r3, [r7, #16]
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	b21a      	sxth	r2, r3
 800727c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007280:	4313      	orrs	r3, r2
 8007282:	b21b      	sxth	r3, r3
 8007284:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007286:	89fb      	ldrh	r3, [r7, #14]
}
 8007288:	4618      	mov	r0, r3
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
	...

08007294 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d005      	beq.n	80072ba <USBD_StdDevReq+0x26>
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d857      	bhi.n	8007362 <USBD_StdDevReq+0xce>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <USBD_StdDevReq+0x42>
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	d153      	bne.n	8007362 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	32ae      	adds	r2, #174	; 0xae
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]
      break;
 80072d4:	e04a      	b.n	800736c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b09      	cmp	r3, #9
 80072dc:	d83b      	bhi.n	8007356 <USBD_StdDevReq+0xc2>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <USBD_StdDevReq+0x50>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007339 	.word	0x08007339
 80072e8:	0800734d 	.word	0x0800734d
 80072ec:	08007357 	.word	0x08007357
 80072f0:	08007343 	.word	0x08007343
 80072f4:	08007357 	.word	0x08007357
 80072f8:	08007317 	.word	0x08007317
 80072fc:	0800730d 	.word	0x0800730d
 8007300:	08007357 	.word	0x08007357
 8007304:	0800732f 	.word	0x0800732f
 8007308:	08007321 	.word	0x08007321
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fa3c 	bl	800778c <USBD_GetDescriptor>
          break;
 8007314:	e024      	b.n	8007360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fba1 	bl	8007a60 <USBD_SetAddress>
          break;
 800731e:	e01f      	b.n	8007360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fbe0 	bl	8007ae8 <USBD_SetConfig>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]
          break;
 800732c:	e018      	b.n	8007360 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc83 	bl	8007c3c <USBD_GetConfig>
          break;
 8007336:	e013      	b.n	8007360 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fcb4 	bl	8007ca8 <USBD_GetStatus>
          break;
 8007340:	e00e      	b.n	8007360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fce3 	bl	8007d10 <USBD_SetFeature>
          break;
 800734a:	e009      	b.n	8007360 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fd07 	bl	8007d62 <USBD_ClrFeature>
          break;
 8007354:	e004      	b.n	8007360 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fd5e 	bl	8007e1a <USBD_CtlError>
          break;
 800735e:	bf00      	nop
      }
      break;
 8007360:	e004      	b.n	800736c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fd58 	bl	8007e1a <USBD_CtlError>
      break;
 800736a:	bf00      	nop
  }

  return ret;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop

08007378 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800738e:	2b40      	cmp	r3, #64	; 0x40
 8007390:	d005      	beq.n	800739e <USBD_StdItfReq+0x26>
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d852      	bhi.n	800743c <USBD_StdItfReq+0xc4>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <USBD_StdItfReq+0x26>
 800739a:	2b20      	cmp	r3, #32
 800739c:	d14e      	bne.n	800743c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d840      	bhi.n	800742e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	889b      	ldrh	r3, [r3, #4]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d836      	bhi.n	8007424 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	889b      	ldrh	r3, [r3, #4]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fedc 	bl	800717c <USBD_CoreFindIF>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d01d      	beq.n	800740a <USBD_StdItfReq+0x92>
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d11a      	bne.n	800740a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073d4:	7bba      	ldrb	r2, [r7, #14]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	32ae      	adds	r2, #174	; 0xae
 80073da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00f      	beq.n	8007404 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80073e4:	7bba      	ldrb	r2, [r7, #14]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073ec:	7bba      	ldrb	r2, [r7, #14]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32ae      	adds	r2, #174	; 0xae
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007402:	e004      	b.n	800740e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007408:	e001      	b.n	800740e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800740a:	2303      	movs	r3, #3
 800740c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	88db      	ldrh	r3, [r3, #6]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d110      	bne.n	8007438 <USBD_StdItfReq+0xc0>
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10d      	bne.n	8007438 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fdc6 	bl	8007fae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007422:	e009      	b.n	8007438 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fcf7 	bl	8007e1a <USBD_CtlError>
          break;
 800742c:	e004      	b.n	8007438 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fcf2 	bl	8007e1a <USBD_CtlError>
          break;
 8007436:	e000      	b.n	800743a <USBD_StdItfReq+0xc2>
          break;
 8007438:	bf00      	nop
      }
      break;
 800743a:	e004      	b.n	8007446 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fceb 	bl	8007e1a <USBD_CtlError>
      break;
 8007444:	bf00      	nop
  }

  return ret;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	889b      	ldrh	r3, [r3, #4]
 8007462:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d007      	beq.n	8007480 <USBD_StdEPReq+0x30>
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	f200 817f 	bhi.w	8007774 <USBD_StdEPReq+0x324>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02a      	beq.n	80074d0 <USBD_StdEPReq+0x80>
 800747a:	2b20      	cmp	r3, #32
 800747c:	f040 817a 	bne.w	8007774 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff fe85 	bl	8007194 <USBD_CoreFindEP>
 800748a:	4603      	mov	r3, r0
 800748c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800748e:	7b7b      	ldrb	r3, [r7, #13]
 8007490:	2bff      	cmp	r3, #255	; 0xff
 8007492:	f000 8174 	beq.w	800777e <USBD_StdEPReq+0x32e>
 8007496:	7b7b      	ldrb	r3, [r7, #13]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f040 8170 	bne.w	800777e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800749e:	7b7a      	ldrb	r2, [r7, #13]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80074a6:	7b7a      	ldrb	r2, [r7, #13]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	32ae      	adds	r2, #174	; 0xae
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 8163 	beq.w	800777e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80074b8:	7b7a      	ldrb	r2, [r7, #13]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	32ae      	adds	r2, #174	; 0xae
 80074be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074ce:	e156      	b.n	800777e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d008      	beq.n	80074ea <USBD_StdEPReq+0x9a>
 80074d8:	2b03      	cmp	r3, #3
 80074da:	f300 8145 	bgt.w	8007768 <USBD_StdEPReq+0x318>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 809b 	beq.w	800761a <USBD_StdEPReq+0x1ca>
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d03c      	beq.n	8007562 <USBD_StdEPReq+0x112>
 80074e8:	e13e      	b.n	8007768 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d002      	beq.n	80074fc <USBD_StdEPReq+0xac>
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d016      	beq.n	8007528 <USBD_StdEPReq+0xd8>
 80074fa:	e02c      	b.n	8007556 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00d      	beq.n	800751e <USBD_StdEPReq+0xce>
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	2b80      	cmp	r3, #128	; 0x80
 8007506:	d00a      	beq.n	800751e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f013 fbc9 	bl	801aca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007512:	2180      	movs	r1, #128	; 0x80
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f013 fbc5 	bl	801aca4 <USBD_LL_StallEP>
 800751a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800751c:	e020      	b.n	8007560 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fc7a 	bl	8007e1a <USBD_CtlError>
              break;
 8007526:	e01b      	b.n	8007560 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	885b      	ldrh	r3, [r3, #2]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10e      	bne.n	800754e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <USBD_StdEPReq+0xfe>
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b80      	cmp	r3, #128	; 0x80
 800753a:	d008      	beq.n	800754e <USBD_StdEPReq+0xfe>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	88db      	ldrh	r3, [r3, #6]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f013 fbab 	bl	801aca4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fd2d 	bl	8007fae <USBD_CtlSendStatus>

              break;
 8007554:	e004      	b.n	8007560 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fc5e 	bl	8007e1a <USBD_CtlError>
              break;
 800755e:	bf00      	nop
          }
          break;
 8007560:	e107      	b.n	8007772 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d002      	beq.n	8007574 <USBD_StdEPReq+0x124>
 800756e:	2b03      	cmp	r3, #3
 8007570:	d016      	beq.n	80075a0 <USBD_StdEPReq+0x150>
 8007572:	e04b      	b.n	800760c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00d      	beq.n	8007596 <USBD_StdEPReq+0x146>
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	2b80      	cmp	r3, #128	; 0x80
 800757e:	d00a      	beq.n	8007596 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f013 fb8d 	bl	801aca4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800758a:	2180      	movs	r1, #128	; 0x80
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f013 fb89 	bl	801aca4 <USBD_LL_StallEP>
 8007592:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007594:	e040      	b.n	8007618 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fc3e 	bl	8007e1a <USBD_CtlError>
              break;
 800759e:	e03b      	b.n	8007618 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	885b      	ldrh	r3, [r3, #2]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d136      	bne.n	8007616 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f013 fb93 	bl	801ace2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fcf6 	bl	8007fae <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff fde4 	bl	8007194 <USBD_CoreFindEP>
 80075cc:	4603      	mov	r3, r0
 80075ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075d0:	7b7b      	ldrb	r3, [r7, #13]
 80075d2:	2bff      	cmp	r3, #255	; 0xff
 80075d4:	d01f      	beq.n	8007616 <USBD_StdEPReq+0x1c6>
 80075d6:	7b7b      	ldrb	r3, [r7, #13]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d11c      	bne.n	8007616 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80075dc:	7b7a      	ldrb	r2, [r7, #13]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	; 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d010      	beq.n	8007616 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075f4:	7b7a      	ldrb	r2, [r7, #13]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32ae      	adds	r2, #174	; 0xae
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800760a:	e004      	b.n	8007616 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fc03 	bl	8007e1a <USBD_CtlError>
              break;
 8007614:	e000      	b.n	8007618 <USBD_StdEPReq+0x1c8>
              break;
 8007616:	bf00      	nop
          }
          break;
 8007618:	e0ab      	b.n	8007772 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d002      	beq.n	800762c <USBD_StdEPReq+0x1dc>
 8007626:	2b03      	cmp	r3, #3
 8007628:	d032      	beq.n	8007690 <USBD_StdEPReq+0x240>
 800762a:	e097      	b.n	800775c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <USBD_StdEPReq+0x1f2>
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b80      	cmp	r3, #128	; 0x80
 8007636:	d004      	beq.n	8007642 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fbed 	bl	8007e1a <USBD_CtlError>
                break;
 8007640:	e091      	b.n	8007766 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007646:	2b00      	cmp	r3, #0
 8007648:	da0b      	bge.n	8007662 <USBD_StdEPReq+0x212>
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	3310      	adds	r3, #16
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	3304      	adds	r3, #4
 8007660:	e00b      	b.n	800767a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4413      	add	r3, r2
 8007678:	3304      	adds	r3, #4
 800767a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2202      	movs	r2, #2
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc36 	bl	8007efa <USBD_CtlSendData>
              break;
 800768e:	e06a      	b.n	8007766 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007694:	2b00      	cmp	r3, #0
 8007696:	da11      	bge.n	80076bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	f003 020f 	and.w	r2, r3, #15
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	440b      	add	r3, r1
 80076aa:	3324      	adds	r3, #36	; 0x24
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d117      	bne.n	80076e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fbb0 	bl	8007e1a <USBD_CtlError>
                  break;
 80076ba:	e054      	b.n	8007766 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	f003 020f 	and.w	r2, r3, #15
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fb9d 	bl	8007e1a <USBD_CtlError>
                  break;
 80076e0:	e041      	b.n	8007766 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da0b      	bge.n	8007702 <USBD_StdEPReq+0x2b2>
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	3310      	adds	r3, #16
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	3304      	adds	r3, #4
 8007700:	e00b      	b.n	800771a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	4413      	add	r3, r2
 8007718:	3304      	adds	r3, #4
 800771a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <USBD_StdEPReq+0x2d8>
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	2b80      	cmp	r3, #128	; 0x80
 8007726:	d103      	bne.n	8007730 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	e00e      	b.n	800774e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f013 faf3 	bl	801ad20 <USBD_LL_IsStallEP>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2201      	movs	r2, #1
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	e002      	b.n	800774e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2202      	movs	r2, #2
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fbd0 	bl	8007efa <USBD_CtlSendData>
              break;
 800775a:	e004      	b.n	8007766 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fb5b 	bl	8007e1a <USBD_CtlError>
              break;
 8007764:	bf00      	nop
          }
          break;
 8007766:	e004      	b.n	8007772 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fb55 	bl	8007e1a <USBD_CtlError>
          break;
 8007770:	bf00      	nop
      }
      break;
 8007772:	e005      	b.n	8007780 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fb4f 	bl	8007e1a <USBD_CtlError>
      break;
 800777c:	e000      	b.n	8007780 <USBD_StdEPReq+0x330>
      break;
 800777e:	bf00      	nop
  }

  return ret;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	885b      	ldrh	r3, [r3, #2]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	2b06      	cmp	r3, #6
 80077ae:	f200 8128 	bhi.w	8007a02 <USBD_GetDescriptor+0x276>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <USBD_GetDescriptor+0x2c>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077d5 	.word	0x080077d5
 80077bc:	080077ed 	.word	0x080077ed
 80077c0:	0800782d 	.word	0x0800782d
 80077c4:	08007a03 	.word	0x08007a03
 80077c8:	08007a03 	.word	0x08007a03
 80077cc:	080079a3 	.word	0x080079a3
 80077d0:	080079cf 	.word	0x080079cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	7c12      	ldrb	r2, [r2, #16]
 80077e0:	f107 0108 	add.w	r1, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
      break;
 80077ea:	e112      	b.n	8007a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10d      	bne.n	8007810 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	2202      	movs	r2, #2
 800780c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800780e:	e100      	b.n	8007a12 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	f107 0208 	add.w	r2, r7, #8
 800781c:	4610      	mov	r0, r2
 800781e:	4798      	blx	r3
 8007820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3301      	adds	r3, #1
 8007826:	2202      	movs	r2, #2
 8007828:	701a      	strb	r2, [r3, #0]
      break;
 800782a:	e0f2      	b.n	8007a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	885b      	ldrh	r3, [r3, #2]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b05      	cmp	r3, #5
 8007834:	f200 80ac 	bhi.w	8007990 <USBD_GetDescriptor+0x204>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <USBD_GetDescriptor+0xb4>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007859 	.word	0x08007859
 8007844:	0800788d 	.word	0x0800788d
 8007848:	080078c1 	.word	0x080078c1
 800784c:	080078f5 	.word	0x080078f5
 8007850:	08007929 	.word	0x08007929
 8007854:	0800795d 	.word	0x0800795d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	7c12      	ldrb	r2, [r2, #16]
 8007870:	f107 0108 	add.w	r1, r7, #8
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
 8007878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787a:	e091      	b.n	80079a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 facb 	bl	8007e1a <USBD_CtlError>
            err++;
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	3301      	adds	r3, #1
 8007888:	72fb      	strb	r3, [r7, #11]
          break;
 800788a:	e089      	b.n	80079a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	7c12      	ldrb	r2, [r2, #16]
 80078a4:	f107 0108 	add.w	r1, r7, #8
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ae:	e077      	b.n	80079a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fab1 	bl	8007e1a <USBD_CtlError>
            err++;
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	3301      	adds	r3, #1
 80078bc:	72fb      	strb	r3, [r7, #11]
          break;
 80078be:	e06f      	b.n	80079a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	7c12      	ldrb	r2, [r2, #16]
 80078d8:	f107 0108 	add.w	r1, r7, #8
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
 80078e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e2:	e05d      	b.n	80079a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa97 	bl	8007e1a <USBD_CtlError>
            err++;
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	3301      	adds	r3, #1
 80078f0:	72fb      	strb	r3, [r7, #11]
          break;
 80078f2:	e055      	b.n	80079a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	7c12      	ldrb	r2, [r2, #16]
 800790c:	f107 0108 	add.w	r1, r7, #8
 8007910:	4610      	mov	r0, r2
 8007912:	4798      	blx	r3
 8007914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007916:	e043      	b.n	80079a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa7d 	bl	8007e1a <USBD_CtlError>
            err++;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	3301      	adds	r3, #1
 8007924:	72fb      	strb	r3, [r7, #11]
          break;
 8007926:	e03b      	b.n	80079a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	7c12      	ldrb	r2, [r2, #16]
 8007940:	f107 0108 	add.w	r1, r7, #8
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
 8007948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800794a:	e029      	b.n	80079a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fa63 	bl	8007e1a <USBD_CtlError>
            err++;
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	3301      	adds	r3, #1
 8007958:	72fb      	strb	r3, [r7, #11]
          break;
 800795a:	e021      	b.n	80079a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	7c12      	ldrb	r2, [r2, #16]
 8007974:	f107 0108 	add.w	r1, r7, #8
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800797e:	e00f      	b.n	80079a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa49 	bl	8007e1a <USBD_CtlError>
            err++;
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	3301      	adds	r3, #1
 800798c:	72fb      	strb	r3, [r7, #11]
          break;
 800798e:	e007      	b.n	80079a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa41 	bl	8007e1a <USBD_CtlError>
          err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800799e:	bf00      	nop
      }
      break;
 80079a0:	e037      	b.n	8007a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7c1b      	ldrb	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b2:	f107 0208 	add.w	r2, r7, #8
 80079b6:	4610      	mov	r0, r2
 80079b8:	4798      	blx	r3
 80079ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079bc:	e029      	b.n	8007a12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fa2a 	bl	8007e1a <USBD_CtlError>
        err++;
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	3301      	adds	r3, #1
 80079ca:	72fb      	strb	r3, [r7, #11]
      break;
 80079cc:	e021      	b.n	8007a12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7c1b      	ldrb	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	f107 0208 	add.w	r2, r7, #8
 80079e2:	4610      	mov	r0, r2
 80079e4:	4798      	blx	r3
 80079e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3301      	adds	r3, #1
 80079ec:	2207      	movs	r2, #7
 80079ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079f0:	e00f      	b.n	8007a12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa10 	bl	8007e1a <USBD_CtlError>
        err++;
 80079fa:	7afb      	ldrb	r3, [r7, #11]
 80079fc:	3301      	adds	r3, #1
 80079fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007a00:	e007      	b.n	8007a12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa08 	bl	8007e1a <USBD_CtlError>
      err++;
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a10:	bf00      	nop
  }

  if (err != 0U)
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11e      	bne.n	8007a56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	88db      	ldrh	r3, [r3, #6]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d016      	beq.n	8007a4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a20:	893b      	ldrh	r3, [r7, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00e      	beq.n	8007a44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	88da      	ldrh	r2, [r3, #6]
 8007a2a:	893b      	ldrh	r3, [r7, #8]
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	bf28      	it	cs
 8007a30:	4613      	movcs	r3, r2
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a36:	893b      	ldrh	r3, [r7, #8]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa5c 	bl	8007efa <USBD_CtlSendData>
 8007a42:	e009      	b.n	8007a58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9e7 	bl	8007e1a <USBD_CtlError>
 8007a4c:	e004      	b.n	8007a58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 faad 	bl	8007fae <USBD_CtlSendStatus>
 8007a54:	e000      	b.n	8007a58 <USBD_GetDescriptor+0x2cc>
    return;
 8007a56:	bf00      	nop
  }
}
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop

08007a60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	889b      	ldrh	r3, [r3, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d131      	bne.n	8007ad6 <USBD_SetAddress+0x76>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d12d      	bne.n	8007ad6 <USBD_SetAddress+0x76>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a80:	d829      	bhi.n	8007ad6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	885b      	ldrh	r3, [r3, #2]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d104      	bne.n	8007aa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f9bc 	bl	8007e1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa2:	e01d      	b.n	8007ae0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7bfa      	ldrb	r2, [r7, #15]
 8007aa8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f013 f960 	bl	801ad76 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa79 	bl	8007fae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	e009      	b.n	8007ae0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad4:	e004      	b.n	8007ae0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f99e 	bl	8007e1a <USBD_CtlError>
  }
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	4b4e      	ldr	r3, [pc, #312]	; (8007c38 <USBD_SetConfig+0x150>)
 8007afe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b00:	4b4d      	ldr	r3, [pc, #308]	; (8007c38 <USBD_SetConfig+0x150>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d905      	bls.n	8007b14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f985 	bl	8007e1a <USBD_CtlError>
    return USBD_FAIL;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e08c      	b.n	8007c2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d002      	beq.n	8007b26 <USBD_SetConfig+0x3e>
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d029      	beq.n	8007b78 <USBD_SetConfig+0x90>
 8007b24:	e075      	b.n	8007c12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b26:	4b44      	ldr	r3, [pc, #272]	; (8007c38 <USBD_SetConfig+0x150>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d020      	beq.n	8007b70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b2e:	4b42      	ldr	r3, [pc, #264]	; (8007c38 <USBD_SetConfig+0x150>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b38:	4b3f      	ldr	r3, [pc, #252]	; (8007c38 <USBD_SetConfig+0x150>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fe ffee 	bl	8006b20 <USBD_SetClassConfig>
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f962 	bl	8007e1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2202      	movs	r2, #2
 8007b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b5e:	e065      	b.n	8007c2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fa24 	bl	8007fae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2203      	movs	r2, #3
 8007b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b6e:	e05d      	b.n	8007c2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fa1c 	bl	8007fae <USBD_CtlSendStatus>
      break;
 8007b76:	e059      	b.n	8007c2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b78:	4b2f      	ldr	r3, [pc, #188]	; (8007c38 <USBD_SetConfig+0x150>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d112      	bne.n	8007ba6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b88:	4b2b      	ldr	r3, [pc, #172]	; (8007c38 <USBD_SetConfig+0x150>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b92:	4b29      	ldr	r3, [pc, #164]	; (8007c38 <USBD_SetConfig+0x150>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fe ffdd 	bl	8006b58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa05 	bl	8007fae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ba4:	e042      	b.n	8007c2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ba6:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <USBD_SetConfig+0x150>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d02a      	beq.n	8007c0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7fe ffcb 	bl	8006b58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bc2:	4b1d      	ldr	r3, [pc, #116]	; (8007c38 <USBD_SetConfig+0x150>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bcc:	4b1a      	ldr	r3, [pc, #104]	; (8007c38 <USBD_SetConfig+0x150>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fe ffa4 	bl	8006b20 <USBD_SetClassConfig>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f918 	bl	8007e1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fe ffb0 	bl	8006b58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c00:	e014      	b.n	8007c2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9d3 	bl	8007fae <USBD_CtlSendStatus>
      break;
 8007c08:	e010      	b.n	8007c2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f9cf 	bl	8007fae <USBD_CtlSendStatus>
      break;
 8007c10:	e00c      	b.n	8007c2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f900 	bl	8007e1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <USBD_SetConfig+0x150>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7fe ff99 	bl	8006b58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c26:	2303      	movs	r3, #3
 8007c28:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2a:	bf00      	nop
  }

  return ret;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20004e08 	.word	0x20004e08

08007c3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	88db      	ldrh	r3, [r3, #6]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d004      	beq.n	8007c58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f8e2 	bl	8007e1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c56:	e023      	b.n	8007ca0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	dc02      	bgt.n	8007c6a <USBD_GetConfig+0x2e>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dc03      	bgt.n	8007c70 <USBD_GetConfig+0x34>
 8007c68:	e015      	b.n	8007c96 <USBD_GetConfig+0x5a>
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d00b      	beq.n	8007c86 <USBD_GetConfig+0x4a>
 8007c6e:	e012      	b.n	8007c96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f93b 	bl	8007efa <USBD_CtlSendData>
        break;
 8007c84:	e00c      	b.n	8007ca0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f933 	bl	8007efa <USBD_CtlSendData>
        break;
 8007c94:	e004      	b.n	8007ca0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f8be 	bl	8007e1a <USBD_CtlError>
        break;
 8007c9e:	bf00      	nop
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d81e      	bhi.n	8007cfe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	88db      	ldrh	r3, [r3, #6]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d004      	beq.n	8007cd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f8a5 	bl	8007e1a <USBD_CtlError>
        break;
 8007cd0:	e01a      	b.n	8007d08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f043 0202 	orr.w	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f8ff 	bl	8007efa <USBD_CtlSendData>
      break;
 8007cfc:	e004      	b.n	8007d08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f88a 	bl	8007e1a <USBD_CtlError>
      break;
 8007d06:	bf00      	nop
  }
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	885b      	ldrh	r3, [r3, #2]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d107      	bne.n	8007d32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f93f 	bl	8007fae <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d30:	e013      	b.n	8007d5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	885b      	ldrh	r3, [r3, #2]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d10b      	bne.n	8007d52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	889b      	ldrh	r3, [r3, #4]
 8007d3e:	0a1b      	lsrs	r3, r3, #8
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f92f 	bl	8007fae <USBD_CtlSendStatus>
}
 8007d50:	e003      	b.n	8007d5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f860 	bl	8007e1a <USBD_CtlError>
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d80b      	bhi.n	8007d92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	885b      	ldrh	r3, [r3, #2]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d10c      	bne.n	8007d9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f90f 	bl	8007fae <USBD_CtlSendStatus>
      }
      break;
 8007d90:	e004      	b.n	8007d9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f840 	bl	8007e1a <USBD_CtlError>
      break;
 8007d9a:	e000      	b.n	8007d9e <USBD_ClrFeature+0x3c>
      break;
 8007d9c:	bf00      	nop
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	781a      	ldrb	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fa41 	bl	8007258 <SWAPBYTE>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	461a      	mov	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f7ff fa34 	bl	8007258 <SWAPBYTE>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3301      	adds	r3, #1
 8007e02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff fa27 	bl	8007258 <SWAPBYTE>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	80da      	strh	r2, [r3, #6]
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e24:	2180      	movs	r1, #128	; 0x80
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f012 ff3c 	bl	801aca4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f012 ff38 	bl	801aca4 <USBD_LL_StallEP>
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d036      	beq.n	8007ec0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e56:	6938      	ldr	r0, [r7, #16]
 8007e58:	f000 f836 	bl	8007ec8 <USBD_GetLen>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	3301      	adds	r3, #1
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	4413      	add	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	2203      	movs	r2, #3
 8007e84:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e8c:	e013      	b.n	8007eb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	4413      	add	r3, r2
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	7812      	ldrb	r2, [r2, #0]
 8007e98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	613b      	str	r3, [r7, #16]
    idx++;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	4413      	add	r3, r2
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]
    idx++;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e7      	bne.n	8007e8e <USBD_GetString+0x52>
 8007ebe:	e000      	b.n	8007ec2 <USBD_GetString+0x86>
    return;
 8007ec0:	bf00      	nop
  }
}
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ed8:	e005      	b.n	8007ee6 <USBD_GetLen+0x1e>
  {
    len++;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	3301      	adds	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f5      	bne.n	8007eda <USBD_GetLen+0x12>
  }

  return len;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr

08007efa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f012 ff47 	bl	801adb4 <USBD_LL_Transmit>

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	2100      	movs	r1, #0
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f012 ff36 	bl	801adb4 <USBD_LL_Transmit>

  return USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2203      	movs	r2, #3
 8007f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f012 ff3a 	bl	801adf6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f012 ff29 	bl	801adf6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2204      	movs	r2, #4
 8007fba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f012 fef5 	bl	801adb4 <USBD_LL_Transmit>

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2205      	movs	r2, #5
 8007fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f012 ff03 	bl	801adf6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <__NVIC_SetPriority>:
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800c:	2b00      	cmp	r3, #0
 800800e:	db0a      	blt.n	8008026 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	b2da      	uxtb	r2, r3
 8008014:	490c      	ldr	r1, [pc, #48]	; (8008048 <__NVIC_SetPriority+0x4c>)
 8008016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801a:	0112      	lsls	r2, r2, #4
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	440b      	add	r3, r1
 8008020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008024:	e00a      	b.n	800803c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	b2da      	uxtb	r2, r3
 800802a:	4908      	ldr	r1, [pc, #32]	; (800804c <__NVIC_SetPriority+0x50>)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	3b04      	subs	r3, #4
 8008034:	0112      	lsls	r2, r2, #4
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	440b      	add	r3, r1
 800803a:	761a      	strb	r2, [r3, #24]
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	e000e100 	.word	0xe000e100
 800804c:	e000ed00 	.word	0xe000ed00

08008050 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <SysTick_Handler+0x1c>)
 8008056:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008058:	f002 fc86 	bl	800a968 <xTaskGetSchedulerState>
 800805c:	4603      	mov	r3, r0
 800805e:	2b01      	cmp	r3, #1
 8008060:	d001      	beq.n	8008066 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008062:	f003 fb19 	bl	800b698 <xPortSysTickHandler>
  }
}
 8008066:	bf00      	nop
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	e000e010 	.word	0xe000e010

08008070 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008074:	2100      	movs	r1, #0
 8008076:	f06f 0004 	mvn.w	r0, #4
 800807a:	f7ff ffbf 	bl	8007ffc <__NVIC_SetPriority>
#endif
}
 800807e:	bf00      	nop
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800808a:	f3ef 8305 	mrs	r3, IPSR
 800808e:	603b      	str	r3, [r7, #0]
  return(result);
 8008090:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008096:	f06f 0305 	mvn.w	r3, #5
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	e00c      	b.n	80080b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <osKernelInitialize+0x40>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d105      	bne.n	80080b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80080a6:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <osKernelInitialize+0x40>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	607b      	str	r3, [r7, #4]
 80080b0:	e002      	b.n	80080b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080b8:	687b      	ldr	r3, [r7, #4]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr
 80080c4:	20004e0c 	.word	0x20004e0c

080080c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ce:	f3ef 8305 	mrs	r3, IPSR
 80080d2:	603b      	str	r3, [r7, #0]
  return(result);
 80080d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80080da:	f06f 0305 	mvn.w	r3, #5
 80080de:	607b      	str	r3, [r7, #4]
 80080e0:	e010      	b.n	8008104 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80080e2:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <osKernelStart+0x48>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d109      	bne.n	80080fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80080ea:	f7ff ffc1 	bl	8008070 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080ee:	4b08      	ldr	r3, [pc, #32]	; (8008110 <osKernelStart+0x48>)
 80080f0:	2202      	movs	r2, #2
 80080f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080f4:	f001 ffbe 	bl	800a074 <vTaskStartScheduler>
      stat = osOK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	607b      	str	r3, [r7, #4]
 80080fc:	e002      	b.n	8008104 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008104:	687b      	ldr	r3, [r7, #4]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20004e0c 	.word	0x20004e0c

08008114 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800811a:	f3ef 8305 	mrs	r3, IPSR
 800811e:	603b      	str	r3, [r7, #0]
  return(result);
 8008120:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008126:	f002 f8cf 	bl	800a2c8 <xTaskGetTickCountFromISR>
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	e002      	b.n	8008134 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800812e:	f002 f8bd 	bl	800a2ac <xTaskGetTickCount>
 8008132:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008134:	687b      	ldr	r3, [r7, #4]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800813e:	b580      	push	{r7, lr}
 8008140:	b08e      	sub	sp, #56	; 0x38
 8008142:	af04      	add	r7, sp, #16
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800814e:	f3ef 8305 	mrs	r3, IPSR
 8008152:	617b      	str	r3, [r7, #20]
  return(result);
 8008154:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008156:	2b00      	cmp	r3, #0
 8008158:	d17e      	bne.n	8008258 <osThreadNew+0x11a>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d07b      	beq.n	8008258 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008160:	2380      	movs	r3, #128	; 0x80
 8008162:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008164:	2318      	movs	r3, #24
 8008166:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008168:	2300      	movs	r3, #0
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800816c:	f04f 33ff 	mov.w	r3, #4294967295
 8008170:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d045      	beq.n	8008204 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <osThreadNew+0x48>
        name = attr->name;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d008      	beq.n	80081ac <osThreadNew+0x6e>
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	2b38      	cmp	r3, #56	; 0x38
 800819e:	d805      	bhi.n	80081ac <osThreadNew+0x6e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <osThreadNew+0x72>
        return (NULL);
 80081ac:	2300      	movs	r3, #0
 80081ae:	e054      	b.n	800825a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	089b      	lsrs	r3, r3, #2
 80081be:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00e      	beq.n	80081e6 <osThreadNew+0xa8>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2bbb      	cmp	r3, #187	; 0xbb
 80081ce:	d90a      	bls.n	80081e6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <osThreadNew+0xa8>
        mem = 1;
 80081e0:	2301      	movs	r3, #1
 80081e2:	61bb      	str	r3, [r7, #24]
 80081e4:	e010      	b.n	8008208 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10c      	bne.n	8008208 <osThreadNew+0xca>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d108      	bne.n	8008208 <osThreadNew+0xca>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <osThreadNew+0xca>
          mem = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	e001      	b.n	8008208 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d110      	bne.n	8008230 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008216:	9202      	str	r2, [sp, #8]
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f001 fd39 	bl	8009c9c <xTaskCreateStatic>
 800822a:	4603      	mov	r3, r0
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	e013      	b.n	8008258 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d110      	bne.n	8008258 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	b29a      	uxth	r2, r3
 800823a:	f107 0310 	add.w	r3, r7, #16
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f001 fd84 	bl	8009d56 <xTaskCreate>
 800824e:	4603      	mov	r3, r0
 8008250:	2b01      	cmp	r3, #1
 8008252:	d001      	beq.n	8008258 <osThreadNew+0x11a>
            hTask = NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008258:	693b      	ldr	r3, [r7, #16]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3728      	adds	r7, #40	; 0x28
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800826a:	f3ef 8305 	mrs	r3, IPSR
 800826e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <osDelay+0x1c>
    stat = osErrorISR;
 8008276:	f06f 0305 	mvn.w	r3, #5
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e007      	b.n	800828e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <osDelay+0x2c>
      vTaskDelay(ticks);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 febf 	bl	800a00c <vTaskDelay>
    }
  }

  return (stat);
 800828e:	68fb      	ldr	r3, [r7, #12]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a4:	f3ef 8305 	mrs	r3, IPSR
 80082a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80082aa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d174      	bne.n	800839a <osMutexNew+0x102>
    if (attr != NULL) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <osMutexNew+0x26>
      type = attr->attr_bits;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	61bb      	str	r3, [r7, #24]
 80082bc:	e001      	b.n	80082c2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <osMutexNew+0x3a>
      rmtx = 1U;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e001      	b.n	80082d6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d15c      	bne.n	800839a <osMutexNew+0x102>
      mem = -1;
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295
 80082e4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d015      	beq.n	8008318 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <osMutexNew+0x6a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b4f      	cmp	r3, #79	; 0x4f
 80082fa:	d902      	bls.n	8008302 <osMutexNew+0x6a>
          mem = 1;
 80082fc:	2301      	movs	r3, #1
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	e00c      	b.n	800831c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d108      	bne.n	800831c <osMutexNew+0x84>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d104      	bne.n	800831c <osMutexNew+0x84>
            mem = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	e001      	b.n	800831c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d112      	bne.n	8008348 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d007      	beq.n	8008338 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	4619      	mov	r1, r3
 800832e:	2004      	movs	r0, #4
 8008330:	f000 fd63 	bl	8008dfa <xQueueCreateMutexStatic>
 8008334:	61f8      	str	r0, [r7, #28]
 8008336:	e016      	b.n	8008366 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	4619      	mov	r1, r3
 800833e:	2001      	movs	r0, #1
 8008340:	f000 fd5b 	bl	8008dfa <xQueueCreateMutexStatic>
 8008344:	61f8      	str	r0, [r7, #28]
 8008346:	e00e      	b.n	8008366 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10b      	bne.n	8008366 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008354:	2004      	movs	r0, #4
 8008356:	f000 fd38 	bl	8008dca <xQueueCreateMutex>
 800835a:	61f8      	str	r0, [r7, #28]
 800835c:	e003      	b.n	8008366 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800835e:	2001      	movs	r0, #1
 8008360:	f000 fd33 	bl	8008dca <xQueueCreateMutex>
 8008364:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <osMutexNew+0xee>
        if (attr != NULL) {
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <osMutexNew+0xe2>
          name = attr->name;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e001      	b.n	800837e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800837e:	68f9      	ldr	r1, [r7, #12]
 8008380:	69f8      	ldr	r0, [r7, #28]
 8008382:	f001 fc05 	bl	8009b90 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d006      	beq.n	800839a <osMutexNew+0x102>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	f043 0301 	orr.w	r3, r3, #1
 8008398:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800839a:	69fb      	ldr	r3, [r7, #28]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f023 0301 	bic.w	r3, r3, #1
 80083b4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c2:	f3ef 8305 	mrs	r3, IPSR
 80083c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80083ce:	f06f 0305 	mvn.w	r3, #5
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e02c      	b.n	8008430 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d103      	bne.n	80083e4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80083dc:	f06f 0303 	mvn.w	r3, #3
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	e025      	b.n	8008430 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d011      	beq.n	800840e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6938      	ldr	r0, [r7, #16]
 80083ee:	f000 fd53 	bl	8008e98 <xQueueTakeMutexRecursive>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d01b      	beq.n	8008430 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80083fe:	f06f 0301 	mvn.w	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e014      	b.n	8008430 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008406:	f06f 0302 	mvn.w	r3, #2
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e010      	b.n	8008430 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6938      	ldr	r0, [r7, #16]
 8008412:	f001 f8e7 	bl	80095e4 <xQueueSemaphoreTake>
 8008416:	4603      	mov	r3, r0
 8008418:	2b01      	cmp	r3, #1
 800841a:	d009      	beq.n	8008430 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008422:	f06f 0301 	mvn.w	r3, #1
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	e002      	b.n	8008430 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800842a:	f06f 0302 	mvn.w	r3, #2
 800842e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008430:	697b      	ldr	r3, [r7, #20]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008456:	f3ef 8305 	mrs	r3, IPSR
 800845a:	60bb      	str	r3, [r7, #8]
  return(result);
 800845c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <osMutexRelease+0x30>
    stat = osErrorISR;
 8008462:	f06f 0305 	mvn.w	r3, #5
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	e01f      	b.n	80084aa <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d103      	bne.n	8008478 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008470:	f06f 0303 	mvn.w	r3, #3
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e018      	b.n	80084aa <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800847e:	6938      	ldr	r0, [r7, #16]
 8008480:	f000 fcd6 	bl	8008e30 <xQueueGiveMutexRecursive>
 8008484:	4603      	mov	r3, r0
 8008486:	2b01      	cmp	r3, #1
 8008488:	d00f      	beq.n	80084aa <osMutexRelease+0x70>
        stat = osErrorResource;
 800848a:	f06f 0302 	mvn.w	r3, #2
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e00b      	b.n	80084aa <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008492:	2300      	movs	r3, #0
 8008494:	2200      	movs	r2, #0
 8008496:	2100      	movs	r1, #0
 8008498:	6938      	ldr	r0, [r7, #16]
 800849a:	f000 fd9d 	bl	8008fd8 <xQueueGenericSend>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d002      	beq.n	80084aa <osMutexRelease+0x70>
        stat = osErrorResource;
 80084a4:	f06f 0302 	mvn.w	r3, #2
 80084a8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80084aa:	697b      	ldr	r3, [r7, #20]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	; 0x28
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c4:	f3ef 8305 	mrs	r3, IPSR
 80084c8:	613b      	str	r3, [r7, #16]
  return(result);
 80084ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d175      	bne.n	80085bc <osSemaphoreNew+0x108>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d072      	beq.n	80085bc <osSemaphoreNew+0x108>
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d86e      	bhi.n	80085bc <osSemaphoreNew+0x108>
    mem = -1;
 80084de:	f04f 33ff 	mov.w	r3, #4294967295
 80084e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d015      	beq.n	8008516 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d006      	beq.n	8008500 <osSemaphoreNew+0x4c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b4f      	cmp	r3, #79	; 0x4f
 80084f8:	d902      	bls.n	8008500 <osSemaphoreNew+0x4c>
        mem = 1;
 80084fa:	2301      	movs	r3, #1
 80084fc:	61bb      	str	r3, [r7, #24]
 80084fe:	e00c      	b.n	800851a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d108      	bne.n	800851a <osSemaphoreNew+0x66>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d104      	bne.n	800851a <osSemaphoreNew+0x66>
          mem = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
 8008514:	e001      	b.n	800851a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008520:	d04c      	beq.n	80085bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d128      	bne.n	800857a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d10a      	bne.n	8008544 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2203      	movs	r2, #3
 8008534:	9200      	str	r2, [sp, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	2001      	movs	r0, #1
 800853c:	f000 fb56 	bl	8008bec <xQueueGenericCreateStatic>
 8008540:	61f8      	str	r0, [r7, #28]
 8008542:	e005      	b.n	8008550 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008544:	2203      	movs	r2, #3
 8008546:	2100      	movs	r1, #0
 8008548:	2001      	movs	r0, #1
 800854a:	f000 fbc7 	bl	8008cdc <xQueueGenericCreate>
 800854e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d022      	beq.n	800859c <osSemaphoreNew+0xe8>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01f      	beq.n	800859c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800855c:	2300      	movs	r3, #0
 800855e:	2200      	movs	r2, #0
 8008560:	2100      	movs	r1, #0
 8008562:	69f8      	ldr	r0, [r7, #28]
 8008564:	f000 fd38 	bl	8008fd8 <xQueueGenericSend>
 8008568:	4603      	mov	r3, r0
 800856a:	2b01      	cmp	r3, #1
 800856c:	d016      	beq.n	800859c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800856e:	69f8      	ldr	r0, [r7, #28]
 8008570:	f001 f9c4 	bl	80098fc <vQueueDelete>
            hSemaphore = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	e010      	b.n	800859c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d108      	bne.n	8008592 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	461a      	mov	r2, r3
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fcbb 	bl	8008f04 <xQueueCreateCountingSemaphoreStatic>
 800858e:	61f8      	str	r0, [r7, #28]
 8008590:	e004      	b.n	800859c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fcec 	bl	8008f72 <xQueueCreateCountingSemaphore>
 800859a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e001      	b.n	80085b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80085b4:	6979      	ldr	r1, [r7, #20]
 80085b6:	69f8      	ldr	r0, [r7, #28]
 80085b8:	f001 faea 	bl	8009b90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80085bc:	69fb      	ldr	r3, [r7, #28]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d103      	bne.n	80085e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80085e0:	f06f 0303 	mvn.w	r3, #3
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	e039      	b.n	800865c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e8:	f3ef 8305 	mrs	r3, IPSR
 80085ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d022      	beq.n	800863a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80085fa:	f06f 0303 	mvn.w	r3, #3
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	e02c      	b.n	800865c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008602:	2300      	movs	r3, #0
 8008604:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008606:	f107 0308 	add.w	r3, r7, #8
 800860a:	461a      	mov	r2, r3
 800860c:	2100      	movs	r1, #0
 800860e:	6938      	ldr	r0, [r7, #16]
 8008610:	f001 f8f4 	bl	80097fc <xQueueReceiveFromISR>
 8008614:	4603      	mov	r3, r0
 8008616:	2b01      	cmp	r3, #1
 8008618:	d003      	beq.n	8008622 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800861a:	f06f 0302 	mvn.w	r3, #2
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	e01c      	b.n	800865c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d019      	beq.n	800865c <osSemaphoreAcquire+0x94>
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <osSemaphoreAcquire+0xa0>)
 800862a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	e010      	b.n	800865c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6938      	ldr	r0, [r7, #16]
 800863e:	f000 ffd1 	bl	80095e4 <xQueueSemaphoreTake>
 8008642:	4603      	mov	r3, r0
 8008644:	2b01      	cmp	r3, #1
 8008646:	d009      	beq.n	800865c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800864e:	f06f 0301 	mvn.w	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e002      	b.n	800865c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008656:	f06f 0302 	mvn.w	r3, #2
 800865a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800865c:	697b      	ldr	r3, [r7, #20]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008682:	f06f 0303 	mvn.w	r3, #3
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e02c      	b.n	80086e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800868a:	f3ef 8305 	mrs	r3, IPSR
 800868e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008690:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008692:	2b00      	cmp	r3, #0
 8008694:	d01a      	beq.n	80086cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	4619      	mov	r1, r3
 80086a0:	6938      	ldr	r0, [r7, #16]
 80086a2:	f000 fe32 	bl	800930a <xQueueGiveFromISR>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d003      	beq.n	80086b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80086ac:	f06f 0302 	mvn.w	r3, #2
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	e017      	b.n	80086e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d014      	beq.n	80086e4 <osSemaphoreRelease+0x78>
 80086ba:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <osSemaphoreRelease+0x84>)
 80086bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	e00b      	b.n	80086e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80086cc:	2300      	movs	r3, #0
 80086ce:	2200      	movs	r2, #0
 80086d0:	2100      	movs	r1, #0
 80086d2:	6938      	ldr	r0, [r7, #16]
 80086d4:	f000 fc80 	bl	8008fd8 <xQueueGenericSend>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d002      	beq.n	80086e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80086de:	f06f 0302 	mvn.w	r3, #2
 80086e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80086e4:	697b      	ldr	r3, [r7, #20]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08a      	sub	sp, #40	; 0x28
 80086f8:	af02      	add	r7, sp, #8
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008700:	2300      	movs	r3, #0
 8008702:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008704:	f3ef 8305 	mrs	r3, IPSR
 8008708:	613b      	str	r3, [r7, #16]
  return(result);
 800870a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800870c:	2b00      	cmp	r3, #0
 800870e:	d15f      	bne.n	80087d0 <osMessageQueueNew+0xdc>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d05c      	beq.n	80087d0 <osMessageQueueNew+0xdc>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d059      	beq.n	80087d0 <osMessageQueueNew+0xdc>
    mem = -1;
 800871c:	f04f 33ff 	mov.w	r3, #4294967295
 8008720:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d029      	beq.n	800877c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d012      	beq.n	8008756 <osMessageQueueNew+0x62>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	2b4f      	cmp	r3, #79	; 0x4f
 8008736:	d90e      	bls.n	8008756 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	429a      	cmp	r2, r3
 800874e:	d302      	bcc.n	8008756 <osMessageQueueNew+0x62>
        mem = 1;
 8008750:	2301      	movs	r3, #1
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	e014      	b.n	8008780 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d110      	bne.n	8008780 <osMessageQueueNew+0x8c>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10c      	bne.n	8008780 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800876a:	2b00      	cmp	r3, #0
 800876c:	d108      	bne.n	8008780 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d104      	bne.n	8008780 <osMessageQueueNew+0x8c>
          mem = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	e001      	b.n	8008780 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d10b      	bne.n	800879e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2100      	movs	r1, #0
 8008790:	9100      	str	r1, [sp, #0]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 fa29 	bl	8008bec <xQueueGenericCreateStatic>
 800879a:	61f8      	str	r0, [r7, #28]
 800879c:	e008      	b.n	80087b0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80087a4:	2200      	movs	r2, #0
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fa97 	bl	8008cdc <xQueueGenericCreate>
 80087ae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00c      	beq.n	80087d0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	e001      	b.n	80087c8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	69f8      	ldr	r0, [r7, #28]
 80087cc:	f001 f9e0 	bl	8009b90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80087d0:	69fb      	ldr	r3, [r7, #28]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f4:	f3ef 8305 	mrs	r3, IPSR
 80087f8:	617b      	str	r3, [r7, #20]
  return(result);
 80087fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d028      	beq.n	8008852 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <osMessageQueuePut+0x36>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <osMessageQueuePut+0x36>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008812:	f06f 0303 	mvn.w	r3, #3
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	e038      	b.n	800888c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800881a:	2300      	movs	r3, #0
 800881c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800881e:	f107 0210 	add.w	r2, r7, #16
 8008822:	2300      	movs	r3, #0
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	69b8      	ldr	r0, [r7, #24]
 8008828:	f000 fcd4 	bl	80091d4 <xQueueGenericSendFromISR>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d003      	beq.n	800883a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008832:	f06f 0302 	mvn.w	r3, #2
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	e028      	b.n	800888c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d025      	beq.n	800888c <osMessageQueuePut+0xb0>
 8008840:	4b15      	ldr	r3, [pc, #84]	; (8008898 <osMessageQueuePut+0xbc>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	e01c      	b.n	800888c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <osMessageQueuePut+0x82>
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800885e:	f06f 0303 	mvn.w	r3, #3
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	e012      	b.n	800888c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008866:	2300      	movs	r3, #0
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	69b8      	ldr	r0, [r7, #24]
 800886e:	f000 fbb3 	bl	8008fd8 <xQueueGenericSend>
 8008872:	4603      	mov	r3, r0
 8008874:	2b01      	cmp	r3, #1
 8008876:	d009      	beq.n	800888c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800887e:	f06f 0301 	mvn.w	r3, #1
 8008882:	61fb      	str	r3, [r7, #28]
 8008884:	e002      	b.n	800888c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008886:	f06f 0302 	mvn.w	r3, #2
 800888a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800888c:	69fb      	ldr	r3, [r7, #28]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b2:	f3ef 8305 	mrs	r3, IPSR
 80088b6:	617b      	str	r3, [r7, #20]
  return(result);
 80088b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d028      	beq.n	8008910 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <osMessageQueueGet+0x34>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <osMessageQueueGet+0x34>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80088d0:	f06f 0303 	mvn.w	r3, #3
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	e037      	b.n	8008948 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80088d8:	2300      	movs	r3, #0
 80088da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80088dc:	f107 0310 	add.w	r3, r7, #16
 80088e0:	461a      	mov	r2, r3
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	69b8      	ldr	r0, [r7, #24]
 80088e6:	f000 ff89 	bl	80097fc <xQueueReceiveFromISR>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d003      	beq.n	80088f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80088f0:	f06f 0302 	mvn.w	r3, #2
 80088f4:	61fb      	str	r3, [r7, #28]
 80088f6:	e027      	b.n	8008948 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d024      	beq.n	8008948 <osMessageQueueGet+0xac>
 80088fe:	4b15      	ldr	r3, [pc, #84]	; (8008954 <osMessageQueueGet+0xb8>)
 8008900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	e01b      	b.n	8008948 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <osMessageQueueGet+0x80>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800891c:	f06f 0303 	mvn.w	r3, #3
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	e011      	b.n	8008948 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	68b9      	ldr	r1, [r7, #8]
 8008928:	69b8      	ldr	r0, [r7, #24]
 800892a:	f000 fd7b 	bl	8009424 <xQueueReceive>
 800892e:	4603      	mov	r3, r0
 8008930:	2b01      	cmp	r3, #1
 8008932:	d009      	beq.n	8008948 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800893a:	f06f 0301 	mvn.w	r3, #1
 800893e:	61fb      	str	r3, [r7, #28]
 8008940:	e002      	b.n	8008948 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008942:	f06f 0302 	mvn.w	r3, #2
 8008946:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008948:	69fb      	ldr	r3, [r7, #28]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a06      	ldr	r2, [pc, #24]	; (8008980 <vApplicationGetIdleTaskMemory+0x28>)
 8008968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4a05      	ldr	r2, [pc, #20]	; (8008984 <vApplicationGetIdleTaskMemory+0x2c>)
 800896e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2280      	movs	r2, #128	; 0x80
 8008974:	601a      	str	r2, [r3, #0]
}
 8008976:	bf00      	nop
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	bc80      	pop	{r7}
 800897e:	4770      	bx	lr
 8008980:	20004e10 	.word	0x20004e10
 8008984:	20004ecc 	.word	0x20004ecc

08008988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4a07      	ldr	r2, [pc, #28]	; (80089b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	4a06      	ldr	r2, [pc, #24]	; (80089b8 <vApplicationGetTimerTaskMemory+0x30>)
 800899e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089a6:	601a      	str	r2, [r3, #0]
}
 80089a8:	bf00      	nop
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	200050cc 	.word	0x200050cc
 80089b8:	20005188 	.word	0x20005188

080089bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f103 0208 	add.w	r2, r3, #8
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295
 80089d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f103 0208 	add.w	r2, r3, #8
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f103 0208 	add.w	r2, r3, #8
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bc80      	pop	{r7}
 80089f8:	4770      	bx	lr

080089fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr

08008a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	601a      	str	r2, [r3, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bc80      	pop	{r7}
 8008a56:	4770      	bx	lr

08008a58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d103      	bne.n	8008a78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e00c      	b.n	8008a92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	e002      	b.n	8008a86 <vListInsert+0x2e>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d2f6      	bcs.n	8008a80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bc80      	pop	{r7}
 8008ac6:	4770      	bx	lr

08008ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6892      	ldr	r2, [r2, #8]
 8008ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	6852      	ldr	r2, [r2, #4]
 8008ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d103      	bne.n	8008afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	1e5a      	subs	r2, r3, #1
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr
	...

08008b1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b46:	f002 fd29 	bl	800b59c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b52:	68f9      	ldr	r1, [r7, #12]
 8008b54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b56:	fb01 f303 	mul.w	r3, r1, r3
 8008b5a:	441a      	add	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b76:	3b01      	subs	r3, #1
 8008b78:	68f9      	ldr	r1, [r7, #12]
 8008b7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	441a      	add	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	22ff      	movs	r2, #255	; 0xff
 8008b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	22ff      	movs	r2, #255	; 0xff
 8008b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d114      	bne.n	8008bc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01a      	beq.n	8008bda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3310      	adds	r3, #16
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fd0d 	bl	800a5c8 <xTaskRemoveFromEventList>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d012      	beq.n	8008bda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <xQueueGenericReset+0xcc>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	e009      	b.n	8008bda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3310      	adds	r3, #16
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fef6 	bl	80089bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3324      	adds	r3, #36	; 0x24
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff fef1 	bl	80089bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bda:	f002 fd0f 	bl	800b5fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bde:	2301      	movs	r3, #1
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08e      	sub	sp, #56	; 0x38
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <xQueueGenericCreateStatic+0x52>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <xQueueGenericCreateStatic+0x56>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericCreateStatic+0x58>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	623b      	str	r3, [r7, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d102      	bne.n	8008c6a <xQueueGenericCreateStatic+0x7e>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <xQueueGenericCreateStatic+0x82>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <xQueueGenericCreateStatic+0x84>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	61fb      	str	r3, [r7, #28]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c8a:	2350      	movs	r3, #80	; 0x50
 8008c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b50      	cmp	r3, #80	; 0x50
 8008c92:	d00a      	beq.n	8008caa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	61bb      	str	r3, [r7, #24]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008caa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f83f 	bl	8008d50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3730      	adds	r7, #48	; 0x30
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08a      	sub	sp, #40	; 0x28
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	613b      	str	r3, [r7, #16]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	fb02 f303 	mul.w	r3, r2, r3
 8008d0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	3350      	adds	r3, #80	; 0x50
 8008d14:	4618      	mov	r0, r3
 8008d16:	f002 fd41 	bl	800b79c <pvPortMalloc>
 8008d1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d011      	beq.n	8008d46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	3350      	adds	r3, #80	; 0x50
 8008d2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d34:	79fa      	ldrb	r2, [r7, #7]
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f805 	bl	8008d50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d46:	69bb      	ldr	r3, [r7, #24]
	}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e002      	b.n	8008d72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d7e:	2101      	movs	r1, #1
 8008d80:	69b8      	ldr	r0, [r7, #24]
 8008d82:	f7ff fecb 	bl	8008b1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d8e:	bf00      	nop
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00e      	beq.n	8008dc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008db6:	2300      	movs	r3, #0
 8008db8:	2200      	movs	r2, #0
 8008dba:	2100      	movs	r1, #0
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f90b 	bl	8008fd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008dc2:	bf00      	nop
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	617b      	str	r3, [r7, #20]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	461a      	mov	r2, r3
 8008de0:	6939      	ldr	r1, [r7, #16]
 8008de2:	6978      	ldr	r0, [r7, #20]
 8008de4:	f7ff ff7a 	bl	8008cdc <xQueueGenericCreate>
 8008de8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7ff ffd3 	bl	8008d96 <prvInitialiseMutex>

		return xNewQueue;
 8008df0:	68fb      	ldr	r3, [r7, #12]
	}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b088      	sub	sp, #32
 8008dfe:	af02      	add	r7, sp, #8
 8008e00:	4603      	mov	r3, r0
 8008e02:	6039      	str	r1, [r7, #0]
 8008e04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2200      	movs	r2, #0
 8008e16:	6939      	ldr	r1, [r7, #16]
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f7ff fee7 	bl	8008bec <xQueueGenericCreateStatic>
 8008e1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff ffb8 	bl	8008d96 <prvInitialiseMutex>

		return xNewQueue;
 8008e26:	68fb      	ldr	r3, [r7, #12]
	}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008e30:	b590      	push	{r4, r7, lr}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	60fb      	str	r3, [r7, #12]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	689c      	ldr	r4, [r3, #8]
 8008e5c:	f001 fd76 	bl	800a94c <xTaskGetCurrentTaskHandle>
 8008e60:	4603      	mov	r3, r0
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d111      	bne.n	8008e8a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	1e5a      	subs	r2, r3, #1
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d105      	bne.n	8008e84 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6938      	ldr	r0, [r7, #16]
 8008e80:	f000 f8aa 	bl	8008fd8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008e84:	2301      	movs	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e001      	b.n	8008e8e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008e8e:	697b      	ldr	r3, [r7, #20]
	}
 8008e90:	4618      	mov	r0, r3
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd90      	pop	{r4, r7, pc}

08008e98 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008e98:	b590      	push	{r4, r7, lr}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	60fb      	str	r3, [r7, #12]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	689c      	ldr	r4, [r3, #8]
 8008ec6:	f001 fd41 	bl	800a94c <xTaskGetCurrentTaskHandle>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d107      	bne.n	8008ee0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008eda:	2301      	movs	r3, #1
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	e00c      	b.n	8008efa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6938      	ldr	r0, [r7, #16]
 8008ee4:	f000 fb7e 	bl	80095e4 <xQueueSemaphoreTake>
 8008ee8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008efa:	697b      	ldr	r3, [r7, #20]
	}
 8008efc:	4618      	mov	r0, r3
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd90      	pop	{r4, r7, pc}

08008f04 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	; 0x28
 8008f08:	af02      	add	r7, sp, #8
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10a      	bne.n	8008f2c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	61bb      	str	r3, [r7, #24]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d90a      	bls.n	8008f4a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	617b      	str	r3, [r7, #20]
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	2100      	movs	r1, #0
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fe49 	bl	8008bec <xQueueGenericCreateStatic>
 8008f5a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f68:	69fb      	ldr	r3, [r7, #28]
	}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	613b      	str	r3, [r7, #16]
}
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d90a      	bls.n	8008fb6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	60fb      	str	r3, [r7, #12]
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff fe8e 	bl	8008cdc <xQueueGenericCreate>
 8008fc0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008fce:	697b      	ldr	r3, [r7, #20]
	}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08e      	sub	sp, #56	; 0x38
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10a      	bne.n	800900a <xQueueGenericSend+0x32>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <xQueueGenericSend+0x40>
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <xQueueGenericSend+0x44>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <xQueueGenericSend+0x46>
 800901c:	2300      	movs	r3, #0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <xQueueGenericSend+0x60>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b02      	cmp	r3, #2
 800903c:	d103      	bne.n	8009046 <xQueueGenericSend+0x6e>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	2b01      	cmp	r3, #1
 8009044:	d101      	bne.n	800904a <xQueueGenericSend+0x72>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <xQueueGenericSend+0x74>
 800904a:	2300      	movs	r3, #0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <xQueueGenericSend+0x8e>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	623b      	str	r3, [r7, #32]
}
 8009062:	bf00      	nop
 8009064:	e7fe      	b.n	8009064 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009066:	f001 fc7f 	bl	800a968 <xTaskGetSchedulerState>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <xQueueGenericSend+0x9e>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <xQueueGenericSend+0xa2>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <xQueueGenericSend+0xa4>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10a      	bne.n	8009096 <xQueueGenericSend+0xbe>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	61fb      	str	r3, [r7, #28]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009096:	f002 fa81 	bl	800b59c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d302      	bcc.n	80090ac <xQueueGenericSend+0xd4>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d129      	bne.n	8009100 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b2:	f000 fc5d 	bl	8009970 <prvCopyDataToQueue>
 80090b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d010      	beq.n	80090e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	3324      	adds	r3, #36	; 0x24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 fa7f 	bl	800a5c8 <xTaskRemoveFromEventList>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d013      	beq.n	80090f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090d0:	4b3f      	ldr	r3, [pc, #252]	; (80091d0 <xQueueGenericSend+0x1f8>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	e00a      	b.n	80090f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090e8:	4b39      	ldr	r3, [pc, #228]	; (80091d0 <xQueueGenericSend+0x1f8>)
 80090ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090f8:	f002 fa80 	bl	800b5fc <vPortExitCritical>
				return pdPASS;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e063      	b.n	80091c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d103      	bne.n	800910e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009106:	f002 fa79 	bl	800b5fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800910a:	2300      	movs	r3, #0
 800910c:	e05c      	b.n	80091c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009114:	f107 0314 	add.w	r3, r7, #20
 8009118:	4618      	mov	r0, r3
 800911a:	f001 fab9 	bl	800a690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800911e:	2301      	movs	r3, #1
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009122:	f002 fa6b 	bl	800b5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009126:	f001 f815 	bl	800a154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800912a:	f002 fa37 	bl	800b59c <vPortEnterCritical>
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009134:	b25b      	sxtb	r3, r3
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d103      	bne.n	8009144 <xQueueGenericSend+0x16c>
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914a:	b25b      	sxtb	r3, r3
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	d103      	bne.n	800915a <xQueueGenericSend+0x182>
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800915a:	f002 fa4f 	bl	800b5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800915e:	1d3a      	adds	r2, r7, #4
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f001 faa8 	bl	800a6bc <xTaskCheckForTimeOut>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d124      	bne.n	80091bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009174:	f000 fcf4 	bl	8009b60 <prvIsQueueFull>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d018      	beq.n	80091b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	3310      	adds	r3, #16
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f001 f9ce 	bl	800a528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800918c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800918e:	f000 fc7f 	bl	8009a90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009192:	f000 ffed 	bl	800a170 <xTaskResumeAll>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	f47f af7c 	bne.w	8009096 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <xQueueGenericSend+0x1f8>)
 80091a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	e772      	b.n	8009096 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b2:	f000 fc6d 	bl	8009a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091b6:	f000 ffdb 	bl	800a170 <xTaskResumeAll>
 80091ba:	e76c      	b.n	8009096 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091be:	f000 fc67 	bl	8009a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091c2:	f000 ffd5 	bl	800a170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3738      	adds	r7, #56	; 0x38
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b090      	sub	sp, #64	; 0x40
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d103      	bne.n	8009210 <xQueueGenericSendFromISR+0x3c>
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <xQueueGenericSendFromISR+0x40>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <xQueueGenericSendFromISR+0x42>
 8009214:	2300      	movs	r3, #0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10a      	bne.n	8009230 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800922c:	bf00      	nop
 800922e:	e7fe      	b.n	800922e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d103      	bne.n	800923e <xQueueGenericSendFromISR+0x6a>
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <xQueueGenericSendFromISR+0x6e>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <xQueueGenericSendFromISR+0x70>
 8009242:	2300      	movs	r3, #0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	623b      	str	r3, [r7, #32]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800925e:	f002 fa5f 	bl	800b720 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009262:	f3ef 8211 	mrs	r2, BASEPRI
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	61fa      	str	r2, [r7, #28]
 8009278:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800927a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800927c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009286:	429a      	cmp	r2, r3
 8009288:	d302      	bcc.n	8009290 <xQueueGenericSendFromISR+0xbc>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d12f      	bne.n	80092f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	68b9      	ldr	r1, [r7, #8]
 80092a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092a6:	f000 fb63 	bl	8009970 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d112      	bne.n	80092da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d016      	beq.n	80092ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	3324      	adds	r3, #36	; 0x24
 80092c0:	4618      	mov	r0, r3
 80092c2:	f001 f981 	bl	800a5c8 <xTaskRemoveFromEventList>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00e      	beq.n	80092ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	e007      	b.n	80092ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092de:	3301      	adds	r3, #1
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	b25a      	sxtb	r2, r3
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092ea:	2301      	movs	r3, #1
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092ee:	e001      	b.n	80092f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092f0:	2300      	movs	r3, #0
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009302:	4618      	mov	r0, r3
 8009304:	3740      	adds	r7, #64	; 0x40
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b08e      	sub	sp, #56	; 0x38
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	623b      	str	r3, [r7, #32]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <xQueueGiveFromISR+0x48>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61fb      	str	r3, [r7, #28]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d103      	bne.n	8009362 <xQueueGiveFromISR+0x58>
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <xQueueGiveFromISR+0x5c>
 8009362:	2301      	movs	r3, #1
 8009364:	e000      	b.n	8009368 <xQueueGiveFromISR+0x5e>
 8009366:	2300      	movs	r3, #0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xQueueGiveFromISR+0x78>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	61bb      	str	r3, [r7, #24]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009382:	f002 f9cd 	bl	800b720 <vPortValidateInterruptPriority>
	__asm volatile
 8009386:	f3ef 8211 	mrs	r2, BASEPRI
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	617a      	str	r2, [r7, #20]
 800939c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800939e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d22b      	bcs.n	800940a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093cc:	d112      	bne.n	80093f4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d016      	beq.n	8009404 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	3324      	adds	r3, #36	; 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 f8f4 	bl	800a5c8 <xTaskRemoveFromEventList>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00e      	beq.n	8009404 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2201      	movs	r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	e007      	b.n	8009404 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093f8:	3301      	adds	r3, #1
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	b25a      	sxtb	r2, r3
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009404:	2301      	movs	r3, #1
 8009406:	637b      	str	r3, [r7, #52]	; 0x34
 8009408:	e001      	b.n	800940e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800940a:	2300      	movs	r3, #0
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f383 8811 	msr	BASEPRI, r3
}
 8009418:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800941a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800941c:	4618      	mov	r0, r3
 800941e:	3738      	adds	r7, #56	; 0x38
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08c      	sub	sp, #48	; 0x30
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009430:	2300      	movs	r3, #0
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <xQueueReceive+0x30>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	623b      	str	r3, [r7, #32]
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d103      	bne.n	8009462 <xQueueReceive+0x3e>
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <xQueueReceive+0x42>
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <xQueueReceive+0x44>
 8009466:	2300      	movs	r3, #0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <xQueueReceive+0x5e>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	61fb      	str	r3, [r7, #28]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009482:	f001 fa71 	bl	800a968 <xTaskGetSchedulerState>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <xQueueReceive+0x6e>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <xQueueReceive+0x72>
 8009492:	2301      	movs	r3, #1
 8009494:	e000      	b.n	8009498 <xQueueReceive+0x74>
 8009496:	2300      	movs	r3, #0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10a      	bne.n	80094b2 <xQueueReceive+0x8e>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	61bb      	str	r3, [r7, #24]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094b2:	f002 f873 	bl	800b59c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d01f      	beq.n	8009502 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c6:	f000 fabd 	bl	8009a44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	1e5a      	subs	r2, r3, #1
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00f      	beq.n	80094fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	3310      	adds	r3, #16
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 f872 	bl	800a5c8 <xTaskRemoveFromEventList>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d007      	beq.n	80094fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094ea:	4b3d      	ldr	r3, [pc, #244]	; (80095e0 <xQueueReceive+0x1bc>)
 80094ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094fa:	f002 f87f 	bl	800b5fc <vPortExitCritical>
				return pdPASS;
 80094fe:	2301      	movs	r3, #1
 8009500:	e069      	b.n	80095d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d103      	bne.n	8009510 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009508:	f002 f878 	bl	800b5fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800950c:	2300      	movs	r3, #0
 800950e:	e062      	b.n	80095d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009516:	f107 0310 	add.w	r3, r7, #16
 800951a:	4618      	mov	r0, r3
 800951c:	f001 f8b8 	bl	800a690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009520:	2301      	movs	r3, #1
 8009522:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009524:	f002 f86a 	bl	800b5fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009528:	f000 fe14 	bl	800a154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800952c:	f002 f836 	bl	800b59c <vPortEnterCritical>
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009536:	b25b      	sxtb	r3, r3
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953c:	d103      	bne.n	8009546 <xQueueReceive+0x122>
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800954c:	b25b      	sxtb	r3, r3
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d103      	bne.n	800955c <xQueueReceive+0x138>
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800955c:	f002 f84e 	bl	800b5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009560:	1d3a      	adds	r2, r7, #4
 8009562:	f107 0310 	add.w	r3, r7, #16
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f001 f8a7 	bl	800a6bc <xTaskCheckForTimeOut>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d123      	bne.n	80095bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009576:	f000 fadd 	bl	8009b34 <prvIsQueueEmpty>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d017      	beq.n	80095b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	3324      	adds	r3, #36	; 0x24
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	4611      	mov	r1, r2
 8009588:	4618      	mov	r0, r3
 800958a:	f000 ffcd 	bl	800a528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800958e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009590:	f000 fa7e 	bl	8009a90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009594:	f000 fdec 	bl	800a170 <xTaskResumeAll>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d189      	bne.n	80094b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800959e:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <xQueueReceive+0x1bc>)
 80095a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	e780      	b.n	80094b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80095b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b2:	f000 fa6d 	bl	8009a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095b6:	f000 fddb 	bl	800a170 <xTaskResumeAll>
 80095ba:	e77a      	b.n	80094b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80095bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095be:	f000 fa67 	bl	8009a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095c2:	f000 fdd5 	bl	800a170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c8:	f000 fab4 	bl	8009b34 <prvIsQueueEmpty>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f43f af6f 	beq.w	80094b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80095d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3730      	adds	r7, #48	; 0x30
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	e000ed04 	.word	0xe000ed04

080095e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08e      	sub	sp, #56	; 0x38
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	623b      	str	r3, [r7, #32]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	61fb      	str	r3, [r7, #28]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009634:	f001 f998 	bl	800a968 <xTaskGetSchedulerState>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <xQueueSemaphoreTake+0x60>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <xQueueSemaphoreTake+0x64>
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <xQueueSemaphoreTake+0x66>
 8009648:	2300      	movs	r3, #0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	61bb      	str	r3, [r7, #24]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009664:	f001 ff9a 	bl	800b59c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	2b00      	cmp	r3, #0
 8009672:	d024      	beq.n	80096be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	1e5a      	subs	r2, r3, #1
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d104      	bne.n	800968e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009684:	f001 fae6 	bl	800ac54 <pvTaskIncrementMutexHeldCount>
 8009688:	4602      	mov	r2, r0
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00f      	beq.n	80096b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	3310      	adds	r3, #16
 800969a:	4618      	mov	r0, r3
 800969c:	f000 ff94 	bl	800a5c8 <xTaskRemoveFromEventList>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096a6:	4b54      	ldr	r3, [pc, #336]	; (80097f8 <xQueueSemaphoreTake+0x214>)
 80096a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096b6:	f001 ffa1 	bl	800b5fc <vPortExitCritical>
				return pdPASS;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e097      	b.n	80097ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d111      	bne.n	80096e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00a      	beq.n	80096e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	617b      	str	r3, [r7, #20]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80096e0:	f001 ff8c 	bl	800b5fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096e4:	2300      	movs	r3, #0
 80096e6:	e082      	b.n	80097ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096ee:	f107 030c 	add.w	r3, r7, #12
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 ffcc 	bl	800a690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096f8:	2301      	movs	r3, #1
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096fc:	f001 ff7e 	bl	800b5fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009700:	f000 fd28 	bl	800a154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009704:	f001 ff4a 	bl	800b59c <vPortEnterCritical>
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800970e:	b25b      	sxtb	r3, r3
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009714:	d103      	bne.n	800971e <xQueueSemaphoreTake+0x13a>
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009724:	b25b      	sxtb	r3, r3
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972a:	d103      	bne.n	8009734 <xQueueSemaphoreTake+0x150>
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009734:	f001 ff62 	bl	800b5fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009738:	463a      	mov	r2, r7
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	4611      	mov	r1, r2
 8009740:	4618      	mov	r0, r3
 8009742:	f000 ffbb 	bl	800a6bc <xTaskCheckForTimeOut>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d132      	bne.n	80097b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800974c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800974e:	f000 f9f1 	bl	8009b34 <prvIsQueueEmpty>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d026      	beq.n	80097a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009760:	f001 ff1c 	bl	800b59c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	4618      	mov	r0, r3
 800976a:	f001 f91b 	bl	800a9a4 <xTaskPriorityInherit>
 800976e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009770:	f001 ff44 	bl	800b5fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	3324      	adds	r3, #36	; 0x24
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f000 fed3 	bl	800a528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009784:	f000 f984 	bl	8009a90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009788:	f000 fcf2 	bl	800a170 <xTaskResumeAll>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	f47f af68 	bne.w	8009664 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009794:	4b18      	ldr	r3, [pc, #96]	; (80097f8 <xQueueSemaphoreTake+0x214>)
 8009796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	e75e      	b.n	8009664 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80097a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097a8:	f000 f972 	bl	8009a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097ac:	f000 fce0 	bl	800a170 <xTaskResumeAll>
 80097b0:	e758      	b.n	8009664 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80097b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097b4:	f000 f96c 	bl	8009a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097b8:	f000 fcda 	bl	800a170 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097be:	f000 f9b9 	bl	8009b34 <prvIsQueueEmpty>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f43f af4d 	beq.w	8009664 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00d      	beq.n	80097ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80097d0:	f001 fee4 	bl	800b59c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80097d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097d6:	f000 f8b4 	bl	8009942 <prvGetDisinheritPriorityAfterTimeout>
 80097da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80097dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 f9b4 	bl	800ab50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80097e8:	f001 ff08 	bl	800b5fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3738      	adds	r7, #56	; 0x38
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08e      	sub	sp, #56	; 0x38
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	623b      	str	r3, [r7, #32]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d103      	bne.n	8009836 <xQueueReceiveFromISR+0x3a>
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <xQueueReceiveFromISR+0x3e>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <xQueueReceiveFromISR+0x40>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	61fb      	str	r3, [r7, #28]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009856:	f001 ff63 	bl	800b720 <vPortValidateInterruptPriority>
	__asm volatile
 800985a:	f3ef 8211 	mrs	r2, BASEPRI
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	61ba      	str	r2, [r7, #24]
 8009870:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009872:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009874:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	2b00      	cmp	r3, #0
 8009880:	d02f      	beq.n	80098e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009890:	f000 f8d8 	bl	8009a44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	1e5a      	subs	r2, r3, #1
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800989c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d112      	bne.n	80098cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d016      	beq.n	80098dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	3310      	adds	r3, #16
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fe88 	bl	800a5c8 <xTaskRemoveFromEventList>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00e      	beq.n	80098dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e007      	b.n	80098dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80098cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d0:	3301      	adds	r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	b25a      	sxtb	r2, r3
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80098dc:	2301      	movs	r3, #1
 80098de:	637b      	str	r3, [r7, #52]	; 0x34
 80098e0:	e001      	b.n	80098e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f383 8811 	msr	BASEPRI, r3
}
 80098f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3738      	adds	r7, #56	; 0x38
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <vQueueDelete+0x28>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	60bb      	str	r3, [r7, #8]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f95b 	bl	8009be0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f001 fffd 	bl	800b934 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800993a:	bf00      	nop
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	e001      	b.n	8009964 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009964:	68fb      	ldr	r3, [r7, #12]
	}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr

08009970 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800997c:	2300      	movs	r3, #0
 800997e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009984:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10d      	bne.n	80099aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d14d      	bne.n	8009a32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	4618      	mov	r0, r3
 800999c:	f001 f86a 	bl	800aa74 <xTaskPriorityDisinherit>
 80099a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	609a      	str	r2, [r3, #8]
 80099a8:	e043      	b.n	8009a32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d119      	bne.n	80099e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6858      	ldr	r0, [r3, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	461a      	mov	r2, r3
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	f011 fcea 	bl	801b394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c8:	441a      	add	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d32b      	bcc.n	8009a32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	605a      	str	r2, [r3, #4]
 80099e2:	e026      	b.n	8009a32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68d8      	ldr	r0, [r3, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	461a      	mov	r2, r3
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	f011 fcd0 	bl	801b394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	425b      	negs	r3, r3
 80099fe:	441a      	add	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d207      	bcs.n	8009a20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a18:	425b      	negs	r3, r3
 8009a1a:	441a      	add	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d105      	bne.n	8009a32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a3a:	697b      	ldr	r3, [r7, #20]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d018      	beq.n	8009a88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68da      	ldr	r2, [r3, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5e:	441a      	add	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d303      	bcc.n	8009a78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68d9      	ldr	r1, [r3, #12]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a80:	461a      	mov	r2, r3
 8009a82:	6838      	ldr	r0, [r7, #0]
 8009a84:	f011 fc86 	bl	801b394 <memcpy>
	}
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a98:	f001 fd80 	bl	800b59c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aa4:	e011      	b.n	8009aca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d012      	beq.n	8009ad4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3324      	adds	r3, #36	; 0x24
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 fd88 	bl	800a5c8 <xTaskRemoveFromEventList>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009abe:	f000 fe5f 	bl	800a780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	dce9      	bgt.n	8009aa6 <prvUnlockQueue+0x16>
 8009ad2:	e000      	b.n	8009ad6 <prvUnlockQueue+0x46>
					break;
 8009ad4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	22ff      	movs	r2, #255	; 0xff
 8009ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ade:	f001 fd8d 	bl	800b5fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ae2:	f001 fd5b 	bl	800b59c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009aee:	e011      	b.n	8009b14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d012      	beq.n	8009b1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3310      	adds	r3, #16
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fd63 	bl	800a5c8 <xTaskRemoveFromEventList>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b08:	f000 fe3a 	bl	800a780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dce9      	bgt.n	8009af0 <prvUnlockQueue+0x60>
 8009b1c:	e000      	b.n	8009b20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	22ff      	movs	r2, #255	; 0xff
 8009b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b28:	f001 fd68 	bl	800b5fc <vPortExitCritical>
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b3c:	f001 fd2e 	bl	800b59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d102      	bne.n	8009b4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	e001      	b.n	8009b52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b52:	f001 fd53 	bl	800b5fc <vPortExitCritical>

	return xReturn;
 8009b56:	68fb      	ldr	r3, [r7, #12]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b68:	f001 fd18 	bl	800b59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d102      	bne.n	8009b7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	e001      	b.n	8009b82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b82:	f001 fd3b 	bl	800b5fc <vPortExitCritical>

	return xReturn;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60fb      	str	r3, [r7, #12]
 8009b9e:	e014      	b.n	8009bca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ba0:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <vQueueAddToRegistry+0x4c>)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10b      	bne.n	8009bc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bac:	490b      	ldr	r1, [pc, #44]	; (8009bdc <vQueueAddToRegistry+0x4c>)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bb6:	4a09      	ldr	r2, [pc, #36]	; (8009bdc <vQueueAddToRegistry+0x4c>)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	00db      	lsls	r3, r3, #3
 8009bbc:	4413      	add	r3, r2
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bc2:	e006      	b.n	8009bd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b07      	cmp	r3, #7
 8009bce:	d9e7      	bls.n	8009ba0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bc80      	pop	{r7}
 8009bda:	4770      	bx	lr
 8009bdc:	20005588 	.word	0x20005588

08009be0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e016      	b.n	8009c1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009bee:	4a10      	ldr	r2, [pc, #64]	; (8009c30 <vQueueUnregisterQueue+0x50>)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	4413      	add	r3, r2
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d10b      	bne.n	8009c16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009bfe:	4a0c      	ldr	r2, [pc, #48]	; (8009c30 <vQueueUnregisterQueue+0x50>)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2100      	movs	r1, #0
 8009c04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009c08:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <vQueueUnregisterQueue+0x50>)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	4413      	add	r3, r2
 8009c10:	2200      	movs	r2, #0
 8009c12:	605a      	str	r2, [r3, #4]
				break;
 8009c14:	e006      	b.n	8009c24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b07      	cmp	r3, #7
 8009c20:	d9e5      	bls.n	8009bee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bc80      	pop	{r7}
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	20005588 	.word	0x20005588

08009c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c44:	f001 fcaa 	bl	800b59c <vPortEnterCritical>
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c4e:	b25b      	sxtb	r3, r3
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c54:	d103      	bne.n	8009c5e <vQueueWaitForMessageRestricted+0x2a>
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d103      	bne.n	8009c74 <vQueueWaitForMessageRestricted+0x40>
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c74:	f001 fcc2 	bl	800b5fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d106      	bne.n	8009c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	3324      	adds	r3, #36	; 0x24
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fc71 	bl	800a570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c8e:	6978      	ldr	r0, [r7, #20]
 8009c90:	f7ff fefe 	bl	8009a90 <prvUnlockQueue>
	}
 8009c94:	bf00      	nop
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08e      	sub	sp, #56	; 0x38
 8009ca0:	af04      	add	r7, sp, #16
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	623b      	str	r3, [r7, #32]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	61fb      	str	r3, [r7, #28]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ce2:	23bc      	movs	r3, #188	; 0xbc
 8009ce4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2bbc      	cmp	r3, #188	; 0xbc
 8009cea:	d00a      	beq.n	8009d02 <xTaskCreateStatic+0x66>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	61bb      	str	r3, [r7, #24]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d01e      	beq.n	8009d48 <xTaskCreateStatic+0xac>
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d01b      	beq.n	8009d48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d22:	2300      	movs	r3, #0
 8009d24:	9303      	str	r3, [sp, #12]
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	9302      	str	r3, [sp, #8]
 8009d2a:	f107 0314 	add.w	r3, r7, #20
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 f850 	bl	8009de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d42:	f000 f8f3 	bl	8009f2c <prvAddNewTaskToReadyList>
 8009d46:	e001      	b.n	8009d4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d4c:	697b      	ldr	r3, [r7, #20]
	}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3728      	adds	r7, #40	; 0x28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b08c      	sub	sp, #48	; 0x30
 8009d5a:	af04      	add	r7, sp, #16
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	603b      	str	r3, [r7, #0]
 8009d62:	4613      	mov	r3, r2
 8009d64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fd16 	bl	800b79c <pvPortMalloc>
 8009d70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00e      	beq.n	8009d96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d78:	20bc      	movs	r0, #188	; 0xbc
 8009d7a:	f001 fd0f 	bl	800b79c <pvPortMalloc>
 8009d7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8009d8c:	e005      	b.n	8009d9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d8e:	6978      	ldr	r0, [r7, #20]
 8009d90:	f001 fdd0 	bl	800b934 <vPortFree>
 8009d94:	e001      	b.n	8009d9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d017      	beq.n	8009dd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009da8:	88fa      	ldrh	r2, [r7, #6]
 8009daa:	2300      	movs	r3, #0
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	9302      	str	r3, [sp, #8]
 8009db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db4:	9301      	str	r3, [sp, #4]
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 f80e 	bl	8009de0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dc4:	69f8      	ldr	r0, [r7, #28]
 8009dc6:	f000 f8b1 	bl	8009f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	61bb      	str	r3, [r7, #24]
 8009dce:	e002      	b.n	8009dd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
	}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3720      	adds	r7, #32
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	461a      	mov	r2, r3
 8009df8:	21a5      	movs	r1, #165	; 0xa5
 8009dfa:	f011 fad9 	bl	801b3b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f023 0307 	bic.w	r3, r3, #7
 8009e16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	617b      	str	r3, [r7, #20]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01f      	beq.n	8009e7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e012      	b.n	8009e6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	7819      	ldrb	r1, [r3, #0]
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	3334      	adds	r3, #52	; 0x34
 8009e54:	460a      	mov	r2, r1
 8009e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d006      	beq.n	8009e72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	2b0f      	cmp	r3, #15
 8009e6e:	d9e9      	bls.n	8009e44 <prvInitialiseNewTask+0x64>
 8009e70:	e000      	b.n	8009e74 <prvInitialiseNewTask+0x94>
			{
				break;
 8009e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e7c:	e003      	b.n	8009e86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	2b37      	cmp	r3, #55	; 0x37
 8009e8a:	d901      	bls.n	8009e90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e8c:	2337      	movs	r3, #55	; 0x37
 8009e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fda7 	bl	80089fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	3318      	adds	r3, #24
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fe fda2 	bl	80089fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	3354      	adds	r3, #84	; 0x54
 8009ee0:	2260      	movs	r2, #96	; 0x60
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f011 fa63 	bl	801b3b0 <memset>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <prvInitialiseNewTask+0x140>)
 8009eee:	659a      	str	r2, [r3, #88]	; 0x58
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	4a0c      	ldr	r2, [pc, #48]	; (8009f24 <prvInitialiseNewTask+0x144>)
 8009ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	4a0b      	ldr	r2, [pc, #44]	; (8009f28 <prvInitialiseNewTask+0x148>)
 8009efa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	69b8      	ldr	r0, [r7, #24]
 8009f02:	f001 fa5b 	bl	800b3bc <pxPortInitialiseStack>
 8009f06:	4602      	mov	r2, r0
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f18:	bf00      	nop
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	0801f96c 	.word	0x0801f96c
 8009f24:	0801f98c 	.word	0x0801f98c
 8009f28:	0801f94c 	.word	0x0801f94c

08009f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f34:	f001 fb32 	bl	800b59c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f38:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	4a2c      	ldr	r2, [pc, #176]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f42:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f4a:	4a2a      	ldr	r2, [pc, #168]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f50:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d110      	bne.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f58:	f000 fc36 	bl	800a7c8 <prvInitialiseTaskLists>
 8009f5c:	e00d      	b.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f5e:	4b26      	ldr	r3, [pc, #152]	; (8009ff8 <prvAddNewTaskToReadyList+0xcc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f66:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d802      	bhi.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f74:	4a1f      	ldr	r2, [pc, #124]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f7a:	4b20      	ldr	r3, [pc, #128]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f84:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f90:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <prvAddNewTaskToReadyList+0xd4>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d903      	bls.n	8009fa0 <prvAddNewTaskToReadyList+0x74>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a18      	ldr	r2, [pc, #96]	; (800a000 <prvAddNewTaskToReadyList+0xd4>)
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4a15      	ldr	r2, [pc, #84]	; (800a004 <prvAddNewTaskToReadyList+0xd8>)
 8009fae:	441a      	add	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7fe fd2b 	bl	8008a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fbc:	f001 fb1e 	bl	800b5fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <prvAddNewTaskToReadyList+0xcc>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00e      	beq.n	8009fe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d207      	bcs.n	8009fe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <prvAddNewTaskToReadyList+0xdc>)
 8009fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20005a9c 	.word	0x20005a9c
 8009ff4:	200055c8 	.word	0x200055c8
 8009ff8:	20005aa8 	.word	0x20005aa8
 8009ffc:	20005ab8 	.word	0x20005ab8
 800a000:	20005aa4 	.word	0x20005aa4
 800a004:	200055cc 	.word	0x200055cc
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a014:	2300      	movs	r3, #0
 800a016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d017      	beq.n	800a04e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <vTaskDelay+0x60>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <vTaskDelay+0x30>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60bb      	str	r3, [r7, #8]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a03c:	f000 f88a 	bl	800a154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a040:	2100      	movs	r1, #0
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fe1a 	bl	800ac7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a048:	f000 f892 	bl	800a170 <xTaskResumeAll>
 800a04c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d107      	bne.n	800a064 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a054:	4b06      	ldr	r3, [pc, #24]	; (800a070 <vTaskDelay+0x64>)
 800a056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a064:	bf00      	nop
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20005ac4 	.word	0x20005ac4
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a082:	463a      	mov	r2, r7
 800a084:	1d39      	adds	r1, r7, #4
 800a086:	f107 0308 	add.w	r3, r7, #8
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe fc64 	bl	8008958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	9202      	str	r2, [sp, #8]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	2300      	movs	r3, #0
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	460a      	mov	r2, r1
 800a0a2:	4924      	ldr	r1, [pc, #144]	; (800a134 <vTaskStartScheduler+0xc0>)
 800a0a4:	4824      	ldr	r0, [pc, #144]	; (800a138 <vTaskStartScheduler+0xc4>)
 800a0a6:	f7ff fdf9 	bl	8009c9c <xTaskCreateStatic>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4a23      	ldr	r2, [pc, #140]	; (800a13c <vTaskStartScheduler+0xc8>)
 800a0ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0b0:	4b22      	ldr	r3, [pc, #136]	; (800a13c <vTaskStartScheduler+0xc8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	e001      	b.n	800a0c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d102      	bne.n	800a0ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0c8:	f000 fe2c 	bl	800ad24 <xTimerCreateTimerTask>
 800a0cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d11b      	bne.n	800a10c <vTaskStartScheduler+0x98>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	613b      	str	r3, [r7, #16]
}
 800a0e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <vTaskStartScheduler+0xcc>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3354      	adds	r3, #84	; 0x54
 800a0ee:	4a15      	ldr	r2, [pc, #84]	; (800a144 <vTaskStartScheduler+0xd0>)
 800a0f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <vTaskStartScheduler+0xd4>)
 800a0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <vTaskStartScheduler+0xd8>)
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a100:	4b13      	ldr	r3, [pc, #76]	; (800a150 <vTaskStartScheduler+0xdc>)
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a106:	f001 f9d7 	bl	800b4b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a10a:	e00e      	b.n	800a12a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a112:	d10a      	bne.n	800a12a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	60fb      	str	r3, [r7, #12]
}
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <vTaskStartScheduler+0xb4>
}
 800a12a:	bf00      	nop
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	0801c188 	.word	0x0801c188
 800a138:	0800a799 	.word	0x0800a799
 800a13c:	20005ac0 	.word	0x20005ac0
 800a140:	200055c8 	.word	0x200055c8
 800a144:	20000110 	.word	0x20000110
 800a148:	20005abc 	.word	0x20005abc
 800a14c:	20005aa8 	.word	0x20005aa8
 800a150:	20005aa0 	.word	0x20005aa0

0800a154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <vTaskSuspendAll+0x18>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	4a03      	ldr	r2, [pc, #12]	; (800a16c <vTaskSuspendAll+0x18>)
 800a160:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a162:	bf00      	nop
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20005ac4 	.word	0x20005ac4

0800a170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a17e:	4b42      	ldr	r3, [pc, #264]	; (800a288 <xTaskResumeAll+0x118>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <xTaskResumeAll+0x2c>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	603b      	str	r3, [r7, #0]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a19c:	f001 f9fe 	bl	800b59c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1a0:	4b39      	ldr	r3, [pc, #228]	; (800a288 <xTaskResumeAll+0x118>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	4a38      	ldr	r2, [pc, #224]	; (800a288 <xTaskResumeAll+0x118>)
 800a1a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1aa:	4b37      	ldr	r3, [pc, #220]	; (800a288 <xTaskResumeAll+0x118>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d162      	bne.n	800a278 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1b2:	4b36      	ldr	r3, [pc, #216]	; (800a28c <xTaskResumeAll+0x11c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d05e      	beq.n	800a278 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1ba:	e02f      	b.n	800a21c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1bc:	4b34      	ldr	r3, [pc, #208]	; (800a290 <xTaskResumeAll+0x120>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3318      	adds	r3, #24
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe fc7d 	bl	8008ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe fc78 	bl	8008ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1dc:	4b2d      	ldr	r3, [pc, #180]	; (800a294 <xTaskResumeAll+0x124>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d903      	bls.n	800a1ec <xTaskResumeAll+0x7c>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	4a2a      	ldr	r2, [pc, #168]	; (800a294 <xTaskResumeAll+0x124>)
 800a1ea:	6013      	str	r3, [r2, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4a27      	ldr	r2, [pc, #156]	; (800a298 <xTaskResumeAll+0x128>)
 800a1fa:	441a      	add	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4610      	mov	r0, r2
 800a204:	f7fe fc05 	bl	8008a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20c:	4b23      	ldr	r3, [pc, #140]	; (800a29c <xTaskResumeAll+0x12c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	429a      	cmp	r2, r3
 800a214:	d302      	bcc.n	800a21c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a216:	4b22      	ldr	r3, [pc, #136]	; (800a2a0 <xTaskResumeAll+0x130>)
 800a218:	2201      	movs	r2, #1
 800a21a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a21c:	4b1c      	ldr	r3, [pc, #112]	; (800a290 <xTaskResumeAll+0x120>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1cb      	bne.n	800a1bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a22a:	f000 fb6f 	bl	800a90c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <xTaskResumeAll+0x134>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d010      	beq.n	800a25c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a23a:	f000 f857 	bl	800a2ec <xTaskIncrementTick>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a244:	4b16      	ldr	r3, [pc, #88]	; (800a2a0 <xTaskResumeAll+0x130>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1f1      	bne.n	800a23a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a256:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <xTaskResumeAll+0x134>)
 800a258:	2200      	movs	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <xTaskResumeAll+0x130>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d009      	beq.n	800a278 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a268:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <xTaskResumeAll+0x138>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a278:	f001 f9c0 	bl	800b5fc <vPortExitCritical>

	return xAlreadyYielded;
 800a27c:	68bb      	ldr	r3, [r7, #8]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20005ac4 	.word	0x20005ac4
 800a28c:	20005a9c 	.word	0x20005a9c
 800a290:	20005a5c 	.word	0x20005a5c
 800a294:	20005aa4 	.word	0x20005aa4
 800a298:	200055cc 	.word	0x200055cc
 800a29c:	200055c8 	.word	0x200055c8
 800a2a0:	20005ab0 	.word	0x20005ab0
 800a2a4:	20005aac 	.word	0x20005aac
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2b2:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <xTaskGetTickCount+0x18>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2b8:	687b      	ldr	r3, [r7, #4]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bc80      	pop	{r7}
 800a2c2:	4770      	bx	lr
 800a2c4:	20005aa0 	.word	0x20005aa0

0800a2c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2ce:	f001 fa27 	bl	800b720 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a2d6:	4b04      	ldr	r3, [pc, #16]	; (800a2e8 <xTaskGetTickCountFromISR+0x20>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2dc:	683b      	ldr	r3, [r7, #0]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20005aa0 	.word	0x20005aa0

0800a2ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f6:	4b4f      	ldr	r3, [pc, #316]	; (800a434 <xTaskIncrementTick+0x148>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f040 808f 	bne.w	800a41e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a300:	4b4d      	ldr	r3, [pc, #308]	; (800a438 <xTaskIncrementTick+0x14c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a308:	4a4b      	ldr	r2, [pc, #300]	; (800a438 <xTaskIncrementTick+0x14c>)
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d120      	bne.n	800a356 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a314:	4b49      	ldr	r3, [pc, #292]	; (800a43c <xTaskIncrementTick+0x150>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <xTaskIncrementTick+0x48>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	603b      	str	r3, [r7, #0]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <xTaskIncrementTick+0x46>
 800a334:	4b41      	ldr	r3, [pc, #260]	; (800a43c <xTaskIncrementTick+0x150>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	4b41      	ldr	r3, [pc, #260]	; (800a440 <xTaskIncrementTick+0x154>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a3f      	ldr	r2, [pc, #252]	; (800a43c <xTaskIncrementTick+0x150>)
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	4a3f      	ldr	r2, [pc, #252]	; (800a440 <xTaskIncrementTick+0x154>)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	4b3e      	ldr	r3, [pc, #248]	; (800a444 <xTaskIncrementTick+0x158>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	4a3d      	ldr	r2, [pc, #244]	; (800a444 <xTaskIncrementTick+0x158>)
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	f000 fadb 	bl	800a90c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a356:	4b3c      	ldr	r3, [pc, #240]	; (800a448 <xTaskIncrementTick+0x15c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d349      	bcc.n	800a3f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a360:	4b36      	ldr	r3, [pc, #216]	; (800a43c <xTaskIncrementTick+0x150>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d104      	bne.n	800a374 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36a:	4b37      	ldr	r3, [pc, #220]	; (800a448 <xTaskIncrementTick+0x15c>)
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	601a      	str	r2, [r3, #0]
					break;
 800a372:	e03f      	b.n	800a3f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a374:	4b31      	ldr	r3, [pc, #196]	; (800a43c <xTaskIncrementTick+0x150>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d203      	bcs.n	800a394 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a38c:	4a2e      	ldr	r2, [pc, #184]	; (800a448 <xTaskIncrementTick+0x15c>)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a392:	e02f      	b.n	800a3f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	3304      	adds	r3, #4
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fb95 	bl	8008ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d004      	beq.n	800a3b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	3318      	adds	r3, #24
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fb8c 	bl	8008ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b4:	4b25      	ldr	r3, [pc, #148]	; (800a44c <xTaskIncrementTick+0x160>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d903      	bls.n	800a3c4 <xTaskIncrementTick+0xd8>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	4a22      	ldr	r2, [pc, #136]	; (800a44c <xTaskIncrementTick+0x160>)
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4a1f      	ldr	r2, [pc, #124]	; (800a450 <xTaskIncrementTick+0x164>)
 800a3d2:	441a      	add	r2, r3
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe fb19 	bl	8008a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	4b1b      	ldr	r3, [pc, #108]	; (800a454 <xTaskIncrementTick+0x168>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d3b8      	bcc.n	800a360 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3f2:	e7b5      	b.n	800a360 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3f4:	4b17      	ldr	r3, [pc, #92]	; (800a454 <xTaskIncrementTick+0x168>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fa:	4915      	ldr	r1, [pc, #84]	; (800a450 <xTaskIncrementTick+0x164>)
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	440b      	add	r3, r1
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d901      	bls.n	800a410 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a410:	4b11      	ldr	r3, [pc, #68]	; (800a458 <xTaskIncrementTick+0x16c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d007      	beq.n	800a428 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a418:	2301      	movs	r3, #1
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	e004      	b.n	800a428 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <xTaskIncrementTick+0x170>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3301      	adds	r3, #1
 800a424:	4a0d      	ldr	r2, [pc, #52]	; (800a45c <xTaskIncrementTick+0x170>)
 800a426:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a428:	697b      	ldr	r3, [r7, #20]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20005ac4 	.word	0x20005ac4
 800a438:	20005aa0 	.word	0x20005aa0
 800a43c:	20005a54 	.word	0x20005a54
 800a440:	20005a58 	.word	0x20005a58
 800a444:	20005ab4 	.word	0x20005ab4
 800a448:	20005abc 	.word	0x20005abc
 800a44c:	20005aa4 	.word	0x20005aa4
 800a450:	200055cc 	.word	0x200055cc
 800a454:	200055c8 	.word	0x200055c8
 800a458:	20005ab0 	.word	0x20005ab0
 800a45c:	20005aac 	.word	0x20005aac

0800a460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a466:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <vTaskSwitchContext+0xb0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a46e:	4b29      	ldr	r3, [pc, #164]	; (800a514 <vTaskSwitchContext+0xb4>)
 800a470:	2201      	movs	r2, #1
 800a472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a474:	e046      	b.n	800a504 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a476:	4b27      	ldr	r3, [pc, #156]	; (800a514 <vTaskSwitchContext+0xb4>)
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47c:	4b26      	ldr	r3, [pc, #152]	; (800a518 <vTaskSwitchContext+0xb8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	e010      	b.n	800a4a6 <vTaskSwitchContext+0x46>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10a      	bne.n	800a4a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	607b      	str	r3, [r7, #4]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <vTaskSwitchContext+0x3e>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	491d      	ldr	r1, [pc, #116]	; (800a51c <vTaskSwitchContext+0xbc>)
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	440b      	add	r3, r1
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0e4      	beq.n	800a484 <vTaskSwitchContext+0x24>
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4a15      	ldr	r2, [pc, #84]	; (800a51c <vTaskSwitchContext+0xbc>)
 800a4c6:	4413      	add	r3, r2
 800a4c8:	60bb      	str	r3, [r7, #8]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	605a      	str	r2, [r3, #4]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d104      	bne.n	800a4ea <vTaskSwitchContext+0x8a>
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	605a      	str	r2, [r3, #4]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	4a0b      	ldr	r2, [pc, #44]	; (800a520 <vTaskSwitchContext+0xc0>)
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	4a08      	ldr	r2, [pc, #32]	; (800a518 <vTaskSwitchContext+0xb8>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4fa:	4b09      	ldr	r3, [pc, #36]	; (800a520 <vTaskSwitchContext+0xc0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3354      	adds	r3, #84	; 0x54
 800a500:	4a08      	ldr	r2, [pc, #32]	; (800a524 <vTaskSwitchContext+0xc4>)
 800a502:	6013      	str	r3, [r2, #0]
}
 800a504:	bf00      	nop
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	20005ac4 	.word	0x20005ac4
 800a514:	20005ab0 	.word	0x20005ab0
 800a518:	20005aa4 	.word	0x20005aa4
 800a51c:	200055cc 	.word	0x200055cc
 800a520:	200055c8 	.word	0x200055c8
 800a524:	20000110 	.word	0x20000110

0800a528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	60fb      	str	r3, [r7, #12]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a54e:	4b07      	ldr	r3, [pc, #28]	; (800a56c <vTaskPlaceOnEventList+0x44>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3318      	adds	r3, #24
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7fe fa7e 	bl	8008a58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a55c:	2101      	movs	r1, #1
 800a55e:	6838      	ldr	r0, [r7, #0]
 800a560:	f000 fb8c 	bl	800ac7c <prvAddCurrentTaskToDelayedList>
}
 800a564:	bf00      	nop
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	200055c8 	.word	0x200055c8

0800a570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	617b      	str	r3, [r7, #20]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3318      	adds	r3, #24
 800a59e:	4619      	mov	r1, r3
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7fe fa36 	bl	8008a12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	68b8      	ldr	r0, [r7, #8]
 800a5b6:	f000 fb61 	bl	800ac7c <prvAddCurrentTaskToDelayedList>
	}
 800a5ba:	bf00      	nop
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200055c8 	.word	0x200055c8

0800a5c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60fb      	str	r3, [r7, #12]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	3318      	adds	r3, #24
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fa65 	bl	8008ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5fe:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <xTaskRemoveFromEventList+0xb0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d11d      	bne.n	800a642 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	3304      	adds	r3, #4
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe fa5c 	bl	8008ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a614:	4b19      	ldr	r3, [pc, #100]	; (800a67c <xTaskRemoveFromEventList+0xb4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d903      	bls.n	800a624 <xTaskRemoveFromEventList+0x5c>
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	4a16      	ldr	r2, [pc, #88]	; (800a67c <xTaskRemoveFromEventList+0xb4>)
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a628:	4613      	mov	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4a13      	ldr	r2, [pc, #76]	; (800a680 <xTaskRemoveFromEventList+0xb8>)
 800a632:	441a      	add	r2, r3
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	3304      	adds	r3, #4
 800a638:	4619      	mov	r1, r3
 800a63a:	4610      	mov	r0, r2
 800a63c:	f7fe f9e9 	bl	8008a12 <vListInsertEnd>
 800a640:	e005      	b.n	800a64e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	3318      	adds	r3, #24
 800a646:	4619      	mov	r1, r3
 800a648:	480e      	ldr	r0, [pc, #56]	; (800a684 <xTaskRemoveFromEventList+0xbc>)
 800a64a:	f7fe f9e2 	bl	8008a12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a652:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <xTaskRemoveFromEventList+0xc0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	429a      	cmp	r2, r3
 800a65a:	d905      	bls.n	800a668 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a65c:	2301      	movs	r3, #1
 800a65e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a660:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <xTaskRemoveFromEventList+0xc4>)
 800a662:	2201      	movs	r2, #1
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e001      	b.n	800a66c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a66c:	697b      	ldr	r3, [r7, #20]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20005ac4 	.word	0x20005ac4
 800a67c:	20005aa4 	.word	0x20005aa4
 800a680:	200055cc 	.word	0x200055cc
 800a684:	20005a5c 	.word	0x20005a5c
 800a688:	200055c8 	.word	0x200055c8
 800a68c:	20005ab0 	.word	0x20005ab0

0800a690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a698:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <vTaskInternalSetTimeOutState+0x24>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <vTaskInternalSetTimeOutState+0x28>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	605a      	str	r2, [r3, #4]
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20005ab4 	.word	0x20005ab4
 800a6b8:	20005aa0 	.word	0x20005aa0

0800a6bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	613b      	str	r3, [r7, #16]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a6fe:	f000 ff4d 	bl	800b59c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a702:	4b1d      	ldr	r3, [pc, #116]	; (800a778 <xTaskCheckForTimeOut+0xbc>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71a:	d102      	bne.n	800a722 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a71c:	2300      	movs	r3, #0
 800a71e:	61fb      	str	r3, [r7, #28]
 800a720:	e023      	b.n	800a76a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	4b15      	ldr	r3, [pc, #84]	; (800a77c <xTaskCheckForTimeOut+0xc0>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d007      	beq.n	800a73e <xTaskCheckForTimeOut+0x82>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d302      	bcc.n	800a73e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	e015      	b.n	800a76a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	429a      	cmp	r2, r3
 800a746:	d20b      	bcs.n	800a760 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	1ad2      	subs	r2, r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff ff9b 	bl	800a690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	e004      	b.n	800a76a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a766:	2301      	movs	r3, #1
 800a768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a76a:	f000 ff47 	bl	800b5fc <vPortExitCritical>

	return xReturn;
 800a76e:	69fb      	ldr	r3, [r7, #28]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20005aa0 	.word	0x20005aa0
 800a77c:	20005ab4 	.word	0x20005ab4

0800a780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a784:	4b03      	ldr	r3, [pc, #12]	; (800a794 <vTaskMissedYield+0x14>)
 800a786:	2201      	movs	r2, #1
 800a788:	601a      	str	r2, [r3, #0]
}
 800a78a:	bf00      	nop
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	20005ab0 	.word	0x20005ab0

0800a798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7a0:	f000 f852 	bl	800a848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <prvIdleTask+0x28>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d9f9      	bls.n	800a7a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <prvIdleTask+0x2c>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7bc:	e7f0      	b.n	800a7a0 <prvIdleTask+0x8>
 800a7be:	bf00      	nop
 800a7c0:	200055cc 	.word	0x200055cc
 800a7c4:	e000ed04 	.word	0xe000ed04

0800a7c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	e00c      	b.n	800a7ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4a12      	ldr	r2, [pc, #72]	; (800a828 <prvInitialiseTaskLists+0x60>)
 800a7e0:	4413      	add	r3, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe f8ea 	bl	80089bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	607b      	str	r3, [r7, #4]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b37      	cmp	r3, #55	; 0x37
 800a7f2:	d9ef      	bls.n	800a7d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7f4:	480d      	ldr	r0, [pc, #52]	; (800a82c <prvInitialiseTaskLists+0x64>)
 800a7f6:	f7fe f8e1 	bl	80089bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7fa:	480d      	ldr	r0, [pc, #52]	; (800a830 <prvInitialiseTaskLists+0x68>)
 800a7fc:	f7fe f8de 	bl	80089bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a800:	480c      	ldr	r0, [pc, #48]	; (800a834 <prvInitialiseTaskLists+0x6c>)
 800a802:	f7fe f8db 	bl	80089bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a806:	480c      	ldr	r0, [pc, #48]	; (800a838 <prvInitialiseTaskLists+0x70>)
 800a808:	f7fe f8d8 	bl	80089bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a80c:	480b      	ldr	r0, [pc, #44]	; (800a83c <prvInitialiseTaskLists+0x74>)
 800a80e:	f7fe f8d5 	bl	80089bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a812:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <prvInitialiseTaskLists+0x78>)
 800a814:	4a05      	ldr	r2, [pc, #20]	; (800a82c <prvInitialiseTaskLists+0x64>)
 800a816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <prvInitialiseTaskLists+0x7c>)
 800a81a:	4a05      	ldr	r2, [pc, #20]	; (800a830 <prvInitialiseTaskLists+0x68>)
 800a81c:	601a      	str	r2, [r3, #0]
}
 800a81e:	bf00      	nop
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	200055cc 	.word	0x200055cc
 800a82c:	20005a2c 	.word	0x20005a2c
 800a830:	20005a40 	.word	0x20005a40
 800a834:	20005a5c 	.word	0x20005a5c
 800a838:	20005a70 	.word	0x20005a70
 800a83c:	20005a88 	.word	0x20005a88
 800a840:	20005a54 	.word	0x20005a54
 800a844:	20005a58 	.word	0x20005a58

0800a848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a84e:	e019      	b.n	800a884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a850:	f000 fea4 	bl	800b59c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a854:	4b10      	ldr	r3, [pc, #64]	; (800a898 <prvCheckTasksWaitingTermination+0x50>)
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3304      	adds	r3, #4
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe f931 	bl	8008ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <prvCheckTasksWaitingTermination+0x54>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a0b      	ldr	r2, [pc, #44]	; (800a89c <prvCheckTasksWaitingTermination+0x54>)
 800a86e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a870:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <prvCheckTasksWaitingTermination+0x58>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3b01      	subs	r3, #1
 800a876:	4a0a      	ldr	r2, [pc, #40]	; (800a8a0 <prvCheckTasksWaitingTermination+0x58>)
 800a878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a87a:	f000 febf 	bl	800b5fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f810 	bl	800a8a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a884:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <prvCheckTasksWaitingTermination+0x58>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e1      	bne.n	800a850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20005a70 	.word	0x20005a70
 800a89c:	20005a9c 	.word	0x20005a9c
 800a8a0:	20005a84 	.word	0x20005a84

0800a8a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3354      	adds	r3, #84	; 0x54
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f010 fec7 	bl	801b644 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d108      	bne.n	800a8d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f001 f835 	bl	800b934 <vPortFree>
				vPortFree( pxTCB );
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 f832 	bl	800b934 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8d0:	e018      	b.n	800a904 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d103      	bne.n	800a8e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 f829 	bl	800b934 <vPortFree>
	}
 800a8e2:	e00f      	b.n	800a904 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d00a      	beq.n	800a904 <prvDeleteTCB+0x60>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	60fb      	str	r3, [r7, #12]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <prvDeleteTCB+0x5e>
	}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a912:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <prvResetNextTaskUnblockTime+0x38>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d104      	bne.n	800a926 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a91c:	4b0a      	ldr	r3, [pc, #40]	; (800a948 <prvResetNextTaskUnblockTime+0x3c>)
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295
 800a922:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a924:	e008      	b.n	800a938 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a926:	4b07      	ldr	r3, [pc, #28]	; (800a944 <prvResetNextTaskUnblockTime+0x38>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	4a04      	ldr	r2, [pc, #16]	; (800a948 <prvResetNextTaskUnblockTime+0x3c>)
 800a936:	6013      	str	r3, [r2, #0]
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20005a54 	.word	0x20005a54
 800a948:	20005abc 	.word	0x20005abc

0800a94c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a952:	4b04      	ldr	r3, [pc, #16]	; (800a964 <xTaskGetCurrentTaskHandle+0x18>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a958:	687b      	ldr	r3, [r7, #4]
	}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	bc80      	pop	{r7}
 800a962:	4770      	bx	lr
 800a964:	200055c8 	.word	0x200055c8

0800a968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a96e:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <xTaskGetSchedulerState+0x34>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a976:	2301      	movs	r3, #1
 800a978:	607b      	str	r3, [r7, #4]
 800a97a:	e008      	b.n	800a98e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a97c:	4b08      	ldr	r3, [pc, #32]	; (800a9a0 <xTaskGetSchedulerState+0x38>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d102      	bne.n	800a98a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a984:	2302      	movs	r3, #2
 800a986:	607b      	str	r3, [r7, #4]
 800a988:	e001      	b.n	800a98e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a98a:	2300      	movs	r3, #0
 800a98c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a98e:	687b      	ldr	r3, [r7, #4]
	}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20005aa8 	.word	0x20005aa8
 800a9a0:	20005ac4 	.word	0x20005ac4

0800a9a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d051      	beq.n	800aa5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9be:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <xTaskPriorityInherit+0xc4>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d241      	bcs.n	800aa4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	db06      	blt.n	800a9de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d0:	4b25      	ldr	r3, [pc, #148]	; (800aa68 <xTaskPriorityInherit+0xc4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	6959      	ldr	r1, [r3, #20]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4a1f      	ldr	r2, [pc, #124]	; (800aa6c <xTaskPriorityInherit+0xc8>)
 800a9f0:	4413      	add	r3, r2
 800a9f2:	4299      	cmp	r1, r3
 800a9f4:	d122      	bne.n	800aa3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fe f864 	bl	8008ac8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa00:	4b19      	ldr	r3, [pc, #100]	; (800aa68 <xTaskPriorityInherit+0xc4>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0e:	4b18      	ldr	r3, [pc, #96]	; (800aa70 <xTaskPriorityInherit+0xcc>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d903      	bls.n	800aa1e <xTaskPriorityInherit+0x7a>
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1a:	4a15      	ldr	r2, [pc, #84]	; (800aa70 <xTaskPriorityInherit+0xcc>)
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4a10      	ldr	r2, [pc, #64]	; (800aa6c <xTaskPriorityInherit+0xc8>)
 800aa2c:	441a      	add	r2, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	3304      	adds	r3, #4
 800aa32:	4619      	mov	r1, r3
 800aa34:	4610      	mov	r0, r2
 800aa36:	f7fd ffec 	bl	8008a12 <vListInsertEnd>
 800aa3a:	e004      	b.n	800aa46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <xTaskPriorityInherit+0xc4>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa46:	2301      	movs	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e008      	b.n	800aa5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa50:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <xTaskPriorityInherit+0xc4>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d201      	bcs.n	800aa5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
	}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	200055c8 	.word	0x200055c8
 800aa6c:	200055cc 	.word	0x200055cc
 800aa70:	20005aa4 	.word	0x20005aa4

0800aa74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d056      	beq.n	800ab38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa8a:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <xTaskPriorityDisinherit+0xd0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d00a      	beq.n	800aaaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	60fb      	str	r3, [r7, #12]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10a      	bne.n	800aac8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	60bb      	str	r3, [r7, #8]
}
 800aac4:	bf00      	nop
 800aac6:	e7fe      	b.n	800aac6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aacc:	1e5a      	subs	r2, r3, #1
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aada:	429a      	cmp	r2, r3
 800aadc:	d02c      	beq.n	800ab38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d128      	bne.n	800ab38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	3304      	adds	r3, #4
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd ffec 	bl	8008ac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <xTaskPriorityDisinherit+0xd4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d903      	bls.n	800ab18 <xTaskPriorityDisinherit+0xa4>
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	4a0c      	ldr	r2, [pc, #48]	; (800ab48 <xTaskPriorityDisinherit+0xd4>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <xTaskPriorityDisinherit+0xd8>)
 800ab26:	441a      	add	r2, r3
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fd ff6f 	bl	8008a12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab34:	2301      	movs	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab38:	697b      	ldr	r3, [r7, #20]
	}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	200055c8 	.word	0x200055c8
 800ab48:	20005aa4 	.word	0x20005aa4
 800ab4c:	200055cc 	.word	0x200055cc

0800ab50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d06a      	beq.n	800ac3e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	60fb      	str	r3, [r7, #12]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d902      	bls.n	800ab96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	e002      	b.n	800ab9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d04b      	beq.n	800ac3e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	429a      	cmp	r2, r3
 800abae:	d146      	bne.n	800ac3e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800abb0:	4b25      	ldr	r3, [pc, #148]	; (800ac48 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d10a      	bne.n	800abd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	60bb      	str	r3, [r7, #8]
}
 800abcc:	bf00      	nop
 800abce:	e7fe      	b.n	800abce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	db04      	blt.n	800abee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	6959      	ldr	r1, [r3, #20]
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4a13      	ldr	r2, [pc, #76]	; (800ac4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abfe:	4413      	add	r3, r2
 800ac00:	4299      	cmp	r1, r3
 800ac02:	d11c      	bne.n	800ac3e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fd ff5d 	bl	8008ac8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac12:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d903      	bls.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	4a0c      	ldr	r2, [pc, #48]	; (800ac50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4a07      	ldr	r2, [pc, #28]	; (800ac4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ac30:	441a      	add	r2, r3
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	3304      	adds	r3, #4
 800ac36:	4619      	mov	r1, r3
 800ac38:	4610      	mov	r0, r2
 800ac3a:	f7fd feea 	bl	8008a12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac3e:	bf00      	nop
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	200055c8 	.word	0x200055c8
 800ac4c:	200055cc 	.word	0x200055cc
 800ac50:	20005aa4 	.word	0x20005aa4

0800ac54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac58:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac60:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac66:	3201      	adds	r2, #1
 800ac68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ac6a:	4b03      	ldr	r3, [pc, #12]	; (800ac78 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
	}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	200055c8 	.word	0x200055c8

0800ac7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac86:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <prvAddCurrentTaskToDelayedList+0x90>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac8c:	4b20      	ldr	r3, [pc, #128]	; (800ad10 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3304      	adds	r3, #4
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fd ff18 	bl	8008ac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d10a      	bne.n	800acb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aca6:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <prvAddCurrentTaskToDelayedList+0x94>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3304      	adds	r3, #4
 800acac:	4619      	mov	r1, r3
 800acae:	4819      	ldr	r0, [pc, #100]	; (800ad14 <prvAddCurrentTaskToDelayedList+0x98>)
 800acb0:	f7fd feaf 	bl	8008a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acb4:	e026      	b.n	800ad04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4413      	add	r3, r2
 800acbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acbe:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <prvAddCurrentTaskToDelayedList+0x94>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	429a      	cmp	r2, r3
 800accc:	d209      	bcs.n	800ace2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acce:	4b12      	ldr	r3, [pc, #72]	; (800ad18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <prvAddCurrentTaskToDelayedList+0x94>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3304      	adds	r3, #4
 800acd8:	4619      	mov	r1, r3
 800acda:	4610      	mov	r0, r2
 800acdc:	f7fd febc 	bl	8008a58 <vListInsert>
}
 800ace0:	e010      	b.n	800ad04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ace2:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <prvAddCurrentTaskToDelayedList+0x94>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fd feb2 	bl	8008a58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acf4:	4b0a      	ldr	r3, [pc, #40]	; (800ad20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d202      	bcs.n	800ad04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acfe:	4a08      	ldr	r2, [pc, #32]	; (800ad20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	6013      	str	r3, [r2, #0]
}
 800ad04:	bf00      	nop
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	20005aa0 	.word	0x20005aa0
 800ad10:	200055c8 	.word	0x200055c8
 800ad14:	20005a88 	.word	0x20005a88
 800ad18:	20005a58 	.word	0x20005a58
 800ad1c:	20005a54 	.word	0x20005a54
 800ad20:	20005abc 	.word	0x20005abc

0800ad24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08a      	sub	sp, #40	; 0x28
 800ad28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad2e:	f000 fb05 	bl	800b33c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad32:	4b1c      	ldr	r3, [pc, #112]	; (800ada4 <xTimerCreateTimerTask+0x80>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d021      	beq.n	800ad7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad42:	1d3a      	adds	r2, r7, #4
 800ad44:	f107 0108 	add.w	r1, r7, #8
 800ad48:	f107 030c 	add.w	r3, r7, #12
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fd fe1b 	bl	8008988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	9202      	str	r2, [sp, #8]
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	2300      	movs	r3, #0
 800ad62:	460a      	mov	r2, r1
 800ad64:	4910      	ldr	r1, [pc, #64]	; (800ada8 <xTimerCreateTimerTask+0x84>)
 800ad66:	4811      	ldr	r0, [pc, #68]	; (800adac <xTimerCreateTimerTask+0x88>)
 800ad68:	f7fe ff98 	bl	8009c9c <xTaskCreateStatic>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	4a10      	ldr	r2, [pc, #64]	; (800adb0 <xTimerCreateTimerTask+0x8c>)
 800ad70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad72:	4b0f      	ldr	r3, [pc, #60]	; (800adb0 <xTimerCreateTimerTask+0x8c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10a      	bne.n	800ad9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	613b      	str	r3, [r7, #16]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad9a:	697b      	ldr	r3, [r7, #20]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	20005af8 	.word	0x20005af8
 800ada8:	0801c190 	.word	0x0801c190
 800adac:	0800aee9 	.word	0x0800aee9
 800adb0:	20005afc 	.word	0x20005afc

0800adb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	; 0x28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ade2:	4b1a      	ldr	r3, [pc, #104]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d02a      	beq.n	800ae40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b05      	cmp	r3, #5
 800adfa:	dc18      	bgt.n	800ae2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adfc:	f7ff fdb4 	bl	800a968 <xTaskGetSchedulerState>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d109      	bne.n	800ae1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae06:	4b11      	ldr	r3, [pc, #68]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	f107 0110 	add.w	r1, r7, #16
 800ae0e:	2300      	movs	r3, #0
 800ae10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae12:	f7fe f8e1 	bl	8008fd8 <xQueueGenericSend>
 800ae16:	6278      	str	r0, [r7, #36]	; 0x24
 800ae18:	e012      	b.n	800ae40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ae1c:	6818      	ldr	r0, [r3, #0]
 800ae1e:	f107 0110 	add.w	r1, r7, #16
 800ae22:	2300      	movs	r3, #0
 800ae24:	2200      	movs	r2, #0
 800ae26:	f7fe f8d7 	bl	8008fd8 <xQueueGenericSend>
 800ae2a:	6278      	str	r0, [r7, #36]	; 0x24
 800ae2c:	e008      	b.n	800ae40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae2e:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <xTimerGenericCommand+0x98>)
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	f107 0110 	add.w	r1, r7, #16
 800ae36:	2300      	movs	r3, #0
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	f7fe f9cb 	bl	80091d4 <xQueueGenericSendFromISR>
 800ae3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3728      	adds	r7, #40	; 0x28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20005af8 	.word	0x20005af8

0800ae50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae5a:	4b22      	ldr	r3, [pc, #136]	; (800aee4 <prvProcessExpiredTimer+0x94>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	3304      	adds	r3, #4
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fd fe2d 	bl	8008ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d022      	beq.n	800aec2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	699a      	ldr	r2, [r3, #24]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	18d1      	adds	r1, r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	6978      	ldr	r0, [r7, #20]
 800ae8a:	f000 f8cf 	bl	800b02c <prvInsertTimerInActiveList>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d01f      	beq.n	800aed4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae94:	2300      	movs	r3, #0
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	6978      	ldr	r0, [r7, #20]
 800aea0:	f7ff ff88 	bl	800adb4 <xTimerGenericCommand>
 800aea4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d113      	bne.n	800aed4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	60fb      	str	r3, [r7, #12]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aec8:	f023 0301 	bic.w	r3, r3, #1
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	6978      	ldr	r0, [r7, #20]
 800aeda:	4798      	blx	r3
}
 800aedc:	bf00      	nop
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20005af0 	.word	0x20005af0

0800aee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 f857 	bl	800afa8 <prvGetNextExpireTime>
 800aefa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	4619      	mov	r1, r3
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f803 	bl	800af0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af06:	f000 f8d3 	bl	800b0b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af0a:	e7f1      	b.n	800aef0 <prvTimerTask+0x8>

0800af0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af16:	f7ff f91d 	bl	800a154 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af1a:	f107 0308 	add.w	r3, r7, #8
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f864 	bl	800afec <prvSampleTimeNow>
 800af24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d130      	bne.n	800af8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <prvProcessTimerOrBlockTask+0x3c>
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	429a      	cmp	r2, r3
 800af38:	d806      	bhi.n	800af48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af3a:	f7ff f919 	bl	800a170 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af3e:	68f9      	ldr	r1, [r7, #12]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff ff85 	bl	800ae50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af46:	e024      	b.n	800af92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d008      	beq.n	800af60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <prvProcessTimerOrBlockTask+0x90>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <prvProcessTimerOrBlockTask+0x50>
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <prvProcessTimerOrBlockTask+0x52>
 800af5c:	2300      	movs	r3, #0
 800af5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af60:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <prvProcessTimerOrBlockTask+0x94>)
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	4619      	mov	r1, r3
 800af6e:	f7fe fe61 	bl	8009c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af72:	f7ff f8fd 	bl	800a170 <xTaskResumeAll>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af7c:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <prvProcessTimerOrBlockTask+0x98>)
 800af7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	f3bf 8f6f 	isb	sy
}
 800af8c:	e001      	b.n	800af92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af8e:	f7ff f8ef 	bl	800a170 <xTaskResumeAll>
}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20005af4 	.word	0x20005af4
 800afa0:	20005af8 	.word	0x20005af8
 800afa4:	e000ed04 	.word	0xe000ed04

0800afa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <prvGetNextExpireTime+0x40>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <prvGetNextExpireTime+0x16>
 800afba:	2201      	movs	r2, #1
 800afbc:	e000      	b.n	800afc0 <prvGetNextExpireTime+0x18>
 800afbe:	2200      	movs	r2, #0
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d105      	bne.n	800afd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afcc:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <prvGetNextExpireTime+0x40>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	60fb      	str	r3, [r7, #12]
 800afd6:	e001      	b.n	800afdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afdc:	68fb      	ldr	r3, [r7, #12]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bc80      	pop	{r7}
 800afe6:	4770      	bx	lr
 800afe8:	20005af0 	.word	0x20005af0

0800afec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aff4:	f7ff f95a 	bl	800a2ac <xTaskGetTickCount>
 800aff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <prvSampleTimeNow+0x3c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	429a      	cmp	r2, r3
 800b002:	d205      	bcs.n	800b010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b004:	f000 f936 	bl	800b274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	e002      	b.n	800b016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b016:	4a04      	ldr	r2, [pc, #16]	; (800b028 <prvSampleTimeNow+0x3c>)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b01c:	68fb      	ldr	r3, [r7, #12]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20005b00 	.word	0x20005b00

0800b02c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d812      	bhi.n	800b078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	1ad2      	subs	r2, r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d302      	bcc.n	800b066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b060:	2301      	movs	r3, #1
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	e01b      	b.n	800b09e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b066:	4b10      	ldr	r3, [pc, #64]	; (800b0a8 <prvInsertTimerInActiveList+0x7c>)
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3304      	adds	r3, #4
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7fd fcf1 	bl	8008a58 <vListInsert>
 800b076:	e012      	b.n	800b09e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d206      	bcs.n	800b08e <prvInsertTimerInActiveList+0x62>
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d302      	bcc.n	800b08e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b088:	2301      	movs	r3, #1
 800b08a:	617b      	str	r3, [r7, #20]
 800b08c:	e007      	b.n	800b09e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b08e:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <prvInsertTimerInActiveList+0x80>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3304      	adds	r3, #4
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7fd fcdd 	bl	8008a58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b09e:	697b      	ldr	r3, [r7, #20]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20005af4 	.word	0x20005af4
 800b0ac:	20005af0 	.word	0x20005af0

0800b0b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08e      	sub	sp, #56	; 0x38
 800b0b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0b6:	e0ca      	b.n	800b24e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	da18      	bge.n	800b0f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0be:	1d3b      	adds	r3, r7, #4
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10a      	bne.n	800b0e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	61fb      	str	r3, [r7, #28]
}
 800b0dc:	bf00      	nop
 800b0de:	e7fe      	b.n	800b0de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e6:	6850      	ldr	r0, [r2, #4]
 800b0e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ea:	6892      	ldr	r2, [r2, #8]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f2c0 80aa 	blt.w	800b24c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d004      	beq.n	800b10e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	3304      	adds	r3, #4
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fd fcdd 	bl	8008ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b10e:	463b      	mov	r3, r7
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff ff6b 	bl	800afec <prvSampleTimeNow>
 800b116:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b09      	cmp	r3, #9
 800b11c:	f200 8097 	bhi.w	800b24e <prvProcessReceivedCommands+0x19e>
 800b120:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <prvProcessReceivedCommands+0x78>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b151 	.word	0x0800b151
 800b12c:	0800b151 	.word	0x0800b151
 800b130:	0800b151 	.word	0x0800b151
 800b134:	0800b1c5 	.word	0x0800b1c5
 800b138:	0800b1d9 	.word	0x0800b1d9
 800b13c:	0800b223 	.word	0x0800b223
 800b140:	0800b151 	.word	0x0800b151
 800b144:	0800b151 	.word	0x0800b151
 800b148:	0800b1c5 	.word	0x0800b1c5
 800b14c:	0800b1d9 	.word	0x0800b1d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	18d1      	adds	r1, r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b170:	f7ff ff5c 	bl	800b02c <prvInsertTimerInActiveList>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d069      	beq.n	800b24e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d05e      	beq.n	800b24e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	441a      	add	r2, r3
 800b198:	2300      	movs	r3, #0
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	2300      	movs	r3, #0
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a2:	f7ff fe07 	bl	800adb4 <xTimerGenericCommand>
 800b1a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d14f      	bne.n	800b24e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	61bb      	str	r3, [r7, #24]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ca:	f023 0301 	bic.w	r3, r3, #1
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1d6:	e03a      	b.n	800b24e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1de:	f043 0301 	orr.w	r3, r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	617b      	str	r3, [r7, #20]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	699a      	ldr	r2, [r3, #24]
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	18d1      	adds	r1, r2, r3
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b21c:	f7ff ff06 	bl	800b02c <prvInsertTimerInActiveList>
					break;
 800b220:	e015      	b.n	800b24e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b228:	f003 0302 	and.w	r3, r3, #2
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d103      	bne.n	800b238 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b232:	f000 fb7f 	bl	800b934 <vPortFree>
 800b236:	e00a      	b.n	800b24e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b23e:	f023 0301 	bic.w	r3, r3, #1
 800b242:	b2da      	uxtb	r2, r3
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b24a:	e000      	b.n	800b24e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b24c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b24e:	4b08      	ldr	r3, [pc, #32]	; (800b270 <prvProcessReceivedCommands+0x1c0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	1d39      	adds	r1, r7, #4
 800b254:	2200      	movs	r2, #0
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe f8e4 	bl	8009424 <xQueueReceive>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f47f af2a 	bne.w	800b0b8 <prvProcessReceivedCommands+0x8>
	}
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	3730      	adds	r7, #48	; 0x30
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20005af8 	.word	0x20005af8

0800b274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b27a:	e048      	b.n	800b30e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b27c:	4b2d      	ldr	r3, [pc, #180]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b286:	4b2b      	ldr	r3, [pc, #172]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3304      	adds	r3, #4
 800b294:	4618      	mov	r0, r3
 800b296:	f7fd fc17 	bl	8008ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d02e      	beq.n	800b30e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d90e      	bls.n	800b2e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2ce:	4b19      	ldr	r3, [pc, #100]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f7fd fbbd 	bl	8008a58 <vListInsert>
 800b2de:	e016      	b.n	800b30e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7ff fd62 	bl	800adb4 <xTimerGenericCommand>
 800b2f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	603b      	str	r3, [r7, #0]
}
 800b30a:	bf00      	nop
 800b30c:	e7fe      	b.n	800b30c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b30e:	4b09      	ldr	r3, [pc, #36]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1b1      	bne.n	800b27c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b318:	4b06      	ldr	r3, [pc, #24]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b31e:	4b06      	ldr	r3, [pc, #24]	; (800b338 <prvSwitchTimerLists+0xc4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a04      	ldr	r2, [pc, #16]	; (800b334 <prvSwitchTimerLists+0xc0>)
 800b324:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b326:	4a04      	ldr	r2, [pc, #16]	; (800b338 <prvSwitchTimerLists+0xc4>)
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	6013      	str	r3, [r2, #0]
}
 800b32c:	bf00      	nop
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20005af0 	.word	0x20005af0
 800b338:	20005af4 	.word	0x20005af4

0800b33c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b342:	f000 f92b 	bl	800b59c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b346:	4b15      	ldr	r3, [pc, #84]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d120      	bne.n	800b390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b34e:	4814      	ldr	r0, [pc, #80]	; (800b3a0 <prvCheckForValidListAndQueue+0x64>)
 800b350:	f7fd fb34 	bl	80089bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b354:	4813      	ldr	r0, [pc, #76]	; (800b3a4 <prvCheckForValidListAndQueue+0x68>)
 800b356:	f7fd fb31 	bl	80089bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b35a:	4b13      	ldr	r3, [pc, #76]	; (800b3a8 <prvCheckForValidListAndQueue+0x6c>)
 800b35c:	4a10      	ldr	r2, [pc, #64]	; (800b3a0 <prvCheckForValidListAndQueue+0x64>)
 800b35e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b360:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <prvCheckForValidListAndQueue+0x70>)
 800b362:	4a10      	ldr	r2, [pc, #64]	; (800b3a4 <prvCheckForValidListAndQueue+0x68>)
 800b364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b366:	2300      	movs	r3, #0
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	4b11      	ldr	r3, [pc, #68]	; (800b3b0 <prvCheckForValidListAndQueue+0x74>)
 800b36c:	4a11      	ldr	r2, [pc, #68]	; (800b3b4 <prvCheckForValidListAndQueue+0x78>)
 800b36e:	2110      	movs	r1, #16
 800b370:	200a      	movs	r0, #10
 800b372:	f7fd fc3b 	bl	8008bec <xQueueGenericCreateStatic>
 800b376:	4603      	mov	r3, r0
 800b378:	4a08      	ldr	r2, [pc, #32]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b37a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b37c:	4b07      	ldr	r3, [pc, #28]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <prvCheckForValidListAndQueue+0x60>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	490b      	ldr	r1, [pc, #44]	; (800b3b8 <prvCheckForValidListAndQueue+0x7c>)
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe fc00 	bl	8009b90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b390:	f000 f934 	bl	800b5fc <vPortExitCritical>
}
 800b394:	bf00      	nop
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20005af8 	.word	0x20005af8
 800b3a0:	20005ac8 	.word	0x20005ac8
 800b3a4:	20005adc 	.word	0x20005adc
 800b3a8:	20005af0 	.word	0x20005af0
 800b3ac:	20005af4 	.word	0x20005af4
 800b3b0:	20005ba4 	.word	0x20005ba4
 800b3b4:	20005b04 	.word	0x20005b04
 800b3b8:	0801c198 	.word	0x0801c198

0800b3bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3b04      	subs	r3, #4
 800b3cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3b04      	subs	r3, #4
 800b3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f023 0201 	bic.w	r2, r3, #1
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3b04      	subs	r3, #4
 800b3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3ec:	4a08      	ldr	r2, [pc, #32]	; (800b410 <pxPortInitialiseStack+0x54>)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3b14      	subs	r3, #20
 800b3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3b20      	subs	r3, #32
 800b402:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b404:	68fb      	ldr	r3, [r7, #12]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bc80      	pop	{r7}
 800b40e:	4770      	bx	lr
 800b410:	0800b415 	.word	0x0800b415

0800b414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b41e:	4b12      	ldr	r3, [pc, #72]	; (800b468 <prvTaskExitError+0x54>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b426:	d00a      	beq.n	800b43e <prvTaskExitError+0x2a>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	60fb      	str	r3, [r7, #12]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <prvTaskExitError+0x28>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	60bb      	str	r3, [r7, #8]
}
 800b450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b452:	bf00      	nop
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0fc      	beq.n	800b454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	20000098 	.word	0x20000098
 800b46c:	00000000 	.word	0x00000000

0800b470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b470:	4b07      	ldr	r3, [pc, #28]	; (800b490 <pxCurrentTCBConst2>)
 800b472:	6819      	ldr	r1, [r3, #0]
 800b474:	6808      	ldr	r0, [r1, #0]
 800b476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b47a:	f380 8809 	msr	PSP, r0
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f04f 0000 	mov.w	r0, #0
 800b486:	f380 8811 	msr	BASEPRI, r0
 800b48a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b48e:	4770      	bx	lr

0800b490 <pxCurrentTCBConst2>:
 800b490:	200055c8 	.word	0x200055c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop

0800b498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b498:	4806      	ldr	r0, [pc, #24]	; (800b4b4 <prvPortStartFirstTask+0x1c>)
 800b49a:	6800      	ldr	r0, [r0, #0]
 800b49c:	6800      	ldr	r0, [r0, #0]
 800b49e:	f380 8808 	msr	MSP, r0
 800b4a2:	b662      	cpsie	i
 800b4a4:	b661      	cpsie	f
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	df00      	svc	0
 800b4b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4b2:	bf00      	nop
 800b4b4:	e000ed08 	.word	0xe000ed08

0800b4b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4be:	4b32      	ldr	r3, [pc, #200]	; (800b588 <xPortStartScheduler+0xd0>)
 800b4c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	22ff      	movs	r2, #255	; 0xff
 800b4ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4d8:	78fb      	ldrb	r3, [r7, #3]
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	4b2a      	ldr	r3, [pc, #168]	; (800b58c <xPortStartScheduler+0xd4>)
 800b4e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	; (800b590 <xPortStartScheduler+0xd8>)
 800b4e8:	2207      	movs	r2, #7
 800b4ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4ec:	e009      	b.n	800b502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b4ee:	4b28      	ldr	r3, [pc, #160]	; (800b590 <xPortStartScheduler+0xd8>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	4a26      	ldr	r2, [pc, #152]	; (800b590 <xPortStartScheduler+0xd8>)
 800b4f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4f8:	78fb      	ldrb	r3, [r7, #3]
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50a:	2b80      	cmp	r3, #128	; 0x80
 800b50c:	d0ef      	beq.n	800b4ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b50e:	4b20      	ldr	r3, [pc, #128]	; (800b590 <xPortStartScheduler+0xd8>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f1c3 0307 	rsb	r3, r3, #7
 800b516:	2b04      	cmp	r3, #4
 800b518:	d00a      	beq.n	800b530 <xPortStartScheduler+0x78>
	__asm volatile
 800b51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	60bb      	str	r3, [r7, #8]
}
 800b52c:	bf00      	nop
 800b52e:	e7fe      	b.n	800b52e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b530:	4b17      	ldr	r3, [pc, #92]	; (800b590 <xPortStartScheduler+0xd8>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	4a16      	ldr	r2, [pc, #88]	; (800b590 <xPortStartScheduler+0xd8>)
 800b538:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b53a:	4b15      	ldr	r3, [pc, #84]	; (800b590 <xPortStartScheduler+0xd8>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b542:	4a13      	ldr	r2, [pc, #76]	; (800b590 <xPortStartScheduler+0xd8>)
 800b544:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b54e:	4b11      	ldr	r3, [pc, #68]	; (800b594 <xPortStartScheduler+0xdc>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a10      	ldr	r2, [pc, #64]	; (800b594 <xPortStartScheduler+0xdc>)
 800b554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b55a:	4b0e      	ldr	r3, [pc, #56]	; (800b594 <xPortStartScheduler+0xdc>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a0d      	ldr	r2, [pc, #52]	; (800b594 <xPortStartScheduler+0xdc>)
 800b560:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b564:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b566:	f000 f8b9 	bl	800b6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b56a:	4b0b      	ldr	r3, [pc, #44]	; (800b598 <xPortStartScheduler+0xe0>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b570:	f7ff ff92 	bl	800b498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b574:	f7fe ff74 	bl	800a460 <vTaskSwitchContext>
	prvTaskExitError();
 800b578:	f7ff ff4c 	bl	800b414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	e000e400 	.word	0xe000e400
 800b58c:	20005bf4 	.word	0x20005bf4
 800b590:	20005bf8 	.word	0x20005bf8
 800b594:	e000ed20 	.word	0xe000ed20
 800b598:	20000098 	.word	0x20000098

0800b59c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	607b      	str	r3, [r7, #4]
}
 800b5b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5b6:	4b0f      	ldr	r3, [pc, #60]	; (800b5f4 <vPortEnterCritical+0x58>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	4a0d      	ldr	r2, [pc, #52]	; (800b5f4 <vPortEnterCritical+0x58>)
 800b5be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	; (800b5f4 <vPortEnterCritical+0x58>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d10f      	bne.n	800b5e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5c8:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <vPortEnterCritical+0x5c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <vPortEnterCritical+0x4c>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	603b      	str	r3, [r7, #0]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <vPortEnterCritical+0x4a>
	}
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bc80      	pop	{r7}
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20000098 	.word	0x20000098
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b602:	4b11      	ldr	r3, [pc, #68]	; (800b648 <vPortExitCritical+0x4c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <vPortExitCritical+0x24>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	607b      	str	r3, [r7, #4]
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b620:	4b09      	ldr	r3, [pc, #36]	; (800b648 <vPortExitCritical+0x4c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3b01      	subs	r3, #1
 800b626:	4a08      	ldr	r2, [pc, #32]	; (800b648 <vPortExitCritical+0x4c>)
 800b628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b62a:	4b07      	ldr	r3, [pc, #28]	; (800b648 <vPortExitCritical+0x4c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d105      	bne.n	800b63e <vPortExitCritical+0x42>
 800b632:	2300      	movs	r3, #0
 800b634:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	f383 8811 	msr	BASEPRI, r3
}
 800b63c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b63e:	bf00      	nop
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr
 800b648:	20000098 	.word	0x20000098
 800b64c:	00000000 	.word	0x00000000

0800b650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b650:	f3ef 8009 	mrs	r0, PSP
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	4b0d      	ldr	r3, [pc, #52]	; (800b690 <pxCurrentTCBConst>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b660:	6010      	str	r0, [r2, #0]
 800b662:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b66a:	f380 8811 	msr	BASEPRI, r0
 800b66e:	f7fe fef7 	bl	800a460 <vTaskSwitchContext>
 800b672:	f04f 0000 	mov.w	r0, #0
 800b676:	f380 8811 	msr	BASEPRI, r0
 800b67a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b67e:	6819      	ldr	r1, [r3, #0]
 800b680:	6808      	ldr	r0, [r1, #0]
 800b682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b686:	f380 8809 	msr	PSP, r0
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	4770      	bx	lr

0800b690 <pxCurrentTCBConst>:
 800b690:	200055c8 	.word	0x200055c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b694:	bf00      	nop
 800b696:	bf00      	nop

0800b698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	607b      	str	r3, [r7, #4]
}
 800b6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6b2:	f7fe fe1b 	bl	800a2ec <xTaskIncrementTick>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6bc:	4b06      	ldr	r3, [pc, #24]	; (800b6d8 <xPortSysTickHandler+0x40>)
 800b6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	f383 8811 	msr	BASEPRI, r3
}
 800b6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <vPortSetupTimerInterrupt+0x30>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <vPortSetupTimerInterrupt+0x34>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <vPortSetupTimerInterrupt+0x38>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a09      	ldr	r2, [pc, #36]	; (800b718 <vPortSetupTimerInterrupt+0x3c>)
 800b6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f6:	099b      	lsrs	r3, r3, #6
 800b6f8:	4a08      	ldr	r2, [pc, #32]	; (800b71c <vPortSetupTimerInterrupt+0x40>)
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6fe:	4b03      	ldr	r3, [pc, #12]	; (800b70c <vPortSetupTimerInterrupt+0x30>)
 800b700:	2207      	movs	r2, #7
 800b702:	601a      	str	r2, [r3, #0]
}
 800b704:	bf00      	nop
 800b706:	46bd      	mov	sp, r7
 800b708:	bc80      	pop	{r7}
 800b70a:	4770      	bx	lr
 800b70c:	e000e010 	.word	0xe000e010
 800b710:	e000e018 	.word	0xe000e018
 800b714:	20000000 	.word	0x20000000
 800b718:	10624dd3 	.word	0x10624dd3
 800b71c:	e000e014 	.word	0xe000e014

0800b720 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b726:	f3ef 8305 	mrs	r3, IPSR
 800b72a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b0f      	cmp	r3, #15
 800b730:	d914      	bls.n	800b75c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b732:	4a16      	ldr	r2, [pc, #88]	; (800b78c <vPortValidateInterruptPriority+0x6c>)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	4413      	add	r3, r2
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b73c:	4b14      	ldr	r3, [pc, #80]	; (800b790 <vPortValidateInterruptPriority+0x70>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	7afa      	ldrb	r2, [r7, #11]
 800b742:	429a      	cmp	r2, r3
 800b744:	d20a      	bcs.n	800b75c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74a:	f383 8811 	msr	BASEPRI, r3
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	607b      	str	r3, [r7, #4]
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <vPortValidateInterruptPriority+0x74>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b764:	4b0c      	ldr	r3, [pc, #48]	; (800b798 <vPortValidateInterruptPriority+0x78>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d90a      	bls.n	800b782 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	603b      	str	r3, [r7, #0]
}
 800b77e:	bf00      	nop
 800b780:	e7fe      	b.n	800b780 <vPortValidateInterruptPriority+0x60>
	}
 800b782:	bf00      	nop
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	bc80      	pop	{r7}
 800b78a:	4770      	bx	lr
 800b78c:	e000e3f0 	.word	0xe000e3f0
 800b790:	20005bf4 	.word	0x20005bf4
 800b794:	e000ed0c 	.word	0xe000ed0c
 800b798:	20005bf8 	.word	0x20005bf8

0800b79c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08a      	sub	sp, #40	; 0x28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7a8:	f7fe fcd4 	bl	800a154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7ac:	4b5b      	ldr	r3, [pc, #364]	; (800b91c <pvPortMalloc+0x180>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7b4:	f000 f920 	bl	800b9f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7b8:	4b59      	ldr	r3, [pc, #356]	; (800b920 <pvPortMalloc+0x184>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4013      	ands	r3, r2
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f040 8093 	bne.w	800b8ec <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01d      	beq.n	800b808 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7cc:	2208      	movs	r2, #8
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f003 0307 	and.w	r3, r3, #7
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d014      	beq.n	800b808 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f023 0307 	bic.w	r3, r3, #7
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f003 0307 	and.w	r3, r3, #7
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00a      	beq.n	800b808 <pvPortMalloc+0x6c>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	617b      	str	r3, [r7, #20]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d06e      	beq.n	800b8ec <pvPortMalloc+0x150>
 800b80e:	4b45      	ldr	r3, [pc, #276]	; (800b924 <pvPortMalloc+0x188>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d869      	bhi.n	800b8ec <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b818:	4b43      	ldr	r3, [pc, #268]	; (800b928 <pvPortMalloc+0x18c>)
 800b81a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b81c:	4b42      	ldr	r3, [pc, #264]	; (800b928 <pvPortMalloc+0x18c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b822:	e004      	b.n	800b82e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	429a      	cmp	r2, r3
 800b836:	d903      	bls.n	800b840 <pvPortMalloc+0xa4>
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1f1      	bne.n	800b824 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b840:	4b36      	ldr	r3, [pc, #216]	; (800b91c <pvPortMalloc+0x180>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b846:	429a      	cmp	r2, r3
 800b848:	d050      	beq.n	800b8ec <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2208      	movs	r2, #8
 800b850:	4413      	add	r3, r2
 800b852:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	1ad2      	subs	r2, r2, r3
 800b864:	2308      	movs	r3, #8
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	429a      	cmp	r2, r3
 800b86a:	d91f      	bls.n	800b8ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4413      	add	r3, r2
 800b872:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <pvPortMalloc+0xf8>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	613b      	str	r3, [r7, #16]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	685a      	ldr	r2, [r3, #4]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	1ad2      	subs	r2, r2, r3
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8a6:	69b8      	ldr	r0, [r7, #24]
 800b8a8:	f000 f908 	bl	800babc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8ac:	4b1d      	ldr	r3, [pc, #116]	; (800b924 <pvPortMalloc+0x188>)
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	1ad3      	subs	r3, r2, r3
 800b8b6:	4a1b      	ldr	r2, [pc, #108]	; (800b924 <pvPortMalloc+0x188>)
 800b8b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8ba:	4b1a      	ldr	r3, [pc, #104]	; (800b924 <pvPortMalloc+0x188>)
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	4b1b      	ldr	r3, [pc, #108]	; (800b92c <pvPortMalloc+0x190>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d203      	bcs.n	800b8ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8c6:	4b17      	ldr	r3, [pc, #92]	; (800b924 <pvPortMalloc+0x188>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a18      	ldr	r2, [pc, #96]	; (800b92c <pvPortMalloc+0x190>)
 800b8cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	4b13      	ldr	r3, [pc, #76]	; (800b920 <pvPortMalloc+0x184>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	2200      	movs	r2, #0
 800b8e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8e2:	4b13      	ldr	r3, [pc, #76]	; (800b930 <pvPortMalloc+0x194>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	4a11      	ldr	r2, [pc, #68]	; (800b930 <pvPortMalloc+0x194>)
 800b8ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8ec:	f7fe fc40 	bl	800a170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <pvPortMalloc+0x174>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	60fb      	str	r3, [r7, #12]
}
 800b90c:	bf00      	nop
 800b90e:	e7fe      	b.n	800b90e <pvPortMalloc+0x172>
	return pvReturn;
 800b910:	69fb      	ldr	r3, [r7, #28]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3728      	adds	r7, #40	; 0x28
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20009804 	.word	0x20009804
 800b920:	20009818 	.word	0x20009818
 800b924:	20009808 	.word	0x20009808
 800b928:	200097fc 	.word	0x200097fc
 800b92c:	2000980c 	.word	0x2000980c
 800b930:	20009810 	.word	0x20009810

0800b934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d04d      	beq.n	800b9e2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b946:	2308      	movs	r3, #8
 800b948:	425b      	negs	r3, r3
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	4413      	add	r3, r2
 800b94e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <vPortFree+0xb8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4013      	ands	r3, r2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <vPortFree+0x44>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	60fb      	str	r3, [r7, #12]
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <vPortFree+0x62>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	60bb      	str	r3, [r7, #8]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	4b14      	ldr	r3, [pc, #80]	; (800b9ec <vPortFree+0xb8>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4013      	ands	r3, r2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d01e      	beq.n	800b9e2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d11a      	bne.n	800b9e2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	4b0e      	ldr	r3, [pc, #56]	; (800b9ec <vPortFree+0xb8>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	43db      	mvns	r3, r3
 800b9b6:	401a      	ands	r2, r3
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9bc:	f7fe fbca 	bl	800a154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	4b0a      	ldr	r3, [pc, #40]	; (800b9f0 <vPortFree+0xbc>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	4a09      	ldr	r2, [pc, #36]	; (800b9f0 <vPortFree+0xbc>)
 800b9cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9ce:	6938      	ldr	r0, [r7, #16]
 800b9d0:	f000 f874 	bl	800babc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9d4:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <vPortFree+0xc0>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	4a06      	ldr	r2, [pc, #24]	; (800b9f4 <vPortFree+0xc0>)
 800b9dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9de:	f7fe fbc7 	bl	800a170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9e2:	bf00      	nop
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20009818 	.word	0x20009818
 800b9f0:	20009808 	.word	0x20009808
 800b9f4:	20009814 	.word	0x20009814

0800b9f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ba02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba04:	4b27      	ldr	r3, [pc, #156]	; (800baa4 <prvHeapInit+0xac>)
 800ba06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f003 0307 	and.w	r3, r3, #7
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00c      	beq.n	800ba2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3307      	adds	r3, #7
 800ba16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f023 0307 	bic.w	r3, r3, #7
 800ba1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	4a1f      	ldr	r2, [pc, #124]	; (800baa4 <prvHeapInit+0xac>)
 800ba28:	4413      	add	r3, r2
 800ba2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba30:	4a1d      	ldr	r2, [pc, #116]	; (800baa8 <prvHeapInit+0xb0>)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba36:	4b1c      	ldr	r3, [pc, #112]	; (800baa8 <prvHeapInit+0xb0>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	4413      	add	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba44:	2208      	movs	r2, #8
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	1a9b      	subs	r3, r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 0307 	bic.w	r3, r3, #7
 800ba52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4a15      	ldr	r2, [pc, #84]	; (800baac <prvHeapInit+0xb4>)
 800ba58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba5a:	4b14      	ldr	r3, [pc, #80]	; (800baac <prvHeapInit+0xb4>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba62:	4b12      	ldr	r3, [pc, #72]	; (800baac <prvHeapInit+0xb4>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2200      	movs	r2, #0
 800ba68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	1ad2      	subs	r2, r2, r3
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba78:	4b0c      	ldr	r3, [pc, #48]	; (800baac <prvHeapInit+0xb4>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	4a0a      	ldr	r2, [pc, #40]	; (800bab0 <prvHeapInit+0xb8>)
 800ba86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	4a09      	ldr	r2, [pc, #36]	; (800bab4 <prvHeapInit+0xbc>)
 800ba8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba90:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <prvHeapInit+0xc0>)
 800ba92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba96:	601a      	str	r2, [r3, #0]
}
 800ba98:	bf00      	nop
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bc80      	pop	{r7}
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	20005bfc 	.word	0x20005bfc
 800baa8:	200097fc 	.word	0x200097fc
 800baac:	20009804 	.word	0x20009804
 800bab0:	2000980c 	.word	0x2000980c
 800bab4:	20009808 	.word	0x20009808
 800bab8:	20009818 	.word	0x20009818

0800babc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bac4:	4b27      	ldr	r3, [pc, #156]	; (800bb64 <prvInsertBlockIntoFreeList+0xa8>)
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	e002      	b.n	800bad0 <prvInsertBlockIntoFreeList+0x14>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d8f7      	bhi.n	800baca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	4413      	add	r3, r2
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d108      	bne.n	800bafe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	685a      	ldr	r2, [r3, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	441a      	add	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	441a      	add	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d118      	bne.n	800bb44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <prvInsertBlockIntoFreeList+0xac>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d00d      	beq.n	800bb3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	441a      	add	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	e008      	b.n	800bb4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb3a:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <prvInsertBlockIntoFreeList+0xac>)
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	e003      	b.n	800bb4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d002      	beq.n	800bb5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb5a:	bf00      	nop
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bc80      	pop	{r7}
 800bb62:	4770      	bx	lr
 800bb64:	200097fc 	.word	0x200097fc
 800bb68:	20009804 	.word	0x20009804

0800bb6c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bb76:	f009 fd83 	bl	8015680 <sys_timeouts_sleeptime>
 800bb7a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb82:	d10b      	bne.n	800bb9c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bb84:	4813      	ldr	r0, [pc, #76]	; (800bbd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb86:	f00e fc74 	bl	801a472 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f00e fbfc 	bl	801a38c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bb94:	480f      	ldr	r0, [pc, #60]	; (800bbd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb96:	f00e fc5d 	bl	801a454 <sys_mutex_lock>
    return;
 800bb9a:	e018      	b.n	800bbce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d102      	bne.n	800bba8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bba2:	f009 fd33 	bl	801560c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bba6:	e7e6      	b.n	800bb76 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bba8:	480a      	ldr	r0, [pc, #40]	; (800bbd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800bbaa:	f00e fc62 	bl	801a472 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f00e fbea 	bl	801a38c <sys_arch_mbox_fetch>
 800bbb8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bbba:	4806      	ldr	r0, [pc, #24]	; (800bbd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800bbbc:	f00e fc4a 	bl	801a454 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc6:	d102      	bne.n	800bbce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bbc8:	f009 fd20 	bl	801560c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bbcc:	e7d3      	b.n	800bb76 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20009828 	.word	0x20009828

0800bbd8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bbe0:	4810      	ldr	r0, [pc, #64]	; (800bc24 <tcpip_thread+0x4c>)
 800bbe2:	f00e fc37 	bl	801a454 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bbe6:	4b10      	ldr	r3, [pc, #64]	; (800bc28 <tcpip_thread+0x50>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d005      	beq.n	800bbfa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bbee:	4b0e      	ldr	r3, [pc, #56]	; (800bc28 <tcpip_thread+0x50>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a0e      	ldr	r2, [pc, #56]	; (800bc2c <tcpip_thread+0x54>)
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bbfa:	f107 030c 	add.w	r3, r7, #12
 800bbfe:	4619      	mov	r1, r3
 800bc00:	480b      	ldr	r0, [pc, #44]	; (800bc30 <tcpip_thread+0x58>)
 800bc02:	f7ff ffb3 	bl	800bb6c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d106      	bne.n	800bc1a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc0c:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <tcpip_thread+0x5c>)
 800bc0e:	2291      	movs	r2, #145	; 0x91
 800bc10:	4909      	ldr	r1, [pc, #36]	; (800bc38 <tcpip_thread+0x60>)
 800bc12:	480a      	ldr	r0, [pc, #40]	; (800bc3c <tcpip_thread+0x64>)
 800bc14:	f00f fcb2 	bl	801b57c <iprintf>
      continue;
 800bc18:	e003      	b.n	800bc22 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 f80f 	bl	800bc40 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bc22:	e7ea      	b.n	800bbfa <tcpip_thread+0x22>
 800bc24:	20009828 	.word	0x20009828
 800bc28:	2000981c 	.word	0x2000981c
 800bc2c:	20009820 	.word	0x20009820
 800bc30:	20009824 	.word	0x20009824
 800bc34:	0801c1a0 	.word	0x0801c1a0
 800bc38:	0801c1d0 	.word	0x0801c1d0
 800bc3c:	0801c1f0 	.word	0x0801c1f0

0800bc40 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d026      	beq.n	800bc9e <tcpip_thread_handle_msg+0x5e>
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	dc2b      	bgt.n	800bcac <tcpip_thread_handle_msg+0x6c>
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <tcpip_thread_handle_msg+0x1e>
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d015      	beq.n	800bc88 <tcpip_thread_handle_msg+0x48>
 800bc5c:	e026      	b.n	800bcac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	6850      	ldr	r0, [r2, #4]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	6892      	ldr	r2, [r2, #8]
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	4798      	blx	r3
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d004      	beq.n	800bc7e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f003 f81d 	bl	800ecb8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	2009      	movs	r0, #9
 800bc82:	f002 f9db 	bl	800e03c <memp_free>
      break;
 800bc86:	e018      	b.n	800bcba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	6892      	ldr	r2, [r2, #8]
 800bc90:	4610      	mov	r0, r2
 800bc92:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	2008      	movs	r0, #8
 800bc98:	f002 f9d0 	bl	800e03c <memp_free>
      break;
 800bc9c:	e00d      	b.n	800bcba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	6892      	ldr	r2, [r2, #8]
 800bca6:	4610      	mov	r0, r2
 800bca8:	4798      	blx	r3
      break;
 800bcaa:	e006      	b.n	800bcba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bcac:	4b05      	ldr	r3, [pc, #20]	; (800bcc4 <tcpip_thread_handle_msg+0x84>)
 800bcae:	22cf      	movs	r2, #207	; 0xcf
 800bcb0:	4905      	ldr	r1, [pc, #20]	; (800bcc8 <tcpip_thread_handle_msg+0x88>)
 800bcb2:	4806      	ldr	r0, [pc, #24]	; (800bccc <tcpip_thread_handle_msg+0x8c>)
 800bcb4:	f00f fc62 	bl	801b57c <iprintf>
      break;
 800bcb8:	bf00      	nop
  }
}
 800bcba:	bf00      	nop
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	0801c1a0 	.word	0x0801c1a0
 800bcc8:	0801c1d0 	.word	0x0801c1d0
 800bccc:	0801c1f0 	.word	0x0801c1f0

0800bcd0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bcdc:	481a      	ldr	r0, [pc, #104]	; (800bd48 <tcpip_inpkt+0x78>)
 800bcde:	f00e fb86 	bl	801a3ee <sys_mbox_valid>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d105      	bne.n	800bcf4 <tcpip_inpkt+0x24>
 800bce8:	4b18      	ldr	r3, [pc, #96]	; (800bd4c <tcpip_inpkt+0x7c>)
 800bcea:	22fc      	movs	r2, #252	; 0xfc
 800bcec:	4918      	ldr	r1, [pc, #96]	; (800bd50 <tcpip_inpkt+0x80>)
 800bcee:	4819      	ldr	r0, [pc, #100]	; (800bd54 <tcpip_inpkt+0x84>)
 800bcf0:	f00f fc44 	bl	801b57c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bcf4:	2009      	movs	r0, #9
 800bcf6:	f002 f92b 	bl	800df50 <memp_malloc>
 800bcfa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bd02:	f04f 33ff 	mov.w	r3, #4294967295
 800bd06:	e01a      	b.n	800bd3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bd20:	6979      	ldr	r1, [r7, #20]
 800bd22:	4809      	ldr	r0, [pc, #36]	; (800bd48 <tcpip_inpkt+0x78>)
 800bd24:	f00e fb18 	bl	801a358 <sys_mbox_trypost>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d006      	beq.n	800bd3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bd2e:	6979      	ldr	r1, [r7, #20]
 800bd30:	2009      	movs	r0, #9
 800bd32:	f002 f983 	bl	800e03c <memp_free>
    return ERR_MEM;
 800bd36:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3a:	e000      	b.n	800bd3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bd3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3718      	adds	r7, #24
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20009824 	.word	0x20009824
 800bd4c:	0801c1a0 	.word	0x0801c1a0
 800bd50:	0801c218 	.word	0x0801c218
 800bd54:	0801c1f0 	.word	0x0801c1f0

0800bd58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bd68:	f003 0318 	and.w	r3, r3, #24
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d006      	beq.n	800bd7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bd70:	4a08      	ldr	r2, [pc, #32]	; (800bd94 <tcpip_input+0x3c>)
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff ffab 	bl	800bcd0 <tcpip_inpkt>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	e005      	b.n	800bd8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bd7e:	4a06      	ldr	r2, [pc, #24]	; (800bd98 <tcpip_input+0x40>)
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7ff ffa4 	bl	800bcd0 <tcpip_inpkt>
 800bd88:	4603      	mov	r3, r0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0801a179 	.word	0x0801a179
 800bd98:	08019049 	.word	0x08019049

0800bd9c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bda6:	4819      	ldr	r0, [pc, #100]	; (800be0c <tcpip_try_callback+0x70>)
 800bda8:	f00e fb21 	bl	801a3ee <sys_mbox_valid>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d106      	bne.n	800bdc0 <tcpip_try_callback+0x24>
 800bdb2:	4b17      	ldr	r3, [pc, #92]	; (800be10 <tcpip_try_callback+0x74>)
 800bdb4:	f240 125d 	movw	r2, #349	; 0x15d
 800bdb8:	4916      	ldr	r1, [pc, #88]	; (800be14 <tcpip_try_callback+0x78>)
 800bdba:	4817      	ldr	r0, [pc, #92]	; (800be18 <tcpip_try_callback+0x7c>)
 800bdbc:	f00f fbde 	bl	801b57c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bdc0:	2008      	movs	r0, #8
 800bdc2:	f002 f8c5 	bl	800df50 <memp_malloc>
 800bdc6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d102      	bne.n	800bdd4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bdce:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd2:	e017      	b.n	800be04 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bde6:	68f9      	ldr	r1, [r7, #12]
 800bde8:	4808      	ldr	r0, [pc, #32]	; (800be0c <tcpip_try_callback+0x70>)
 800bdea:	f00e fab5 	bl	801a358 <sys_mbox_trypost>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d006      	beq.n	800be02 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bdf4:	68f9      	ldr	r1, [r7, #12]
 800bdf6:	2008      	movs	r0, #8
 800bdf8:	f002 f920 	bl	800e03c <memp_free>
    return ERR_MEM;
 800bdfc:	f04f 33ff 	mov.w	r3, #4294967295
 800be00:	e000      	b.n	800be04 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20009824 	.word	0x20009824
 800be10:	0801c1a0 	.word	0x0801c1a0
 800be14:	0801c218 	.word	0x0801c218
 800be18:	0801c1f0 	.word	0x0801c1f0

0800be1c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af02      	add	r7, sp, #8
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  lwip_init();
 800be26:	f001 fbca 	bl	800d5be <lwip_init>

  tcpip_init_done = initfunc;
 800be2a:	4a17      	ldr	r2, [pc, #92]	; (800be88 <tcpip_init+0x6c>)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800be30:	4a16      	ldr	r2, [pc, #88]	; (800be8c <tcpip_init+0x70>)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800be36:	2106      	movs	r1, #6
 800be38:	4815      	ldr	r0, [pc, #84]	; (800be90 <tcpip_init+0x74>)
 800be3a:	f00e fa73 	bl	801a324 <sys_mbox_new>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d006      	beq.n	800be52 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800be44:	4b13      	ldr	r3, [pc, #76]	; (800be94 <tcpip_init+0x78>)
 800be46:	f240 2261 	movw	r2, #609	; 0x261
 800be4a:	4913      	ldr	r1, [pc, #76]	; (800be98 <tcpip_init+0x7c>)
 800be4c:	4813      	ldr	r0, [pc, #76]	; (800be9c <tcpip_init+0x80>)
 800be4e:	f00f fb95 	bl	801b57c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800be52:	4813      	ldr	r0, [pc, #76]	; (800bea0 <tcpip_init+0x84>)
 800be54:	f00e fae8 	bl	801a428 <sys_mutex_new>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d006      	beq.n	800be6c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800be5e:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <tcpip_init+0x78>)
 800be60:	f240 2265 	movw	r2, #613	; 0x265
 800be64:	490f      	ldr	r1, [pc, #60]	; (800bea4 <tcpip_init+0x88>)
 800be66:	480d      	ldr	r0, [pc, #52]	; (800be9c <tcpip_init+0x80>)
 800be68:	f00f fb88 	bl	801b57c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800be6c:	2318      	movs	r3, #24
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be74:	2200      	movs	r2, #0
 800be76:	490c      	ldr	r1, [pc, #48]	; (800bea8 <tcpip_init+0x8c>)
 800be78:	480c      	ldr	r0, [pc, #48]	; (800beac <tcpip_init+0x90>)
 800be7a:	f00e fb07 	bl	801a48c <sys_thread_new>
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	2000981c 	.word	0x2000981c
 800be8c:	20009820 	.word	0x20009820
 800be90:	20009824 	.word	0x20009824
 800be94:	0801c1a0 	.word	0x0801c1a0
 800be98:	0801c228 	.word	0x0801c228
 800be9c:	0801c1f0 	.word	0x0801c1f0
 800bea0:	20009828 	.word	0x20009828
 800bea4:	0801c24c 	.word	0x0801c24c
 800bea8:	0800bbd9 	.word	0x0800bbd9
 800beac:	0801c270 	.word	0x0801c270

0800beb0 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	461a      	mov	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4413      	add	r3, r2
 800bec6:	78fa      	ldrb	r2, [r7, #3]
 800bec8:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	3301      	adds	r3, #1
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	2bff      	cmp	r3, #255	; 0xff
 800bedc:	d902      	bls.n	800bee4 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	801a      	strh	r2, [r3, #0]
  }
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	bc80      	pop	{r7}
 800beec:	4770      	bx	lr

0800beee <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800beee:	b480      	push	{r7}
 800bef0:	b083      	sub	sp, #12
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	885b      	ldrh	r3, [r3, #2]
 800befa:	461a      	mov	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4413      	add	r3, r2
 800bf00:	3304      	adds	r3, #4
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bc80      	pop	{r7}
 800bf0a:	4770      	bx	lr

0800bf0c <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800bf18:	887b      	ldrh	r3, [r7, #2]
 800bf1a:	2bff      	cmp	r3, #255	; 0xff
 800bf1c:	d905      	bls.n	800bf2a <mqtt_ringbuf_advance_get_idx+0x1e>
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	; (800bf58 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800bf20:	22cb      	movs	r2, #203	; 0xcb
 800bf22:	490e      	ldr	r1, [pc, #56]	; (800bf5c <mqtt_ringbuf_advance_get_idx+0x50>)
 800bf24:	480e      	ldr	r0, [pc, #56]	; (800bf60 <mqtt_ringbuf_advance_get_idx+0x54>)
 800bf26:	f00f fb29 	bl	801b57c <iprintf>

  rb->get += len;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	885a      	ldrh	r2, [r3, #2]
 800bf2e:	887b      	ldrh	r3, [r7, #2]
 800bf30:	4413      	add	r3, r2
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	885b      	ldrh	r3, [r3, #2]
 800bf3c:	2bff      	cmp	r3, #255	; 0xff
 800bf3e:	d906      	bls.n	800bf4e <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	885b      	ldrh	r3, [r3, #2]
 800bf44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	805a      	strh	r2, [r3, #2]
  }
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	0801c280 	.word	0x0801c280
 800bf5c:	0801c2b8 	.word	0x0801c2b8
 800bf60:	0801c2f8 	.word	0x0801c2f8

0800bf64 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	885b      	ldrh	r3, [r3, #2]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf80:	d303      	bcc.n	800bf8a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800bf88:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	b29b      	uxth	r3, r3
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bc80      	pop	{r7}
 800bf96:	4770      	bx	lr

0800bf98 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff ffdc 	bl	800bf64 <mqtt_ringbuf_len>
 800bfac:	4603      	mov	r3, r0
 800bfae:	461a      	mov	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	885b      	ldrh	r3, [r3, #2]
 800bfb4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	da04      	bge.n	800bfc6 <mqtt_output_send+0x2e>
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff ffd1 	bl	800bf64 <mqtt_ringbuf_len>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	e004      	b.n	800bfd0 <mqtt_output_send+0x38>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	885b      	ldrh	r3, [r3, #2]
 800bfca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bfd8:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d105      	bne.n	800bfec <mqtt_output_send+0x54>
 800bfe0:	4b44      	ldr	r3, [pc, #272]	; (800c0f4 <mqtt_output_send+0x15c>)
 800bfe2:	22f0      	movs	r2, #240	; 0xf0
 800bfe4:	4944      	ldr	r1, [pc, #272]	; (800c0f8 <mqtt_output_send+0x160>)
 800bfe6:	4845      	ldr	r0, [pc, #276]	; (800c0fc <mqtt_output_send+0x164>)
 800bfe8:	f00f fac8 	bl	801b57c <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800bfec:	89bb      	ldrh	r3, [r7, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d07c      	beq.n	800c0ec <mqtt_output_send+0x154>
 800bff2:	897b      	ldrh	r3, [r7, #10]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d079      	beq.n	800c0ec <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800bff8:	89ba      	ldrh	r2, [r7, #12]
 800bffa:	897b      	ldrh	r3, [r7, #10]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d90d      	bls.n	800c01c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800c000:	897b      	ldrh	r3, [r7, #10]
 800c002:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff ffad 	bl	800bf64 <mqtt_ringbuf_len>
 800c00a:	4603      	mov	r3, r0
 800c00c:	461a      	mov	r2, r3
 800c00e:	897b      	ldrh	r3, [r7, #10]
 800c010:	4293      	cmp	r3, r2
 800c012:	bf34      	ite	cc
 800c014:	2301      	movcc	r3, #1
 800c016:	2300      	movcs	r3, #0
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff ff66 	bl	800beee <mqtt_ringbuf_get_ptr>
 800c022:	4601      	mov	r1, r0
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <mqtt_output_send+0x96>
 800c02a:	2303      	movs	r3, #3
 800c02c:	e000      	b.n	800c030 <mqtt_output_send+0x98>
 800c02e:	2301      	movs	r3, #1
 800c030:	89ba      	ldrh	r2, [r7, #12]
 800c032:	6838      	ldr	r0, [r7, #0]
 800c034:	f007 fc48 	bl	80138c8 <tcp_write>
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800c03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d146      	bne.n	800c0d2 <mqtt_output_send+0x13a>
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d043      	beq.n	800c0d2 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800c04a:	89bb      	ldrh	r3, [r7, #12]
 800c04c:	4619      	mov	r1, r3
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff ff5c 	bl	800bf0c <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c05a:	461c      	mov	r4, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff ff81 	bl	800bf64 <mqtt_ringbuf_len>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	885b      	ldrh	r3, [r3, #2]
 800c06a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c06e:	429a      	cmp	r2, r3
 800c070:	da04      	bge.n	800c07c <mqtt_output_send+0xe4>
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff ff76 	bl	800bf64 <mqtt_ringbuf_len>
 800c078:	4603      	mov	r3, r0
 800c07a:	e003      	b.n	800c084 <mqtt_output_send+0xec>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	885b      	ldrh	r3, [r3, #2]
 800c080:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c084:	42a3      	cmp	r3, r4
 800c086:	dd03      	ble.n	800c090 <mqtt_output_send+0xf8>
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c08e:	e014      	b.n	800c0ba <mqtt_output_send+0x122>
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff ff67 	bl	800bf64 <mqtt_ringbuf_len>
 800c096:	4603      	mov	r3, r0
 800c098:	461a      	mov	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	885b      	ldrh	r3, [r3, #2]
 800c09e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	da04      	bge.n	800c0b0 <mqtt_output_send+0x118>
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ff5c 	bl	800bf64 <mqtt_ringbuf_len>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	e004      	b.n	800c0ba <mqtt_output_send+0x122>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	885b      	ldrh	r3, [r3, #2]
 800c0b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7ff ff16 	bl	800beee <mqtt_ringbuf_get_ptr>
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	89ba      	ldrh	r2, [r7, #12]
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	6838      	ldr	r0, [r7, #0]
 800c0ca:	f007 fbfd 	bl	80138c8 <tcp_write>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800c0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d109      	bne.n	800c0ee <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800c0da:	89bb      	ldrh	r3, [r7, #12]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff ff14 	bl	800bf0c <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800c0e4:	6838      	ldr	r0, [r7, #0]
 800c0e6:	f008 f9d9 	bl	801449c <tcp_output>
 800c0ea:	e000      	b.n	800c0ee <mqtt_output_send+0x156>
    return;
 800c0ec:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd90      	pop	{r4, r7, pc}
 800c0f4:	0801c280 	.word	0x0801c280
 800c0f8:	0801c320 	.word	0x0801c320
 800c0fc:	0801c2f8 	.word	0x0801c2f8

0800c100 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <mqtt_delete_request+0x14>
    r->next = r;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	601a      	str	r2, [r3, #0]
  }
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc80      	pop	{r7}
 800c11c:	4770      	bx	lr
	...

0800c120 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800c12c:	2300      	movs	r3, #0
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	2300      	movs	r3, #0
 800c132:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d106      	bne.n	800c148 <mqtt_take_request+0x28>
 800c13a:	4b1f      	ldr	r3, [pc, #124]	; (800c1b8 <mqtt_take_request+0x98>)
 800c13c:	f240 1267 	movw	r2, #359	; 0x167
 800c140:	491e      	ldr	r1, [pc, #120]	; (800c1bc <mqtt_take_request+0x9c>)
 800c142:	481f      	ldr	r0, [pc, #124]	; (800c1c0 <mqtt_take_request+0xa0>)
 800c144:	f00f fa1a 	bl	801b57c <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	e009      	b.n	800c164 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	899b      	ldrh	r3, [r3, #12]
 800c154:	887a      	ldrh	r2, [r7, #2]
 800c156:	429a      	cmp	r2, r3
 800c158:	d008      	beq.n	800c16c <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1f2      	bne.n	800c150 <mqtt_take_request+0x30>
 800c16a:	e000      	b.n	800c16e <mqtt_take_request+0x4e>
      break;
 800c16c:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d01c      	beq.n	800c1ae <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d104      	bne.n	800c184 <mqtt_take_request+0x64>
      *tail = iter->next;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	e003      	b.n	800c18c <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d009      	beq.n	800c1a8 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	89d9      	ldrh	r1, [r3, #14]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	89da      	ldrh	r2, [r3, #14]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	440a      	add	r2, r1
 800c1a4:	b292      	uxth	r2, r2
 800c1a6:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	0801c280 	.word	0x0801c280
 800c1bc:	0801c3c0 	.word	0x0801c3c0
 800c1c0:	0801c2f8 	.word	0x0801c2f8

0800c1c4 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d106      	bne.n	800c1e4 <mqtt_request_time_elapsed+0x20>
 800c1d6:	4b21      	ldr	r3, [pc, #132]	; (800c25c <mqtt_request_time_elapsed+0x98>)
 800c1d8:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800c1dc:	4920      	ldr	r1, [pc, #128]	; (800c260 <mqtt_request_time_elapsed+0x9c>)
 800c1de:	4821      	ldr	r0, [pc, #132]	; (800c264 <mqtt_request_time_elapsed+0xa0>)
 800c1e0:	f00f f9cc 	bl	801b57c <iprintf>
  r = *tail;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800c1ea:	e02c      	b.n	800c246 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800c1ec:	78fb      	ldrb	r3, [r7, #3]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	89db      	ldrh	r3, [r3, #14]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d31c      	bcc.n	800c232 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	89db      	ldrh	r3, [r3, #14]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	78fa      	ldrb	r2, [r7, #3]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d007      	beq.n	800c224 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	6892      	ldr	r2, [r2, #8]
 800c21c:	f06f 0102 	mvn.w	r1, #2
 800c220:	4610      	mov	r0, r2
 800c222:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7ff ff6b 	bl	800c100 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	e009      	b.n	800c246 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	89da      	ldrh	r2, [r3, #14]
 800c236:	78fb      	ldrb	r3, [r7, #3]
 800c238:	b29b      	uxth	r3, r3
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	81da      	strh	r2, [r3, #14]
      t = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800c246:	78fb      	ldrb	r3, [r7, #3]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <mqtt_request_time_elapsed+0x8e>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1cc      	bne.n	800c1ec <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	0801c280 	.word	0x0801c280
 800c260:	0801c3e0 	.word	0x0801c3e0
 800c264:	0801c2f8 	.word	0x0801c2f8

0800c268 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <mqtt_clear_requests+0x1c>
 800c276:	4b0e      	ldr	r3, [pc, #56]	; (800c2b0 <mqtt_clear_requests+0x48>)
 800c278:	f240 12a7 	movw	r2, #423	; 0x1a7
 800c27c:	490d      	ldr	r1, [pc, #52]	; (800c2b4 <mqtt_clear_requests+0x4c>)
 800c27e:	480e      	ldr	r0, [pc, #56]	; (800c2b8 <mqtt_clear_requests+0x50>)
 800c280:	f00f f97c 	bl	801b57c <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	e007      	b.n	800c29c <mqtt_clear_requests+0x34>
    next = iter->next;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff ff34 	bl	800c100 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	60fb      	str	r3, [r7, #12]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1f4      	bne.n	800c28c <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]
}
 800c2a8:	bf00      	nop
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	0801c280 	.word	0x0801c280
 800c2b4:	0801c408 	.word	0x0801c408
 800c2b8:	0801c2f8 	.word	0x0801c2f8

0800c2bc <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d106      	bne.n	800c2da <mqtt_init_requests+0x1e>
 800c2cc:	4b0f      	ldr	r3, [pc, #60]	; (800c30c <mqtt_init_requests+0x50>)
 800c2ce:	f240 12b7 	movw	r2, #439	; 0x1b7
 800c2d2:	490f      	ldr	r1, [pc, #60]	; (800c310 <mqtt_init_requests+0x54>)
 800c2d4:	480f      	ldr	r0, [pc, #60]	; (800c314 <mqtt_init_requests+0x58>)
 800c2d6:	f00f f951 	bl	801b57c <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]
 800c2de:	e00b      	b.n	800c2f8 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	011a      	lsls	r2, r3, #4
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
 800c2e6:	011b      	lsls	r3, r3, #4
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	440b      	add	r3, r1
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	440a      	add	r2, r1
 800c2f0:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d8ef      	bhi.n	800c2e0 <mqtt_init_requests+0x24>
  }
}
 800c300:	bf00      	nop
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	0801c280 	.word	0x0801c280
 800c310:	0801c42c 	.word	0x0801c42c
 800c314:	0801c2f8 	.word	0x0801c2f8

0800c318 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800c324:	78fb      	ldrb	r3, [r7, #3]
 800c326:	4619      	mov	r1, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7ff fdc1 	bl	800beb0 <mqtt_ringbuf_put>
}
 800c32e:	bf00      	nop
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	460b      	mov	r3, r1
 800c340:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800c342:	887b      	ldrh	r3, [r7, #2]
 800c344:	0a1b      	lsrs	r3, r3, #8
 800c346:	b29b      	uxth	r3, r3
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff fdaf 	bl	800beb0 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800c352:	887b      	ldrh	r3, [r7, #2]
 800c354:	b2db      	uxtb	r3, r3
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fda9 	bl	800beb0 <mqtt_ringbuf_put>
}
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <mqtt_output_append_string>:
  }
}

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	4613      	mov	r3, r2
 800c372:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	0a1b      	lsrs	r3, r3, #8
 800c378:	b29b      	uxth	r3, r3
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	4619      	mov	r1, r3
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f7ff fd96 	bl	800beb0 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	b2db      	uxtb	r3, r3
 800c388:	4619      	mov	r1, r3
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f7ff fd90 	bl	800beb0 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800c390:	2300      	movs	r3, #0
 800c392:	82fb      	strh	r3, [r7, #22]
 800c394:	e00a      	b.n	800c3ac <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800c396:	8afb      	ldrh	r3, [r7, #22]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	4413      	add	r3, r2
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff fd85 	bl	800beb0 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800c3a6:	8afb      	ldrh	r3, [r7, #22]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	82fb      	strh	r3, [r7, #22]
 800c3ac:	8afa      	ldrh	r2, [r7, #22]
 800c3ae:	88fb      	ldrh	r3, [r7, #6]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d3f0      	bcc.n	800c396 <mqtt_output_append_string+0x30>
  }
}
 800c3b4:	bf00      	nop
 800c3b6:	bf00      	nop
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	70fb      	strb	r3, [r7, #3]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	70bb      	strb	r3, [r7, #2]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800c3d8:	78fb      	ldrb	r3, [r7, #3]
 800c3da:	011b      	lsls	r3, r3, #4
 800c3dc:	b25a      	sxtb	r2, r3
 800c3de:	78bb      	ldrb	r3, [r7, #2]
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	b25b      	sxtb	r3, r3
 800c3e4:	f003 0308 	and.w	r3, r3, #8
 800c3e8:	b25b      	sxtb	r3, r3
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	b25a      	sxtb	r2, r3
 800c3ee:	787b      	ldrb	r3, [r7, #1]
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	b25b      	sxtb	r3, r3
 800c3f4:	f003 0306 	and.w	r3, r3, #6
 800c3f8:	b25b      	sxtb	r3, r3
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	b25a      	sxtb	r2, r3
 800c3fe:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800c402:	f003 0301 	and.w	r3, r3, #1
 800c406:	b25b      	sxtb	r3, r3
 800c408:	4313      	orrs	r3, r2
 800c40a:	b25b      	sxtb	r3, r3
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7ff ff81 	bl	800c318 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800c416:	8abb      	ldrh	r3, [r7, #20]
 800c418:	b25b      	sxtb	r3, r3
 800c41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c41e:	b25b      	sxtb	r3, r3
 800c420:	8aba      	ldrh	r2, [r7, #20]
 800c422:	2a7f      	cmp	r2, #127	; 0x7f
 800c424:	d902      	bls.n	800c42c <mqtt_output_append_fixed_header+0x6e>
 800c426:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800c42a:	e000      	b.n	800c42e <mqtt_output_append_fixed_header+0x70>
 800c42c:	2200      	movs	r2, #0
 800c42e:	4313      	orrs	r3, r2
 800c430:	b25b      	sxtb	r3, r3
 800c432:	b2db      	uxtb	r3, r3
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff ff6e 	bl	800c318 <mqtt_output_append_u8>
    r_length >>= 7;
 800c43c:	8abb      	ldrh	r3, [r7, #20]
 800c43e:	09db      	lsrs	r3, r3, #7
 800c440:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800c442:	8abb      	ldrh	r3, [r7, #20]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e6      	bne.n	800c416 <mqtt_output_append_fixed_header+0x58>
}
 800c448:	bf00      	nop
 800c44a:	bf00      	nop
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800c454:	b590      	push	{r4, r7, lr}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	460b      	mov	r3, r1
 800c45e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800c460:	887b      	ldrh	r3, [r7, #2]
 800c462:	3301      	adds	r3, #1
 800c464:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <mqtt_output_check_space+0x26>
 800c46c:	4b0f      	ldr	r3, [pc, #60]	; (800c4ac <mqtt_output_check_space+0x58>)
 800c46e:	f240 2207 	movw	r2, #519	; 0x207
 800c472:	490f      	ldr	r1, [pc, #60]	; (800c4b0 <mqtt_output_check_space+0x5c>)
 800c474:	480f      	ldr	r0, [pc, #60]	; (800c4b4 <mqtt_output_check_space+0x60>)
 800c476:	f00f f881 	bl	801b57c <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800c47a:	89fb      	ldrh	r3, [r7, #14]
 800c47c:	3301      	adds	r3, #1
 800c47e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800c480:	887b      	ldrh	r3, [r7, #2]
 800c482:	09db      	lsrs	r3, r3, #7
 800c484:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800c486:	887b      	ldrh	r3, [r7, #2]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1f6      	bne.n	800c47a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800c48c:	89fc      	ldrh	r4, [r7, #14]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7ff fd68 	bl	800bf64 <mqtt_ringbuf_len>
 800c494:	4603      	mov	r3, r0
 800c496:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c49a:	429c      	cmp	r4, r3
 800c49c:	bfd4      	ite	le
 800c49e:	2301      	movle	r3, #1
 800c4a0:	2300      	movgt	r3, #0
 800c4a2:	b2db      	uxtb	r3, r3
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd90      	pop	{r4, r7, pc}
 800c4ac:	0801c280 	.word	0x0801c280
 800c4b0:	0801c450 	.word	0x0801c450
 800c4b4:	0801c2f8 	.word	0x0801c2f8

0800c4b8 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d106      	bne.n	800c4d8 <mqtt_close+0x20>
 800c4ca:	4b27      	ldr	r3, [pc, #156]	; (800c568 <mqtt_close+0xb0>)
 800c4cc:	f240 221b 	movw	r2, #539	; 0x21b
 800c4d0:	4926      	ldr	r1, [pc, #152]	; (800c56c <mqtt_close+0xb4>)
 800c4d2:	4827      	ldr	r0, [pc, #156]	; (800c570 <mqtt_close+0xb8>)
 800c4d4:	f00f f852 	bl	801b57c <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d024      	beq.n	800c52a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f004 fad6 	bl	8010a98 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f004 fb14 	bl	8010b20 <tcp_err>
    altcp_sent(client->conn, NULL);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f004 faec 	bl	8010adc <tcp_sent>
    res = altcp_close(client->conn);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	4618      	mov	r0, r3
 800c50a:	f003 f8ef 	bl	800f6ec <tcp_close>
 800c50e:	4603      	mov	r3, r0
 800c510:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800c512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d004      	beq.n	800c524 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	4618      	mov	r0, r3
 800c520:	f003 f9ce 	bl	800f8c0 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3318      	adds	r3, #24
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fe9a 	bl	800c268 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	480f      	ldr	r0, [pc, #60]	; (800c574 <mqtt_close+0xbc>)
 800c538:	f009 f82e 	bl	8015598 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7a9b      	ldrb	r3, [r3, #10]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00d      	beq.n	800c560 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d006      	beq.n	800c560 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	6911      	ldr	r1, [r2, #16]
 800c55a:	887a      	ldrh	r2, [r7, #2]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	4798      	blx	r3
    }
  }
}
 800c560:	bf00      	nop
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	0801c280 	.word	0x0801c280
 800c56c:	0801c474 	.word	0x0801c474
 800c570:	0801c2f8 	.word	0x0801c2f8
 800c574:	0800c579 	.word	0x0800c579

0800c578 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af02      	add	r7, sp, #8
 800c57e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800c580:	2301      	movs	r3, #1
 800c582:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <mqtt_cyclic_timer+0x24>
 800c58e:	4b42      	ldr	r3, [pc, #264]	; (800c698 <mqtt_cyclic_timer+0x120>)
 800c590:	f44f 7211 	mov.w	r2, #580	; 0x244
 800c594:	4941      	ldr	r1, [pc, #260]	; (800c69c <mqtt_cyclic_timer+0x124>)
 800c596:	4842      	ldr	r0, [pc, #264]	; (800c6a0 <mqtt_cyclic_timer+0x128>)
 800c598:	f00e fff0 	bl	801b57c <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	7a9b      	ldrb	r3, [r3, #10]
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d115      	bne.n	800c5d0 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	2b63      	cmp	r3, #99	; 0x63
 800c5be:	dd5e      	ble.n	800c67e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800c5c0:	f240 1101 	movw	r1, #257	; 0x101
 800c5c4:	68b8      	ldr	r0, [r7, #8]
 800c5c6:	f7ff ff77 	bl	800c4b8 <mqtt_close>
      restart_timer = 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73fb      	strb	r3, [r7, #15]
 800c5ce:	e056      	b.n	800c67e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	7a9b      	ldrb	r3, [r3, #10]
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	d150      	bne.n	800c67a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	3318      	adds	r3, #24
 800c5dc:	2105      	movs	r1, #5
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff fdf0 	bl	800c1c4 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	885b      	ldrh	r3, [r3, #2]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d048      	beq.n	800c67e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	889b      	ldrh	r3, [r3, #4]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	889b      	ldrh	r3, [r3, #4]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4613      	mov	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	441a      	add	r2, r3
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	885b      	ldrh	r3, [r3, #2]
 800c608:	4619      	mov	r1, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	085b      	lsrs	r3, r3, #1
 800c610:	b29b      	uxth	r3, r3
 800c612:	440b      	add	r3, r1
 800c614:	429a      	cmp	r2, r3
 800c616:	dd06      	ble.n	800c626 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800c618:	f240 1101 	movw	r1, #257	; 0x101
 800c61c:	68b8      	ldr	r0, [r7, #8]
 800c61e:	f7ff ff4b 	bl	800c4b8 <mqtt_close>
        restart_timer = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	461a      	mov	r2, r3
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	8852      	ldrh	r2, [r2, #2]
 800c636:	4293      	cmp	r3, r2
 800c638:	db18      	blt.n	800c66c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	33ec      	adds	r3, #236	; 0xec
 800c63e:	2100      	movs	r1, #0
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff ff07 	bl	800c454 <mqtt_output_check_space>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d018      	beq.n	800c67e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c652:	2300      	movs	r3, #0
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	2300      	movs	r3, #0
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	2300      	movs	r3, #0
 800c65c:	2200      	movs	r2, #0
 800c65e:	210c      	movs	r1, #12
 800c660:	f7ff fead 	bl	800c3be <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2200      	movs	r2, #0
 800c668:	801a      	strh	r2, [r3, #0]
 800c66a:	e008      	b.n	800c67e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	3301      	adds	r3, #1
 800c672:	b29a      	uxth	r2, r3
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	801a      	strh	r2, [r3, #0]
 800c678:	e001      	b.n	800c67e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d005      	beq.n	800c690 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	4907      	ldr	r1, [pc, #28]	; (800c6a4 <mqtt_cyclic_timer+0x12c>)
 800c688:	f241 3088 	movw	r0, #5000	; 0x1388
 800c68c:	f008 ff5e 	bl	801554c <sys_timeout>
  }
}
 800c690:	bf00      	nop
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	0801c280 	.word	0x0801c280
 800c69c:	0801c490 	.word	0x0801c490
 800c6a0:	0801c2f8 	.word	0x0801c2f8
 800c6a4:	0800c579 	.word	0x0800c579

0800c6a8 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	70fb      	strb	r3, [r7, #3]
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	803b      	strh	r3, [r7, #0]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	33ec      	adds	r3, #236	; 0xec
 800c6ca:	2102      	movs	r1, #2
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7ff fec1 	bl	800c454 <mqtt_output_check_space>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d01c      	beq.n	800c712 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800c6de:	78bb      	ldrb	r3, [r7, #2]
 800c6e0:	78f9      	ldrb	r1, [r7, #3]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	9201      	str	r2, [sp, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	9200      	str	r2, [sp, #0]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f7ff fe67 	bl	800c3be <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	33ec      	adds	r3, #236	; 0xec
 800c6f4:	883a      	ldrh	r2, [r7, #0]
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fe1c 	bl	800c336 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	4619      	mov	r1, r3
 800c70a:	4610      	mov	r0, r2
 800c70c:	f7ff fc44 	bl	800bf98 <mqtt_output_send>
 800c710:	e001      	b.n	800c716 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800c712:	23ff      	movs	r3, #255	; 0xff
 800c714:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800c716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b082      	sub	sp, #8
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	460b      	mov	r3, r1
 800c72c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00c      	beq.n	800c750 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	6890      	ldr	r0, [r2, #8]
 800c73e:	78fa      	ldrb	r2, [r7, #3]
 800c740:	2a02      	cmp	r2, #2
 800c742:	d801      	bhi.n	800c748 <mqtt_incomming_suback+0x26>
 800c744:	2200      	movs	r2, #0
 800c746:	e001      	b.n	800c74c <mqtt_incomming_suback+0x2a>
 800c748:	f06f 020c 	mvn.w	r2, #12
 800c74c:	4611      	mov	r1, r2
 800c74e:	4798      	blx	r3
  }
}
 800c750:	bf00      	nop
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800c758:	b590      	push	{r4, r7, lr}
 800c75a:	b08f      	sub	sp, #60	; 0x3c
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	607b      	str	r3, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	72fb      	strb	r3, [r7, #11]
 800c766:	4613      	mov	r3, r2
 800c768:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800c76a:	2300      	movs	r3, #0
 800c76c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800c774:	7afb      	ldrb	r3, [r7, #11]
 800c776:	4413      	add	r3, r2
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800c77a:	7afb      	ldrb	r3, [r7, #11]
 800c77c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c780:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c788:	091b      	lsrs	r3, r3, #4
 800c78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c796:	2b7f      	cmp	r3, #127	; 0x7f
 800c798:	d906      	bls.n	800c7a8 <mqtt_message_received+0x50>
 800c79a:	4b97      	ldr	r3, [pc, #604]	; (800c9f8 <mqtt_message_received+0x2a0>)
 800c79c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c7a0:	4996      	ldr	r1, [pc, #600]	; (800c9fc <mqtt_message_received+0x2a4>)
 800c7a2:	4897      	ldr	r0, [pc, #604]	; (800ca00 <mqtt_message_received+0x2a8>)
 800c7a4:	f00e feea 	bl	801b57c <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800c7a8:	7afa      	ldrb	r2, [r7, #11]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d906      	bls.n	800c7c0 <mqtt_message_received+0x68>
 800c7b2:	4b91      	ldr	r3, [pc, #580]	; (800c9f8 <mqtt_message_received+0x2a0>)
 800c7b4:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800c7b8:	4992      	ldr	r1, [pc, #584]	; (800ca04 <mqtt_message_received+0x2ac>)
 800c7ba:	4891      	ldr	r0, [pc, #580]	; (800ca00 <mqtt_message_received+0x2a8>)
 800c7bc:	f00e fede 	bl	801b57c <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800c7c0:	7afa      	ldrb	r2, [r7, #11]
 800c7c2:	893b      	ldrh	r3, [r7, #8]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	2b80      	cmp	r3, #128	; 0x80
 800c7c8:	dd09      	ble.n	800c7de <mqtt_message_received+0x86>
 800c7ca:	4b8b      	ldr	r3, [pc, #556]	; (800c9f8 <mqtt_message_received+0x2a0>)
 800c7cc:	f240 22ad 	movw	r2, #685	; 0x2ad
 800c7d0:	498d      	ldr	r1, [pc, #564]	; (800ca08 <mqtt_message_received+0x2b0>)
 800c7d2:	488b      	ldr	r0, [pc, #556]	; (800ca00 <mqtt_message_received+0x2a8>)
 800c7d4:	f00e fed2 	bl	801b57c <iprintf>
 800c7d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7dc:	e16f      	b.n	800cabe <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800c7de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d123      	bne.n	800c82e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	7a9b      	ldrb	r3, [r3, #10]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	f040 8152 	bne.w	800ca94 <mqtt_message_received+0x33c>
      if (length < 2) {
 800c7f0:	893b      	ldrh	r3, [r7, #8]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	f240 8150 	bls.w	800ca98 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800c800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c802:	2b00      	cmp	r3, #0
 800c804:	f040 8146 	bne.w	800ca94 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2200      	movs	r2, #0
 800c80c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2203      	movs	r2, #3
 800c812:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	695b      	ldr	r3, [r3, #20]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 813b 	beq.w	800ca94 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	6911      	ldr	r1, [r2, #16]
 800c826:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	4798      	blx	r3
 800c82c:	e132      	b.n	800ca94 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800c82e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c832:	2b0d      	cmp	r3, #13
 800c834:	f000 812e 	beq.w	800ca94 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800c838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c83c:	2b03      	cmp	r3, #3
 800c83e:	f040 80c0 	bne.w	800c9c2 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800c846:	893b      	ldrh	r3, [r7, #8]
 800c848:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c850:	105b      	asrs	r3, r3, #1
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f003 0303 	and.w	r3, r3, #3
 800c858:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c85e:	2b80      	cmp	r3, #128	; 0x80
 800c860:	d87d      	bhi.n	800c95e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800c862:	7ffb      	ldrb	r3, [r7, #31]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <mqtt_message_received+0x114>
 800c868:	2302      	movs	r3, #2
 800c86a:	e000      	b.n	800c86e <mqtt_message_received+0x116>
 800c86c:	2300      	movs	r3, #0
 800c86e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800c870:	8bbb      	ldrh	r3, [r7, #28]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	893b      	ldrh	r3, [r7, #8]
 800c876:	429a      	cmp	r2, r3
 800c878:	f280 8110 	bge.w	800ca9c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800c882:	8b7b      	ldrh	r3, [r7, #26]
 800c884:	021b      	lsls	r3, r3, #8
 800c886:	b29a      	uxth	r2, r3
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	3301      	adds	r3, #1
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	b29b      	uxth	r3, r3
 800c890:	4413      	add	r3, r2
 800c892:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800c894:	8b7a      	ldrh	r2, [r7, #26]
 800c896:	8939      	ldrh	r1, [r7, #8]
 800c898:	8bbb      	ldrh	r3, [r7, #28]
 800c89a:	3302      	adds	r3, #2
 800c89c:	1acb      	subs	r3, r1, r3
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	f300 80fe 	bgt.w	800caa0 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800c8a4:	8b7a      	ldrh	r2, [r7, #26]
 800c8a6:	8bbb      	ldrh	r3, [r7, #28]
 800c8a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8aa:	1acb      	subs	r3, r1, r3
 800c8ac:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	f200 80f6 	bhi.w	800caa0 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b6:	3302      	adds	r3, #2
 800c8b8:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800c8ba:	8b7b      	ldrh	r3, [r7, #26]
 800c8bc:	3302      	adds	r3, #2
 800c8be:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800c8c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c8c2:	7ffa      	ldrb	r2, [r7, #31]
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	d001      	beq.n	800c8cc <mqtt_message_received+0x174>
 800c8c8:	2202      	movs	r2, #2
 800c8ca:	e000      	b.n	800c8ce <mqtt_message_received+0x176>
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	4413      	add	r3, r2
 800c8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	f0c0 80e6 	bcc.w	800caa4 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800c8d8:	7ffb      	ldrb	r3, [r7, #31]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d01a      	beq.n	800c914 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800c8de:	893a      	ldrh	r2, [r7, #8]
 800c8e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c8e2:	3302      	adds	r3, #2
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	f0c0 80df 	bcc.w	800caa8 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800c8ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ee:	4413      	add	r3, r2
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	021b      	lsls	r3, r3, #8
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8fe:	440b      	add	r3, r1
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	b29b      	uxth	r3, r3
 800c904:	4413      	add	r3, r2
 800c906:	b29a      	uxth	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800c90c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c90e:	3302      	adds	r3, #2
 800c910:	863b      	strh	r3, [r7, #48]	; 0x30
 800c912:	e002      	b.n	800c91a <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800c91a:	8b7b      	ldrh	r3, [r7, #26]
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	4413      	add	r3, r2
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800c924:	8b7b      	ldrh	r3, [r7, #26]
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4413      	add	r3, r2
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800c92e:	893a      	ldrh	r2, [r7, #8]
 800c930:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800c936:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c938:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d008      	beq.n	800c954 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800c94a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	440a      	add	r2, r1
 800c950:	6979      	ldr	r1, [r7, #20]
 800c952:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800c954:	8b7b      	ldrh	r3, [r7, #26]
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	4413      	add	r3, r2
 800c95a:	7cfa      	ldrb	r2, [r7, #19]
 800c95c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800c95e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c960:	2b00      	cmp	r3, #0
 800c962:	d103      	bne.n	800c96c <mqtt_message_received+0x214>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	f040 8094 	bne.w	800ca94 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800c96c:	893b      	ldrh	r3, [r7, #8]
 800c96e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800c970:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c972:	440a      	add	r2, r1
 800c974:	4293      	cmp	r3, r2
 800c976:	f0c0 8099 	bcc.w	800caac <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800c982:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c986:	18d1      	adds	r1, r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	bf0c      	ite	eq
 800c98e:	2301      	moveq	r3, #1
 800c990:	2300      	movne	r3, #0
 800c992:	b2db      	uxtb	r3, r3
 800c994:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c996:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d17a      	bne.n	800ca94 <mqtt_message_received+0x33c>
 800c99e:	7ffb      	ldrb	r3, [r7, #31]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d077      	beq.n	800ca94 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800c9a4:	7ffb      	ldrb	r3, [r7, #31]
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d101      	bne.n	800c9ae <mqtt_message_received+0x256>
 800c9aa:	2304      	movs	r3, #4
 800c9ac:	e000      	b.n	800c9b0 <mqtt_message_received+0x258>
 800c9ae:	2305      	movs	r3, #5
 800c9b0:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	891a      	ldrh	r2, [r3, #8]
 800c9b6:	7cb9      	ldrb	r1, [r7, #18]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f7ff fe74 	bl	800c6a8 <pub_ack_rec_rel_response>
 800c9c0:	e068      	b.n	800ca94 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800c9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d067      	beq.n	800cab0 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800c9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9e4:	2b05      	cmp	r3, #5
 800c9e6:	d111      	bne.n	800ca0c <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800c9e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	2106      	movs	r1, #6
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f7ff fe5a 	bl	800c6a8 <pub_ack_rec_rel_response>
 800c9f4:	e04e      	b.n	800ca94 <mqtt_message_received+0x33c>
 800c9f6:	bf00      	nop
 800c9f8:	0801c280 	.word	0x0801c280
 800c9fc:	0801c4b4 	.word	0x0801c4b4
 800ca00:	0801c2f8 	.word	0x0801c2f8
 800ca04:	0801c4e4 	.word	0x0801c4e4
 800ca08:	0801c508 	.word	0x0801c508

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800ca0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca10:	2b06      	cmp	r3, #6
 800ca12:	d106      	bne.n	800ca22 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800ca14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca16:	2300      	movs	r3, #0
 800ca18:	2107      	movs	r1, #7
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fe44 	bl	800c6a8 <pub_ack_rec_rel_response>
 800ca20:	e038      	b.n	800ca94 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800ca22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca26:	2b09      	cmp	r3, #9
 800ca28:	d00b      	beq.n	800ca42 <mqtt_message_received+0x2ea>
 800ca2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca2e:	2b0b      	cmp	r3, #11
 800ca30:	d007      	beq.n	800ca42 <mqtt_message_received+0x2ea>
 800ca32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca36:	2b07      	cmp	r3, #7
 800ca38:	d003      	beq.n	800ca42 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800ca3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	d138      	bne.n	800cab4 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3318      	adds	r3, #24
 800ca46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7ff fb68 	bl	800c120 <mqtt_take_request>
 800ca50:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01c      	beq.n	800ca92 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800ca58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca5c:	2b09      	cmp	r3, #9
 800ca5e:	d10a      	bne.n	800ca76 <mqtt_message_received+0x31e>
          if (length < 3) {
 800ca60:	893b      	ldrh	r3, [r7, #8]
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d928      	bls.n	800cab8 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	3302      	adds	r3, #2
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6a38      	ldr	r0, [r7, #32]
 800ca70:	f7ff fe57 	bl	800c722 <mqtt_incomming_suback>
 800ca74:	e00a      	b.n	800ca8c <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d006      	beq.n	800ca8c <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800ca7e:	6a3b      	ldr	r3, [r7, #32]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	6a3a      	ldr	r2, [r7, #32]
 800ca84:	6892      	ldr	r2, [r2, #8]
 800ca86:	2100      	movs	r1, #0
 800ca88:	4610      	mov	r0, r2
 800ca8a:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800ca8c:	6a38      	ldr	r0, [r7, #32]
 800ca8e:	f7ff fb37 	bl	800c100 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800ca92:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800ca94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ca96:	e012      	b.n	800cabe <mqtt_message_received+0x366>
        goto out_disconnect;
 800ca98:	bf00      	nop
 800ca9a:	e00e      	b.n	800caba <mqtt_message_received+0x362>
        goto out_disconnect;
 800ca9c:	bf00      	nop
 800ca9e:	e00c      	b.n	800caba <mqtt_message_received+0x362>
        goto out_disconnect;
 800caa0:	bf00      	nop
 800caa2:	e00a      	b.n	800caba <mqtt_message_received+0x362>
        goto out_disconnect;
 800caa4:	bf00      	nop
 800caa6:	e008      	b.n	800caba <mqtt_message_received+0x362>
          goto out_disconnect;
 800caa8:	bf00      	nop
 800caaa:	e006      	b.n	800caba <mqtt_message_received+0x362>
        goto out_disconnect;
 800caac:	bf00      	nop
 800caae:	e004      	b.n	800caba <mqtt_message_received+0x362>
      goto out_disconnect;
 800cab0:	bf00      	nop
 800cab2:	e002      	b.n	800caba <mqtt_message_received+0x362>
      goto out_disconnect;
 800cab4:	bf00      	nop
 800cab6:	e000      	b.n	800caba <mqtt_message_received+0x362>
            goto out_disconnect;
 800cab8:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800caba:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	373c      	adds	r7, #60	; 0x3c
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd90      	pop	{r4, r7, pc}
 800cac6:	bf00      	nop

0800cac8 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800cae2:	e0bc      	b.n	800cc5e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d903      	bls.n	800caf2 <mqtt_parse_incoming+0x2a>
 800caea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	da4d      	bge.n	800cb8e <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800caf2:	7dfa      	ldrb	r2, [r7, #23]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d206      	bcs.n	800cb0a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	4413      	add	r3, r2
 800cb02:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cb06:	75bb      	strb	r3, [r7, #22]
 800cb08:	e012      	b.n	800cb30 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800cb0a:	8bfb      	ldrh	r3, [r7, #30]
 800cb0c:	1c5a      	adds	r2, r3, #1
 800cb0e:	83fa      	strh	r2, [r7, #30]
 800cb10:	4619      	mov	r1, r3
 800cb12:	6838      	ldr	r0, [r7, #0]
 800cb14:	f002 fba0 	bl	800f258 <pbuf_get_at>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb20:	1c59      	adds	r1, r3, #1
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	6691      	str	r1, [r2, #104]	; 0x68
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	4413      	add	r3, r2
 800cb2a:	7dba      	ldrb	r2, [r7, #22]
 800cb2c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	3301      	adds	r3, #1
 800cb34:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	f240 8090 	bls.w	800cc5e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800cb3e:	7dbb      	ldrb	r3, [r7, #22]
 800cb40:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
 800cb46:	1e9a      	subs	r2, r3, #2
 800cb48:	4613      	mov	r3, r2
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	1a9b      	subs	r3, r3, r2
 800cb4e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb52:	69ba      	ldr	r2, [r7, #24]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800cb58:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	db7e      	blt.n	800cc5e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10b      	bne.n	800cb7e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800cb66:	7df9      	ldrb	r1, [r7, #23]
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff fdf3 	bl	800c758 <mqtt_message_received>
            client->msg_idx = 0;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	75fb      	strb	r3, [r7, #23]
 800cb7c:	e06f      	b.n	800cc5e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800cb7e:	7dfa      	ldrb	r2, [r7, #23]
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	441a      	add	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800cb8c:	e067      	b.n	800cc5e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	7dfa      	ldrb	r2, [r7, #23]
 800cb98:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800cb9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cba0:	fb01 f202 	mul.w	r2, r1, r2
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	4413      	add	r3, r2
 800cbae:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	891a      	ldrh	r2, [r3, #8]
 800cbb4:	8bfb      	ldrh	r3, [r7, #30]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	461a      	mov	r2, r3
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d905      	bls.n	800cbce <mqtt_parse_incoming+0x106>
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	891a      	ldrh	r2, [r3, #8]
 800cbc6:	8bfb      	ldrh	r3, [r7, #30]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	e001      	b.n	800cbd2 <mqtt_parse_incoming+0x10a>
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800cbd4:	8a7b      	ldrh	r3, [r7, #18]
 800cbd6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800cbda:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800cbdc:	8aba      	ldrh	r2, [r7, #20]
 800cbde:	8a3b      	ldrh	r3, [r7, #16]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d901      	bls.n	800cbe8 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800cbe4:	8a3b      	ldrh	r3, [r7, #16]
 800cbe6:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800cbee:	8a7b      	ldrh	r3, [r7, #18]
 800cbf0:	18d1      	adds	r1, r2, r3
 800cbf2:	8bfb      	ldrh	r3, [r7, #30]
 800cbf4:	8aba      	ldrh	r2, [r7, #20]
 800cbf6:	6838      	ldr	r0, [r7, #0]
 800cbf8:	f002 fa62 	bl	800f0c0 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cc00:	8abb      	ldrh	r3, [r7, #20]
 800cc02:	441a      	add	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800cc08:	8bfa      	ldrh	r2, [r7, #30]
 800cc0a:	8abb      	ldrh	r3, [r7, #20]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800cc10:	8abb      	ldrh	r3, [r7, #20]
 800cc12:	69ba      	ldr	r2, [r7, #24]
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <mqtt_parse_incoming+0x15e>
 800cc1e:	8aba      	ldrh	r2, [r7, #20]
 800cc20:	8a3b      	ldrh	r3, [r7, #16]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d11b      	bne.n	800cc5e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800cc26:	8a7a      	ldrh	r2, [r7, #18]
 800cc28:	8abb      	ldrh	r3, [r7, #20]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	7df9      	ldrb	r1, [r7, #23]
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7ff fd8c 	bl	800c758 <mqtt_message_received>
 800cc40:	4603      	mov	r3, r0
 800cc42:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800cc44:	89fb      	ldrh	r3, [r7, #14]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <mqtt_parse_incoming+0x186>
          return res;
 800cc4a:	89fb      	ldrh	r3, [r7, #14]
 800cc4c:	e00e      	b.n	800cc6c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d104      	bne.n	800cc5e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	891b      	ldrh	r3, [r3, #8]
 800cc62:	8bfa      	ldrh	r2, [r7, #30]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	f4ff af3d 	bcc.w	800cae4 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3720      	adds	r7, #32
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d106      	bne.n	800cc9a <mqtt_tcp_recv_cb+0x26>
 800cc8c:	4b24      	ldr	r3, [pc, #144]	; (800cd20 <mqtt_tcp_recv_cb+0xac>)
 800cc8e:	f240 32a7 	movw	r2, #935	; 0x3a7
 800cc92:	4924      	ldr	r1, [pc, #144]	; (800cd24 <mqtt_tcp_recv_cb+0xb0>)
 800cc94:	4824      	ldr	r0, [pc, #144]	; (800cd28 <mqtt_tcp_recv_cb+0xb4>)
 800cc96:	f00e fc71 	bl	801b57c <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d006      	beq.n	800ccb2 <mqtt_tcp_recv_cb+0x3e>
 800cca4:	4b1e      	ldr	r3, [pc, #120]	; (800cd20 <mqtt_tcp_recv_cb+0xac>)
 800cca6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ccaa:	4920      	ldr	r1, [pc, #128]	; (800cd2c <mqtt_tcp_recv_cb+0xb8>)
 800ccac:	481e      	ldr	r0, [pc, #120]	; (800cd28 <mqtt_tcp_recv_cb+0xb4>)
 800ccae:	f00e fc65 	bl	801b57c <iprintf>

  if (p == NULL) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d105      	bne.n	800ccc4 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800ccb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ccbc:	6978      	ldr	r0, [r7, #20]
 800ccbe:	f7ff fbfb 	bl	800c4b8 <mqtt_close>
 800ccc2:	e027      	b.n	800cd14 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800ccc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d005      	beq.n	800ccd8 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f001 fff3 	bl	800ecb8 <pbuf_free>
      return err;
 800ccd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccd6:	e01e      	b.n	800cd16 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	891b      	ldrh	r3, [r3, #8]
 800ccdc:	4619      	mov	r1, r3
 800ccde:	68b8      	ldr	r0, [r7, #8]
 800cce0:	f002 feec 	bl	800fabc <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	6978      	ldr	r0, [r7, #20]
 800cce8:	f7ff feee 	bl	800cac8 <mqtt_parse_incoming>
 800ccec:	4603      	mov	r3, r0
 800ccee:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f001 ffe1 	bl	800ecb8 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800ccf6:	8a7b      	ldrh	r3, [r7, #18]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800ccfc:	8a7b      	ldrh	r3, [r7, #18]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6978      	ldr	r0, [r7, #20]
 800cd02:	f7ff fbd9 	bl	800c4b8 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	885b      	ldrh	r3, [r3, #2]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2200      	movs	r2, #0
 800cd12:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	0801c280 	.word	0x0801c280
 800cd24:	0801c520 	.word	0x0801c520
 800cd28:	0801c2f8 	.word	0x0801c2f8
 800cd2c:	0801c544 	.word	0x0801c544

0800cd30 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	7a9b      	ldrb	r3, [r3, #10]
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d127      	bne.n	800cd9a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2200      	movs	r2, #0
 800cd54:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800cd56:	e00d      	b.n	800cd74 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d006      	beq.n	800cd6e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	6892      	ldr	r2, [r2, #8]
 800cd68:	2100      	movs	r1, #0
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800cd6e:	6938      	ldr	r0, [r7, #16]
 800cd70:	f7ff f9c6 	bl	800c100 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	3318      	adds	r3, #24
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff f9d0 	bl	800c120 <mqtt_take_request>
 800cd80:	6138      	str	r0, [r7, #16]
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1e7      	bne.n	800cd58 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	4619      	mov	r1, r3
 800cd94:	4610      	mov	r0, r2
 800cd96:	f7ff f8ff 	bl	800bf98 <mqtt_output_send>
  }
  return ERR_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3718      	adds	r7, #24
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d106      	bne.n	800cdc8 <mqtt_tcp_err_cb+0x24>
 800cdba:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <mqtt_tcp_err_cb+0x3c>)
 800cdbc:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800cdc0:	4908      	ldr	r1, [pc, #32]	; (800cde4 <mqtt_tcp_err_cb+0x40>)
 800cdc2:	4809      	ldr	r0, [pc, #36]	; (800cde8 <mqtt_tcp_err_cb+0x44>)
 800cdc4:	f00e fbda 	bl	801b57c <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800cdce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f7ff fb70 	bl	800c4b8 <mqtt_close>
}
 800cdd8:	bf00      	nop
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0801c280 	.word	0x0801c280
 800cde4:	0801c56c 	.word	0x0801c56c
 800cde8:	0801c2f8 	.word	0x0801c2f8

0800cdec <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	7a9b      	ldrb	r3, [r3, #10]
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d105      	bne.n	800ce0e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	33ec      	adds	r3, #236	; 0xec
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff f8c5 	bl	800bf98 <mqtt_output_send>
  }
  return ERR_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	4613      	mov	r3, r2
 800ce24:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800ce2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800ce32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce36:	e025      	b.n	800ce84 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800ce3e:	4913      	ldr	r1, [pc, #76]	; (800ce8c <mqtt_tcp_connect_cb+0x74>)
 800ce40:	68b8      	ldr	r0, [r7, #8]
 800ce42:	f003 fe29 	bl	8010a98 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800ce46:	4912      	ldr	r1, [pc, #72]	; (800ce90 <mqtt_tcp_connect_cb+0x78>)
 800ce48:	68b8      	ldr	r0, [r7, #8]
 800ce4a:	f003 fe47 	bl	8010adc <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800ce4e:	2202      	movs	r2, #2
 800ce50:	4910      	ldr	r1, [pc, #64]	; (800ce94 <mqtt_tcp_connect_cb+0x7c>)
 800ce52:	68b8      	ldr	r0, [r7, #8]
 800ce54:	f003 fe86 	bl	8010b64 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800ce5e:	697a      	ldr	r2, [r7, #20]
 800ce60:	490d      	ldr	r1, [pc, #52]	; (800ce98 <mqtt_tcp_connect_cb+0x80>)
 800ce62:	f241 3088 	movw	r0, #5000	; 0x1388
 800ce66:	f008 fb71 	bl	801554c <sys_timeout>
  client->cyclic_tick = 0;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f7ff f88b 	bl	800bf98 <mqtt_output_send>

  return ERR_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	0800cc75 	.word	0x0800cc75
 800ce90:	0800cd31 	.word	0x0800cd31
 800ce94:	0800cded 	.word	0x0800cded
 800ce98:	0800c579 	.word	0x0800c579

0800ce9c <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800cea0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800cea4:	2001      	movs	r0, #1
 800cea6:	f000 ff8d 	bl	800ddc4 <mem_calloc>
 800ceaa:	4603      	mov	r3, r0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b08c      	sub	sp, #48	; 0x30
 800ceb4:	af02      	add	r7, sp, #8
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	4613      	mov	r3, r2
 800cebe:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800cec0:	230a      	movs	r3, #10
 800cec2:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ceca:	2300      	movs	r3, #0
 800cecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ced0:	2300      	movs	r3, #0
 800ced2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	83fb      	strh	r3, [r7, #30]
 800ceda:	2300      	movs	r3, #0
 800cedc:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d106      	bne.n	800cef2 <mqtt_client_connect+0x42>
 800cee4:	4b9e      	ldr	r3, [pc, #632]	; (800d160 <mqtt_client_connect+0x2b0>)
 800cee6:	f240 520f 	movw	r2, #1295	; 0x50f
 800ceea:	499e      	ldr	r1, [pc, #632]	; (800d164 <mqtt_client_connect+0x2b4>)
 800ceec:	489e      	ldr	r0, [pc, #632]	; (800d168 <mqtt_client_connect+0x2b8>)
 800ceee:	f00e fb45 	bl	801b57c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d106      	bne.n	800cf06 <mqtt_client_connect+0x56>
 800cef8:	4b99      	ldr	r3, [pc, #612]	; (800d160 <mqtt_client_connect+0x2b0>)
 800cefa:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800cefe:	499b      	ldr	r1, [pc, #620]	; (800d16c <mqtt_client_connect+0x2bc>)
 800cf00:	4899      	ldr	r0, [pc, #612]	; (800d168 <mqtt_client_connect+0x2b8>)
 800cf02:	f00e fb3b 	bl	801b57c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800cf06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d106      	bne.n	800cf1a <mqtt_client_connect+0x6a>
 800cf0c:	4b94      	ldr	r3, [pc, #592]	; (800d160 <mqtt_client_connect+0x2b0>)
 800cf0e:	f240 5211 	movw	r2, #1297	; 0x511
 800cf12:	4997      	ldr	r1, [pc, #604]	; (800d170 <mqtt_client_connect+0x2c0>)
 800cf14:	4894      	ldr	r0, [pc, #592]	; (800d168 <mqtt_client_connect+0x2b8>)
 800cf16:	f00e fb31 	bl	801b57c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <mqtt_client_connect+0x80>
 800cf22:	4b8f      	ldr	r3, [pc, #572]	; (800d160 <mqtt_client_connect+0x2b0>)
 800cf24:	f240 5212 	movw	r2, #1298	; 0x512
 800cf28:	4992      	ldr	r1, [pc, #584]	; (800d174 <mqtt_client_connect+0x2c4>)
 800cf2a:	488f      	ldr	r0, [pc, #572]	; (800d168 <mqtt_client_connect+0x2b8>)
 800cf2c:	f00e fb26 	bl	801b57c <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	7a9b      	ldrb	r3, [r3, #10]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800cf38:	f06f 0309 	mvn.w	r3, #9
 800cf3c:	e21f      	b.n	800d37e <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800cf3e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800cf42:	2100      	movs	r1, #0
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f00e fa33 	bl	801b3b0 <memset>
  client->connect_arg = arg;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf4e:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800cf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf58:	899a      	ldrh	r2, [r3, #12]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	331c      	adds	r3, #28
 800cf62:	2104      	movs	r1, #4
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff f9a9 	bl	800c2bc <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800cf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d073      	beq.n	800d05a <mqtt_client_connect+0x1aa>
 800cf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d06f      	beq.n	800d05a <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800cf7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf7e:	f043 0304 	orr.w	r3, r3, #4
 800cf82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800cf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf88:	7e1b      	ldrb	r3, [r3, #24]
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	b25b      	sxtb	r3, r3
 800cf8e:	f003 0318 	and.w	r3, r3, #24
 800cf92:	b25a      	sxtb	r2, r3
 800cf94:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	b25b      	sxtb	r3, r3
 800cf9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800cfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa2:	7e5b      	ldrb	r3, [r3, #25]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d005      	beq.n	800cfb4 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800cfa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfac:	f043 0320 	orr.w	r3, r3, #32
 800cfb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800cfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f3 f959 	bl	8000270 <strlen>
 800cfbe:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	2bff      	cmp	r3, #255	; 0xff
 800cfc4:	d909      	bls.n	800cfda <mqtt_client_connect+0x12a>
 800cfc6:	4b66      	ldr	r3, [pc, #408]	; (800d160 <mqtt_client_connect+0x2b0>)
 800cfc8:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800cfcc:	496a      	ldr	r1, [pc, #424]	; (800d178 <mqtt_client_connect+0x2c8>)
 800cfce:	4866      	ldr	r0, [pc, #408]	; (800d168 <mqtt_client_connect+0x2b8>)
 800cfd0:	f00e fad4 	bl	801b57c <iprintf>
 800cfd4:	f06f 0305 	mvn.w	r3, #5
 800cfd8:	e1d1      	b.n	800d37e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d109      	bne.n	800cff4 <mqtt_client_connect+0x144>
 800cfe0:	4b5f      	ldr	r3, [pc, #380]	; (800d160 <mqtt_client_connect+0x2b0>)
 800cfe2:	f240 5229 	movw	r2, #1321	; 0x529
 800cfe6:	4965      	ldr	r1, [pc, #404]	; (800d17c <mqtt_client_connect+0x2cc>)
 800cfe8:	485f      	ldr	r0, [pc, #380]	; (800d168 <mqtt_client_connect+0x2b8>)
 800cfea:	f00e fac7 	bl	801b57c <iprintf>
 800cfee:	f06f 0305 	mvn.w	r3, #5
 800cff2:	e1c4      	b.n	800d37e <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800cffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffc:	695b      	ldr	r3, [r3, #20]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7f3 f936 	bl	8000270 <strlen>
 800d004:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	2bff      	cmp	r3, #255	; 0xff
 800d00a:	d909      	bls.n	800d020 <mqtt_client_connect+0x170>
 800d00c:	4b54      	ldr	r3, [pc, #336]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d00e:	f240 522c 	movw	r2, #1324	; 0x52c
 800d012:	495b      	ldr	r1, [pc, #364]	; (800d180 <mqtt_client_connect+0x2d0>)
 800d014:	4854      	ldr	r0, [pc, #336]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d016:	f00e fab1 	bl	801b57c <iprintf>
 800d01a:	f06f 0305 	mvn.w	r3, #5
 800d01e:	e1ae      	b.n	800d37e <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800d026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d028:	1c9a      	adds	r2, r3, #2
 800d02a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d02e:	4413      	add	r3, r2
 800d030:	1c9a      	adds	r2, r3, #2
 800d032:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d036:	4413      	add	r3, r2
 800d038:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d040:	d309      	bcc.n	800d056 <mqtt_client_connect+0x1a6>
 800d042:	4b47      	ldr	r3, [pc, #284]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d044:	f240 522f 	movw	r2, #1327	; 0x52f
 800d048:	494e      	ldr	r1, [pc, #312]	; (800d184 <mqtt_client_connect+0x2d4>)
 800d04a:	4847      	ldr	r0, [pc, #284]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d04c:	f00e fa96 	bl	801b57c <iprintf>
 800d050:	f06f 0305 	mvn.w	r3, #5
 800d054:	e193      	b.n	800d37e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800d05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d03d      	beq.n	800d0de <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800d062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d066:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d06a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800d06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	4618      	mov	r0, r3
 800d074:	f7f3 f8fc 	bl	8000270 <strlen>
 800d078:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d080:	d309      	bcc.n	800d096 <mqtt_client_connect+0x1e6>
 800d082:	4b37      	ldr	r3, [pc, #220]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d084:	f240 5235 	movw	r2, #1333	; 0x535
 800d088:	493f      	ldr	r1, [pc, #252]	; (800d188 <mqtt_client_connect+0x2d8>)
 800d08a:	4837      	ldr	r0, [pc, #220]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d08c:	f00e fa76 	bl	801b57c <iprintf>
 800d090:	f06f 0305 	mvn.w	r3, #5
 800d094:	e173      	b.n	800d37e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d109      	bne.n	800d0b0 <mqtt_client_connect+0x200>
 800d09c:	4b30      	ldr	r3, [pc, #192]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d09e:	f240 5236 	movw	r2, #1334	; 0x536
 800d0a2:	493a      	ldr	r1, [pc, #232]	; (800d18c <mqtt_client_connect+0x2dc>)
 800d0a4:	4830      	ldr	r0, [pc, #192]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d0a6:	f00e fa69 	bl	801b57c <iprintf>
 800d0aa:	f06f 0305 	mvn.w	r3, #5
 800d0ae:	e166      	b.n	800d37e <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800d0b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b6:	1c9a      	adds	r2, r3, #2
 800d0b8:	8bfb      	ldrh	r3, [r7, #30]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0c4:	d309      	bcc.n	800d0da <mqtt_client_connect+0x22a>
 800d0c6:	4b26      	ldr	r3, [pc, #152]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d0c8:	f240 5239 	movw	r2, #1337	; 0x539
 800d0cc:	492d      	ldr	r1, [pc, #180]	; (800d184 <mqtt_client_connect+0x2d4>)
 800d0ce:	4826      	ldr	r0, [pc, #152]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d0d0:	f00e fa54 	bl	801b57c <iprintf>
 800d0d4:	f06f 0305 	mvn.w	r3, #5
 800d0d8:	e151      	b.n	800d37e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800d0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d05a      	beq.n	800d19c <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800d0e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800d0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f3 f8ba 	bl	8000270 <strlen>
 800d0fc:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d104:	d309      	bcc.n	800d11a <mqtt_client_connect+0x26a>
 800d106:	4b16      	ldr	r3, [pc, #88]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d108:	f240 523f 	movw	r2, #1343	; 0x53f
 800d10c:	4920      	ldr	r1, [pc, #128]	; (800d190 <mqtt_client_connect+0x2e0>)
 800d10e:	4816      	ldr	r0, [pc, #88]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d110:	f00e fa34 	bl	801b57c <iprintf>
 800d114:	f06f 0305 	mvn.w	r3, #5
 800d118:	e131      	b.n	800d37e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d109      	bne.n	800d134 <mqtt_client_connect+0x284>
 800d120:	4b0f      	ldr	r3, [pc, #60]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d122:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800d126:	491b      	ldr	r1, [pc, #108]	; (800d194 <mqtt_client_connect+0x2e4>)
 800d128:	480f      	ldr	r0, [pc, #60]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d12a:	f00e fa27 	bl	801b57c <iprintf>
 800d12e:	f06f 0305 	mvn.w	r3, #5
 800d132:	e124      	b.n	800d37e <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800d138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d13a:	1c9a      	adds	r2, r3, #2
 800d13c:	8bbb      	ldrh	r3, [r7, #28]
 800d13e:	4413      	add	r3, r2
 800d140:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d148:	d326      	bcc.n	800d198 <mqtt_client_connect+0x2e8>
 800d14a:	4b05      	ldr	r3, [pc, #20]	; (800d160 <mqtt_client_connect+0x2b0>)
 800d14c:	f240 5243 	movw	r2, #1347	; 0x543
 800d150:	490c      	ldr	r1, [pc, #48]	; (800d184 <mqtt_client_connect+0x2d4>)
 800d152:	4805      	ldr	r0, [pc, #20]	; (800d168 <mqtt_client_connect+0x2b8>)
 800d154:	f00e fa12 	bl	801b57c <iprintf>
 800d158:	f06f 0305 	mvn.w	r3, #5
 800d15c:	e10f      	b.n	800d37e <mqtt_client_connect+0x4ce>
 800d15e:	bf00      	nop
 800d160:	0801c280 	.word	0x0801c280
 800d164:	0801c700 	.word	0x0801c700
 800d168:	0801c2f8 	.word	0x0801c2f8
 800d16c:	0801c724 	.word	0x0801c724
 800d170:	0801c74c 	.word	0x0801c74c
 800d174:	0801c778 	.word	0x0801c778
 800d178:	0801c7ac 	.word	0x0801c7ac
 800d17c:	0801c7ec 	.word	0x0801c7ec
 800d180:	0801c82c 	.word	0x0801c82c
 800d184:	0801c868 	.word	0x0801c868
 800d188:	0801c898 	.word	0x0801c898
 800d18c:	0801c8d8 	.word	0x0801c8d8
 800d190:	0801c91c 	.word	0x0801c91c
 800d194:	0801c95c 	.word	0x0801c95c
    remaining_length = (u16_t)len;
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800d19c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1a0:	f043 0302 	orr.w	r3, r3, #2
 800d1a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f3 f85f 	bl	8000270 <strlen>
 800d1b2:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ba:	d309      	bcc.n	800d1d0 <mqtt_client_connect+0x320>
 800d1bc:	4b72      	ldr	r3, [pc, #456]	; (800d388 <mqtt_client_connect+0x4d8>)
 800d1be:	f240 524b 	movw	r2, #1355	; 0x54b
 800d1c2:	4972      	ldr	r1, [pc, #456]	; (800d38c <mqtt_client_connect+0x4dc>)
 800d1c4:	4872      	ldr	r0, [pc, #456]	; (800d390 <mqtt_client_connect+0x4e0>)
 800d1c6:	f00e f9d9 	bl	801b57c <iprintf>
 800d1ca:	f06f 0305 	mvn.w	r3, #5
 800d1ce:	e0d6      	b.n	800d37e <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800d1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1d6:	1c9a      	adds	r2, r3, #2
 800d1d8:	8afb      	ldrh	r3, [r7, #22]
 800d1da:	4413      	add	r3, r2
 800d1dc:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1e4:	d309      	bcc.n	800d1fa <mqtt_client_connect+0x34a>
 800d1e6:	4b68      	ldr	r3, [pc, #416]	; (800d388 <mqtt_client_connect+0x4d8>)
 800d1e8:	f240 524e 	movw	r2, #1358	; 0x54e
 800d1ec:	4969      	ldr	r1, [pc, #420]	; (800d394 <mqtt_client_connect+0x4e4>)
 800d1ee:	4868      	ldr	r0, [pc, #416]	; (800d390 <mqtt_client_connect+0x4e0>)
 800d1f0:	f00e f9c4 	bl	801b57c <iprintf>
 800d1f4:	f06f 0305 	mvn.w	r3, #5
 800d1f8:	e0c1      	b.n	800d37e <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	33ec      	adds	r3, #236	; 0xec
 800d202:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d204:	4611      	mov	r1, r2
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff f924 	bl	800c454 <mqtt_output_check_space>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d102      	bne.n	800d218 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800d212:	f04f 33ff 	mov.w	r3, #4294967295
 800d216:	e0b2      	b.n	800d37e <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800d218:	2000      	movs	r0, #0
 800d21a:	f003 fc1f 	bl	8010a5c <tcp_new_ip_type>
 800d21e:	4602      	mov	r2, r0
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d102      	bne.n	800d232 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800d22c:	f04f 33ff 	mov.w	r3, #4294967295
 800d230:	e0a5      	b.n	800d37e <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	68f9      	ldr	r1, [r7, #12]
 800d238:	4618      	mov	r0, r3
 800d23a:	f003 fc1d 	bl	8010a78 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	2200      	movs	r2, #0
 800d244:	4954      	ldr	r1, [pc, #336]	; (800d398 <mqtt_client_connect+0x4e8>)
 800d246:	4618      	mov	r0, r3
 800d248:	f002 fb46 	bl	800f8d8 <tcp_bind>
 800d24c:	4603      	mov	r3, r0
 800d24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800d252:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d256:	2b00      	cmp	r3, #0
 800d258:	f040 8084 	bne.w	800d364 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	68d8      	ldr	r0, [r3, #12]
 800d260:	88fa      	ldrh	r2, [r7, #6]
 800d262:	4b4e      	ldr	r3, [pc, #312]	; (800d39c <mqtt_client_connect+0x4ec>)
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	f002 fcbf 	bl	800fbe8 <tcp_connect>
 800d26a:	4603      	mov	r3, r0
 800d26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800d270:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d274:	2b00      	cmp	r3, #0
 800d276:	d177      	bne.n	800d368 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	4948      	ldr	r1, [pc, #288]	; (800d3a0 <mqtt_client_connect+0x4f0>)
 800d27e:	4618      	mov	r0, r3
 800d280:	f003 fc4e 	bl	8010b20 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2201      	movs	r2, #1
 800d288:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800d290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	2300      	movs	r3, #0
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	2300      	movs	r3, #0
 800d29a:	2200      	movs	r2, #0
 800d29c:	2101      	movs	r1, #1
 800d29e:	f7ff f88e 	bl	800c3be <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	33ec      	adds	r3, #236	; 0xec
 800d2a6:	2204      	movs	r2, #4
 800d2a8:	493e      	ldr	r1, [pc, #248]	; (800d3a4 <mqtt_client_connect+0x4f4>)
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff f85b 	bl	800c366 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	33ec      	adds	r3, #236	; 0xec
 800d2b4:	2104      	movs	r1, #4
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff f82e 	bl	800c318 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	33ec      	adds	r3, #236	; 0xec
 800d2c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7ff f826 	bl	800c318 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800d2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d4:	899b      	ldrh	r3, [r3, #12]
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	4610      	mov	r0, r2
 800d2da:	f7ff f82c 	bl	800c336 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800d2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	8afa      	ldrh	r2, [r7, #22]
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	f7ff f83b 	bl	800c366 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800d2f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2f4:	f003 0304 	and.w	r3, r3, #4
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d015      	beq.n	800d328 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d30a:	b292      	uxth	r2, r2
 800d30c:	4619      	mov	r1, r3
 800d30e:	f7ff f82a 	bl	800c366 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800d318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d320:	b292      	uxth	r2, r2
 800d322:	4619      	mov	r1, r3
 800d324:	f7ff f81f 	bl	800c366 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800d328:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	da08      	bge.n	800d342 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800d336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	8bfa      	ldrh	r2, [r7, #30]
 800d33c:	4619      	mov	r1, r3
 800d33e:	f7ff f812 	bl	800c366 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800d342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d008      	beq.n	800d360 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800d354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	8bba      	ldrh	r2, [r7, #28]
 800d35a:	4619      	mov	r1, r3
 800d35c:	f7ff f803 	bl	800c366 <mqtt_output_append_string>
  }
  return ERR_OK;
 800d360:	2300      	movs	r3, #0
 800d362:	e00c      	b.n	800d37e <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800d364:	bf00      	nop
 800d366:	e000      	b.n	800d36a <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800d368:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	4618      	mov	r0, r3
 800d370:	f002 faa6 	bl	800f8c0 <tcp_abort>
  client->conn = NULL;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	60da      	str	r2, [r3, #12]
  return err;
 800d37a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3728      	adds	r7, #40	; 0x28
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	0801c280 	.word	0x0801c280
 800d38c:	0801c9a0 	.word	0x0801c9a0
 800d390:	0801c2f8 	.word	0x0801c2f8
 800d394:	0801c868 	.word	0x0801c868
 800d398:	0801f934 	.word	0x0801f934
 800d39c:	0800ce19 	.word	0x0800ce19
 800d3a0:	0800cda5 	.word	0x0800cda5
 800d3a4:	0801c9dc 	.word	0x0801c9dc

0800d3a8 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d106      	bne.n	800d3c4 <mqtt_disconnect+0x1c>
 800d3b6:	4b0b      	ldr	r3, [pc, #44]	; (800d3e4 <mqtt_disconnect+0x3c>)
 800d3b8:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800d3bc:	490a      	ldr	r1, [pc, #40]	; (800d3e8 <mqtt_disconnect+0x40>)
 800d3be:	480b      	ldr	r0, [pc, #44]	; (800d3ec <mqtt_disconnect+0x44>)
 800d3c0:	f00e f8dc 	bl	801b57c <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7a9b      	ldrb	r3, [r3, #10]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d006      	beq.n	800d3da <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7ff f86f 	bl	800c4b8 <mqtt_close>
  }
}
 800d3da:	bf00      	nop
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0801c280 	.word	0x0801c280
 800d3e8:	0801c9e4 	.word	0x0801c9e4
 800d3ec:	0801c2f8 	.word	0x0801c2f8

0800d3f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d3fa:	88fb      	ldrh	r3, [r7, #6]
 800d3fc:	021b      	lsls	r3, r3, #8
 800d3fe:	b21a      	sxth	r2, r3
 800d400:	88fb      	ldrh	r3, [r7, #6]
 800d402:	0a1b      	lsrs	r3, r3, #8
 800d404:	b29b      	uxth	r3, r3
 800d406:	b21b      	sxth	r3, r3
 800d408:	4313      	orrs	r3, r2
 800d40a:	b21b      	sxth	r3, r3
 800d40c:	b29b      	uxth	r3, r3
}
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	bc80      	pop	{r7}
 800d416:	4770      	bx	lr

0800d418 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	061a      	lsls	r2, r3, #24
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	021b      	lsls	r3, r3, #8
 800d428:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d42c:	431a      	orrs	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	0a1b      	lsrs	r3, r3, #8
 800d432:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d436:	431a      	orrs	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	0e1b      	lsrs	r3, r3, #24
 800d43c:	4313      	orrs	r3, r2
}
 800d43e:	4618      	mov	r0, r3
 800d440:	370c      	adds	r7, #12
 800d442:	46bd      	mov	sp, r7
 800d444:	bc80      	pop	{r7}
 800d446:	4770      	bx	lr

0800d448 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d448:	b480      	push	{r7}
 800d44a:	b089      	sub	sp, #36	; 0x24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	f003 0301 	and.w	r3, r3, #1
 800d464:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00d      	beq.n	800d488 <lwip_standard_chksum+0x40>
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dd0a      	ble.n	800d488 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d472:	69fa      	ldr	r2, [r7, #28]
 800d474:	1c53      	adds	r3, r2, #1
 800d476:	61fb      	str	r3, [r7, #28]
 800d478:	f107 030e 	add.w	r3, r7, #14
 800d47c:	3301      	adds	r3, #1
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	701a      	strb	r2, [r3, #0]
    len--;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	3b01      	subs	r3, #1
 800d486:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d48c:	e00a      	b.n	800d4a4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	1c9a      	adds	r2, r3, #2
 800d492:	61ba      	str	r2, [r7, #24]
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	4413      	add	r3, r2
 800d49c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	3b02      	subs	r3, #2
 800d4a2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	dcf1      	bgt.n	800d48e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	dd04      	ble.n	800d4ba <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d4b0:	f107 030e 	add.w	r3, r7, #14
 800d4b4:	69ba      	ldr	r2, [r7, #24]
 800d4b6:	7812      	ldrb	r2, [r2, #0]
 800d4b8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d4ba:	89fb      	ldrh	r3, [r7, #14]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	0c1a      	lsrs	r2, r3, #16
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4413      	add	r3, r2
 800d4ce:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	0c1a      	lsrs	r2, r3, #16
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	4413      	add	r3, r2
 800d4da:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d007      	beq.n	800d4f2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	021b      	lsls	r3, r3, #8
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	0a1b      	lsrs	r3, r3, #8
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	b29b      	uxth	r3, r3
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3724      	adds	r7, #36	; 0x24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bc80      	pop	{r7}
 800d4fe:	4770      	bx	lr

0800d500 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	460b      	mov	r3, r1
 800d50a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d50c:	887b      	ldrh	r3, [r7, #2]
 800d50e:	4619      	mov	r1, r3
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff ff99 	bl	800d448 <lwip_standard_chksum>
 800d516:	4603      	mov	r3, r0
 800d518:	43db      	mvns	r3, r3
 800d51a:	b29b      	uxth	r3, r3
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	613b      	str	r3, [r7, #16]
 800d538:	e02b      	b.n	800d592 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	685a      	ldr	r2, [r3, #4]
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	895b      	ldrh	r3, [r3, #10]
 800d542:	4619      	mov	r1, r3
 800d544:	4610      	mov	r0, r2
 800d546:	f7ff ff7f 	bl	800d448 <lwip_standard_chksum>
 800d54a:	4603      	mov	r3, r0
 800d54c:	461a      	mov	r2, r3
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	4413      	add	r3, r2
 800d552:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	0c1a      	lsrs	r2, r3, #16
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	4413      	add	r3, r2
 800d55e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	895b      	ldrh	r3, [r3, #10]
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	b29b      	uxth	r3, r3
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00e      	beq.n	800d58c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	bf0c      	ite	eq
 800d574:	2301      	moveq	r3, #1
 800d576:	2300      	movne	r3, #0
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	021b      	lsls	r3, r3, #8
 800d580:	b29a      	uxth	r2, r3
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	0a1b      	lsrs	r3, r3, #8
 800d586:	b2db      	uxtb	r3, r3
 800d588:	4313      	orrs	r3, r2
 800d58a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	613b      	str	r3, [r7, #16]
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1d0      	bne.n	800d53a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d007      	beq.n	800d5ae <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	021b      	lsls	r3, r3, #8
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	0a1b      	lsrs	r3, r3, #8
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	43db      	mvns	r3, r3
 800d5b4:	b29b      	uxth	r3, r3
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3718      	adds	r7, #24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d5c8:	f00c ff22 	bl	801a410 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d5cc:	f000 f8d0 	bl	800d770 <mem_init>
  memp_init();
 800d5d0:	f000 fc50 	bl	800de74 <memp_init>
  pbuf_init();
  netif_init();
 800d5d4:	f000 fd5c 	bl	800e090 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d5d8:	f008 f88a 	bl	80156f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d5dc:	f001 fe76 	bl	800f2cc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d5e0:	f007 ff92 	bl	8015508 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d5e4:	bf00      	nop
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d5f6:	4b04      	ldr	r3, [pc, #16]	; (800d608 <ptr_to_mem+0x1c>)
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	88fb      	ldrh	r3, [r7, #6]
 800d5fc:	4413      	add	r3, r2
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	bc80      	pop	{r7}
 800d606:	4770      	bx	lr
 800d608:	20009844 	.word	0x20009844

0800d60c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d614:	4b04      	ldr	r3, [pc, #16]	; (800d628 <mem_to_ptr+0x1c>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	b29b      	uxth	r3, r3
}
 800d61e:	4618      	mov	r0, r3
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	bc80      	pop	{r7}
 800d626:	4770      	bx	lr
 800d628:	20009844 	.word	0x20009844

0800d62c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d62c:	b590      	push	{r4, r7, lr}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d634:	4b45      	ldr	r3, [pc, #276]	; (800d74c <plug_holes+0x120>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d206      	bcs.n	800d64c <plug_holes+0x20>
 800d63e:	4b44      	ldr	r3, [pc, #272]	; (800d750 <plug_holes+0x124>)
 800d640:	f240 12df 	movw	r2, #479	; 0x1df
 800d644:	4943      	ldr	r1, [pc, #268]	; (800d754 <plug_holes+0x128>)
 800d646:	4844      	ldr	r0, [pc, #272]	; (800d758 <plug_holes+0x12c>)
 800d648:	f00d ff98 	bl	801b57c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d64c:	4b43      	ldr	r3, [pc, #268]	; (800d75c <plug_holes+0x130>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	429a      	cmp	r2, r3
 800d654:	d306      	bcc.n	800d664 <plug_holes+0x38>
 800d656:	4b3e      	ldr	r3, [pc, #248]	; (800d750 <plug_holes+0x124>)
 800d658:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d65c:	4940      	ldr	r1, [pc, #256]	; (800d760 <plug_holes+0x134>)
 800d65e:	483e      	ldr	r0, [pc, #248]	; (800d758 <plug_holes+0x12c>)
 800d660:	f00d ff8c 	bl	801b57c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	791b      	ldrb	r3, [r3, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d006      	beq.n	800d67a <plug_holes+0x4e>
 800d66c:	4b38      	ldr	r3, [pc, #224]	; (800d750 <plug_holes+0x124>)
 800d66e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d672:	493c      	ldr	r1, [pc, #240]	; (800d764 <plug_holes+0x138>)
 800d674:	4838      	ldr	r0, [pc, #224]	; (800d758 <plug_holes+0x12c>)
 800d676:	f00d ff81 	bl	801b57c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d682:	d906      	bls.n	800d692 <plug_holes+0x66>
 800d684:	4b32      	ldr	r3, [pc, #200]	; (800d750 <plug_holes+0x124>)
 800d686:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d68a:	4937      	ldr	r1, [pc, #220]	; (800d768 <plug_holes+0x13c>)
 800d68c:	4832      	ldr	r0, [pc, #200]	; (800d758 <plug_holes+0x12c>)
 800d68e:	f00d ff75 	bl	801b57c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	881b      	ldrh	r3, [r3, #0]
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff ffa8 	bl	800d5ec <ptr_to_mem>
 800d69c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d024      	beq.n	800d6f0 <plug_holes+0xc4>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	791b      	ldrb	r3, [r3, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d120      	bne.n	800d6f0 <plug_holes+0xc4>
 800d6ae:	4b2b      	ldr	r3, [pc, #172]	; (800d75c <plug_holes+0x130>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d01b      	beq.n	800d6f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d6b8:	4b2c      	ldr	r3, [pc, #176]	; (800d76c <plug_holes+0x140>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d102      	bne.n	800d6c8 <plug_holes+0x9c>
      lfree = mem;
 800d6c2:	4a2a      	ldr	r2, [pc, #168]	; (800d76c <plug_holes+0x140>)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	881a      	ldrh	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6d8:	d00a      	beq.n	800d6f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff ff84 	bl	800d5ec <ptr_to_mem>
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7ff ff90 	bl	800d60c <mem_to_ptr>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	885b      	ldrh	r3, [r3, #2]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff ff79 	bl	800d5ec <ptr_to_mem>
 800d6fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	429a      	cmp	r2, r3
 800d702:	d01f      	beq.n	800d744 <plug_holes+0x118>
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	791b      	ldrb	r3, [r3, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d11b      	bne.n	800d744 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d70c:	4b17      	ldr	r3, [pc, #92]	; (800d76c <plug_holes+0x140>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	429a      	cmp	r2, r3
 800d714:	d102      	bne.n	800d71c <plug_holes+0xf0>
      lfree = pmem;
 800d716:	4a15      	ldr	r2, [pc, #84]	; (800d76c <plug_holes+0x140>)
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	881a      	ldrh	r2, [r3, #0]
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d72c:	d00a      	beq.n	800d744 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	4618      	mov	r0, r3
 800d734:	f7ff ff5a 	bl	800d5ec <ptr_to_mem>
 800d738:	4604      	mov	r4, r0
 800d73a:	68b8      	ldr	r0, [r7, #8]
 800d73c:	f7ff ff66 	bl	800d60c <mem_to_ptr>
 800d740:	4603      	mov	r3, r0
 800d742:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d744:	bf00      	nop
 800d746:	3714      	adds	r7, #20
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd90      	pop	{r4, r7, pc}
 800d74c:	20009844 	.word	0x20009844
 800d750:	0801ca30 	.word	0x0801ca30
 800d754:	0801ca60 	.word	0x0801ca60
 800d758:	0801ca78 	.word	0x0801ca78
 800d75c:	20009848 	.word	0x20009848
 800d760:	0801caa0 	.word	0x0801caa0
 800d764:	0801cabc 	.word	0x0801cabc
 800d768:	0801cad8 	.word	0x0801cad8
 800d76c:	20009850 	.word	0x20009850

0800d770 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d776:	4b1d      	ldr	r3, [pc, #116]	; (800d7ec <mem_init+0x7c>)
 800d778:	4a1d      	ldr	r2, [pc, #116]	; (800d7f0 <mem_init+0x80>)
 800d77a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d77c:	4b1b      	ldr	r3, [pc, #108]	; (800d7ec <mem_init+0x7c>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d788:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d796:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d79a:	f7ff ff27 	bl	800d5ec <ptr_to_mem>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4a14      	ldr	r2, [pc, #80]	; (800d7f4 <mem_init+0x84>)
 800d7a2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d7a4:	4b13      	ldr	r3, [pc, #76]	; (800d7f4 <mem_init+0x84>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d7ac:	4b11      	ldr	r3, [pc, #68]	; (800d7f4 <mem_init+0x84>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d7b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d7b6:	4b0f      	ldr	r3, [pc, #60]	; (800d7f4 <mem_init+0x84>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d7be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d7c0:	4b0a      	ldr	r3, [pc, #40]	; (800d7ec <mem_init+0x7c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a0c      	ldr	r2, [pc, #48]	; (800d7f8 <mem_init+0x88>)
 800d7c6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d7c8:	480c      	ldr	r0, [pc, #48]	; (800d7fc <mem_init+0x8c>)
 800d7ca:	f00c fe2d 	bl	801a428 <sys_mutex_new>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d006      	beq.n	800d7e2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d7d4:	4b0a      	ldr	r3, [pc, #40]	; (800d800 <mem_init+0x90>)
 800d7d6:	f240 221f 	movw	r2, #543	; 0x21f
 800d7da:	490a      	ldr	r1, [pc, #40]	; (800d804 <mem_init+0x94>)
 800d7dc:	480a      	ldr	r0, [pc, #40]	; (800d808 <mem_init+0x98>)
 800d7de:	f00d fecd 	bl	801b57c <iprintf>
  }
}
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20009844 	.word	0x20009844
 800d7f0:	30044000 	.word	0x30044000
 800d7f4:	20009848 	.word	0x20009848
 800d7f8:	20009850 	.word	0x20009850
 800d7fc:	2000984c 	.word	0x2000984c
 800d800:	0801ca30 	.word	0x0801ca30
 800d804:	0801cb04 	.word	0x0801cb04
 800d808:	0801ca78 	.word	0x0801ca78

0800d80c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7ff fef9 	bl	800d60c <mem_to_ptr>
 800d81a:	4603      	mov	r3, r0
 800d81c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff fee2 	bl	800d5ec <ptr_to_mem>
 800d828:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	885b      	ldrh	r3, [r3, #2]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fedc 	bl	800d5ec <ptr_to_mem>
 800d834:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d83e:	d818      	bhi.n	800d872 <mem_link_valid+0x66>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	885b      	ldrh	r3, [r3, #2]
 800d844:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d848:	d813      	bhi.n	800d872 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d84e:	8afa      	ldrh	r2, [r7, #22]
 800d850:	429a      	cmp	r2, r3
 800d852:	d004      	beq.n	800d85e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	8afa      	ldrh	r2, [r7, #22]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d109      	bne.n	800d872 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d85e:	4b08      	ldr	r3, [pc, #32]	; (800d880 <mem_link_valid+0x74>)
 800d860:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d862:	693a      	ldr	r2, [r7, #16]
 800d864:	429a      	cmp	r2, r3
 800d866:	d006      	beq.n	800d876 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	885b      	ldrh	r3, [r3, #2]
 800d86c:	8afa      	ldrh	r2, [r7, #22]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d001      	beq.n	800d876 <mem_link_valid+0x6a>
    return 0;
 800d872:	2300      	movs	r3, #0
 800d874:	e000      	b.n	800d878 <mem_link_valid+0x6c>
  }
  return 1;
 800d876:	2301      	movs	r3, #1
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20009848 	.word	0x20009848

0800d884 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b088      	sub	sp, #32
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d070      	beq.n	800d974 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f003 0303 	and.w	r3, r3, #3
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00d      	beq.n	800d8b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d89c:	4b37      	ldr	r3, [pc, #220]	; (800d97c <mem_free+0xf8>)
 800d89e:	f240 2273 	movw	r2, #627	; 0x273
 800d8a2:	4937      	ldr	r1, [pc, #220]	; (800d980 <mem_free+0xfc>)
 800d8a4:	4837      	ldr	r0, [pc, #220]	; (800d984 <mem_free+0x100>)
 800d8a6:	f00d fe69 	bl	801b57c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d8aa:	f00c fe0f 	bl	801a4cc <sys_arch_protect>
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f00c fe19 	bl	801a4e8 <sys_arch_unprotect>
    return;
 800d8b6:	e05e      	b.n	800d976 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3b08      	subs	r3, #8
 800d8bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d8be:	4b32      	ldr	r3, [pc, #200]	; (800d988 <mem_free+0x104>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	69fa      	ldr	r2, [r7, #28]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d306      	bcc.n	800d8d6 <mem_free+0x52>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f103 020c 	add.w	r2, r3, #12
 800d8ce:	4b2f      	ldr	r3, [pc, #188]	; (800d98c <mem_free+0x108>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d90d      	bls.n	800d8f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d8d6:	4b29      	ldr	r3, [pc, #164]	; (800d97c <mem_free+0xf8>)
 800d8d8:	f240 227f 	movw	r2, #639	; 0x27f
 800d8dc:	492c      	ldr	r1, [pc, #176]	; (800d990 <mem_free+0x10c>)
 800d8de:	4829      	ldr	r0, [pc, #164]	; (800d984 <mem_free+0x100>)
 800d8e0:	f00d fe4c 	bl	801b57c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d8e4:	f00c fdf2 	bl	801a4cc <sys_arch_protect>
 800d8e8:	6138      	str	r0, [r7, #16]
 800d8ea:	6938      	ldr	r0, [r7, #16]
 800d8ec:	f00c fdfc 	bl	801a4e8 <sys_arch_unprotect>
    return;
 800d8f0:	e041      	b.n	800d976 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d8f2:	4828      	ldr	r0, [pc, #160]	; (800d994 <mem_free+0x110>)
 800d8f4:	f00c fdae 	bl	801a454 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	791b      	ldrb	r3, [r3, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d110      	bne.n	800d922 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d900:	4b1e      	ldr	r3, [pc, #120]	; (800d97c <mem_free+0xf8>)
 800d902:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d906:	4924      	ldr	r1, [pc, #144]	; (800d998 <mem_free+0x114>)
 800d908:	481e      	ldr	r0, [pc, #120]	; (800d984 <mem_free+0x100>)
 800d90a:	f00d fe37 	bl	801b57c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d90e:	4821      	ldr	r0, [pc, #132]	; (800d994 <mem_free+0x110>)
 800d910:	f00c fdaf 	bl	801a472 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d914:	f00c fdda 	bl	801a4cc <sys_arch_protect>
 800d918:	6178      	str	r0, [r7, #20]
 800d91a:	6978      	ldr	r0, [r7, #20]
 800d91c:	f00c fde4 	bl	801a4e8 <sys_arch_unprotect>
    return;
 800d920:	e029      	b.n	800d976 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d922:	69f8      	ldr	r0, [r7, #28]
 800d924:	f7ff ff72 	bl	800d80c <mem_link_valid>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d110      	bne.n	800d950 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d92e:	4b13      	ldr	r3, [pc, #76]	; (800d97c <mem_free+0xf8>)
 800d930:	f240 2295 	movw	r2, #661	; 0x295
 800d934:	4919      	ldr	r1, [pc, #100]	; (800d99c <mem_free+0x118>)
 800d936:	4813      	ldr	r0, [pc, #76]	; (800d984 <mem_free+0x100>)
 800d938:	f00d fe20 	bl	801b57c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d93c:	4815      	ldr	r0, [pc, #84]	; (800d994 <mem_free+0x110>)
 800d93e:	f00c fd98 	bl	801a472 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d942:	f00c fdc3 	bl	801a4cc <sys_arch_protect>
 800d946:	61b8      	str	r0, [r7, #24]
 800d948:	69b8      	ldr	r0, [r7, #24]
 800d94a:	f00c fdcd 	bl	801a4e8 <sys_arch_unprotect>
    return;
 800d94e:	e012      	b.n	800d976 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	2200      	movs	r2, #0
 800d954:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d956:	4b12      	ldr	r3, [pc, #72]	; (800d9a0 <mem_free+0x11c>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	69fa      	ldr	r2, [r7, #28]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d202      	bcs.n	800d966 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d960:	4a0f      	ldr	r2, [pc, #60]	; (800d9a0 <mem_free+0x11c>)
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d966:	69f8      	ldr	r0, [r7, #28]
 800d968:	f7ff fe60 	bl	800d62c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d96c:	4809      	ldr	r0, [pc, #36]	; (800d994 <mem_free+0x110>)
 800d96e:	f00c fd80 	bl	801a472 <sys_mutex_unlock>
 800d972:	e000      	b.n	800d976 <mem_free+0xf2>
    return;
 800d974:	bf00      	nop
}
 800d976:	3720      	adds	r7, #32
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	0801ca30 	.word	0x0801ca30
 800d980:	0801cb20 	.word	0x0801cb20
 800d984:	0801ca78 	.word	0x0801ca78
 800d988:	20009844 	.word	0x20009844
 800d98c:	20009848 	.word	0x20009848
 800d990:	0801cb44 	.word	0x0801cb44
 800d994:	2000984c 	.word	0x2000984c
 800d998:	0801cb60 	.word	0x0801cb60
 800d99c:	0801cb88 	.word	0x0801cb88
 800d9a0:	20009850 	.word	0x20009850

0800d9a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d9b0:	887b      	ldrh	r3, [r7, #2]
 800d9b2:	3303      	adds	r3, #3
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	f023 0303 	bic.w	r3, r3, #3
 800d9ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d9bc:	8bfb      	ldrh	r3, [r7, #30]
 800d9be:	2b0b      	cmp	r3, #11
 800d9c0:	d801      	bhi.n	800d9c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d9c2:	230c      	movs	r3, #12
 800d9c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d9c6:	8bfb      	ldrh	r3, [r7, #30]
 800d9c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d9cc:	d803      	bhi.n	800d9d6 <mem_trim+0x32>
 800d9ce:	8bfa      	ldrh	r2, [r7, #30]
 800d9d0:	887b      	ldrh	r3, [r7, #2]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d201      	bcs.n	800d9da <mem_trim+0x36>
    return NULL;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e0d8      	b.n	800db8c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d9da:	4b6e      	ldr	r3, [pc, #440]	; (800db94 <mem_trim+0x1f0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d304      	bcc.n	800d9ee <mem_trim+0x4a>
 800d9e4:	4b6c      	ldr	r3, [pc, #432]	; (800db98 <mem_trim+0x1f4>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d306      	bcc.n	800d9fc <mem_trim+0x58>
 800d9ee:	4b6b      	ldr	r3, [pc, #428]	; (800db9c <mem_trim+0x1f8>)
 800d9f0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d9f4:	496a      	ldr	r1, [pc, #424]	; (800dba0 <mem_trim+0x1fc>)
 800d9f6:	486b      	ldr	r0, [pc, #428]	; (800dba4 <mem_trim+0x200>)
 800d9f8:	f00d fdc0 	bl	801b57c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d9fc:	4b65      	ldr	r3, [pc, #404]	; (800db94 <mem_trim+0x1f0>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	429a      	cmp	r2, r3
 800da04:	d304      	bcc.n	800da10 <mem_trim+0x6c>
 800da06:	4b64      	ldr	r3, [pc, #400]	; (800db98 <mem_trim+0x1f4>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d307      	bcc.n	800da20 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da10:	f00c fd5c 	bl	801a4cc <sys_arch_protect>
 800da14:	60b8      	str	r0, [r7, #8]
 800da16:	68b8      	ldr	r0, [r7, #8]
 800da18:	f00c fd66 	bl	801a4e8 <sys_arch_unprotect>
    return rmem;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	e0b5      	b.n	800db8c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3b08      	subs	r3, #8
 800da24:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800da26:	69b8      	ldr	r0, [r7, #24]
 800da28:	f7ff fdf0 	bl	800d60c <mem_to_ptr>
 800da2c:	4603      	mov	r3, r0
 800da2e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800da30:	69bb      	ldr	r3, [r7, #24]
 800da32:	881a      	ldrh	r2, [r3, #0]
 800da34:	8afb      	ldrh	r3, [r7, #22]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	b29b      	uxth	r3, r3
 800da3a:	3b08      	subs	r3, #8
 800da3c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800da3e:	8bfa      	ldrh	r2, [r7, #30]
 800da40:	8abb      	ldrh	r3, [r7, #20]
 800da42:	429a      	cmp	r2, r3
 800da44:	d906      	bls.n	800da54 <mem_trim+0xb0>
 800da46:	4b55      	ldr	r3, [pc, #340]	; (800db9c <mem_trim+0x1f8>)
 800da48:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800da4c:	4956      	ldr	r1, [pc, #344]	; (800dba8 <mem_trim+0x204>)
 800da4e:	4855      	ldr	r0, [pc, #340]	; (800dba4 <mem_trim+0x200>)
 800da50:	f00d fd94 	bl	801b57c <iprintf>
  if (newsize > size) {
 800da54:	8bfa      	ldrh	r2, [r7, #30]
 800da56:	8abb      	ldrh	r3, [r7, #20]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d901      	bls.n	800da60 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800da5c:	2300      	movs	r3, #0
 800da5e:	e095      	b.n	800db8c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800da60:	8bfa      	ldrh	r2, [r7, #30]
 800da62:	8abb      	ldrh	r3, [r7, #20]
 800da64:	429a      	cmp	r2, r3
 800da66:	d101      	bne.n	800da6c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	e08f      	b.n	800db8c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800da6c:	484f      	ldr	r0, [pc, #316]	; (800dbac <mem_trim+0x208>)
 800da6e:	f00c fcf1 	bl	801a454 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	881b      	ldrh	r3, [r3, #0]
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff fdb8 	bl	800d5ec <ptr_to_mem>
 800da7c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	791b      	ldrb	r3, [r3, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d13f      	bne.n	800db06 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800da8e:	d106      	bne.n	800da9e <mem_trim+0xfa>
 800da90:	4b42      	ldr	r3, [pc, #264]	; (800db9c <mem_trim+0x1f8>)
 800da92:	f240 22f5 	movw	r2, #757	; 0x2f5
 800da96:	4946      	ldr	r1, [pc, #280]	; (800dbb0 <mem_trim+0x20c>)
 800da98:	4842      	ldr	r0, [pc, #264]	; (800dba4 <mem_trim+0x200>)
 800da9a:	f00d fd6f 	bl	801b57c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	881b      	ldrh	r3, [r3, #0]
 800daa2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800daa4:	8afa      	ldrh	r2, [r7, #22]
 800daa6:	8bfb      	ldrh	r3, [r7, #30]
 800daa8:	4413      	add	r3, r2
 800daaa:	b29b      	uxth	r3, r3
 800daac:	3308      	adds	r3, #8
 800daae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dab0:	4b40      	ldr	r3, [pc, #256]	; (800dbb4 <mem_trim+0x210>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d106      	bne.n	800dac8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800daba:	89fb      	ldrh	r3, [r7, #14]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7ff fd95 	bl	800d5ec <ptr_to_mem>
 800dac2:	4603      	mov	r3, r0
 800dac4:	4a3b      	ldr	r2, [pc, #236]	; (800dbb4 <mem_trim+0x210>)
 800dac6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dac8:	89fb      	ldrh	r3, [r7, #14]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff fd8e 	bl	800d5ec <ptr_to_mem>
 800dad0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	2200      	movs	r2, #0
 800dad6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	89ba      	ldrh	r2, [r7, #12]
 800dadc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	8afa      	ldrh	r2, [r7, #22]
 800dae2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	89fa      	ldrh	r2, [r7, #14]
 800dae8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800daf2:	d047      	beq.n	800db84 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	881b      	ldrh	r3, [r3, #0]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7ff fd77 	bl	800d5ec <ptr_to_mem>
 800dafe:	4602      	mov	r2, r0
 800db00:	89fb      	ldrh	r3, [r7, #14]
 800db02:	8053      	strh	r3, [r2, #2]
 800db04:	e03e      	b.n	800db84 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800db06:	8bfb      	ldrh	r3, [r7, #30]
 800db08:	f103 0214 	add.w	r2, r3, #20
 800db0c:	8abb      	ldrh	r3, [r7, #20]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d838      	bhi.n	800db84 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800db12:	8afa      	ldrh	r2, [r7, #22]
 800db14:	8bfb      	ldrh	r3, [r7, #30]
 800db16:	4413      	add	r3, r2
 800db18:	b29b      	uxth	r3, r3
 800db1a:	3308      	adds	r3, #8
 800db1c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db26:	d106      	bne.n	800db36 <mem_trim+0x192>
 800db28:	4b1c      	ldr	r3, [pc, #112]	; (800db9c <mem_trim+0x1f8>)
 800db2a:	f240 3216 	movw	r2, #790	; 0x316
 800db2e:	4920      	ldr	r1, [pc, #128]	; (800dbb0 <mem_trim+0x20c>)
 800db30:	481c      	ldr	r0, [pc, #112]	; (800dba4 <mem_trim+0x200>)
 800db32:	f00d fd23 	bl	801b57c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800db36:	89fb      	ldrh	r3, [r7, #14]
 800db38:	4618      	mov	r0, r3
 800db3a:	f7ff fd57 	bl	800d5ec <ptr_to_mem>
 800db3e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800db40:	4b1c      	ldr	r3, [pc, #112]	; (800dbb4 <mem_trim+0x210>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	429a      	cmp	r2, r3
 800db48:	d202      	bcs.n	800db50 <mem_trim+0x1ac>
      lfree = mem2;
 800db4a:	4a1a      	ldr	r2, [pc, #104]	; (800dbb4 <mem_trim+0x210>)
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	2200      	movs	r2, #0
 800db54:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	881a      	ldrh	r2, [r3, #0]
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	8afa      	ldrh	r2, [r7, #22]
 800db62:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	89fa      	ldrh	r2, [r7, #14]
 800db68:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	881b      	ldrh	r3, [r3, #0]
 800db6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db72:	d007      	beq.n	800db84 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	4618      	mov	r0, r3
 800db7a:	f7ff fd37 	bl	800d5ec <ptr_to_mem>
 800db7e:	4602      	mov	r2, r0
 800db80:	89fb      	ldrh	r3, [r7, #14]
 800db82:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800db84:	4809      	ldr	r0, [pc, #36]	; (800dbac <mem_trim+0x208>)
 800db86:	f00c fc74 	bl	801a472 <sys_mutex_unlock>
  return rmem;
 800db8a:	687b      	ldr	r3, [r7, #4]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3720      	adds	r7, #32
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	20009844 	.word	0x20009844
 800db98:	20009848 	.word	0x20009848
 800db9c:	0801ca30 	.word	0x0801ca30
 800dba0:	0801cbbc 	.word	0x0801cbbc
 800dba4:	0801ca78 	.word	0x0801ca78
 800dba8:	0801cbd4 	.word	0x0801cbd4
 800dbac:	2000984c 	.word	0x2000984c
 800dbb0:	0801cbf4 	.word	0x0801cbf4
 800dbb4:	20009850 	.word	0x20009850

0800dbb8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dbc2:	88fb      	ldrh	r3, [r7, #6]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d101      	bne.n	800dbcc <mem_malloc+0x14>
    return NULL;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	e0e2      	b.n	800dd92 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dbcc:	88fb      	ldrh	r3, [r7, #6]
 800dbce:	3303      	adds	r3, #3
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	f023 0303 	bic.w	r3, r3, #3
 800dbd6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dbd8:	8bbb      	ldrh	r3, [r7, #28]
 800dbda:	2b0b      	cmp	r3, #11
 800dbdc:	d801      	bhi.n	800dbe2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dbde:	230c      	movs	r3, #12
 800dbe0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dbe2:	8bbb      	ldrh	r3, [r7, #28]
 800dbe4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dbe8:	d803      	bhi.n	800dbf2 <mem_malloc+0x3a>
 800dbea:	8bba      	ldrh	r2, [r7, #28]
 800dbec:	88fb      	ldrh	r3, [r7, #6]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d201      	bcs.n	800dbf6 <mem_malloc+0x3e>
    return NULL;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e0cd      	b.n	800dd92 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800dbf6:	4869      	ldr	r0, [pc, #420]	; (800dd9c <mem_malloc+0x1e4>)
 800dbf8:	f00c fc2c 	bl	801a454 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dbfc:	4b68      	ldr	r3, [pc, #416]	; (800dda0 <mem_malloc+0x1e8>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff fd03 	bl	800d60c <mem_to_ptr>
 800dc06:	4603      	mov	r3, r0
 800dc08:	83fb      	strh	r3, [r7, #30]
 800dc0a:	e0b7      	b.n	800dd7c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dc0c:	8bfb      	ldrh	r3, [r7, #30]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7ff fcec 	bl	800d5ec <ptr_to_mem>
 800dc14:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	791b      	ldrb	r3, [r3, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f040 80a7 	bne.w	800dd6e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	461a      	mov	r2, r3
 800dc26:	8bfb      	ldrh	r3, [r7, #30]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	f1a3 0208 	sub.w	r2, r3, #8
 800dc2e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dc30:	429a      	cmp	r2, r3
 800dc32:	f0c0 809c 	bcc.w	800dd6e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	881b      	ldrh	r3, [r3, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	8bfb      	ldrh	r3, [r7, #30]
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	f1a3 0208 	sub.w	r2, r3, #8
 800dc44:	8bbb      	ldrh	r3, [r7, #28]
 800dc46:	3314      	adds	r3, #20
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d333      	bcc.n	800dcb4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dc4c:	8bfa      	ldrh	r2, [r7, #30]
 800dc4e:	8bbb      	ldrh	r3, [r7, #28]
 800dc50:	4413      	add	r3, r2
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	3308      	adds	r3, #8
 800dc56:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dc58:	8a7b      	ldrh	r3, [r7, #18]
 800dc5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc5e:	d106      	bne.n	800dc6e <mem_malloc+0xb6>
 800dc60:	4b50      	ldr	r3, [pc, #320]	; (800dda4 <mem_malloc+0x1ec>)
 800dc62:	f240 3287 	movw	r2, #903	; 0x387
 800dc66:	4950      	ldr	r1, [pc, #320]	; (800dda8 <mem_malloc+0x1f0>)
 800dc68:	4850      	ldr	r0, [pc, #320]	; (800ddac <mem_malloc+0x1f4>)
 800dc6a:	f00d fc87 	bl	801b57c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dc6e:	8a7b      	ldrh	r3, [r7, #18]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff fcbb 	bl	800d5ec <ptr_to_mem>
 800dc76:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	881a      	ldrh	r2, [r3, #0]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	8bfa      	ldrh	r2, [r7, #30]
 800dc8a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	8a7a      	ldrh	r2, [r7, #18]
 800dc90:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2201      	movs	r2, #1
 800dc96:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dca0:	d00b      	beq.n	800dcba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	881b      	ldrh	r3, [r3, #0]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff fca0 	bl	800d5ec <ptr_to_mem>
 800dcac:	4602      	mov	r2, r0
 800dcae:	8a7b      	ldrh	r3, [r7, #18]
 800dcb0:	8053      	strh	r3, [r2, #2]
 800dcb2:	e002      	b.n	800dcba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800dcba:	4b39      	ldr	r3, [pc, #228]	; (800dda0 <mem_malloc+0x1e8>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d127      	bne.n	800dd14 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800dcc4:	4b36      	ldr	r3, [pc, #216]	; (800dda0 <mem_malloc+0x1e8>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800dcca:	e005      	b.n	800dcd8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff fc8b 	bl	800d5ec <ptr_to_mem>
 800dcd6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	791b      	ldrb	r3, [r3, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d004      	beq.n	800dcea <mem_malloc+0x132>
 800dce0:	4b33      	ldr	r3, [pc, #204]	; (800ddb0 <mem_malloc+0x1f8>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	69ba      	ldr	r2, [r7, #24]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d1f0      	bne.n	800dccc <mem_malloc+0x114>
          }
          lfree = cur;
 800dcea:	4a2d      	ldr	r2, [pc, #180]	; (800dda0 <mem_malloc+0x1e8>)
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dcf0:	4b2b      	ldr	r3, [pc, #172]	; (800dda0 <mem_malloc+0x1e8>)
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	4b2e      	ldr	r3, [pc, #184]	; (800ddb0 <mem_malloc+0x1f8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d00b      	beq.n	800dd14 <mem_malloc+0x15c>
 800dcfc:	4b28      	ldr	r3, [pc, #160]	; (800dda0 <mem_malloc+0x1e8>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	791b      	ldrb	r3, [r3, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d006      	beq.n	800dd14 <mem_malloc+0x15c>
 800dd06:	4b27      	ldr	r3, [pc, #156]	; (800dda4 <mem_malloc+0x1ec>)
 800dd08:	f240 32b5 	movw	r2, #949	; 0x3b5
 800dd0c:	4929      	ldr	r1, [pc, #164]	; (800ddb4 <mem_malloc+0x1fc>)
 800dd0e:	4827      	ldr	r0, [pc, #156]	; (800ddac <mem_malloc+0x1f4>)
 800dd10:	f00d fc34 	bl	801b57c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800dd14:	4821      	ldr	r0, [pc, #132]	; (800dd9c <mem_malloc+0x1e4>)
 800dd16:	f00c fbac 	bl	801a472 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dd1a:	8bba      	ldrh	r2, [r7, #28]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	4413      	add	r3, r2
 800dd20:	3308      	adds	r3, #8
 800dd22:	4a23      	ldr	r2, [pc, #140]	; (800ddb0 <mem_malloc+0x1f8>)
 800dd24:	6812      	ldr	r2, [r2, #0]
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d906      	bls.n	800dd38 <mem_malloc+0x180>
 800dd2a:	4b1e      	ldr	r3, [pc, #120]	; (800dda4 <mem_malloc+0x1ec>)
 800dd2c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800dd30:	4921      	ldr	r1, [pc, #132]	; (800ddb8 <mem_malloc+0x200>)
 800dd32:	481e      	ldr	r0, [pc, #120]	; (800ddac <mem_malloc+0x1f4>)
 800dd34:	f00d fc22 	bl	801b57c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	f003 0303 	and.w	r3, r3, #3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d006      	beq.n	800dd50 <mem_malloc+0x198>
 800dd42:	4b18      	ldr	r3, [pc, #96]	; (800dda4 <mem_malloc+0x1ec>)
 800dd44:	f240 32bb 	movw	r2, #955	; 0x3bb
 800dd48:	491c      	ldr	r1, [pc, #112]	; (800ddbc <mem_malloc+0x204>)
 800dd4a:	4818      	ldr	r0, [pc, #96]	; (800ddac <mem_malloc+0x1f4>)
 800dd4c:	f00d fc16 	bl	801b57c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	f003 0303 	and.w	r3, r3, #3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d006      	beq.n	800dd68 <mem_malloc+0x1b0>
 800dd5a:	4b12      	ldr	r3, [pc, #72]	; (800dda4 <mem_malloc+0x1ec>)
 800dd5c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800dd60:	4917      	ldr	r1, [pc, #92]	; (800ddc0 <mem_malloc+0x208>)
 800dd62:	4812      	ldr	r0, [pc, #72]	; (800ddac <mem_malloc+0x1f4>)
 800dd64:	f00d fc0a 	bl	801b57c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	3308      	adds	r3, #8
 800dd6c:	e011      	b.n	800dd92 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800dd6e:	8bfb      	ldrh	r3, [r7, #30]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff fc3b 	bl	800d5ec <ptr_to_mem>
 800dd76:	4603      	mov	r3, r0
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dd7c:	8bfa      	ldrh	r2, [r7, #30]
 800dd7e:	8bbb      	ldrh	r3, [r7, #28]
 800dd80:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800dd84:	429a      	cmp	r2, r3
 800dd86:	f4ff af41 	bcc.w	800dc0c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800dd8a:	4804      	ldr	r0, [pc, #16]	; (800dd9c <mem_malloc+0x1e4>)
 800dd8c:	f00c fb71 	bl	801a472 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3720      	adds	r7, #32
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	2000984c 	.word	0x2000984c
 800dda0:	20009850 	.word	0x20009850
 800dda4:	0801ca30 	.word	0x0801ca30
 800dda8:	0801cbf4 	.word	0x0801cbf4
 800ddac:	0801ca78 	.word	0x0801ca78
 800ddb0:	20009848 	.word	0x20009848
 800ddb4:	0801cc08 	.word	0x0801cc08
 800ddb8:	0801cc24 	.word	0x0801cc24
 800ddbc:	0801cc54 	.word	0x0801cc54
 800ddc0:	0801cc84 	.word	0x0801cc84

0800ddc4 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	4603      	mov	r3, r0
 800ddcc:	460a      	mov	r2, r1
 800ddce:	80fb      	strh	r3, [r7, #6]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800ddd4:	88fb      	ldrh	r3, [r7, #6]
 800ddd6:	88ba      	ldrh	r2, [r7, #4]
 800ddd8:	fb02 f303 	mul.w	r3, r2, r3
 800dddc:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	461a      	mov	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d001      	beq.n	800ddee <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800ddea:	2300      	movs	r3, #0
 800ddec:	e00e      	b.n	800de0c <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7ff fee0 	bl	800dbb8 <mem_malloc>
 800ddf8:	60b8      	str	r0, [r7, #8]
  if (p) {
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d004      	beq.n	800de0a <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	2100      	movs	r1, #0
 800de04:	68b8      	ldr	r0, [r7, #8]
 800de06:	f00d fad3 	bl	801b3b0 <memset>
  }
  return p;
 800de0a:	68bb      	ldr	r3, [r7, #8]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	2200      	movs	r2, #0
 800de22:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	3303      	adds	r3, #3
 800de2a:	f023 0303 	bic.w	r3, r3, #3
 800de2e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
 800de34:	e011      	b.n	800de5a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	68ba      	ldr	r2, [r7, #8]
 800de46:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	881b      	ldrh	r3, [r3, #0]
 800de4c:	461a      	mov	r2, r3
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	4413      	add	r3, r2
 800de52:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	3301      	adds	r3, #1
 800de58:	60fb      	str	r3, [r7, #12]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	885b      	ldrh	r3, [r3, #2]
 800de5e:	461a      	mov	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	4293      	cmp	r3, r2
 800de64:	dbe7      	blt.n	800de36 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bc80      	pop	{r7}
 800de70:	4770      	bx	lr
	...

0800de74 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de7a:	2300      	movs	r3, #0
 800de7c:	80fb      	strh	r3, [r7, #6]
 800de7e:	e009      	b.n	800de94 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800de80:	88fb      	ldrh	r3, [r7, #6]
 800de82:	4a08      	ldr	r2, [pc, #32]	; (800dea4 <memp_init+0x30>)
 800de84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff ffc3 	bl	800de14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	3301      	adds	r3, #1
 800de92:	80fb      	strh	r3, [r7, #6]
 800de94:	88fb      	ldrh	r3, [r7, #6]
 800de96:	2b0c      	cmp	r3, #12
 800de98:	d9f2      	bls.n	800de80 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800de9a:	bf00      	nop
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	0801f8b0 	.word	0x0801f8b0

0800dea8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800deb0:	f00c fb0c 	bl	801a4cc <sys_arch_protect>
 800deb4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	689b      	ldr	r3, [r3, #8]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d015      	beq.n	800def0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	6812      	ldr	r2, [r2, #0]
 800decc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d006      	beq.n	800dee6 <do_memp_malloc_pool+0x3e>
 800ded8:	4b09      	ldr	r3, [pc, #36]	; (800df00 <do_memp_malloc_pool+0x58>)
 800deda:	f44f 728c 	mov.w	r2, #280	; 0x118
 800dede:	4909      	ldr	r1, [pc, #36]	; (800df04 <do_memp_malloc_pool+0x5c>)
 800dee0:	4809      	ldr	r0, [pc, #36]	; (800df08 <do_memp_malloc_pool+0x60>)
 800dee2:	f00d fb4b 	bl	801b57c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f00c fafe 	bl	801a4e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	e003      	b.n	800def8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f00c faf9 	bl	801a4e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	0801cca8 	.word	0x0801cca8
 800df04:	0801ccd8 	.word	0x0801ccd8
 800df08:	0801ccfc 	.word	0x0801ccfc

0800df0c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <memp_malloc_pool+0x1c>
 800df1a:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <memp_malloc_pool+0x38>)
 800df1c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800df20:	4909      	ldr	r1, [pc, #36]	; (800df48 <memp_malloc_pool+0x3c>)
 800df22:	480a      	ldr	r0, [pc, #40]	; (800df4c <memp_malloc_pool+0x40>)
 800df24:	f00d fb2a 	bl	801b57c <iprintf>
  if (desc == NULL) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d101      	bne.n	800df32 <memp_malloc_pool+0x26>
    return NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	e003      	b.n	800df3a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7ff ffb8 	bl	800dea8 <do_memp_malloc_pool>
 800df38:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	0801cca8 	.word	0x0801cca8
 800df48:	0801cd24 	.word	0x0801cd24
 800df4c:	0801ccfc 	.word	0x0801ccfc

0800df50 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	4603      	mov	r3, r0
 800df58:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	2b0c      	cmp	r3, #12
 800df5e:	d908      	bls.n	800df72 <memp_malloc+0x22>
 800df60:	4b0a      	ldr	r3, [pc, #40]	; (800df8c <memp_malloc+0x3c>)
 800df62:	f240 1257 	movw	r2, #343	; 0x157
 800df66:	490a      	ldr	r1, [pc, #40]	; (800df90 <memp_malloc+0x40>)
 800df68:	480a      	ldr	r0, [pc, #40]	; (800df94 <memp_malloc+0x44>)
 800df6a:	f00d fb07 	bl	801b57c <iprintf>
 800df6e:	2300      	movs	r3, #0
 800df70:	e008      	b.n	800df84 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800df72:	79fb      	ldrb	r3, [r7, #7]
 800df74:	4a08      	ldr	r2, [pc, #32]	; (800df98 <memp_malloc+0x48>)
 800df76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7ff ff94 	bl	800dea8 <do_memp_malloc_pool>
 800df80:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800df82:	68fb      	ldr	r3, [r7, #12]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	0801cca8 	.word	0x0801cca8
 800df90:	0801cd38 	.word	0x0801cd38
 800df94:	0801ccfc 	.word	0x0801ccfc
 800df98:	0801f8b0 	.word	0x0801f8b0

0800df9c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	f003 0303 	and.w	r3, r3, #3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d006      	beq.n	800dfbe <do_memp_free_pool+0x22>
 800dfb0:	4b0d      	ldr	r3, [pc, #52]	; (800dfe8 <do_memp_free_pool+0x4c>)
 800dfb2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dfb6:	490d      	ldr	r1, [pc, #52]	; (800dfec <do_memp_free_pool+0x50>)
 800dfb8:	480d      	ldr	r0, [pc, #52]	; (800dff0 <do_memp_free_pool+0x54>)
 800dfba:	f00d fadf 	bl	801b57c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dfc2:	f00c fa83 	bl	801a4cc <sys_arch_protect>
 800dfc6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dfda:	68b8      	ldr	r0, [r7, #8]
 800dfdc:	f00c fa84 	bl	801a4e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dfe0:	bf00      	nop
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	0801cca8 	.word	0x0801cca8
 800dfec:	0801cd58 	.word	0x0801cd58
 800dff0:	0801ccfc 	.word	0x0801ccfc

0800dff4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d106      	bne.n	800e012 <memp_free_pool+0x1e>
 800e004:	4b0a      	ldr	r3, [pc, #40]	; (800e030 <memp_free_pool+0x3c>)
 800e006:	f240 1295 	movw	r2, #405	; 0x195
 800e00a:	490a      	ldr	r1, [pc, #40]	; (800e034 <memp_free_pool+0x40>)
 800e00c:	480a      	ldr	r0, [pc, #40]	; (800e038 <memp_free_pool+0x44>)
 800e00e:	f00d fab5 	bl	801b57c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d007      	beq.n	800e028 <memp_free_pool+0x34>
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d004      	beq.n	800e028 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff ffbb 	bl	800df9c <do_memp_free_pool>
 800e026:	e000      	b.n	800e02a <memp_free_pool+0x36>
    return;
 800e028:	bf00      	nop
}
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	0801cca8 	.word	0x0801cca8
 800e034:	0801cd24 	.word	0x0801cd24
 800e038:	0801ccfc 	.word	0x0801ccfc

0800e03c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	4603      	mov	r3, r0
 800e044:	6039      	str	r1, [r7, #0]
 800e046:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	2b0c      	cmp	r3, #12
 800e04c:	d907      	bls.n	800e05e <memp_free+0x22>
 800e04e:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <memp_free+0x44>)
 800e050:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e054:	490b      	ldr	r1, [pc, #44]	; (800e084 <memp_free+0x48>)
 800e056:	480c      	ldr	r0, [pc, #48]	; (800e088 <memp_free+0x4c>)
 800e058:	f00d fa90 	bl	801b57c <iprintf>
 800e05c:	e00c      	b.n	800e078 <memp_free+0x3c>

  if (mem == NULL) {
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d008      	beq.n	800e076 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e064:	79fb      	ldrb	r3, [r7, #7]
 800e066:	4a09      	ldr	r2, [pc, #36]	; (800e08c <memp_free+0x50>)
 800e068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff ff94 	bl	800df9c <do_memp_free_pool>
 800e074:	e000      	b.n	800e078 <memp_free+0x3c>
    return;
 800e076:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	0801cca8 	.word	0x0801cca8
 800e084:	0801cd78 	.word	0x0801cd78
 800e088:	0801ccfc 	.word	0x0801ccfc
 800e08c:	0801f8b0 	.word	0x0801f8b0

0800e090 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e090:	b480      	push	{r7}
 800e092:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e094:	bf00      	nop
 800e096:	46bd      	mov	sp, r7
 800e098:	bc80      	pop	{r7}
 800e09a:	4770      	bx	lr

0800e09c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d108      	bne.n	800e0c2 <netif_add+0x26>
 800e0b0:	4b5b      	ldr	r3, [pc, #364]	; (800e220 <netif_add+0x184>)
 800e0b2:	f240 1227 	movw	r2, #295	; 0x127
 800e0b6:	495b      	ldr	r1, [pc, #364]	; (800e224 <netif_add+0x188>)
 800e0b8:	485b      	ldr	r0, [pc, #364]	; (800e228 <netif_add+0x18c>)
 800e0ba:	f00d fa5f 	bl	801b57c <iprintf>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	e0a9      	b.n	800e216 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d108      	bne.n	800e0da <netif_add+0x3e>
 800e0c8:	4b55      	ldr	r3, [pc, #340]	; (800e220 <netif_add+0x184>)
 800e0ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e0ce:	4957      	ldr	r1, [pc, #348]	; (800e22c <netif_add+0x190>)
 800e0d0:	4855      	ldr	r0, [pc, #340]	; (800e228 <netif_add+0x18c>)
 800e0d2:	f00d fa53 	bl	801b57c <iprintf>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	e09d      	b.n	800e216 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d101      	bne.n	800e0e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e0e0:	4b53      	ldr	r3, [pc, #332]	; (800e230 <netif_add+0x194>)
 800e0e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d101      	bne.n	800e0ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e0ea:	4b51      	ldr	r3, [pc, #324]	; (800e230 <netif_add+0x194>)
 800e0ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d101      	bne.n	800e0f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e0f4:	4b4e      	ldr	r3, [pc, #312]	; (800e230 <netif_add+0x194>)
 800e0f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2200      	movs	r2, #0
 800e108:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	4a49      	ldr	r2, [pc, #292]	; (800e234 <netif_add+0x198>)
 800e10e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2200      	movs	r2, #0
 800e114:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3324      	adds	r3, #36	; 0x24
 800e122:	2204      	movs	r2, #4
 800e124:	2100      	movs	r1, #0
 800e126:	4618      	mov	r0, r3
 800e128:	f00d f942 	bl	801b3b0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6a3a      	ldr	r2, [r7, #32]
 800e136:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e138:	4b3f      	ldr	r3, [pc, #252]	; (800e238 <netif_add+0x19c>)
 800e13a:	781a      	ldrb	r2, [r3, #0]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e146:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	68b9      	ldr	r1, [r7, #8]
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f000 f912 	bl	800e378 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	4798      	blx	r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <netif_add+0xc8>
    return NULL;
 800e160:	2300      	movs	r3, #0
 800e162:	e058      	b.n	800e216 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e16a:	2bff      	cmp	r3, #255	; 0xff
 800e16c:	d103      	bne.n	800e176 <netif_add+0xda>
        netif->num = 0;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e176:	2300      	movs	r3, #0
 800e178:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e17a:	4b30      	ldr	r3, [pc, #192]	; (800e23c <netif_add+0x1a0>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e02b      	b.n	800e1da <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e182:	697a      	ldr	r2, [r7, #20]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	429a      	cmp	r2, r3
 800e188:	d106      	bne.n	800e198 <netif_add+0xfc>
 800e18a:	4b25      	ldr	r3, [pc, #148]	; (800e220 <netif_add+0x184>)
 800e18c:	f240 128b 	movw	r2, #395	; 0x18b
 800e190:	492b      	ldr	r1, [pc, #172]	; (800e240 <netif_add+0x1a4>)
 800e192:	4825      	ldr	r0, [pc, #148]	; (800e228 <netif_add+0x18c>)
 800e194:	f00d f9f2 	bl	801b57c <iprintf>
        num_netifs++;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	3301      	adds	r3, #1
 800e19c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	2bff      	cmp	r3, #255	; 0xff
 800e1a2:	dd06      	ble.n	800e1b2 <netif_add+0x116>
 800e1a4:	4b1e      	ldr	r3, [pc, #120]	; (800e220 <netif_add+0x184>)
 800e1a6:	f240 128d 	movw	r2, #397	; 0x18d
 800e1aa:	4926      	ldr	r1, [pc, #152]	; (800e244 <netif_add+0x1a8>)
 800e1ac:	481e      	ldr	r0, [pc, #120]	; (800e228 <netif_add+0x18c>)
 800e1ae:	f00d f9e5 	bl	801b57c <iprintf>
        if (netif2->num == netif->num) {
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d108      	bne.n	800e1d4 <netif_add+0x138>
          netif->num++;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e1d2:	e005      	b.n	800e1e0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	617b      	str	r3, [r7, #20]
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1d0      	bne.n	800e182 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1be      	bne.n	800e164 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1ec:	2bfe      	cmp	r3, #254	; 0xfe
 800e1ee:	d103      	bne.n	800e1f8 <netif_add+0x15c>
    netif_num = 0;
 800e1f0:	4b11      	ldr	r3, [pc, #68]	; (800e238 <netif_add+0x19c>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
 800e1f6:	e006      	b.n	800e206 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1fe:	3301      	adds	r3, #1
 800e200:	b2da      	uxtb	r2, r3
 800e202:	4b0d      	ldr	r3, [pc, #52]	; (800e238 <netif_add+0x19c>)
 800e204:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e206:	4b0d      	ldr	r3, [pc, #52]	; (800e23c <netif_add+0x1a0>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e20e:	4a0b      	ldr	r2, [pc, #44]	; (800e23c <netif_add+0x1a0>)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e214:	68fb      	ldr	r3, [r7, #12]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	0801cd94 	.word	0x0801cd94
 800e224:	0801ce28 	.word	0x0801ce28
 800e228:	0801cde4 	.word	0x0801cde4
 800e22c:	0801ce44 	.word	0x0801ce44
 800e230:	0801f934 	.word	0x0801f934
 800e234:	0800e585 	.word	0x0800e585
 800e238:	2000c948 	.word	0x2000c948
 800e23c:	2000c940 	.word	0x2000c940
 800e240:	0801ce68 	.word	0x0801ce68
 800e244:	0801ce7c 	.word	0x0801ce7c

0800e248 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f002 fe2b 	bl	8010eb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e25a:	6839      	ldr	r1, [r7, #0]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f007 fed3 	bl	8016008 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e262:	bf00      	nop
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
	...

0800e26c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d106      	bne.n	800e28c <netif_do_set_ipaddr+0x20>
 800e27e:	4b1d      	ldr	r3, [pc, #116]	; (800e2f4 <netif_do_set_ipaddr+0x88>)
 800e280:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e284:	491c      	ldr	r1, [pc, #112]	; (800e2f8 <netif_do_set_ipaddr+0x8c>)
 800e286:	481d      	ldr	r0, [pc, #116]	; (800e2fc <netif_do_set_ipaddr+0x90>)
 800e288:	f00d f978 	bl	801b57c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d106      	bne.n	800e2a0 <netif_do_set_ipaddr+0x34>
 800e292:	4b18      	ldr	r3, [pc, #96]	; (800e2f4 <netif_do_set_ipaddr+0x88>)
 800e294:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e298:	4917      	ldr	r1, [pc, #92]	; (800e2f8 <netif_do_set_ipaddr+0x8c>)
 800e29a:	4818      	ldr	r0, [pc, #96]	; (800e2fc <netif_do_set_ipaddr+0x90>)
 800e29c:	f00d f96e 	bl	801b57c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d01c      	beq.n	800e2e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e2be:	f107 0314 	add.w	r3, r7, #20
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7ff ffbf 	bl	800e248 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <netif_do_set_ipaddr+0x6a>
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	e000      	b.n	800e2d8 <netif_do_set_ipaddr+0x6c>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e2dc:	2101      	movs	r1, #1
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f000 f8ce 	bl	800e480 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e000      	b.n	800e2ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	0801cd94 	.word	0x0801cd94
 800e2f8:	0801ceac 	.word	0x0801ceac
 800e2fc:	0801cde4 	.word	0x0801cde4

0800e300 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	3308      	adds	r3, #8
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	429a      	cmp	r2, r3
 800e318:	d00a      	beq.n	800e330 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d002      	beq.n	800e326 <netif_do_set_netmask+0x26>
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	e000      	b.n	800e328 <netif_do_set_netmask+0x28>
 800e326:	2300      	movs	r3, #0
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e32c:	2301      	movs	r3, #1
 800e32e:	e000      	b.n	800e332 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	bc80      	pop	{r7}
 800e33a:	4770      	bx	lr

0800e33c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	330c      	adds	r3, #12
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	429a      	cmp	r2, r3
 800e354:	d00a      	beq.n	800e36c <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d002      	beq.n	800e362 <netif_do_set_gw+0x26>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	e000      	b.n	800e364 <netif_do_set_gw+0x28>
 800e362:	2300      	movs	r3, #0
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e368:	2301      	movs	r3, #1
 800e36a:	e000      	b.n	800e36e <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	bc80      	pop	{r7}
 800e376:	4770      	bx	lr

0800e378 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e386:	2300      	movs	r3, #0
 800e388:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d101      	bne.n	800e398 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e394:	4b1c      	ldr	r3, [pc, #112]	; (800e408 <netif_set_addr+0x90>)
 800e396:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d101      	bne.n	800e3a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e39e:	4b1a      	ldr	r3, [pc, #104]	; (800e408 <netif_set_addr+0x90>)
 800e3a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d101      	bne.n	800e3ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e3a8:	4b17      	ldr	r3, [pc, #92]	; (800e408 <netif_set_addr+0x90>)
 800e3aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <netif_set_addr+0x42>
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d101      	bne.n	800e3be <netif_set_addr+0x46>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e000      	b.n	800e3c0 <netif_set_addr+0x48>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d006      	beq.n	800e3d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e3c8:	f107 0310 	add.w	r3, r7, #16
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	68b9      	ldr	r1, [r7, #8]
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f7ff ff4b 	bl	800e26c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e3d6:	69fa      	ldr	r2, [r7, #28]
 800e3d8:	6879      	ldr	r1, [r7, #4]
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7ff ff90 	bl	800e300 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e3e0:	69ba      	ldr	r2, [r7, #24]
 800e3e2:	6839      	ldr	r1, [r7, #0]
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f7ff ffa9 	bl	800e33c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d106      	bne.n	800e3fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e3f0:	f107 0310 	add.w	r3, r7, #16
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	68b9      	ldr	r1, [r7, #8]
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f7ff ff37 	bl	800e26c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e3fe:	bf00      	nop
 800e400:	3720      	adds	r7, #32
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	0801f934 	.word	0x0801f934

0800e40c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e414:	4a03      	ldr	r2, [pc, #12]	; (800e424 <netif_set_default+0x18>)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e41a:	bf00      	nop
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	bc80      	pop	{r7}
 800e422:	4770      	bx	lr
 800e424:	2000c944 	.word	0x2000c944

0800e428 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d107      	bne.n	800e446 <netif_set_up+0x1e>
 800e436:	4b0f      	ldr	r3, [pc, #60]	; (800e474 <netif_set_up+0x4c>)
 800e438:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e43c:	490e      	ldr	r1, [pc, #56]	; (800e478 <netif_set_up+0x50>)
 800e43e:	480f      	ldr	r0, [pc, #60]	; (800e47c <netif_set_up+0x54>)
 800e440:	f00d f89c 	bl	801b57c <iprintf>
 800e444:	e013      	b.n	800e46e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10c      	bne.n	800e46e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e45a:	f043 0301 	orr.w	r3, r3, #1
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e466:	2103      	movs	r1, #3
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f809 	bl	800e480 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	0801cd94 	.word	0x0801cd94
 800e478:	0801cf1c 	.word	0x0801cf1c
 800e47c:	0801cde4 	.word	0x0801cde4

0800e480 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	460b      	mov	r3, r1
 800e48a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d106      	bne.n	800e4a0 <netif_issue_reports+0x20>
 800e492:	4b18      	ldr	r3, [pc, #96]	; (800e4f4 <netif_issue_reports+0x74>)
 800e494:	f240 326d 	movw	r2, #877	; 0x36d
 800e498:	4917      	ldr	r1, [pc, #92]	; (800e4f8 <netif_issue_reports+0x78>)
 800e49a:	4818      	ldr	r0, [pc, #96]	; (800e4fc <netif_issue_reports+0x7c>)
 800e49c:	f00d f86e 	bl	801b57c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e4a6:	f003 0304 	and.w	r3, r3, #4
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d01e      	beq.n	800e4ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e4b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d017      	beq.n	800e4ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e4bc:	78fb      	ldrb	r3, [r7, #3]
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d013      	beq.n	800e4ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00e      	beq.n	800e4ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e4d6:	f003 0308 	and.w	r3, r3, #8
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d007      	beq.n	800e4ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	3304      	adds	r3, #4
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f00a fb51 	bl	8018b8c <etharp_request>
 800e4ea:	e000      	b.n	800e4ee <netif_issue_reports+0x6e>
    return;
 800e4ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	0801cd94 	.word	0x0801cd94
 800e4f8:	0801cf38 	.word	0x0801cf38
 800e4fc:	0801cde4 	.word	0x0801cde4

0800e500 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d107      	bne.n	800e51e <netif_set_down+0x1e>
 800e50e:	4b12      	ldr	r3, [pc, #72]	; (800e558 <netif_set_down+0x58>)
 800e510:	f240 329b 	movw	r2, #923	; 0x39b
 800e514:	4911      	ldr	r1, [pc, #68]	; (800e55c <netif_set_down+0x5c>)
 800e516:	4812      	ldr	r0, [pc, #72]	; (800e560 <netif_set_down+0x60>)
 800e518:	f00d f830 	bl	801b57c <iprintf>
 800e51c:	e019      	b.n	800e552 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e524:	f003 0301 	and.w	r3, r3, #1
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d012      	beq.n	800e552 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e532:	f023 0301 	bic.w	r3, r3, #1
 800e536:	b2da      	uxtb	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e544:	f003 0308 	and.w	r3, r3, #8
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f009 fed7 	bl	8018300 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	0801cd94 	.word	0x0801cd94
 800e55c:	0801cf5c 	.word	0x0801cf5c
 800e560:	0801cde4 	.word	0x0801cde4

0800e564 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d002      	beq.n	800e57a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	61da      	str	r2, [r3, #28]
  }
}
 800e57a:	bf00      	nop
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	bc80      	pop	{r7}
 800e582:	4770      	bx	lr

0800e584 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e590:	f06f 030b 	mvn.w	r3, #11
}
 800e594:	4618      	mov	r0, r3
 800e596:	3714      	adds	r7, #20
 800e598:	46bd      	mov	sp, r7
 800e59a:	bc80      	pop	{r7}
 800e59c:	4770      	bx	lr
	...

0800e5a0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e5aa:	79fb      	ldrb	r3, [r7, #7]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d013      	beq.n	800e5d8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e5b0:	4b0c      	ldr	r3, [pc, #48]	; (800e5e4 <netif_get_by_index+0x44>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	60fb      	str	r3, [r7, #12]
 800e5b6:	e00c      	b.n	800e5d2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5be:	3301      	adds	r3, #1
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	79fa      	ldrb	r2, [r7, #7]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d101      	bne.n	800e5cc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	e006      	b.n	800e5da <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1ef      	bne.n	800e5b8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bc80      	pop	{r7}
 800e5e2:	4770      	bx	lr
 800e5e4:	2000c940 	.word	0x2000c940

0800e5e8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e5ee:	f00b ff6d 	bl	801a4cc <sys_arch_protect>
 800e5f2:	6038      	str	r0, [r7, #0]
 800e5f4:	4b0d      	ldr	r3, [pc, #52]	; (800e62c <pbuf_free_ooseq+0x44>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	701a      	strb	r2, [r3, #0]
 800e5fa:	6838      	ldr	r0, [r7, #0]
 800e5fc:	f00b ff74 	bl	801a4e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e600:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <pbuf_free_ooseq+0x48>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	607b      	str	r3, [r7, #4]
 800e606:	e00a      	b.n	800e61e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d003      	beq.n	800e618 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f002 fc8b 	bl	8010f2c <tcp_free_ooseq>
      return;
 800e616:	e005      	b.n	800e624 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	607b      	str	r3, [r7, #4]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1f1      	bne.n	800e608 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	2000c949 	.word	0x2000c949
 800e630:	2000c958 	.word	0x2000c958

0800e634 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e63c:	f7ff ffd4 	bl	800e5e8 <pbuf_free_ooseq>
}
 800e640:	bf00      	nop
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e64e:	f00b ff3d 	bl	801a4cc <sys_arch_protect>
 800e652:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e654:	4b0f      	ldr	r3, [pc, #60]	; (800e694 <pbuf_pool_is_empty+0x4c>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e65a:	4b0e      	ldr	r3, [pc, #56]	; (800e694 <pbuf_pool_is_empty+0x4c>)
 800e65c:	2201      	movs	r2, #1
 800e65e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f00b ff41 	bl	801a4e8 <sys_arch_unprotect>

  if (!queued) {
 800e666:	78fb      	ldrb	r3, [r7, #3]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10f      	bne.n	800e68c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e66c:	2100      	movs	r1, #0
 800e66e:	480a      	ldr	r0, [pc, #40]	; (800e698 <pbuf_pool_is_empty+0x50>)
 800e670:	f7fd fb94 	bl	800bd9c <tcpip_try_callback>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d008      	beq.n	800e68c <pbuf_pool_is_empty+0x44>
 800e67a:	f00b ff27 	bl	801a4cc <sys_arch_protect>
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	4b04      	ldr	r3, [pc, #16]	; (800e694 <pbuf_pool_is_empty+0x4c>)
 800e682:	2200      	movs	r2, #0
 800e684:	701a      	strb	r2, [r3, #0]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f00b ff2e 	bl	801a4e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e68c:	bf00      	nop
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	2000c949 	.word	0x2000c949
 800e698:	0800e635 	.word	0x0800e635

0800e69c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	4611      	mov	r1, r2
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	80fb      	strh	r3, [r7, #6]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	88fa      	ldrh	r2, [r7, #6]
 800e6c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	88ba      	ldrh	r2, [r7, #4]
 800e6c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e6ca:	8b3b      	ldrh	r3, [r7, #24]
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	7f3a      	ldrb	r2, [r7, #28]
 800e6d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	73da      	strb	r2, [r3, #15]
}
 800e6e4:	bf00      	nop
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bc80      	pop	{r7}
 800e6ec:	4770      	bx	lr
	...

0800e6f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b08c      	sub	sp, #48	; 0x30
 800e6f4:	af02      	add	r7, sp, #8
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	80bb      	strh	r3, [r7, #4]
 800e6fe:	4613      	mov	r3, r2
 800e700:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e702:	79fb      	ldrb	r3, [r7, #7]
 800e704:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e706:	887b      	ldrh	r3, [r7, #2]
 800e708:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e70c:	d07f      	beq.n	800e80e <pbuf_alloc+0x11e>
 800e70e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e712:	f300 80c8 	bgt.w	800e8a6 <pbuf_alloc+0x1b6>
 800e716:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e71a:	d010      	beq.n	800e73e <pbuf_alloc+0x4e>
 800e71c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e720:	f300 80c1 	bgt.w	800e8a6 <pbuf_alloc+0x1b6>
 800e724:	2b01      	cmp	r3, #1
 800e726:	d002      	beq.n	800e72e <pbuf_alloc+0x3e>
 800e728:	2b41      	cmp	r3, #65	; 0x41
 800e72a:	f040 80bc 	bne.w	800e8a6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e72e:	887a      	ldrh	r2, [r7, #2]
 800e730:	88bb      	ldrh	r3, [r7, #4]
 800e732:	4619      	mov	r1, r3
 800e734:	2000      	movs	r0, #0
 800e736:	f000 f8d1 	bl	800e8dc <pbuf_alloc_reference>
 800e73a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e73c:	e0bd      	b.n	800e8ba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e742:	2300      	movs	r3, #0
 800e744:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e746:	88bb      	ldrh	r3, [r7, #4]
 800e748:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e74a:	200c      	movs	r0, #12
 800e74c:	f7ff fc00 	bl	800df50 <memp_malloc>
 800e750:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d109      	bne.n	800e76c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e758:	f7ff ff76 	bl	800e648 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e764:	f000 faa8 	bl	800ecb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e768:	2300      	movs	r3, #0
 800e76a:	e0a7      	b.n	800e8bc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e76e:	3303      	adds	r3, #3
 800e770:	b29b      	uxth	r3, r3
 800e772:	f023 0303 	bic.w	r3, r3, #3
 800e776:	b29b      	uxth	r3, r3
 800e778:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	8b7a      	ldrh	r2, [r7, #26]
 800e780:	4293      	cmp	r3, r2
 800e782:	bf28      	it	cs
 800e784:	4613      	movcs	r3, r2
 800e786:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e78a:	3310      	adds	r3, #16
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	4413      	add	r3, r2
 800e790:	3303      	adds	r3, #3
 800e792:	f023 0303 	bic.w	r3, r3, #3
 800e796:	4618      	mov	r0, r3
 800e798:	89f9      	ldrh	r1, [r7, #14]
 800e79a:	8b7a      	ldrh	r2, [r7, #26]
 800e79c:	2300      	movs	r3, #0
 800e79e:	9301      	str	r3, [sp, #4]
 800e7a0:	887b      	ldrh	r3, [r7, #2]
 800e7a2:	9300      	str	r3, [sp, #0]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	4601      	mov	r1, r0
 800e7a8:	6938      	ldr	r0, [r7, #16]
 800e7aa:	f7ff ff77 	bl	800e69c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	f003 0303 	and.w	r3, r3, #3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d006      	beq.n	800e7c8 <pbuf_alloc+0xd8>
 800e7ba:	4b42      	ldr	r3, [pc, #264]	; (800e8c4 <pbuf_alloc+0x1d4>)
 800e7bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e7c0:	4941      	ldr	r1, [pc, #260]	; (800e8c8 <pbuf_alloc+0x1d8>)
 800e7c2:	4842      	ldr	r0, [pc, #264]	; (800e8cc <pbuf_alloc+0x1dc>)
 800e7c4:	f00c feda 	bl	801b57c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e7c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7ca:	3303      	adds	r3, #3
 800e7cc:	f023 0303 	bic.w	r3, r3, #3
 800e7d0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e7d4:	d106      	bne.n	800e7e4 <pbuf_alloc+0xf4>
 800e7d6:	4b3b      	ldr	r3, [pc, #236]	; (800e8c4 <pbuf_alloc+0x1d4>)
 800e7d8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e7dc:	493c      	ldr	r1, [pc, #240]	; (800e8d0 <pbuf_alloc+0x1e0>)
 800e7de:	483b      	ldr	r0, [pc, #236]	; (800e8cc <pbuf_alloc+0x1dc>)
 800e7e0:	f00c fecc 	bl	801b57c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d102      	bne.n	800e7f0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ee:	e002      	b.n	800e7f6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	693a      	ldr	r2, [r7, #16]
 800e7f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e7fa:	8b7a      	ldrh	r2, [r7, #26]
 800e7fc:	89fb      	ldrh	r3, [r7, #14]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e802:	2300      	movs	r3, #0
 800e804:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e806:	8b7b      	ldrh	r3, [r7, #26]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d19e      	bne.n	800e74a <pbuf_alloc+0x5a>
      break;
 800e80c:	e055      	b.n	800e8ba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e80e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e810:	3303      	adds	r3, #3
 800e812:	b29b      	uxth	r3, r3
 800e814:	f023 0303 	bic.w	r3, r3, #3
 800e818:	b29a      	uxth	r2, r3
 800e81a:	88bb      	ldrh	r3, [r7, #4]
 800e81c:	3303      	adds	r3, #3
 800e81e:	b29b      	uxth	r3, r3
 800e820:	f023 0303 	bic.w	r3, r3, #3
 800e824:	b29b      	uxth	r3, r3
 800e826:	4413      	add	r3, r2
 800e828:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e82a:	8b3b      	ldrh	r3, [r7, #24]
 800e82c:	3310      	adds	r3, #16
 800e82e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e830:	8b3a      	ldrh	r2, [r7, #24]
 800e832:	88bb      	ldrh	r3, [r7, #4]
 800e834:	3303      	adds	r3, #3
 800e836:	f023 0303 	bic.w	r3, r3, #3
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d306      	bcc.n	800e84c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e83e:	8afa      	ldrh	r2, [r7, #22]
 800e840:	88bb      	ldrh	r3, [r7, #4]
 800e842:	3303      	adds	r3, #3
 800e844:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e848:	429a      	cmp	r2, r3
 800e84a:	d201      	bcs.n	800e850 <pbuf_alloc+0x160>
        return NULL;
 800e84c:	2300      	movs	r3, #0
 800e84e:	e035      	b.n	800e8bc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e850:	8afb      	ldrh	r3, [r7, #22]
 800e852:	4618      	mov	r0, r3
 800e854:	f7ff f9b0 	bl	800dbb8 <mem_malloc>
 800e858:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d101      	bne.n	800e864 <pbuf_alloc+0x174>
        return NULL;
 800e860:	2300      	movs	r3, #0
 800e862:	e02b      	b.n	800e8bc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e866:	3310      	adds	r3, #16
 800e868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e86a:	4413      	add	r3, r2
 800e86c:	3303      	adds	r3, #3
 800e86e:	f023 0303 	bic.w	r3, r3, #3
 800e872:	4618      	mov	r0, r3
 800e874:	88b9      	ldrh	r1, [r7, #4]
 800e876:	88ba      	ldrh	r2, [r7, #4]
 800e878:	2300      	movs	r3, #0
 800e87a:	9301      	str	r3, [sp, #4]
 800e87c:	887b      	ldrh	r3, [r7, #2]
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	460b      	mov	r3, r1
 800e882:	4601      	mov	r1, r0
 800e884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e886:	f7ff ff09 	bl	800e69c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	f003 0303 	and.w	r3, r3, #3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d010      	beq.n	800e8b8 <pbuf_alloc+0x1c8>
 800e896:	4b0b      	ldr	r3, [pc, #44]	; (800e8c4 <pbuf_alloc+0x1d4>)
 800e898:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e89c:	490d      	ldr	r1, [pc, #52]	; (800e8d4 <pbuf_alloc+0x1e4>)
 800e89e:	480b      	ldr	r0, [pc, #44]	; (800e8cc <pbuf_alloc+0x1dc>)
 800e8a0:	f00c fe6c 	bl	801b57c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e8a4:	e008      	b.n	800e8b8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e8a6:	4b07      	ldr	r3, [pc, #28]	; (800e8c4 <pbuf_alloc+0x1d4>)
 800e8a8:	f240 1227 	movw	r2, #295	; 0x127
 800e8ac:	490a      	ldr	r1, [pc, #40]	; (800e8d8 <pbuf_alloc+0x1e8>)
 800e8ae:	4807      	ldr	r0, [pc, #28]	; (800e8cc <pbuf_alloc+0x1dc>)
 800e8b0:	f00c fe64 	bl	801b57c <iprintf>
      return NULL;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	e001      	b.n	800e8bc <pbuf_alloc+0x1cc>
      break;
 800e8b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3728      	adds	r7, #40	; 0x28
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	0801cfc4 	.word	0x0801cfc4
 800e8c8:	0801cff4 	.word	0x0801cff4
 800e8cc:	0801d024 	.word	0x0801d024
 800e8d0:	0801d04c 	.word	0x0801d04c
 800e8d4:	0801d080 	.word	0x0801d080
 800e8d8:	0801d0ac 	.word	0x0801d0ac

0800e8dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b086      	sub	sp, #24
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	807b      	strh	r3, [r7, #2]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e8ec:	883b      	ldrh	r3, [r7, #0]
 800e8ee:	2b41      	cmp	r3, #65	; 0x41
 800e8f0:	d009      	beq.n	800e906 <pbuf_alloc_reference+0x2a>
 800e8f2:	883b      	ldrh	r3, [r7, #0]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d006      	beq.n	800e906 <pbuf_alloc_reference+0x2a>
 800e8f8:	4b0f      	ldr	r3, [pc, #60]	; (800e938 <pbuf_alloc_reference+0x5c>)
 800e8fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e8fe:	490f      	ldr	r1, [pc, #60]	; (800e93c <pbuf_alloc_reference+0x60>)
 800e900:	480f      	ldr	r0, [pc, #60]	; (800e940 <pbuf_alloc_reference+0x64>)
 800e902:	f00c fe3b 	bl	801b57c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e906:	200b      	movs	r0, #11
 800e908:	f7ff fb22 	bl	800df50 <memp_malloc>
 800e90c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d101      	bne.n	800e918 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e914:	2300      	movs	r3, #0
 800e916:	e00b      	b.n	800e930 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e918:	8879      	ldrh	r1, [r7, #2]
 800e91a:	887a      	ldrh	r2, [r7, #2]
 800e91c:	2300      	movs	r3, #0
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	883b      	ldrh	r3, [r7, #0]
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	460b      	mov	r3, r1
 800e926:	6879      	ldr	r1, [r7, #4]
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f7ff feb7 	bl	800e69c <pbuf_init_alloced_pbuf>
  return p;
 800e92e:	68fb      	ldr	r3, [r7, #12]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	0801cfc4 	.word	0x0801cfc4
 800e93c:	0801d0c8 	.word	0x0801d0c8
 800e940:	0801d024 	.word	0x0801d024

0800e944 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b088      	sub	sp, #32
 800e948:	af02      	add	r7, sp, #8
 800e94a:	607b      	str	r3, [r7, #4]
 800e94c:	4603      	mov	r3, r0
 800e94e:	73fb      	strb	r3, [r7, #15]
 800e950:	460b      	mov	r3, r1
 800e952:	81bb      	strh	r3, [r7, #12]
 800e954:	4613      	mov	r3, r2
 800e956:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e958:	7bfb      	ldrb	r3, [r7, #15]
 800e95a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e95c:	8a7b      	ldrh	r3, [r7, #18]
 800e95e:	3303      	adds	r3, #3
 800e960:	f023 0203 	bic.w	r2, r3, #3
 800e964:	89bb      	ldrh	r3, [r7, #12]
 800e966:	441a      	add	r2, r3
 800e968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d901      	bls.n	800e972 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e96e:	2300      	movs	r3, #0
 800e970:	e018      	b.n	800e9a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e972:	6a3b      	ldr	r3, [r7, #32]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d007      	beq.n	800e988 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e978:	8a7b      	ldrh	r3, [r7, #18]
 800e97a:	3303      	adds	r3, #3
 800e97c:	f023 0303 	bic.w	r3, r3, #3
 800e980:	6a3a      	ldr	r2, [r7, #32]
 800e982:	4413      	add	r3, r2
 800e984:	617b      	str	r3, [r7, #20]
 800e986:	e001      	b.n	800e98c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	89b9      	ldrh	r1, [r7, #12]
 800e990:	89ba      	ldrh	r2, [r7, #12]
 800e992:	2302      	movs	r3, #2
 800e994:	9301      	str	r3, [sp, #4]
 800e996:	897b      	ldrh	r3, [r7, #10]
 800e998:	9300      	str	r3, [sp, #0]
 800e99a:	460b      	mov	r3, r1
 800e99c:	6979      	ldr	r1, [r7, #20]
 800e99e:	f7ff fe7d 	bl	800e69c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e9a2:	687b      	ldr	r3, [r7, #4]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d106      	bne.n	800e9cc <pbuf_realloc+0x20>
 800e9be:	4b3a      	ldr	r3, [pc, #232]	; (800eaa8 <pbuf_realloc+0xfc>)
 800e9c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e9c4:	4939      	ldr	r1, [pc, #228]	; (800eaac <pbuf_realloc+0x100>)
 800e9c6:	483a      	ldr	r0, [pc, #232]	; (800eab0 <pbuf_realloc+0x104>)
 800e9c8:	f00c fdd8 	bl	801b57c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	891b      	ldrh	r3, [r3, #8]
 800e9d0:	887a      	ldrh	r2, [r7, #2]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d263      	bcs.n	800ea9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	891a      	ldrh	r2, [r3, #8]
 800e9da:	887b      	ldrh	r3, [r7, #2]
 800e9dc:	1ad3      	subs	r3, r2, r3
 800e9de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e9e0:	887b      	ldrh	r3, [r7, #2]
 800e9e2:	817b      	strh	r3, [r7, #10]
  q = p;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e9e8:	e018      	b.n	800ea1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	895b      	ldrh	r3, [r3, #10]
 800e9ee:	897a      	ldrh	r2, [r7, #10]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	891a      	ldrh	r2, [r3, #8]
 800e9f8:	893b      	ldrh	r3, [r7, #8]
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <pbuf_realloc+0x70>
 800ea0e:	4b26      	ldr	r3, [pc, #152]	; (800eaa8 <pbuf_realloc+0xfc>)
 800ea10:	f240 12af 	movw	r2, #431	; 0x1af
 800ea14:	4927      	ldr	r1, [pc, #156]	; (800eab4 <pbuf_realloc+0x108>)
 800ea16:	4826      	ldr	r0, [pc, #152]	; (800eab0 <pbuf_realloc+0x104>)
 800ea18:	f00c fdb0 	bl	801b57c <iprintf>
  while (rem_len > q->len) {
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	895b      	ldrh	r3, [r3, #10]
 800ea20:	897a      	ldrh	r2, [r7, #10]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d8e1      	bhi.n	800e9ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	7b1b      	ldrb	r3, [r3, #12]
 800ea2a:	f003 030f 	and.w	r3, r3, #15
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d121      	bne.n	800ea76 <pbuf_realloc+0xca>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	895b      	ldrh	r3, [r3, #10]
 800ea36:	897a      	ldrh	r2, [r7, #10]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d01c      	beq.n	800ea76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	7b5b      	ldrb	r3, [r3, #13]
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d116      	bne.n	800ea76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	685a      	ldr	r2, [r3, #4]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	897b      	ldrh	r3, [r7, #10]
 800ea54:	4413      	add	r3, r2
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	4619      	mov	r1, r3
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f7fe ffa2 	bl	800d9a4 <mem_trim>
 800ea60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d106      	bne.n	800ea76 <pbuf_realloc+0xca>
 800ea68:	4b0f      	ldr	r3, [pc, #60]	; (800eaa8 <pbuf_realloc+0xfc>)
 800ea6a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ea6e:	4912      	ldr	r1, [pc, #72]	; (800eab8 <pbuf_realloc+0x10c>)
 800ea70:	480f      	ldr	r0, [pc, #60]	; (800eab0 <pbuf_realloc+0x104>)
 800ea72:	f00c fd83 	bl	801b57c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	897a      	ldrh	r2, [r7, #10]
 800ea7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	895a      	ldrh	r2, [r3, #10]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d004      	beq.n	800ea96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f000 f911 	bl	800ecb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]
 800ea9c:	e000      	b.n	800eaa0 <pbuf_realloc+0xf4>
    return;
 800ea9e:	bf00      	nop

}
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	0801cfc4 	.word	0x0801cfc4
 800eaac:	0801d0dc 	.word	0x0801d0dc
 800eab0:	0801d024 	.word	0x0801d024
 800eab4:	0801d0f4 	.word	0x0801d0f4
 800eab8:	0801d10c 	.word	0x0801d10c

0800eabc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	4613      	mov	r3, r2
 800eac8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d106      	bne.n	800eade <pbuf_add_header_impl+0x22>
 800ead0:	4b2b      	ldr	r3, [pc, #172]	; (800eb80 <pbuf_add_header_impl+0xc4>)
 800ead2:	f240 12df 	movw	r2, #479	; 0x1df
 800ead6:	492b      	ldr	r1, [pc, #172]	; (800eb84 <pbuf_add_header_impl+0xc8>)
 800ead8:	482b      	ldr	r0, [pc, #172]	; (800eb88 <pbuf_add_header_impl+0xcc>)
 800eada:	f00c fd4f 	bl	801b57c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d003      	beq.n	800eaec <pbuf_add_header_impl+0x30>
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaea:	d301      	bcc.n	800eaf0 <pbuf_add_header_impl+0x34>
    return 1;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e043      	b.n	800eb78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d101      	bne.n	800eafa <pbuf_add_header_impl+0x3e>
    return 0;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e03e      	b.n	800eb78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	891a      	ldrh	r2, [r3, #8]
 800eb02:	8a7b      	ldrh	r3, [r7, #18]
 800eb04:	4413      	add	r3, r2
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	8a7a      	ldrh	r2, [r7, #18]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d901      	bls.n	800eb12 <pbuf_add_header_impl+0x56>
    return 1;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e032      	b.n	800eb78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	7b1b      	ldrb	r3, [r3, #12]
 800eb16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800eb18:	8a3b      	ldrh	r3, [r7, #16]
 800eb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00c      	beq.n	800eb3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	425b      	negs	r3, r3
 800eb2a:	4413      	add	r3, r2
 800eb2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	3310      	adds	r3, #16
 800eb32:	697a      	ldr	r2, [r7, #20]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d20d      	bcs.n	800eb54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e01d      	b.n	800eb78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800eb3c:	79fb      	ldrb	r3, [r7, #7]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d006      	beq.n	800eb50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	685a      	ldr	r2, [r3, #4]
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	425b      	negs	r3, r3
 800eb4a:	4413      	add	r3, r2
 800eb4c:	617b      	str	r3, [r7, #20]
 800eb4e:	e001      	b.n	800eb54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800eb50:	2301      	movs	r3, #1
 800eb52:	e011      	b.n	800eb78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	697a      	ldr	r2, [r7, #20]
 800eb58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	895a      	ldrh	r2, [r3, #10]
 800eb5e:	8a7b      	ldrh	r3, [r7, #18]
 800eb60:	4413      	add	r3, r2
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	891a      	ldrh	r2, [r3, #8]
 800eb6c:	8a7b      	ldrh	r3, [r7, #18]
 800eb6e:	4413      	add	r3, r2
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	811a      	strh	r2, [r3, #8]


  return 0;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3718      	adds	r7, #24
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	0801cfc4 	.word	0x0801cfc4
 800eb84:	0801d128 	.word	0x0801d128
 800eb88:	0801d024 	.word	0x0801d024

0800eb8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800eb96:	2200      	movs	r2, #0
 800eb98:	6839      	ldr	r1, [r7, #0]
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff ff8e 	bl	800eabc <pbuf_add_header_impl>
 800eba0:	4603      	mov	r3, r0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
	...

0800ebac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d106      	bne.n	800ebca <pbuf_remove_header+0x1e>
 800ebbc:	4b20      	ldr	r3, [pc, #128]	; (800ec40 <pbuf_remove_header+0x94>)
 800ebbe:	f240 224b 	movw	r2, #587	; 0x24b
 800ebc2:	4920      	ldr	r1, [pc, #128]	; (800ec44 <pbuf_remove_header+0x98>)
 800ebc4:	4820      	ldr	r0, [pc, #128]	; (800ec48 <pbuf_remove_header+0x9c>)
 800ebc6:	f00c fcd9 	bl	801b57c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d003      	beq.n	800ebd8 <pbuf_remove_header+0x2c>
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebd6:	d301      	bcc.n	800ebdc <pbuf_remove_header+0x30>
    return 1;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e02c      	b.n	800ec36 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d101      	bne.n	800ebe6 <pbuf_remove_header+0x3a>
    return 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	e027      	b.n	800ec36 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	895b      	ldrh	r3, [r3, #10]
 800ebee:	89fa      	ldrh	r2, [r7, #14]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d908      	bls.n	800ec06 <pbuf_remove_header+0x5a>
 800ebf4:	4b12      	ldr	r3, [pc, #72]	; (800ec40 <pbuf_remove_header+0x94>)
 800ebf6:	f240 2255 	movw	r2, #597	; 0x255
 800ebfa:	4914      	ldr	r1, [pc, #80]	; (800ec4c <pbuf_remove_header+0xa0>)
 800ebfc:	4812      	ldr	r0, [pc, #72]	; (800ec48 <pbuf_remove_header+0x9c>)
 800ebfe:	f00c fcbd 	bl	801b57c <iprintf>
 800ec02:	2301      	movs	r3, #1
 800ec04:	e017      	b.n	800ec36 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	441a      	add	r2, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	895a      	ldrh	r2, [r3, #10]
 800ec1c:	89fb      	ldrh	r3, [r7, #14]
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	891a      	ldrh	r2, [r3, #8]
 800ec2a:	89fb      	ldrh	r3, [r7, #14]
 800ec2c:	1ad3      	subs	r3, r2, r3
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	0801cfc4 	.word	0x0801cfc4
 800ec44:	0801d128 	.word	0x0801d128
 800ec48:	0801d024 	.word	0x0801d024
 800ec4c:	0801d134 	.word	0x0801d134

0800ec50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	807b      	strh	r3, [r7, #2]
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ec60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	da08      	bge.n	800ec7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ec68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec6c:	425b      	negs	r3, r3
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ff9b 	bl	800ebac <pbuf_remove_header>
 800ec76:	4603      	mov	r3, r0
 800ec78:	e007      	b.n	800ec8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ec7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec7e:	787a      	ldrb	r2, [r7, #1]
 800ec80:	4619      	mov	r1, r3
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7ff ff1a 	bl	800eabc <pbuf_add_header_impl>
 800ec88:	4603      	mov	r3, r0
  }
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b082      	sub	sp, #8
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ec9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eca2:	2201      	movs	r2, #1
 800eca4:	4619      	mov	r1, r3
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7ff ffd2 	bl	800ec50 <pbuf_header_impl>
 800ecac:	4603      	mov	r3, r0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10b      	bne.n	800ecde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d106      	bne.n	800ecda <pbuf_free+0x22>
 800eccc:	4b3b      	ldr	r3, [pc, #236]	; (800edbc <pbuf_free+0x104>)
 800ecce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ecd2:	493b      	ldr	r1, [pc, #236]	; (800edc0 <pbuf_free+0x108>)
 800ecd4:	483b      	ldr	r0, [pc, #236]	; (800edc4 <pbuf_free+0x10c>)
 800ecd6:	f00c fc51 	bl	801b57c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	e069      	b.n	800edb2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ecde:	2300      	movs	r3, #0
 800ece0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ece2:	e062      	b.n	800edaa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ece4:	f00b fbf2 	bl	801a4cc <sys_arch_protect>
 800ece8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	7b9b      	ldrb	r3, [r3, #14]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d106      	bne.n	800ed00 <pbuf_free+0x48>
 800ecf2:	4b32      	ldr	r3, [pc, #200]	; (800edbc <pbuf_free+0x104>)
 800ecf4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ecf8:	4933      	ldr	r1, [pc, #204]	; (800edc8 <pbuf_free+0x110>)
 800ecfa:	4832      	ldr	r0, [pc, #200]	; (800edc4 <pbuf_free+0x10c>)
 800ecfc:	f00c fc3e 	bl	801b57c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	7b9b      	ldrb	r3, [r3, #14]
 800ed04:	3b01      	subs	r3, #1
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	739a      	strb	r2, [r3, #14]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	7b9b      	ldrb	r3, [r3, #14]
 800ed10:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ed12:	69b8      	ldr	r0, [r7, #24]
 800ed14:	f00b fbe8 	bl	801a4e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ed18:	7dfb      	ldrb	r3, [r7, #23]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d143      	bne.n	800eda6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	7b1b      	ldrb	r3, [r3, #12]
 800ed28:	f003 030f 	and.w	r3, r3, #15
 800ed2c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	7b5b      	ldrb	r3, [r3, #13]
 800ed32:	f003 0302 	and.w	r3, r3, #2
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d011      	beq.n	800ed5e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <pbuf_free+0x9c>
 800ed46:	4b1d      	ldr	r3, [pc, #116]	; (800edbc <pbuf_free+0x104>)
 800ed48:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ed4c:	491f      	ldr	r1, [pc, #124]	; (800edcc <pbuf_free+0x114>)
 800ed4e:	481d      	ldr	r0, [pc, #116]	; (800edc4 <pbuf_free+0x10c>)
 800ed50:	f00c fc14 	bl	801b57c <iprintf>
        pc->custom_free_function(p);
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	4798      	blx	r3
 800ed5c:	e01d      	b.n	800ed9a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ed5e:	7bfb      	ldrb	r3, [r7, #15]
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d104      	bne.n	800ed6e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	200c      	movs	r0, #12
 800ed68:	f7ff f968 	bl	800e03c <memp_free>
 800ed6c:	e015      	b.n	800ed9a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ed6e:	7bfb      	ldrb	r3, [r7, #15]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d104      	bne.n	800ed7e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ed74:	6879      	ldr	r1, [r7, #4]
 800ed76:	200b      	movs	r0, #11
 800ed78:	f7ff f960 	bl	800e03c <memp_free>
 800ed7c:	e00d      	b.n	800ed9a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ed7e:	7bfb      	ldrb	r3, [r7, #15]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d103      	bne.n	800ed8c <pbuf_free+0xd4>
          mem_free(p);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7fe fd7d 	bl	800d884 <mem_free>
 800ed8a:	e006      	b.n	800ed9a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ed8c:	4b0b      	ldr	r3, [pc, #44]	; (800edbc <pbuf_free+0x104>)
 800ed8e:	f240 320f 	movw	r2, #783	; 0x30f
 800ed92:	490f      	ldr	r1, [pc, #60]	; (800edd0 <pbuf_free+0x118>)
 800ed94:	480b      	ldr	r0, [pc, #44]	; (800edc4 <pbuf_free+0x10c>)
 800ed96:	f00c fbf1 	bl	801b57c <iprintf>
        }
      }
      count++;
 800ed9a:	7ffb      	ldrb	r3, [r7, #31]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	607b      	str	r3, [r7, #4]
 800eda4:	e001      	b.n	800edaa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d199      	bne.n	800ece4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800edb0:	7ffb      	ldrb	r3, [r7, #31]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3720      	adds	r7, #32
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	0801cfc4 	.word	0x0801cfc4
 800edc0:	0801d128 	.word	0x0801d128
 800edc4:	0801d024 	.word	0x0801d024
 800edc8:	0801d154 	.word	0x0801d154
 800edcc:	0801d16c 	.word	0x0801d16c
 800edd0:	0801d190 	.word	0x0801d190

0800edd4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eddc:	2300      	movs	r3, #0
 800edde:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ede0:	e005      	b.n	800edee <pbuf_clen+0x1a>
    ++len;
 800ede2:	89fb      	ldrh	r3, [r7, #14]
 800ede4:	3301      	adds	r3, #1
 800ede6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1f6      	bne.n	800ede2 <pbuf_clen+0xe>
  }
  return len;
 800edf4:	89fb      	ldrh	r3, [r7, #14]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bc80      	pop	{r7}
 800edfe:	4770      	bx	lr

0800ee00 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d016      	beq.n	800ee3c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ee0e:	f00b fb5d 	bl	801a4cc <sys_arch_protect>
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	7b9b      	ldrb	r3, [r3, #14]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	739a      	strb	r2, [r3, #14]
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f00b fb61 	bl	801a4e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	7b9b      	ldrb	r3, [r3, #14]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d106      	bne.n	800ee3c <pbuf_ref+0x3c>
 800ee2e:	4b05      	ldr	r3, [pc, #20]	; (800ee44 <pbuf_ref+0x44>)
 800ee30:	f240 3242 	movw	r2, #834	; 0x342
 800ee34:	4904      	ldr	r1, [pc, #16]	; (800ee48 <pbuf_ref+0x48>)
 800ee36:	4805      	ldr	r0, [pc, #20]	; (800ee4c <pbuf_ref+0x4c>)
 800ee38:	f00c fba0 	bl	801b57c <iprintf>
  }
}
 800ee3c:	bf00      	nop
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	0801cfc4 	.word	0x0801cfc4
 800ee48:	0801d1a4 	.word	0x0801d1a4
 800ee4c:	0801d024 	.word	0x0801d024

0800ee50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d002      	beq.n	800ee66 <pbuf_cat+0x16>
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d107      	bne.n	800ee76 <pbuf_cat+0x26>
 800ee66:	4b20      	ldr	r3, [pc, #128]	; (800eee8 <pbuf_cat+0x98>)
 800ee68:	f240 3259 	movw	r2, #857	; 0x359
 800ee6c:	491f      	ldr	r1, [pc, #124]	; (800eeec <pbuf_cat+0x9c>)
 800ee6e:	4820      	ldr	r0, [pc, #128]	; (800eef0 <pbuf_cat+0xa0>)
 800ee70:	f00c fb84 	bl	801b57c <iprintf>
 800ee74:	e034      	b.n	800eee0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	60fb      	str	r3, [r7, #12]
 800ee7a:	e00a      	b.n	800ee92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	891a      	ldrh	r2, [r3, #8]
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	891b      	ldrh	r3, [r3, #8]
 800ee84:	4413      	add	r3, r2
 800ee86:	b29a      	uxth	r2, r3
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	60fb      	str	r3, [r7, #12]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d1f0      	bne.n	800ee7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	891a      	ldrh	r2, [r3, #8]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	895b      	ldrh	r3, [r3, #10]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d006      	beq.n	800eeb4 <pbuf_cat+0x64>
 800eea6:	4b10      	ldr	r3, [pc, #64]	; (800eee8 <pbuf_cat+0x98>)
 800eea8:	f240 3262 	movw	r2, #866	; 0x362
 800eeac:	4911      	ldr	r1, [pc, #68]	; (800eef4 <pbuf_cat+0xa4>)
 800eeae:	4810      	ldr	r0, [pc, #64]	; (800eef0 <pbuf_cat+0xa0>)
 800eeb0:	f00c fb64 	bl	801b57c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d006      	beq.n	800eeca <pbuf_cat+0x7a>
 800eebc:	4b0a      	ldr	r3, [pc, #40]	; (800eee8 <pbuf_cat+0x98>)
 800eebe:	f240 3263 	movw	r2, #867	; 0x363
 800eec2:	490d      	ldr	r1, [pc, #52]	; (800eef8 <pbuf_cat+0xa8>)
 800eec4:	480a      	ldr	r0, [pc, #40]	; (800eef0 <pbuf_cat+0xa0>)
 800eec6:	f00c fb59 	bl	801b57c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	891a      	ldrh	r2, [r3, #8]
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	891b      	ldrh	r3, [r3, #8]
 800eed2:	4413      	add	r3, r2
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	0801cfc4 	.word	0x0801cfc4
 800eeec:	0801d1b8 	.word	0x0801d1b8
 800eef0:	0801d024 	.word	0x0801d024
 800eef4:	0801d1f0 	.word	0x0801d1f0
 800eef8:	0801d220 	.word	0x0801d220

0800eefc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ef06:	6839      	ldr	r1, [r7, #0]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f7ff ffa1 	bl	800ee50 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ef0e:	6838      	ldr	r0, [r7, #0]
 800ef10:	f7ff ff76 	bl	800ee00 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ef14:	bf00      	nop
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ef26:	2300      	movs	r3, #0
 800ef28:	617b      	str	r3, [r7, #20]
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d008      	beq.n	800ef46 <pbuf_copy+0x2a>
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d005      	beq.n	800ef46 <pbuf_copy+0x2a>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	891a      	ldrh	r2, [r3, #8]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	891b      	ldrh	r3, [r3, #8]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d209      	bcs.n	800ef5a <pbuf_copy+0x3e>
 800ef46:	4b57      	ldr	r3, [pc, #348]	; (800f0a4 <pbuf_copy+0x188>)
 800ef48:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ef4c:	4956      	ldr	r1, [pc, #344]	; (800f0a8 <pbuf_copy+0x18c>)
 800ef4e:	4857      	ldr	r0, [pc, #348]	; (800f0ac <pbuf_copy+0x190>)
 800ef50:	f00c fb14 	bl	801b57c <iprintf>
 800ef54:	f06f 030f 	mvn.w	r3, #15
 800ef58:	e09f      	b.n	800f09a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	895b      	ldrh	r3, [r3, #10]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	1ad2      	subs	r2, r2, r3
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	895b      	ldrh	r3, [r3, #10]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	1acb      	subs	r3, r1, r3
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d306      	bcc.n	800ef80 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	895b      	ldrh	r3, [r3, #10]
 800ef76:	461a      	mov	r2, r3
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	60fb      	str	r3, [r7, #12]
 800ef7e:	e005      	b.n	800ef8c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	895b      	ldrh	r3, [r3, #10]
 800ef84:	461a      	mov	r2, r3
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685a      	ldr	r2, [r3, #4]
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	18d0      	adds	r0, r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	685a      	ldr	r2, [r3, #4]
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	f00c f9f8 	bl	801b394 <memcpy>
    offset_to += len;
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	4413      	add	r3, r2
 800efaa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800efac:	693a      	ldr	r2, [r7, #16]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	4413      	add	r3, r2
 800efb2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	895b      	ldrh	r3, [r3, #10]
 800efb8:	461a      	mov	r2, r3
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d906      	bls.n	800efce <pbuf_copy+0xb2>
 800efc0:	4b38      	ldr	r3, [pc, #224]	; (800f0a4 <pbuf_copy+0x188>)
 800efc2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800efc6:	493a      	ldr	r1, [pc, #232]	; (800f0b0 <pbuf_copy+0x194>)
 800efc8:	4838      	ldr	r0, [pc, #224]	; (800f0ac <pbuf_copy+0x190>)
 800efca:	f00c fad7 	bl	801b57c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	895b      	ldrh	r3, [r3, #10]
 800efd2:	461a      	mov	r2, r3
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d906      	bls.n	800efe8 <pbuf_copy+0xcc>
 800efda:	4b32      	ldr	r3, [pc, #200]	; (800f0a4 <pbuf_copy+0x188>)
 800efdc:	f240 32da 	movw	r2, #986	; 0x3da
 800efe0:	4934      	ldr	r1, [pc, #208]	; (800f0b4 <pbuf_copy+0x198>)
 800efe2:	4832      	ldr	r0, [pc, #200]	; (800f0ac <pbuf_copy+0x190>)
 800efe4:	f00c faca 	bl	801b57c <iprintf>
    if (offset_from >= p_from->len) {
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	895b      	ldrh	r3, [r3, #10]
 800efec:	461a      	mov	r2, r3
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d304      	bcc.n	800effe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	895b      	ldrh	r3, [r3, #10]
 800f002:	461a      	mov	r2, r3
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	4293      	cmp	r3, r2
 800f008:	d114      	bne.n	800f034 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10c      	bne.n	800f034 <pbuf_copy+0x118>
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d009      	beq.n	800f034 <pbuf_copy+0x118>
 800f020:	4b20      	ldr	r3, [pc, #128]	; (800f0a4 <pbuf_copy+0x188>)
 800f022:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f026:	4924      	ldr	r1, [pc, #144]	; (800f0b8 <pbuf_copy+0x19c>)
 800f028:	4820      	ldr	r0, [pc, #128]	; (800f0ac <pbuf_copy+0x190>)
 800f02a:	f00c faa7 	bl	801b57c <iprintf>
 800f02e:	f06f 030f 	mvn.w	r3, #15
 800f032:	e032      	b.n	800f09a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d013      	beq.n	800f062 <pbuf_copy+0x146>
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	895a      	ldrh	r2, [r3, #10]
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	891b      	ldrh	r3, [r3, #8]
 800f042:	429a      	cmp	r2, r3
 800f044:	d10d      	bne.n	800f062 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d009      	beq.n	800f062 <pbuf_copy+0x146>
 800f04e:	4b15      	ldr	r3, [pc, #84]	; (800f0a4 <pbuf_copy+0x188>)
 800f050:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f054:	4919      	ldr	r1, [pc, #100]	; (800f0bc <pbuf_copy+0x1a0>)
 800f056:	4815      	ldr	r0, [pc, #84]	; (800f0ac <pbuf_copy+0x190>)
 800f058:	f00c fa90 	bl	801b57c <iprintf>
 800f05c:	f06f 0305 	mvn.w	r3, #5
 800f060:	e01b      	b.n	800f09a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d013      	beq.n	800f090 <pbuf_copy+0x174>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	895a      	ldrh	r2, [r3, #10]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	891b      	ldrh	r3, [r3, #8]
 800f070:	429a      	cmp	r2, r3
 800f072:	d10d      	bne.n	800f090 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d009      	beq.n	800f090 <pbuf_copy+0x174>
 800f07c:	4b09      	ldr	r3, [pc, #36]	; (800f0a4 <pbuf_copy+0x188>)
 800f07e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f082:	490e      	ldr	r1, [pc, #56]	; (800f0bc <pbuf_copy+0x1a0>)
 800f084:	4809      	ldr	r0, [pc, #36]	; (800f0ac <pbuf_copy+0x190>)
 800f086:	f00c fa79 	bl	801b57c <iprintf>
 800f08a:	f06f 0305 	mvn.w	r3, #5
 800f08e:	e004      	b.n	800f09a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	f47f af61 	bne.w	800ef5a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3718      	adds	r7, #24
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0801cfc4 	.word	0x0801cfc4
 800f0a8:	0801d26c 	.word	0x0801d26c
 800f0ac:	0801d024 	.word	0x0801d024
 800f0b0:	0801d29c 	.word	0x0801d29c
 800f0b4:	0801d2b4 	.word	0x0801d2b4
 800f0b8:	0801d2d0 	.word	0x0801d2d0
 800f0bc:	0801d2e0 	.word	0x0801d2e0

0800f0c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b088      	sub	sp, #32
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	80fb      	strh	r3, [r7, #6]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d108      	bne.n	800f0f6 <pbuf_copy_partial+0x36>
 800f0e4:	4b2b      	ldr	r3, [pc, #172]	; (800f194 <pbuf_copy_partial+0xd4>)
 800f0e6:	f240 420a 	movw	r2, #1034	; 0x40a
 800f0ea:	492b      	ldr	r1, [pc, #172]	; (800f198 <pbuf_copy_partial+0xd8>)
 800f0ec:	482b      	ldr	r0, [pc, #172]	; (800f19c <pbuf_copy_partial+0xdc>)
 800f0ee:	f00c fa45 	bl	801b57c <iprintf>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e04a      	b.n	800f18c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d108      	bne.n	800f10e <pbuf_copy_partial+0x4e>
 800f0fc:	4b25      	ldr	r3, [pc, #148]	; (800f194 <pbuf_copy_partial+0xd4>)
 800f0fe:	f240 420b 	movw	r2, #1035	; 0x40b
 800f102:	4927      	ldr	r1, [pc, #156]	; (800f1a0 <pbuf_copy_partial+0xe0>)
 800f104:	4825      	ldr	r0, [pc, #148]	; (800f19c <pbuf_copy_partial+0xdc>)
 800f106:	f00c fa39 	bl	801b57c <iprintf>
 800f10a:	2300      	movs	r3, #0
 800f10c:	e03e      	b.n	800f18c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	61fb      	str	r3, [r7, #28]
 800f112:	e034      	b.n	800f17e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f114:	88bb      	ldrh	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00a      	beq.n	800f130 <pbuf_copy_partial+0x70>
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	895b      	ldrh	r3, [r3, #10]
 800f11e:	88ba      	ldrh	r2, [r7, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d305      	bcc.n	800f130 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	895b      	ldrh	r3, [r3, #10]
 800f128:	88ba      	ldrh	r2, [r7, #4]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	80bb      	strh	r3, [r7, #4]
 800f12e:	e023      	b.n	800f178 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	895a      	ldrh	r2, [r3, #10]
 800f134:	88bb      	ldrh	r3, [r7, #4]
 800f136:	1ad3      	subs	r3, r2, r3
 800f138:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f13a:	8b3a      	ldrh	r2, [r7, #24]
 800f13c:	88fb      	ldrh	r3, [r7, #6]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d901      	bls.n	800f146 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f142:	88fb      	ldrh	r3, [r7, #6]
 800f144:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f146:	8b7b      	ldrh	r3, [r7, #26]
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	18d0      	adds	r0, r2, r3
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	685a      	ldr	r2, [r3, #4]
 800f150:	88bb      	ldrh	r3, [r7, #4]
 800f152:	4413      	add	r3, r2
 800f154:	8b3a      	ldrh	r2, [r7, #24]
 800f156:	4619      	mov	r1, r3
 800f158:	f00c f91c 	bl	801b394 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f15c:	8afa      	ldrh	r2, [r7, #22]
 800f15e:	8b3b      	ldrh	r3, [r7, #24]
 800f160:	4413      	add	r3, r2
 800f162:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f164:	8b7a      	ldrh	r2, [r7, #26]
 800f166:	8b3b      	ldrh	r3, [r7, #24]
 800f168:	4413      	add	r3, r2
 800f16a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f16c:	88fa      	ldrh	r2, [r7, #6]
 800f16e:	8b3b      	ldrh	r3, [r7, #24]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	61fb      	str	r3, [r7, #28]
 800f17e:	88fb      	ldrh	r3, [r7, #6]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d002      	beq.n	800f18a <pbuf_copy_partial+0xca>
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1c4      	bne.n	800f114 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f18a:	8afb      	ldrh	r3, [r7, #22]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3720      	adds	r7, #32
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	0801cfc4 	.word	0x0801cfc4
 800f198:	0801d30c 	.word	0x0801d30c
 800f19c:	0801d024 	.word	0x0801d024
 800f1a0:	0801d32c 	.word	0x0801d32c

0800f1a4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b087      	sub	sp, #28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f1b2:	897b      	ldrh	r3, [r7, #10]
 800f1b4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f1ba:	e007      	b.n	800f1cc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	895b      	ldrh	r3, [r3, #10]
 800f1c0:	8afa      	ldrh	r2, [r7, #22]
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d004      	beq.n	800f1dc <pbuf_skip_const+0x38>
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	895b      	ldrh	r3, [r3, #10]
 800f1d6:	8afa      	ldrh	r2, [r7, #22]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d2ef      	bcs.n	800f1bc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d002      	beq.n	800f1e8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	8afa      	ldrh	r2, [r7, #22]
 800f1e6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f1e8:	693b      	ldr	r3, [r7, #16]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	371c      	adds	r7, #28
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bc80      	pop	{r7}
 800f1f2:	4770      	bx	lr

0800f1f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	603a      	str	r2, [r7, #0]
 800f1fe:	71fb      	strb	r3, [r7, #7]
 800f200:	460b      	mov	r3, r1
 800f202:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	8919      	ldrh	r1, [r3, #8]
 800f208:	88ba      	ldrh	r2, [r7, #4]
 800f20a:	79fb      	ldrb	r3, [r7, #7]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff fa6f 	bl	800e6f0 <pbuf_alloc>
 800f212:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <pbuf_clone+0x2a>
    return NULL;
 800f21a:	2300      	movs	r3, #0
 800f21c:	e011      	b.n	800f242 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f7ff fe7b 	bl	800ef1c <pbuf_copy>
 800f226:	4603      	mov	r3, r0
 800f228:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f22a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d006      	beq.n	800f240 <pbuf_clone+0x4c>
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <pbuf_clone+0x58>)
 800f234:	f240 5224 	movw	r2, #1316	; 0x524
 800f238:	4905      	ldr	r1, [pc, #20]	; (800f250 <pbuf_clone+0x5c>)
 800f23a:	4806      	ldr	r0, [pc, #24]	; (800f254 <pbuf_clone+0x60>)
 800f23c:	f00c f99e 	bl	801b57c <iprintf>
  return q;
 800f240:	68fb      	ldr	r3, [r7, #12]
}
 800f242:	4618      	mov	r0, r3
 800f244:	3710      	adds	r7, #16
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	0801cfc4 	.word	0x0801cfc4
 800f250:	0801d438 	.word	0x0801d438
 800f254:	0801d024 	.word	0x0801d024

0800f258 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800f264:	887b      	ldrh	r3, [r7, #2]
 800f266:	4619      	mov	r1, r3
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f80c 	bl	800f286 <pbuf_try_get_at>
 800f26e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	db02      	blt.n	800f27c <pbuf_get_at+0x24>
    return (u8_t)ret;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	e000      	b.n	800f27e <pbuf_get_at+0x26>
  }
  return 0;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3710      	adds	r7, #16
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b084      	sub	sp, #16
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
 800f28e:	460b      	mov	r3, r1
 800f290:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800f292:	f107 020a 	add.w	r2, r7, #10
 800f296:	887b      	ldrh	r3, [r7, #2]
 800f298:	4619      	mov	r1, r3
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7ff ff82 	bl	800f1a4 <pbuf_skip_const>
 800f2a0:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00a      	beq.n	800f2be <pbuf_try_get_at+0x38>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	895a      	ldrh	r2, [r3, #10]
 800f2ac:	897b      	ldrh	r3, [r7, #10]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d905      	bls.n	800f2be <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	897a      	ldrh	r2, [r7, #10]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	e001      	b.n	800f2c2 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800f2be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
	...

0800f2cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f2d0:	f00c f96c 	bl	801b5ac <rand>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	4b01      	ldr	r3, [pc, #4]	; (800f2ec <tcp_init+0x20>)
 800f2e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f2e8:	bf00      	nop
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	2000009c 	.word	0x2000009c

0800f2f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	7d1b      	ldrb	r3, [r3, #20]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d105      	bne.n	800f30c <tcp_free+0x1c>
 800f300:	4b06      	ldr	r3, [pc, #24]	; (800f31c <tcp_free+0x2c>)
 800f302:	22d4      	movs	r2, #212	; 0xd4
 800f304:	4906      	ldr	r1, [pc, #24]	; (800f320 <tcp_free+0x30>)
 800f306:	4807      	ldr	r0, [pc, #28]	; (800f324 <tcp_free+0x34>)
 800f308:	f00c f938 	bl	801b57c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	2001      	movs	r0, #1
 800f310:	f7fe fe94 	bl	800e03c <memp_free>
}
 800f314:	bf00      	nop
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	0801d4c4 	.word	0x0801d4c4
 800f320:	0801d4f4 	.word	0x0801d4f4
 800f324:	0801d508 	.word	0x0801d508

0800f328 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	7d1b      	ldrb	r3, [r3, #20]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d105      	bne.n	800f344 <tcp_free_listen+0x1c>
 800f338:	4b06      	ldr	r3, [pc, #24]	; (800f354 <tcp_free_listen+0x2c>)
 800f33a:	22df      	movs	r2, #223	; 0xdf
 800f33c:	4906      	ldr	r1, [pc, #24]	; (800f358 <tcp_free_listen+0x30>)
 800f33e:	4807      	ldr	r0, [pc, #28]	; (800f35c <tcp_free_listen+0x34>)
 800f340:	f00c f91c 	bl	801b57c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f344:	6879      	ldr	r1, [r7, #4]
 800f346:	2002      	movs	r0, #2
 800f348:	f7fe fe78 	bl	800e03c <memp_free>
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	0801d4c4 	.word	0x0801d4c4
 800f358:	0801d530 	.word	0x0801d530
 800f35c:	0801d508 	.word	0x0801d508

0800f360 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f364:	f001 f898 	bl	8010498 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f368:	4b07      	ldr	r3, [pc, #28]	; (800f388 <tcp_tmr+0x28>)
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	3301      	adds	r3, #1
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	4b05      	ldr	r3, [pc, #20]	; (800f388 <tcp_tmr+0x28>)
 800f372:	701a      	strb	r2, [r3, #0]
 800f374:	4b04      	ldr	r3, [pc, #16]	; (800f388 <tcp_tmr+0x28>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	f003 0301 	and.w	r3, r3, #1
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d001      	beq.n	800f384 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f380:	f000 fd4a 	bl	800fe18 <tcp_slowtmr>
  }
}
 800f384:	bf00      	nop
 800f386:	bd80      	pop	{r7, pc}
 800f388:	2000c961 	.word	0x2000c961

0800f38c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d105      	bne.n	800f3a8 <tcp_remove_listener+0x1c>
 800f39c:	4b0d      	ldr	r3, [pc, #52]	; (800f3d4 <tcp_remove_listener+0x48>)
 800f39e:	22ff      	movs	r2, #255	; 0xff
 800f3a0:	490d      	ldr	r1, [pc, #52]	; (800f3d8 <tcp_remove_listener+0x4c>)
 800f3a2:	480e      	ldr	r0, [pc, #56]	; (800f3dc <tcp_remove_listener+0x50>)
 800f3a4:	f00c f8ea 	bl	801b57c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	60fb      	str	r3, [r7, #12]
 800f3ac:	e00a      	b.n	800f3c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d102      	bne.n	800f3be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1f1      	bne.n	800f3ae <tcp_remove_listener+0x22>
    }
  }
}
 800f3ca:	bf00      	nop
 800f3cc:	bf00      	nop
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	0801d4c4 	.word	0x0801d4c4
 800f3d8:	0801d54c 	.word	0x0801d54c
 800f3dc:	0801d508 	.word	0x0801d508

0800f3e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d106      	bne.n	800f3fc <tcp_listen_closed+0x1c>
 800f3ee:	4b14      	ldr	r3, [pc, #80]	; (800f440 <tcp_listen_closed+0x60>)
 800f3f0:	f240 1211 	movw	r2, #273	; 0x111
 800f3f4:	4913      	ldr	r1, [pc, #76]	; (800f444 <tcp_listen_closed+0x64>)
 800f3f6:	4814      	ldr	r0, [pc, #80]	; (800f448 <tcp_listen_closed+0x68>)
 800f3f8:	f00c f8c0 	bl	801b57c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	7d1b      	ldrb	r3, [r3, #20]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d006      	beq.n	800f412 <tcp_listen_closed+0x32>
 800f404:	4b0e      	ldr	r3, [pc, #56]	; (800f440 <tcp_listen_closed+0x60>)
 800f406:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f40a:	4910      	ldr	r1, [pc, #64]	; (800f44c <tcp_listen_closed+0x6c>)
 800f40c:	480e      	ldr	r0, [pc, #56]	; (800f448 <tcp_listen_closed+0x68>)
 800f40e:	f00c f8b5 	bl	801b57c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f412:	2301      	movs	r3, #1
 800f414:	60fb      	str	r3, [r7, #12]
 800f416:	e00b      	b.n	800f430 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f418:	4a0d      	ldr	r2, [pc, #52]	; (800f450 <tcp_listen_closed+0x70>)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	6879      	ldr	r1, [r7, #4]
 800f424:	4618      	mov	r0, r3
 800f426:	f7ff ffb1 	bl	800f38c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	3301      	adds	r3, #1
 800f42e:	60fb      	str	r3, [r7, #12]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2b03      	cmp	r3, #3
 800f434:	d9f0      	bls.n	800f418 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f436:	bf00      	nop
 800f438:	bf00      	nop
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	0801d4c4 	.word	0x0801d4c4
 800f444:	0801d574 	.word	0x0801d574
 800f448:	0801d508 	.word	0x0801d508
 800f44c:	0801d580 	.word	0x0801d580
 800f450:	0801f8fc 	.word	0x0801f8fc

0800f454 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f454:	b5b0      	push	{r4, r5, r7, lr}
 800f456:	b088      	sub	sp, #32
 800f458:	af04      	add	r7, sp, #16
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	460b      	mov	r3, r1
 800f45e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d106      	bne.n	800f474 <tcp_close_shutdown+0x20>
 800f466:	4b63      	ldr	r3, [pc, #396]	; (800f5f4 <tcp_close_shutdown+0x1a0>)
 800f468:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f46c:	4962      	ldr	r1, [pc, #392]	; (800f5f8 <tcp_close_shutdown+0x1a4>)
 800f46e:	4863      	ldr	r0, [pc, #396]	; (800f5fc <tcp_close_shutdown+0x1a8>)
 800f470:	f00c f884 	bl	801b57c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f474:	78fb      	ldrb	r3, [r7, #3]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d066      	beq.n	800f548 <tcp_close_shutdown+0xf4>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	7d1b      	ldrb	r3, [r3, #20]
 800f47e:	2b04      	cmp	r3, #4
 800f480:	d003      	beq.n	800f48a <tcp_close_shutdown+0x36>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	7d1b      	ldrb	r3, [r3, #20]
 800f486:	2b07      	cmp	r3, #7
 800f488:	d15e      	bne.n	800f548 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d104      	bne.n	800f49c <tcp_close_shutdown+0x48>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f496:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f49a:	d055      	beq.n	800f548 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	8b5b      	ldrh	r3, [r3, #26]
 800f4a0:	f003 0310 	and.w	r3, r3, #16
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d106      	bne.n	800f4b6 <tcp_close_shutdown+0x62>
 800f4a8:	4b52      	ldr	r3, [pc, #328]	; (800f5f4 <tcp_close_shutdown+0x1a0>)
 800f4aa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f4ae:	4954      	ldr	r1, [pc, #336]	; (800f600 <tcp_close_shutdown+0x1ac>)
 800f4b0:	4852      	ldr	r0, [pc, #328]	; (800f5fc <tcp_close_shutdown+0x1a8>)
 800f4b2:	f00c f863 	bl	801b57c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f4be:	687d      	ldr	r5, [r7, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	8ad2      	ldrh	r2, [r2, #22]
 800f4c8:	6879      	ldr	r1, [r7, #4]
 800f4ca:	8b09      	ldrh	r1, [r1, #24]
 800f4cc:	9102      	str	r1, [sp, #8]
 800f4ce:	9201      	str	r2, [sp, #4]
 800f4d0:	9300      	str	r3, [sp, #0]
 800f4d2:	462b      	mov	r3, r5
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	4601      	mov	r1, r0
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f005 fd93 	bl	8015004 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f001 fb70 	bl	8010bc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f4e4:	4b47      	ldr	r3, [pc, #284]	; (800f604 <tcp_close_shutdown+0x1b0>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d105      	bne.n	800f4fa <tcp_close_shutdown+0xa6>
 800f4ee:	4b45      	ldr	r3, [pc, #276]	; (800f604 <tcp_close_shutdown+0x1b0>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	4a43      	ldr	r2, [pc, #268]	; (800f604 <tcp_close_shutdown+0x1b0>)
 800f4f6:	6013      	str	r3, [r2, #0]
 800f4f8:	e013      	b.n	800f522 <tcp_close_shutdown+0xce>
 800f4fa:	4b42      	ldr	r3, [pc, #264]	; (800f604 <tcp_close_shutdown+0x1b0>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	60fb      	str	r3, [r7, #12]
 800f500:	e00c      	b.n	800f51c <tcp_close_shutdown+0xc8>
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d104      	bne.n	800f516 <tcp_close_shutdown+0xc2>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	68da      	ldr	r2, [r3, #12]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	60da      	str	r2, [r3, #12]
 800f514:	e005      	b.n	800f522 <tcp_close_shutdown+0xce>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1ef      	bne.n	800f502 <tcp_close_shutdown+0xae>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	60da      	str	r2, [r3, #12]
 800f528:	4b37      	ldr	r3, [pc, #220]	; (800f608 <tcp_close_shutdown+0x1b4>)
 800f52a:	2201      	movs	r2, #1
 800f52c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f52e:	4b37      	ldr	r3, [pc, #220]	; (800f60c <tcp_close_shutdown+0x1b8>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	429a      	cmp	r2, r3
 800f536:	d102      	bne.n	800f53e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f538:	f004 f808 	bl	801354c <tcp_trigger_input_pcb_close>
 800f53c:	e002      	b.n	800f544 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff fed6 	bl	800f2f0 <tcp_free>
      }
      return ERR_OK;
 800f544:	2300      	movs	r3, #0
 800f546:	e050      	b.n	800f5ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	7d1b      	ldrb	r3, [r3, #20]
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d03b      	beq.n	800f5c8 <tcp_close_shutdown+0x174>
 800f550:	2b02      	cmp	r3, #2
 800f552:	dc44      	bgt.n	800f5de <tcp_close_shutdown+0x18a>
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <tcp_close_shutdown+0x10a>
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d02a      	beq.n	800f5b2 <tcp_close_shutdown+0x15e>
 800f55c:	e03f      	b.n	800f5de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8adb      	ldrh	r3, [r3, #22]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d021      	beq.n	800f5aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f566:	4b2a      	ldr	r3, [pc, #168]	; (800f610 <tcp_close_shutdown+0x1bc>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d105      	bne.n	800f57c <tcp_close_shutdown+0x128>
 800f570:	4b27      	ldr	r3, [pc, #156]	; (800f610 <tcp_close_shutdown+0x1bc>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	4a26      	ldr	r2, [pc, #152]	; (800f610 <tcp_close_shutdown+0x1bc>)
 800f578:	6013      	str	r3, [r2, #0]
 800f57a:	e013      	b.n	800f5a4 <tcp_close_shutdown+0x150>
 800f57c:	4b24      	ldr	r3, [pc, #144]	; (800f610 <tcp_close_shutdown+0x1bc>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	60bb      	str	r3, [r7, #8]
 800f582:	e00c      	b.n	800f59e <tcp_close_shutdown+0x14a>
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d104      	bne.n	800f598 <tcp_close_shutdown+0x144>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	68da      	ldr	r2, [r3, #12]
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	60da      	str	r2, [r3, #12]
 800f596:	e005      	b.n	800f5a4 <tcp_close_shutdown+0x150>
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	68db      	ldr	r3, [r3, #12]
 800f59c:	60bb      	str	r3, [r7, #8]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d1ef      	bne.n	800f584 <tcp_close_shutdown+0x130>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7ff fea0 	bl	800f2f0 <tcp_free>
      break;
 800f5b0:	e01a      	b.n	800f5e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f7ff ff14 	bl	800f3e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f5b8:	6879      	ldr	r1, [r7, #4]
 800f5ba:	4816      	ldr	r0, [pc, #88]	; (800f614 <tcp_close_shutdown+0x1c0>)
 800f5bc:	f001 fb52 	bl	8010c64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff feb1 	bl	800f328 <tcp_free_listen>
      break;
 800f5c6:	e00f      	b.n	800f5e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f5c8:	6879      	ldr	r1, [r7, #4]
 800f5ca:	480e      	ldr	r0, [pc, #56]	; (800f604 <tcp_close_shutdown+0x1b0>)
 800f5cc:	f001 fb4a 	bl	8010c64 <tcp_pcb_remove>
 800f5d0:	4b0d      	ldr	r3, [pc, #52]	; (800f608 <tcp_close_shutdown+0x1b4>)
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff fe8a 	bl	800f2f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f5dc:	e004      	b.n	800f5e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f81a 	bl	800f618 <tcp_close_shutdown_fin>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	e000      	b.n	800f5ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	0801d4c4 	.word	0x0801d4c4
 800f5f8:	0801d598 	.word	0x0801d598
 800f5fc:	0801d508 	.word	0x0801d508
 800f600:	0801d5b8 	.word	0x0801d5b8
 800f604:	2000c958 	.word	0x2000c958
 800f608:	2000c960 	.word	0x2000c960
 800f60c:	2000c998 	.word	0x2000c998
 800f610:	2000c950 	.word	0x2000c950
 800f614:	2000c954 	.word	0x2000c954

0800f618 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d106      	bne.n	800f634 <tcp_close_shutdown_fin+0x1c>
 800f626:	4b2e      	ldr	r3, [pc, #184]	; (800f6e0 <tcp_close_shutdown_fin+0xc8>)
 800f628:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f62c:	492d      	ldr	r1, [pc, #180]	; (800f6e4 <tcp_close_shutdown_fin+0xcc>)
 800f62e:	482e      	ldr	r0, [pc, #184]	; (800f6e8 <tcp_close_shutdown_fin+0xd0>)
 800f630:	f00b ffa4 	bl	801b57c <iprintf>

  switch (pcb->state) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	7d1b      	ldrb	r3, [r3, #20]
 800f638:	2b07      	cmp	r3, #7
 800f63a:	d020      	beq.n	800f67e <tcp_close_shutdown_fin+0x66>
 800f63c:	2b07      	cmp	r3, #7
 800f63e:	dc2b      	bgt.n	800f698 <tcp_close_shutdown_fin+0x80>
 800f640:	2b03      	cmp	r3, #3
 800f642:	d002      	beq.n	800f64a <tcp_close_shutdown_fin+0x32>
 800f644:	2b04      	cmp	r3, #4
 800f646:	d00d      	beq.n	800f664 <tcp_close_shutdown_fin+0x4c>
 800f648:	e026      	b.n	800f698 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f004 fde8 	bl	8014220 <tcp_send_fin>
 800f650:	4603      	mov	r3, r0
 800f652:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d11f      	bne.n	800f69c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2205      	movs	r2, #5
 800f660:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f662:	e01b      	b.n	800f69c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f004 fddb 	bl	8014220 <tcp_send_fin>
 800f66a:	4603      	mov	r3, r0
 800f66c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f66e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d114      	bne.n	800f6a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2205      	movs	r2, #5
 800f67a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f67c:	e010      	b.n	800f6a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f004 fdce 	bl	8014220 <tcp_send_fin>
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d109      	bne.n	800f6a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2209      	movs	r2, #9
 800f694:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f696:	e005      	b.n	800f6a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	e01c      	b.n	800f6d6 <tcp_close_shutdown_fin+0xbe>
      break;
 800f69c:	bf00      	nop
 800f69e:	e002      	b.n	800f6a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800f6a0:	bf00      	nop
 800f6a2:	e000      	b.n	800f6a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800f6a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d103      	bne.n	800f6b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f004 fef4 	bl	801449c <tcp_output>
 800f6b4:	e00d      	b.n	800f6d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6be:	d108      	bne.n	800f6d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	8b5b      	ldrh	r3, [r3, #26]
 800f6c4:	f043 0308 	orr.w	r3, r3, #8
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	e001      	b.n	800f6d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3710      	adds	r7, #16
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	0801d4c4 	.word	0x0801d4c4
 800f6e4:	0801d574 	.word	0x0801d574
 800f6e8:	0801d508 	.word	0x0801d508

0800f6ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d109      	bne.n	800f70e <tcp_close+0x22>
 800f6fa:	4b0f      	ldr	r3, [pc, #60]	; (800f738 <tcp_close+0x4c>)
 800f6fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f700:	490e      	ldr	r1, [pc, #56]	; (800f73c <tcp_close+0x50>)
 800f702:	480f      	ldr	r0, [pc, #60]	; (800f740 <tcp_close+0x54>)
 800f704:	f00b ff3a 	bl	801b57c <iprintf>
 800f708:	f06f 030f 	mvn.w	r3, #15
 800f70c:	e00f      	b.n	800f72e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	7d1b      	ldrb	r3, [r3, #20]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d006      	beq.n	800f724 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	8b5b      	ldrh	r3, [r3, #26]
 800f71a:	f043 0310 	orr.w	r3, r3, #16
 800f71e:	b29a      	uxth	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f724:	2101      	movs	r1, #1
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff fe94 	bl	800f454 <tcp_close_shutdown>
 800f72c:	4603      	mov	r3, r0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	0801d4c4 	.word	0x0801d4c4
 800f73c:	0801d5d4 	.word	0x0801d5d4
 800f740:	0801d508 	.word	0x0801d508

0800f744 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08e      	sub	sp, #56	; 0x38
 800f748:	af04      	add	r7, sp, #16
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d107      	bne.n	800f764 <tcp_abandon+0x20>
 800f754:	4b52      	ldr	r3, [pc, #328]	; (800f8a0 <tcp_abandon+0x15c>)
 800f756:	f240 223d 	movw	r2, #573	; 0x23d
 800f75a:	4952      	ldr	r1, [pc, #328]	; (800f8a4 <tcp_abandon+0x160>)
 800f75c:	4852      	ldr	r0, [pc, #328]	; (800f8a8 <tcp_abandon+0x164>)
 800f75e:	f00b ff0d 	bl	801b57c <iprintf>
 800f762:	e099      	b.n	800f898 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	7d1b      	ldrb	r3, [r3, #20]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d106      	bne.n	800f77a <tcp_abandon+0x36>
 800f76c:	4b4c      	ldr	r3, [pc, #304]	; (800f8a0 <tcp_abandon+0x15c>)
 800f76e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f772:	494e      	ldr	r1, [pc, #312]	; (800f8ac <tcp_abandon+0x168>)
 800f774:	484c      	ldr	r0, [pc, #304]	; (800f8a8 <tcp_abandon+0x164>)
 800f776:	f00b ff01 	bl	801b57c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	7d1b      	ldrb	r3, [r3, #20]
 800f77e:	2b0a      	cmp	r3, #10
 800f780:	d107      	bne.n	800f792 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f782:	6879      	ldr	r1, [r7, #4]
 800f784:	484a      	ldr	r0, [pc, #296]	; (800f8b0 <tcp_abandon+0x16c>)
 800f786:	f001 fa6d 	bl	8010c64 <tcp_pcb_remove>
    tcp_free(pcb);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7ff fdb0 	bl	800f2f0 <tcp_free>
 800f790:	e082      	b.n	800f898 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f792:	2300      	movs	r3, #0
 800f794:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f796:	2300      	movs	r3, #0
 800f798:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f79e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7d1b      	ldrb	r3, [r3, #20]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d126      	bne.n	800f80a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	8adb      	ldrh	r3, [r3, #22]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d02e      	beq.n	800f822 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f7c4:	4b3b      	ldr	r3, [pc, #236]	; (800f8b4 <tcp_abandon+0x170>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d105      	bne.n	800f7da <tcp_abandon+0x96>
 800f7ce:	4b39      	ldr	r3, [pc, #228]	; (800f8b4 <tcp_abandon+0x170>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	4a37      	ldr	r2, [pc, #220]	; (800f8b4 <tcp_abandon+0x170>)
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	e013      	b.n	800f802 <tcp_abandon+0xbe>
 800f7da:	4b36      	ldr	r3, [pc, #216]	; (800f8b4 <tcp_abandon+0x170>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	61fb      	str	r3, [r7, #28]
 800f7e0:	e00c      	b.n	800f7fc <tcp_abandon+0xb8>
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d104      	bne.n	800f7f6 <tcp_abandon+0xb2>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	68da      	ldr	r2, [r3, #12]
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	60da      	str	r2, [r3, #12]
 800f7f4:	e005      	b.n	800f802 <tcp_abandon+0xbe>
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	61fb      	str	r3, [r7, #28]
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1ef      	bne.n	800f7e2 <tcp_abandon+0x9e>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	60da      	str	r2, [r3, #12]
 800f808:	e00b      	b.n	800f822 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	8adb      	ldrh	r3, [r3, #22]
 800f812:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f814:	6879      	ldr	r1, [r7, #4]
 800f816:	4828      	ldr	r0, [pc, #160]	; (800f8b8 <tcp_abandon+0x174>)
 800f818:	f001 fa24 	bl	8010c64 <tcp_pcb_remove>
 800f81c:	4b27      	ldr	r3, [pc, #156]	; (800f8bc <tcp_abandon+0x178>)
 800f81e:	2201      	movs	r2, #1
 800f820:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f82e:	4618      	mov	r0, r3
 800f830:	f000 ff12 	bl	8010658 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d004      	beq.n	800f846 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f840:	4618      	mov	r0, r3
 800f842:	f000 ff09 	bl	8010658 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d004      	beq.n	800f858 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f852:	4618      	mov	r0, r3
 800f854:	f000 ff00 	bl	8010658 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00e      	beq.n	800f87c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f85e:	6879      	ldr	r1, [r7, #4]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3304      	adds	r3, #4
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	8b12      	ldrh	r2, [r2, #24]
 800f868:	9202      	str	r2, [sp, #8]
 800f86a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f86c:	9201      	str	r2, [sp, #4]
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	460b      	mov	r3, r1
 800f872:	697a      	ldr	r2, [r7, #20]
 800f874:	69b9      	ldr	r1, [r7, #24]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f005 fbc4 	bl	8015004 <tcp_rst>
    }
    last_state = pcb->state;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	7d1b      	ldrb	r3, [r3, #20]
 800f880:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7ff fd34 	bl	800f2f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d004      	beq.n	800f898 <tcp_abandon+0x154>
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	f06f 010c 	mvn.w	r1, #12
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	4798      	blx	r3
  }
}
 800f898:	3728      	adds	r7, #40	; 0x28
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	0801d4c4 	.word	0x0801d4c4
 800f8a4:	0801d608 	.word	0x0801d608
 800f8a8:	0801d508 	.word	0x0801d508
 800f8ac:	0801d624 	.word	0x0801d624
 800f8b0:	2000c95c 	.word	0x2000c95c
 800f8b4:	2000c950 	.word	0x2000c950
 800f8b8:	2000c958 	.word	0x2000c958
 800f8bc:	2000c960 	.word	0x2000c960

0800f8c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f8c8:	2101      	movs	r1, #1
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7ff ff3a 	bl	800f744 <tcp_abandon>
}
 800f8d0:	bf00      	nop
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f8e6:	2304      	movs	r3, #4
 800f8e8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f8f0:	4b3e      	ldr	r3, [pc, #248]	; (800f9ec <tcp_bind+0x114>)
 800f8f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d109      	bne.n	800f90e <tcp_bind+0x36>
 800f8fa:	4b3d      	ldr	r3, [pc, #244]	; (800f9f0 <tcp_bind+0x118>)
 800f8fc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f900:	493c      	ldr	r1, [pc, #240]	; (800f9f4 <tcp_bind+0x11c>)
 800f902:	483d      	ldr	r0, [pc, #244]	; (800f9f8 <tcp_bind+0x120>)
 800f904:	f00b fe3a 	bl	801b57c <iprintf>
 800f908:	f06f 030f 	mvn.w	r3, #15
 800f90c:	e06a      	b.n	800f9e4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	7d1b      	ldrb	r3, [r3, #20]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d009      	beq.n	800f92a <tcp_bind+0x52>
 800f916:	4b36      	ldr	r3, [pc, #216]	; (800f9f0 <tcp_bind+0x118>)
 800f918:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f91c:	4937      	ldr	r1, [pc, #220]	; (800f9fc <tcp_bind+0x124>)
 800f91e:	4836      	ldr	r0, [pc, #216]	; (800f9f8 <tcp_bind+0x120>)
 800f920:	f00b fe2c 	bl	801b57c <iprintf>
 800f924:	f06f 0305 	mvn.w	r3, #5
 800f928:	e05c      	b.n	800f9e4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f92a:	88fb      	ldrh	r3, [r7, #6]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d109      	bne.n	800f944 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f930:	f000 f914 	bl	800fb5c <tcp_new_port>
 800f934:	4603      	mov	r3, r0
 800f936:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f938:	88fb      	ldrh	r3, [r7, #6]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d135      	bne.n	800f9aa <tcp_bind+0xd2>
      return ERR_BUF;
 800f93e:	f06f 0301 	mvn.w	r3, #1
 800f942:	e04f      	b.n	800f9e4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f944:	2300      	movs	r3, #0
 800f946:	61fb      	str	r3, [r7, #28]
 800f948:	e02b      	b.n	800f9a2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f94a:	4a2d      	ldr	r2, [pc, #180]	; (800fa00 <tcp_bind+0x128>)
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	61bb      	str	r3, [r7, #24]
 800f956:	e01e      	b.n	800f996 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	8adb      	ldrh	r3, [r3, #22]
 800f95c:	88fa      	ldrh	r2, [r7, #6]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d116      	bne.n	800f990 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f962:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f964:	2b00      	cmp	r3, #0
 800f966:	d010      	beq.n	800f98a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f968:	69bb      	ldr	r3, [r7, #24]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d00c      	beq.n	800f98a <tcp_bind+0xb2>
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d009      	beq.n	800f98a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d005      	beq.n	800f98a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f986:	429a      	cmp	r2, r3
 800f988:	d102      	bne.n	800f990 <tcp_bind+0xb8>
              return ERR_USE;
 800f98a:	f06f 0307 	mvn.w	r3, #7
 800f98e:	e029      	b.n	800f9e4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	61bb      	str	r3, [r7, #24]
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1dd      	bne.n	800f958 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	61fb      	str	r3, [r7, #28]
 800f9a2:	69fa      	ldr	r2, [r7, #28]
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	dbcf      	blt.n	800f94a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d00c      	beq.n	800f9ca <tcp_bind+0xf2>
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d008      	beq.n	800f9ca <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d002      	beq.n	800f9c4 <tcp_bind+0xec>
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	e000      	b.n	800f9c6 <tcp_bind+0xee>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	88fa      	ldrh	r2, [r7, #6]
 800f9ce:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f9d0:	4b0c      	ldr	r3, [pc, #48]	; (800fa04 <tcp_bind+0x12c>)
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	60da      	str	r2, [r3, #12]
 800f9d8:	4a0a      	ldr	r2, [pc, #40]	; (800fa04 <tcp_bind+0x12c>)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	6013      	str	r3, [r2, #0]
 800f9de:	f005 fcd3 	bl	8015388 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f9e2:	2300      	movs	r3, #0
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3720      	adds	r7, #32
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	0801f934 	.word	0x0801f934
 800f9f0:	0801d4c4 	.word	0x0801d4c4
 800f9f4:	0801d658 	.word	0x0801d658
 800f9f8:	0801d508 	.word	0x0801d508
 800f9fc:	0801d670 	.word	0x0801d670
 800fa00:	0801f8fc 	.word	0x0801f8fc
 800fa04:	2000c950 	.word	0x2000c950

0800fa08 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d106      	bne.n	800fa24 <tcp_update_rcv_ann_wnd+0x1c>
 800fa16:	4b25      	ldr	r3, [pc, #148]	; (800faac <tcp_update_rcv_ann_wnd+0xa4>)
 800fa18:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fa1c:	4924      	ldr	r1, [pc, #144]	; (800fab0 <tcp_update_rcv_ann_wnd+0xa8>)
 800fa1e:	4825      	ldr	r0, [pc, #148]	; (800fab4 <tcp_update_rcv_ann_wnd+0xac>)
 800fa20:	f00b fdac 	bl	801b57c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fa2c:	4413      	add	r3, r2
 800fa2e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fa38:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800fa3c:	bf28      	it	cs
 800fa3e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800fa42:	b292      	uxth	r2, r2
 800fa44:	4413      	add	r3, r2
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	db08      	blt.n	800fa60 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	e020      	b.n	800faa2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa68:	1ad3      	subs	r3, r2, r3
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	dd03      	ble.n	800fa76 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa74:	e014      	b.n	800faa0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa88:	d306      	bcc.n	800fa98 <tcp_update_rcv_ann_wnd+0x90>
 800fa8a:	4b08      	ldr	r3, [pc, #32]	; (800faac <tcp_update_rcv_ann_wnd+0xa4>)
 800fa8c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fa90:	4909      	ldr	r1, [pc, #36]	; (800fab8 <tcp_update_rcv_ann_wnd+0xb0>)
 800fa92:	4808      	ldr	r0, [pc, #32]	; (800fab4 <tcp_update_rcv_ann_wnd+0xac>)
 800fa94:	f00b fd72 	bl	801b57c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800faa0:	2300      	movs	r3, #0
  }
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	0801d4c4 	.word	0x0801d4c4
 800fab0:	0801d720 	.word	0x0801d720
 800fab4:	0801d508 	.word	0x0801d508
 800fab8:	0801d744 	.word	0x0801d744

0800fabc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	460b      	mov	r3, r1
 800fac6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d107      	bne.n	800fade <tcp_recved+0x22>
 800face:	4b1f      	ldr	r3, [pc, #124]	; (800fb4c <tcp_recved+0x90>)
 800fad0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fad4:	491e      	ldr	r1, [pc, #120]	; (800fb50 <tcp_recved+0x94>)
 800fad6:	481f      	ldr	r0, [pc, #124]	; (800fb54 <tcp_recved+0x98>)
 800fad8:	f00b fd50 	bl	801b57c <iprintf>
 800fadc:	e032      	b.n	800fb44 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	7d1b      	ldrb	r3, [r3, #20]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d106      	bne.n	800faf4 <tcp_recved+0x38>
 800fae6:	4b19      	ldr	r3, [pc, #100]	; (800fb4c <tcp_recved+0x90>)
 800fae8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800faec:	491a      	ldr	r1, [pc, #104]	; (800fb58 <tcp_recved+0x9c>)
 800faee:	4819      	ldr	r0, [pc, #100]	; (800fb54 <tcp_recved+0x98>)
 800faf0:	f00b fd44 	bl	801b57c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800faf8:	887b      	ldrh	r3, [r7, #2]
 800fafa:	4413      	add	r3, r2
 800fafc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fafe:	89fb      	ldrh	r3, [r7, #14]
 800fb00:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fb04:	d804      	bhi.n	800fb10 <tcp_recved+0x54>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb0a:	89fa      	ldrh	r2, [r7, #14]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d204      	bcs.n	800fb1a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fb16:	851a      	strh	r2, [r3, #40]	; 0x28
 800fb18:	e002      	b.n	800fb20 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	89fa      	ldrh	r2, [r7, #14]
 800fb1e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7ff ff71 	bl	800fa08 <tcp_update_rcv_ann_wnd>
 800fb26:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fb2e:	d309      	bcc.n	800fb44 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	8b5b      	ldrh	r3, [r3, #26]
 800fb34:	f043 0302 	orr.w	r3, r3, #2
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f004 fcac 	bl	801449c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	0801d4c4 	.word	0x0801d4c4
 800fb50:	0801d760 	.word	0x0801d760
 800fb54:	0801d508 	.word	0x0801d508
 800fb58:	0801d778 	.word	0x0801d778

0800fb5c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b083      	sub	sp, #12
 800fb60:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fb62:	2300      	movs	r3, #0
 800fb64:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fb66:	4b1e      	ldr	r3, [pc, #120]	; (800fbe0 <tcp_new_port+0x84>)
 800fb68:	881b      	ldrh	r3, [r3, #0]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	4b1c      	ldr	r3, [pc, #112]	; (800fbe0 <tcp_new_port+0x84>)
 800fb70:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fb72:	4b1b      	ldr	r3, [pc, #108]	; (800fbe0 <tcp_new_port+0x84>)
 800fb74:	881b      	ldrh	r3, [r3, #0]
 800fb76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d103      	bne.n	800fb86 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fb7e:	4b18      	ldr	r3, [pc, #96]	; (800fbe0 <tcp_new_port+0x84>)
 800fb80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fb84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fb86:	2300      	movs	r3, #0
 800fb88:	71fb      	strb	r3, [r7, #7]
 800fb8a:	e01e      	b.n	800fbca <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	4a15      	ldr	r2, [pc, #84]	; (800fbe4 <tcp_new_port+0x88>)
 800fb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	603b      	str	r3, [r7, #0]
 800fb98:	e011      	b.n	800fbbe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	8ada      	ldrh	r2, [r3, #22]
 800fb9e:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <tcp_new_port+0x84>)
 800fba0:	881b      	ldrh	r3, [r3, #0]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d108      	bne.n	800fbb8 <tcp_new_port+0x5c>
        n++;
 800fba6:	88bb      	ldrh	r3, [r7, #4]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fbac:	88bb      	ldrh	r3, [r7, #4]
 800fbae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fbb2:	d3d8      	bcc.n	800fb66 <tcp_new_port+0xa>
          return 0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	e00d      	b.n	800fbd4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	603b      	str	r3, [r7, #0]
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1ea      	bne.n	800fb9a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	71fb      	strb	r3, [r7, #7]
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	2b03      	cmp	r3, #3
 800fbce:	d9dd      	bls.n	800fb8c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fbd0:	4b03      	ldr	r3, [pc, #12]	; (800fbe0 <tcp_new_port+0x84>)
 800fbd2:	881b      	ldrh	r3, [r3, #0]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	370c      	adds	r7, #12
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bc80      	pop	{r7}
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	2000009c 	.word	0x2000009c
 800fbe4:	0801f8fc 	.word	0x0801f8fc

0800fbe8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b08a      	sub	sp, #40	; 0x28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	603b      	str	r3, [r7, #0]
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d109      	bne.n	800fc16 <tcp_connect+0x2e>
 800fc02:	4b7d      	ldr	r3, [pc, #500]	; (800fdf8 <tcp_connect+0x210>)
 800fc04:	f240 4235 	movw	r2, #1077	; 0x435
 800fc08:	497c      	ldr	r1, [pc, #496]	; (800fdfc <tcp_connect+0x214>)
 800fc0a:	487d      	ldr	r0, [pc, #500]	; (800fe00 <tcp_connect+0x218>)
 800fc0c:	f00b fcb6 	bl	801b57c <iprintf>
 800fc10:	f06f 030f 	mvn.w	r3, #15
 800fc14:	e0ec      	b.n	800fdf0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d109      	bne.n	800fc30 <tcp_connect+0x48>
 800fc1c:	4b76      	ldr	r3, [pc, #472]	; (800fdf8 <tcp_connect+0x210>)
 800fc1e:	f240 4236 	movw	r2, #1078	; 0x436
 800fc22:	4978      	ldr	r1, [pc, #480]	; (800fe04 <tcp_connect+0x21c>)
 800fc24:	4876      	ldr	r0, [pc, #472]	; (800fe00 <tcp_connect+0x218>)
 800fc26:	f00b fca9 	bl	801b57c <iprintf>
 800fc2a:	f06f 030f 	mvn.w	r3, #15
 800fc2e:	e0df      	b.n	800fdf0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	7d1b      	ldrb	r3, [r3, #20]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d009      	beq.n	800fc4c <tcp_connect+0x64>
 800fc38:	4b6f      	ldr	r3, [pc, #444]	; (800fdf8 <tcp_connect+0x210>)
 800fc3a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800fc3e:	4972      	ldr	r1, [pc, #456]	; (800fe08 <tcp_connect+0x220>)
 800fc40:	486f      	ldr	r0, [pc, #444]	; (800fe00 <tcp_connect+0x218>)
 800fc42:	f00b fc9b 	bl	801b57c <iprintf>
 800fc46:	f06f 0309 	mvn.w	r3, #9
 800fc4a:	e0d1      	b.n	800fdf0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d002      	beq.n	800fc58 <tcp_connect+0x70>
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	e000      	b.n	800fc5a <tcp_connect+0x72>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	88fa      	ldrh	r2, [r7, #6]
 800fc62:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	7a1b      	ldrb	r3, [r3, #8]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d006      	beq.n	800fc7a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	7a1b      	ldrb	r3, [r3, #8]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7fe fc95 	bl	800e5a0 <netif_get_by_index>
 800fc76:	6278      	str	r0, [r7, #36]	; 0x24
 800fc78:	e005      	b.n	800fc86 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f009 f94a 	bl	8018f18 <ip4_route>
 800fc84:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800fc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d102      	bne.n	800fc92 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800fc8c:	f06f 0303 	mvn.w	r3, #3
 800fc90:	e0ae      	b.n	800fdf0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d003      	beq.n	800fca0 <tcp_connect+0xb8>
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d111      	bne.n	800fcc4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d002      	beq.n	800fcac <tcp_connect+0xc4>
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	3304      	adds	r3, #4
 800fcaa:	e000      	b.n	800fcae <tcp_connect+0xc6>
 800fcac:	2300      	movs	r3, #0
 800fcae:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d102      	bne.n	800fcbc <tcp_connect+0xd4>
      return ERR_RTE;
 800fcb6:	f06f 0303 	mvn.w	r3, #3
 800fcba:	e099      	b.n	800fdf0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	8adb      	ldrh	r3, [r3, #22]
 800fcc8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	8adb      	ldrh	r3, [r3, #22]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d10c      	bne.n	800fcec <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800fcd2:	f7ff ff43 	bl	800fb5c <tcp_new_port>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	461a      	mov	r2, r3
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	8adb      	ldrh	r3, [r3, #22]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d102      	bne.n	800fcec <tcp_connect+0x104>
      return ERR_BUF;
 800fce6:	f06f 0301 	mvn.w	r3, #1
 800fcea:	e081      	b.n	800fdf0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f001 f84d 	bl	8010d8c <tcp_next_iss>
 800fcf2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	697a      	ldr	r2, [r7, #20]
 800fcfe:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	1e5a      	subs	r2, r3, #1
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	1e5a      	subs	r2, r3, #1
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	1e5a      	subs	r2, r3, #1
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fd1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fd36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fd40:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	3304      	adds	r3, #4
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd4e:	f001 f843 	bl	8010dd8 <tcp_eff_send_mss_netif>
 800fd52:	4603      	mov	r3, r0
 800fd54:	461a      	mov	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800fd6a:	2102      	movs	r1, #2
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f004 faa7 	bl	80142c0 <tcp_enqueue_flags>
 800fd72:	4603      	mov	r3, r0
 800fd74:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800fd76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d136      	bne.n	800fdec <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2202      	movs	r2, #2
 800fd82:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800fd84:	8b7b      	ldrh	r3, [r7, #26]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d021      	beq.n	800fdce <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800fd8a:	4b20      	ldr	r3, [pc, #128]	; (800fe0c <tcp_connect+0x224>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68fa      	ldr	r2, [r7, #12]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d105      	bne.n	800fda0 <tcp_connect+0x1b8>
 800fd94:	4b1d      	ldr	r3, [pc, #116]	; (800fe0c <tcp_connect+0x224>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	4a1c      	ldr	r2, [pc, #112]	; (800fe0c <tcp_connect+0x224>)
 800fd9c:	6013      	str	r3, [r2, #0]
 800fd9e:	e013      	b.n	800fdc8 <tcp_connect+0x1e0>
 800fda0:	4b1a      	ldr	r3, [pc, #104]	; (800fe0c <tcp_connect+0x224>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	623b      	str	r3, [r7, #32]
 800fda6:	e00c      	b.n	800fdc2 <tcp_connect+0x1da>
 800fda8:	6a3b      	ldr	r3, [r7, #32]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d104      	bne.n	800fdbc <tcp_connect+0x1d4>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	68da      	ldr	r2, [r3, #12]
 800fdb6:	6a3b      	ldr	r3, [r7, #32]
 800fdb8:	60da      	str	r2, [r3, #12]
 800fdba:	e005      	b.n	800fdc8 <tcp_connect+0x1e0>
 800fdbc:	6a3b      	ldr	r3, [r7, #32]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	623b      	str	r3, [r7, #32]
 800fdc2:	6a3b      	ldr	r3, [r7, #32]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1ef      	bne.n	800fda8 <tcp_connect+0x1c0>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800fdce:	4b10      	ldr	r3, [pc, #64]	; (800fe10 <tcp_connect+0x228>)
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	60da      	str	r2, [r3, #12]
 800fdd6:	4a0e      	ldr	r2, [pc, #56]	; (800fe10 <tcp_connect+0x228>)
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6013      	str	r3, [r2, #0]
 800fddc:	f005 fad4 	bl	8015388 <tcp_timer_needed>
 800fde0:	4b0c      	ldr	r3, [pc, #48]	; (800fe14 <tcp_connect+0x22c>)
 800fde2:	2201      	movs	r2, #1
 800fde4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f004 fb58 	bl	801449c <tcp_output>
  }
  return ret;
 800fdec:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3728      	adds	r7, #40	; 0x28
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	0801d4c4 	.word	0x0801d4c4
 800fdfc:	0801d7a0 	.word	0x0801d7a0
 800fe00:	0801d508 	.word	0x0801d508
 800fe04:	0801d7bc 	.word	0x0801d7bc
 800fe08:	0801d7d8 	.word	0x0801d7d8
 800fe0c:	2000c950 	.word	0x2000c950
 800fe10:	2000c958 	.word	0x2000c958
 800fe14:	2000c960 	.word	0x2000c960

0800fe18 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fe18:	b5b0      	push	{r4, r5, r7, lr}
 800fe1a:	b090      	sub	sp, #64	; 0x40
 800fe1c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fe24:	4b94      	ldr	r3, [pc, #592]	; (8010078 <tcp_slowtmr+0x260>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	4a93      	ldr	r2, [pc, #588]	; (8010078 <tcp_slowtmr+0x260>)
 800fe2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fe2e:	4b93      	ldr	r3, [pc, #588]	; (801007c <tcp_slowtmr+0x264>)
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	3301      	adds	r3, #1
 800fe34:	b2da      	uxtb	r2, r3
 800fe36:	4b91      	ldr	r3, [pc, #580]	; (801007c <tcp_slowtmr+0x264>)
 800fe38:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fe3e:	4b90      	ldr	r3, [pc, #576]	; (8010080 <tcp_slowtmr+0x268>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fe44:	e29f      	b.n	8010386 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fe46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe48:	7d1b      	ldrb	r3, [r3, #20]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d106      	bne.n	800fe5c <tcp_slowtmr+0x44>
 800fe4e:	4b8d      	ldr	r3, [pc, #564]	; (8010084 <tcp_slowtmr+0x26c>)
 800fe50:	f240 42be 	movw	r2, #1214	; 0x4be
 800fe54:	498c      	ldr	r1, [pc, #560]	; (8010088 <tcp_slowtmr+0x270>)
 800fe56:	488d      	ldr	r0, [pc, #564]	; (801008c <tcp_slowtmr+0x274>)
 800fe58:	f00b fb90 	bl	801b57c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fe5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5e:	7d1b      	ldrb	r3, [r3, #20]
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d106      	bne.n	800fe72 <tcp_slowtmr+0x5a>
 800fe64:	4b87      	ldr	r3, [pc, #540]	; (8010084 <tcp_slowtmr+0x26c>)
 800fe66:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fe6a:	4989      	ldr	r1, [pc, #548]	; (8010090 <tcp_slowtmr+0x278>)
 800fe6c:	4887      	ldr	r0, [pc, #540]	; (801008c <tcp_slowtmr+0x274>)
 800fe6e:	f00b fb85 	bl	801b57c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fe72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe74:	7d1b      	ldrb	r3, [r3, #20]
 800fe76:	2b0a      	cmp	r3, #10
 800fe78:	d106      	bne.n	800fe88 <tcp_slowtmr+0x70>
 800fe7a:	4b82      	ldr	r3, [pc, #520]	; (8010084 <tcp_slowtmr+0x26c>)
 800fe7c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fe80:	4984      	ldr	r1, [pc, #528]	; (8010094 <tcp_slowtmr+0x27c>)
 800fe82:	4882      	ldr	r0, [pc, #520]	; (801008c <tcp_slowtmr+0x274>)
 800fe84:	f00b fb7a 	bl	801b57c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fe88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8a:	7f9a      	ldrb	r2, [r3, #30]
 800fe8c:	4b7b      	ldr	r3, [pc, #492]	; (801007c <tcp_slowtmr+0x264>)
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d105      	bne.n	800fea0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fe94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fe9e:	e272      	b.n	8010386 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fea0:	4b76      	ldr	r3, [pc, #472]	; (801007c <tcp_slowtmr+0x264>)
 800fea2:	781a      	ldrb	r2, [r3, #0]
 800fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fea8:	2300      	movs	r3, #0
 800feaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800feae:	2300      	movs	r3, #0
 800feb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800feb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb6:	7d1b      	ldrb	r3, [r3, #20]
 800feb8:	2b02      	cmp	r3, #2
 800feba:	d10a      	bne.n	800fed2 <tcp_slowtmr+0xba>
 800febc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800febe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fec2:	2b05      	cmp	r3, #5
 800fec4:	d905      	bls.n	800fed2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feca:	3301      	adds	r3, #1
 800fecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fed0:	e11e      	b.n	8010110 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fed8:	2b0b      	cmp	r3, #11
 800feda:	d905      	bls.n	800fee8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fee0:	3301      	adds	r3, #1
 800fee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fee6:	e113      	b.n	8010110 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d075      	beq.n	800ffde <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d006      	beq.n	800ff08 <tcp_slowtmr+0xf0>
 800fefa:	4b62      	ldr	r3, [pc, #392]	; (8010084 <tcp_slowtmr+0x26c>)
 800fefc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ff00:	4965      	ldr	r1, [pc, #404]	; (8010098 <tcp_slowtmr+0x280>)
 800ff02:	4862      	ldr	r0, [pc, #392]	; (801008c <tcp_slowtmr+0x274>)
 800ff04:	f00b fb3a 	bl	801b57c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ff08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d106      	bne.n	800ff1e <tcp_slowtmr+0x106>
 800ff10:	4b5c      	ldr	r3, [pc, #368]	; (8010084 <tcp_slowtmr+0x26c>)
 800ff12:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ff16:	4961      	ldr	r1, [pc, #388]	; (801009c <tcp_slowtmr+0x284>)
 800ff18:	485c      	ldr	r0, [pc, #368]	; (801008c <tcp_slowtmr+0x274>)
 800ff1a:	f00b fb2f 	bl	801b57c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ff24:	2b0b      	cmp	r3, #11
 800ff26:	d905      	bls.n	800ff34 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ff28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff32:	e0ed      	b.n	8010110 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	4a58      	ldr	r2, [pc, #352]	; (80100a0 <tcp_slowtmr+0x288>)
 800ff3e:	5cd3      	ldrb	r3, [r2, r3]
 800ff40:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ff42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ff48:	7c7a      	ldrb	r2, [r7, #17]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d907      	bls.n	800ff5e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ff4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ff54:	3301      	adds	r3, #1
 800ff56:	b2da      	uxtb	r2, r3
 800ff58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ff5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ff64:	7c7a      	ldrb	r2, [r7, #17]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	f200 80d2 	bhi.w	8010110 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d108      	bne.n	800ff8c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ff7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff7c:	f005 f936 	bl	80151ec <tcp_zero_window_probe>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d014      	beq.n	800ffb0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ff86:	2300      	movs	r3, #0
 800ff88:	623b      	str	r3, [r7, #32]
 800ff8a:	e011      	b.n	800ffb0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff92:	4619      	mov	r1, r3
 800ff94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff96:	f003 fffb 	bl	8013f90 <tcp_split_unsent_seg>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d107      	bne.n	800ffb0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ffa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffa2:	f004 fa7b 	bl	801449c <tcp_output>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d101      	bne.n	800ffb0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ffb0:	6a3b      	ldr	r3, [r7, #32]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f000 80ac 	beq.w	8010110 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ffb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ffc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ffc6:	2b06      	cmp	r3, #6
 800ffc8:	f200 80a2 	bhi.w	8010110 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ffcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ffdc:	e098      	b.n	8010110 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ffde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	db0f      	blt.n	8010008 <tcp_slowtmr+0x1f0>
 800ffe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ffee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d008      	beq.n	8010008 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	3301      	adds	r3, #1
 8010000:	b29b      	uxth	r3, r3
 8010002:	b21a      	sxth	r2, r3
 8010004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010006:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801000e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010010:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010014:	429a      	cmp	r2, r3
 8010016:	db7b      	blt.n	8010110 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801001a:	f004 fd31 	bl	8014a80 <tcp_rexmit_rto_prepare>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d007      	beq.n	8010034 <tcp_slowtmr+0x21c>
 8010024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010028:	2b00      	cmp	r3, #0
 801002a:	d171      	bne.n	8010110 <tcp_slowtmr+0x2f8>
 801002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010030:	2b00      	cmp	r3, #0
 8010032:	d06d      	beq.n	8010110 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010036:	7d1b      	ldrb	r3, [r3, #20]
 8010038:	2b02      	cmp	r3, #2
 801003a:	d03a      	beq.n	80100b2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801003c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010042:	2b0c      	cmp	r3, #12
 8010044:	bf28      	it	cs
 8010046:	230c      	movcs	r3, #12
 8010048:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801004a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010050:	10db      	asrs	r3, r3, #3
 8010052:	b21b      	sxth	r3, r3
 8010054:	461a      	mov	r2, r3
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801005c:	4413      	add	r3, r2
 801005e:	7efa      	ldrb	r2, [r7, #27]
 8010060:	4910      	ldr	r1, [pc, #64]	; (80100a4 <tcp_slowtmr+0x28c>)
 8010062:	5c8a      	ldrb	r2, [r1, r2]
 8010064:	4093      	lsls	r3, r2
 8010066:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801006e:	4293      	cmp	r3, r2
 8010070:	dc1a      	bgt.n	80100a8 <tcp_slowtmr+0x290>
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	b21a      	sxth	r2, r3
 8010076:	e019      	b.n	80100ac <tcp_slowtmr+0x294>
 8010078:	2000c94c 	.word	0x2000c94c
 801007c:	2000c962 	.word	0x2000c962
 8010080:	2000c958 	.word	0x2000c958
 8010084:	0801d4c4 	.word	0x0801d4c4
 8010088:	0801d808 	.word	0x0801d808
 801008c:	0801d508 	.word	0x0801d508
 8010090:	0801d834 	.word	0x0801d834
 8010094:	0801d860 	.word	0x0801d860
 8010098:	0801d890 	.word	0x0801d890
 801009c:	0801d8c4 	.word	0x0801d8c4
 80100a0:	0801f8f4 	.word	0x0801f8f4
 80100a4:	0801f8e4 	.word	0x0801f8e4
 80100a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80100ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80100b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b4:	2200      	movs	r2, #0
 80100b6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80100b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80100c4:	4293      	cmp	r3, r2
 80100c6:	bf28      	it	cs
 80100c8:	4613      	movcs	r3, r2
 80100ca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80100cc:	8a7b      	ldrh	r3, [r7, #18]
 80100ce:	085b      	lsrs	r3, r3, #1
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80100d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d206      	bcs.n	80100f8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80100ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80100f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80100fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010104:	2200      	movs	r2, #0
 8010106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801010a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801010c:	f004 fd28 	bl	8014b60 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010112:	7d1b      	ldrb	r3, [r3, #20]
 8010114:	2b06      	cmp	r3, #6
 8010116:	d111      	bne.n	801013c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011a:	8b5b      	ldrh	r3, [r3, #26]
 801011c:	f003 0310 	and.w	r3, r3, #16
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00b      	beq.n	801013c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010124:	4b9d      	ldr	r3, [pc, #628]	; (801039c <tcp_slowtmr+0x584>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	6a1b      	ldr	r3, [r3, #32]
 801012c:	1ad3      	subs	r3, r2, r3
 801012e:	2b28      	cmp	r3, #40	; 0x28
 8010130:	d904      	bls.n	801013c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010136:	3301      	adds	r3, #1
 8010138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801013c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013e:	7a5b      	ldrb	r3, [r3, #9]
 8010140:	f003 0308 	and.w	r3, r3, #8
 8010144:	2b00      	cmp	r3, #0
 8010146:	d04c      	beq.n	80101e2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801014c:	2b04      	cmp	r3, #4
 801014e:	d003      	beq.n	8010158 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010154:	2b07      	cmp	r3, #7
 8010156:	d144      	bne.n	80101e2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010158:	4b90      	ldr	r3, [pc, #576]	; (801039c <tcp_slowtmr+0x584>)
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015e:	6a1b      	ldr	r3, [r3, #32]
 8010160:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010168:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801016c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8010170:	498b      	ldr	r1, [pc, #556]	; (80103a0 <tcp_slowtmr+0x588>)
 8010172:	fba1 1303 	umull	r1, r3, r1, r3
 8010176:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010178:	429a      	cmp	r2, r3
 801017a:	d90a      	bls.n	8010192 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801017c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010180:	3301      	adds	r3, #1
 8010182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010186:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801018a:	3301      	adds	r3, #1
 801018c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010190:	e027      	b.n	80101e2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010192:	4b82      	ldr	r3, [pc, #520]	; (801039c <tcp_slowtmr+0x584>)
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801019c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80101a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80101a8:	4618      	mov	r0, r3
 80101aa:	4b7e      	ldr	r3, [pc, #504]	; (80103a4 <tcp_slowtmr+0x58c>)
 80101ac:	fb00 f303 	mul.w	r3, r0, r3
 80101b0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80101b2:	497b      	ldr	r1, [pc, #492]	; (80103a0 <tcp_slowtmr+0x588>)
 80101b4:	fba1 1303 	umull	r1, r3, r1, r3
 80101b8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d911      	bls.n	80101e2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80101be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101c0:	f004 ffd4 	bl	801516c <tcp_keepalive>
 80101c4:	4603      	mov	r3, r0
 80101c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80101ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d107      	bne.n	80101e2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80101d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80101d8:	3301      	adds	r3, #1
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80101e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d011      	beq.n	801020e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80101ea:	4b6c      	ldr	r3, [pc, #432]	; (801039c <tcp_slowtmr+0x584>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f0:	6a1b      	ldr	r3, [r3, #32]
 80101f2:	1ad2      	subs	r2, r2, r3
 80101f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80101fa:	4619      	mov	r1, r3
 80101fc:	460b      	mov	r3, r1
 80101fe:	005b      	lsls	r3, r3, #1
 8010200:	440b      	add	r3, r1
 8010202:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010204:	429a      	cmp	r2, r3
 8010206:	d302      	bcc.n	801020e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801020a:	f000 fe8f 	bl	8010f2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801020e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010210:	7d1b      	ldrb	r3, [r3, #20]
 8010212:	2b03      	cmp	r3, #3
 8010214:	d10b      	bne.n	801022e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010216:	4b61      	ldr	r3, [pc, #388]	; (801039c <tcp_slowtmr+0x584>)
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021c:	6a1b      	ldr	r3, [r3, #32]
 801021e:	1ad3      	subs	r3, r2, r3
 8010220:	2b28      	cmp	r3, #40	; 0x28
 8010222:	d904      	bls.n	801022e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010228:	3301      	adds	r3, #1
 801022a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801022e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010230:	7d1b      	ldrb	r3, [r3, #20]
 8010232:	2b09      	cmp	r3, #9
 8010234:	d10b      	bne.n	801024e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010236:	4b59      	ldr	r3, [pc, #356]	; (801039c <tcp_slowtmr+0x584>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023c:	6a1b      	ldr	r3, [r3, #32]
 801023e:	1ad3      	subs	r3, r2, r3
 8010240:	2bf0      	cmp	r3, #240	; 0xf0
 8010242:	d904      	bls.n	801024e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010248:	3301      	adds	r3, #1
 801024a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801024e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010252:	2b00      	cmp	r3, #0
 8010254:	d060      	beq.n	8010318 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801025c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801025e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010260:	f000 fcb0 	bl	8010bc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010266:	2b00      	cmp	r3, #0
 8010268:	d010      	beq.n	801028c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801026a:	4b4f      	ldr	r3, [pc, #316]	; (80103a8 <tcp_slowtmr+0x590>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010270:	429a      	cmp	r2, r3
 8010272:	d106      	bne.n	8010282 <tcp_slowtmr+0x46a>
 8010274:	4b4d      	ldr	r3, [pc, #308]	; (80103ac <tcp_slowtmr+0x594>)
 8010276:	f240 526d 	movw	r2, #1389	; 0x56d
 801027a:	494d      	ldr	r1, [pc, #308]	; (80103b0 <tcp_slowtmr+0x598>)
 801027c:	484d      	ldr	r0, [pc, #308]	; (80103b4 <tcp_slowtmr+0x59c>)
 801027e:	f00b f97d 	bl	801b57c <iprintf>
        prev->next = pcb->next;
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	68da      	ldr	r2, [r3, #12]
 8010286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010288:	60da      	str	r2, [r3, #12]
 801028a:	e00f      	b.n	80102ac <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801028c:	4b46      	ldr	r3, [pc, #280]	; (80103a8 <tcp_slowtmr+0x590>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010292:	429a      	cmp	r2, r3
 8010294:	d006      	beq.n	80102a4 <tcp_slowtmr+0x48c>
 8010296:	4b45      	ldr	r3, [pc, #276]	; (80103ac <tcp_slowtmr+0x594>)
 8010298:	f240 5271 	movw	r2, #1393	; 0x571
 801029c:	4946      	ldr	r1, [pc, #280]	; (80103b8 <tcp_slowtmr+0x5a0>)
 801029e:	4845      	ldr	r0, [pc, #276]	; (80103b4 <tcp_slowtmr+0x59c>)
 80102a0:	f00b f96c 	bl	801b57c <iprintf>
        tcp_active_pcbs = pcb->next;
 80102a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	4a3f      	ldr	r2, [pc, #252]	; (80103a8 <tcp_slowtmr+0x590>)
 80102aa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80102ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d013      	beq.n	80102dc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80102b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80102b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80102bc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80102be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c0:	3304      	adds	r3, #4
 80102c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102c4:	8ad2      	ldrh	r2, [r2, #22]
 80102c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102c8:	8b09      	ldrh	r1, [r1, #24]
 80102ca:	9102      	str	r1, [sp, #8]
 80102cc:	9201      	str	r2, [sp, #4]
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	462b      	mov	r3, r5
 80102d2:	4622      	mov	r2, r4
 80102d4:	4601      	mov	r1, r0
 80102d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102d8:	f004 fe94 	bl	8015004 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80102dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102de:	691b      	ldr	r3, [r3, #16]
 80102e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80102e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e4:	7d1b      	ldrb	r3, [r3, #20]
 80102e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80102e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80102ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80102f2:	6838      	ldr	r0, [r7, #0]
 80102f4:	f7fe fffc 	bl	800f2f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80102f8:	4b30      	ldr	r3, [pc, #192]	; (80103bc <tcp_slowtmr+0x5a4>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d004      	beq.n	801030e <tcp_slowtmr+0x4f6>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f06f 010c 	mvn.w	r1, #12
 801030a:	68b8      	ldr	r0, [r7, #8]
 801030c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801030e:	4b2b      	ldr	r3, [pc, #172]	; (80103bc <tcp_slowtmr+0x5a4>)
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d037      	beq.n	8010386 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010316:	e590      	b.n	800fe3a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	7f1b      	ldrb	r3, [r3, #28]
 8010326:	3301      	adds	r3, #1
 8010328:	b2da      	uxtb	r2, r3
 801032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801032e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010330:	7f1a      	ldrb	r2, [r3, #28]
 8010332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010334:	7f5b      	ldrb	r3, [r3, #29]
 8010336:	429a      	cmp	r2, r3
 8010338:	d325      	bcc.n	8010386 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	2200      	movs	r2, #0
 801033e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010340:	4b1e      	ldr	r3, [pc, #120]	; (80103bc <tcp_slowtmr+0x5a4>)
 8010342:	2200      	movs	r2, #0
 8010344:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00b      	beq.n	8010368 <tcp_slowtmr+0x550>
 8010350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010358:	6912      	ldr	r2, [r2, #16]
 801035a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801035c:	4610      	mov	r0, r2
 801035e:	4798      	blx	r3
 8010360:	4603      	mov	r3, r0
 8010362:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010366:	e002      	b.n	801036e <tcp_slowtmr+0x556>
 8010368:	2300      	movs	r3, #0
 801036a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801036e:	4b13      	ldr	r3, [pc, #76]	; (80103bc <tcp_slowtmr+0x5a4>)
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d000      	beq.n	8010378 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010376:	e560      	b.n	800fe3a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010378:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801037c:	2b00      	cmp	r3, #0
 801037e:	d102      	bne.n	8010386 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010382:	f004 f88b 	bl	801449c <tcp_output>
  while (pcb != NULL) {
 8010386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010388:	2b00      	cmp	r3, #0
 801038a:	f47f ad5c 	bne.w	800fe46 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801038e:	2300      	movs	r3, #0
 8010390:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010392:	4b0b      	ldr	r3, [pc, #44]	; (80103c0 <tcp_slowtmr+0x5a8>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010398:	e067      	b.n	801046a <tcp_slowtmr+0x652>
 801039a:	bf00      	nop
 801039c:	2000c94c 	.word	0x2000c94c
 80103a0:	10624dd3 	.word	0x10624dd3
 80103a4:	000124f8 	.word	0x000124f8
 80103a8:	2000c958 	.word	0x2000c958
 80103ac:	0801d4c4 	.word	0x0801d4c4
 80103b0:	0801d8fc 	.word	0x0801d8fc
 80103b4:	0801d508 	.word	0x0801d508
 80103b8:	0801d928 	.word	0x0801d928
 80103bc:	2000c960 	.word	0x2000c960
 80103c0:	2000c95c 	.word	0x2000c95c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80103c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c6:	7d1b      	ldrb	r3, [r3, #20]
 80103c8:	2b0a      	cmp	r3, #10
 80103ca:	d006      	beq.n	80103da <tcp_slowtmr+0x5c2>
 80103cc:	4b2b      	ldr	r3, [pc, #172]	; (801047c <tcp_slowtmr+0x664>)
 80103ce:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80103d2:	492b      	ldr	r1, [pc, #172]	; (8010480 <tcp_slowtmr+0x668>)
 80103d4:	482b      	ldr	r0, [pc, #172]	; (8010484 <tcp_slowtmr+0x66c>)
 80103d6:	f00b f8d1 	bl	801b57c <iprintf>
    pcb_remove = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80103e0:	4b29      	ldr	r3, [pc, #164]	; (8010488 <tcp_slowtmr+0x670>)
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	6a1b      	ldr	r3, [r3, #32]
 80103e8:	1ad3      	subs	r3, r2, r3
 80103ea:	2bf0      	cmp	r3, #240	; 0xf0
 80103ec:	d904      	bls.n	80103f8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80103ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103f2:	3301      	adds	r3, #1
 80103f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80103f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d02f      	beq.n	8010460 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010402:	f000 fbdf 	bl	8010bc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010408:	2b00      	cmp	r3, #0
 801040a:	d010      	beq.n	801042e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801040c:	4b1f      	ldr	r3, [pc, #124]	; (801048c <tcp_slowtmr+0x674>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010412:	429a      	cmp	r2, r3
 8010414:	d106      	bne.n	8010424 <tcp_slowtmr+0x60c>
 8010416:	4b19      	ldr	r3, [pc, #100]	; (801047c <tcp_slowtmr+0x664>)
 8010418:	f240 52af 	movw	r2, #1455	; 0x5af
 801041c:	491c      	ldr	r1, [pc, #112]	; (8010490 <tcp_slowtmr+0x678>)
 801041e:	4819      	ldr	r0, [pc, #100]	; (8010484 <tcp_slowtmr+0x66c>)
 8010420:	f00b f8ac 	bl	801b57c <iprintf>
        prev->next = pcb->next;
 8010424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010426:	68da      	ldr	r2, [r3, #12]
 8010428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801042a:	60da      	str	r2, [r3, #12]
 801042c:	e00f      	b.n	801044e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801042e:	4b17      	ldr	r3, [pc, #92]	; (801048c <tcp_slowtmr+0x674>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010434:	429a      	cmp	r2, r3
 8010436:	d006      	beq.n	8010446 <tcp_slowtmr+0x62e>
 8010438:	4b10      	ldr	r3, [pc, #64]	; (801047c <tcp_slowtmr+0x664>)
 801043a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801043e:	4915      	ldr	r1, [pc, #84]	; (8010494 <tcp_slowtmr+0x67c>)
 8010440:	4810      	ldr	r0, [pc, #64]	; (8010484 <tcp_slowtmr+0x66c>)
 8010442:	f00b f89b 	bl	801b57c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010448:	68db      	ldr	r3, [r3, #12]
 801044a:	4a10      	ldr	r2, [pc, #64]	; (801048c <tcp_slowtmr+0x674>)
 801044c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801044e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010450:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010458:	69f8      	ldr	r0, [r7, #28]
 801045a:	f7fe ff49 	bl	800f2f0 <tcp_free>
 801045e:	e004      	b.n	801046a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010462:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1a9      	bne.n	80103c4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010470:	bf00      	nop
 8010472:	bf00      	nop
 8010474:	3730      	adds	r7, #48	; 0x30
 8010476:	46bd      	mov	sp, r7
 8010478:	bdb0      	pop	{r4, r5, r7, pc}
 801047a:	bf00      	nop
 801047c:	0801d4c4 	.word	0x0801d4c4
 8010480:	0801d954 	.word	0x0801d954
 8010484:	0801d508 	.word	0x0801d508
 8010488:	2000c94c 	.word	0x2000c94c
 801048c:	2000c95c 	.word	0x2000c95c
 8010490:	0801d984 	.word	0x0801d984
 8010494:	0801d9ac 	.word	0x0801d9ac

08010498 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801049e:	4b2d      	ldr	r3, [pc, #180]	; (8010554 <tcp_fasttmr+0xbc>)
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	3301      	adds	r3, #1
 80104a4:	b2da      	uxtb	r2, r3
 80104a6:	4b2b      	ldr	r3, [pc, #172]	; (8010554 <tcp_fasttmr+0xbc>)
 80104a8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80104aa:	4b2b      	ldr	r3, [pc, #172]	; (8010558 <tcp_fasttmr+0xc0>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80104b0:	e048      	b.n	8010544 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	7f9a      	ldrb	r2, [r3, #30]
 80104b6:	4b27      	ldr	r3, [pc, #156]	; (8010554 <tcp_fasttmr+0xbc>)
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d03f      	beq.n	801053e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80104be:	4b25      	ldr	r3, [pc, #148]	; (8010554 <tcp_fasttmr+0xbc>)
 80104c0:	781a      	ldrb	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	8b5b      	ldrh	r3, [r3, #26]
 80104ca:	f003 0301 	and.w	r3, r3, #1
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d010      	beq.n	80104f4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	8b5b      	ldrh	r3, [r3, #26]
 80104d6:	f043 0302 	orr.w	r3, r3, #2
 80104da:	b29a      	uxth	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f003 ffdb 	bl	801449c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	8b5b      	ldrh	r3, [r3, #26]
 80104ea:	f023 0303 	bic.w	r3, r3, #3
 80104ee:	b29a      	uxth	r2, r3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b5b      	ldrh	r3, [r3, #26]
 80104f8:	f003 0308 	and.w	r3, r3, #8
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d009      	beq.n	8010514 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	8b5b      	ldrh	r3, [r3, #26]
 8010504:	f023 0308 	bic.w	r3, r3, #8
 8010508:	b29a      	uxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7ff f882 	bl	800f618 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00a      	beq.n	8010538 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010522:	4b0e      	ldr	r3, [pc, #56]	; (801055c <tcp_fasttmr+0xc4>)
 8010524:	2200      	movs	r2, #0
 8010526:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 f819 	bl	8010560 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801052e:	4b0b      	ldr	r3, [pc, #44]	; (801055c <tcp_fasttmr+0xc4>)
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d000      	beq.n	8010538 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010536:	e7b8      	b.n	80104aa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	607b      	str	r3, [r7, #4]
 801053c:	e002      	b.n	8010544 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1b3      	bne.n	80104b2 <tcp_fasttmr+0x1a>
    }
  }
}
 801054a:	bf00      	nop
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	2000c962 	.word	0x2000c962
 8010558:	2000c958 	.word	0x2000c958
 801055c:	2000c960 	.word	0x2000c960

08010560 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010560:	b590      	push	{r4, r7, lr}
 8010562:	b085      	sub	sp, #20
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d109      	bne.n	8010582 <tcp_process_refused_data+0x22>
 801056e:	4b37      	ldr	r3, [pc, #220]	; (801064c <tcp_process_refused_data+0xec>)
 8010570:	f240 6209 	movw	r2, #1545	; 0x609
 8010574:	4936      	ldr	r1, [pc, #216]	; (8010650 <tcp_process_refused_data+0xf0>)
 8010576:	4837      	ldr	r0, [pc, #220]	; (8010654 <tcp_process_refused_data+0xf4>)
 8010578:	f00b f800 	bl	801b57c <iprintf>
 801057c:	f06f 030f 	mvn.w	r3, #15
 8010580:	e060      	b.n	8010644 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010586:	7b5b      	ldrb	r3, [r3, #13]
 8010588:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801058e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00b      	beq.n	80105b8 <tcp_process_refused_data+0x58>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6918      	ldr	r0, [r3, #16]
 80105aa:	2300      	movs	r3, #0
 80105ac:	68ba      	ldr	r2, [r7, #8]
 80105ae:	6879      	ldr	r1, [r7, #4]
 80105b0:	47a0      	blx	r4
 80105b2:	4603      	mov	r3, r0
 80105b4:	73fb      	strb	r3, [r7, #15]
 80105b6:	e007      	b.n	80105c8 <tcp_process_refused_data+0x68>
 80105b8:	2300      	movs	r3, #0
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	6879      	ldr	r1, [r7, #4]
 80105be:	2000      	movs	r0, #0
 80105c0:	f000 f8a4 	bl	801070c <tcp_recv_null>
 80105c4:	4603      	mov	r3, r0
 80105c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80105c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d12a      	bne.n	8010626 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80105d0:	7bbb      	ldrb	r3, [r7, #14]
 80105d2:	f003 0320 	and.w	r3, r3, #32
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d033      	beq.n	8010642 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80105e2:	d005      	beq.n	80105f0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105e8:	3301      	adds	r3, #1
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00b      	beq.n	8010612 <tcp_process_refused_data+0xb2>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6918      	ldr	r0, [r3, #16]
 8010604:	2300      	movs	r3, #0
 8010606:	2200      	movs	r2, #0
 8010608:	6879      	ldr	r1, [r7, #4]
 801060a:	47a0      	blx	r4
 801060c:	4603      	mov	r3, r0
 801060e:	73fb      	strb	r3, [r7, #15]
 8010610:	e001      	b.n	8010616 <tcp_process_refused_data+0xb6>
 8010612:	2300      	movs	r3, #0
 8010614:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801061a:	f113 0f0d 	cmn.w	r3, #13
 801061e:	d110      	bne.n	8010642 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010620:	f06f 030c 	mvn.w	r3, #12
 8010624:	e00e      	b.n	8010644 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801062a:	f113 0f0d 	cmn.w	r3, #13
 801062e:	d102      	bne.n	8010636 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010630:	f06f 030c 	mvn.w	r3, #12
 8010634:	e006      	b.n	8010644 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	68ba      	ldr	r2, [r7, #8]
 801063a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801063c:	f06f 0304 	mvn.w	r3, #4
 8010640:	e000      	b.n	8010644 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3714      	adds	r7, #20
 8010648:	46bd      	mov	sp, r7
 801064a:	bd90      	pop	{r4, r7, pc}
 801064c:	0801d4c4 	.word	0x0801d4c4
 8010650:	0801d9d4 	.word	0x0801d9d4
 8010654:	0801d508 	.word	0x0801d508

08010658 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010660:	e007      	b.n	8010672 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 f80a 	bl	8010682 <tcp_seg_free>
    seg = next;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1f4      	bne.n	8010662 <tcp_segs_free+0xa>
  }
}
 8010678:	bf00      	nop
 801067a:	bf00      	nop
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b082      	sub	sp, #8
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00c      	beq.n	80106aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	4618      	mov	r0, r3
 801069e:	f7fe fb0b 	bl	800ecb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80106a2:	6879      	ldr	r1, [r7, #4]
 80106a4:	2003      	movs	r0, #3
 80106a6:	f7fd fcc9 	bl	800e03c <memp_free>
  }
}
 80106aa:	bf00      	nop
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
	...

080106b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d106      	bne.n	80106d0 <tcp_seg_copy+0x1c>
 80106c2:	4b0f      	ldr	r3, [pc, #60]	; (8010700 <tcp_seg_copy+0x4c>)
 80106c4:	f240 6282 	movw	r2, #1666	; 0x682
 80106c8:	490e      	ldr	r1, [pc, #56]	; (8010704 <tcp_seg_copy+0x50>)
 80106ca:	480f      	ldr	r0, [pc, #60]	; (8010708 <tcp_seg_copy+0x54>)
 80106cc:	f00a ff56 	bl	801b57c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80106d0:	2003      	movs	r0, #3
 80106d2:	f7fd fc3d 	bl	800df50 <memp_malloc>
 80106d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d101      	bne.n	80106e2 <tcp_seg_copy+0x2e>
    return NULL;
 80106de:	2300      	movs	r3, #0
 80106e0:	e00a      	b.n	80106f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80106e2:	2210      	movs	r2, #16
 80106e4:	6879      	ldr	r1, [r7, #4]
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f00a fe54 	bl	801b394 <memcpy>
  pbuf_ref(cseg->p);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fe fb85 	bl	800ee00 <pbuf_ref>
  return cseg;
 80106f6:	68fb      	ldr	r3, [r7, #12]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	0801d4c4 	.word	0x0801d4c4
 8010704:	0801da18 	.word	0x0801da18
 8010708:	0801d508 	.word	0x0801d508

0801070c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d109      	bne.n	8010734 <tcp_recv_null+0x28>
 8010720:	4b12      	ldr	r3, [pc, #72]	; (801076c <tcp_recv_null+0x60>)
 8010722:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010726:	4912      	ldr	r1, [pc, #72]	; (8010770 <tcp_recv_null+0x64>)
 8010728:	4812      	ldr	r0, [pc, #72]	; (8010774 <tcp_recv_null+0x68>)
 801072a:	f00a ff27 	bl	801b57c <iprintf>
 801072e:	f06f 030f 	mvn.w	r3, #15
 8010732:	e016      	b.n	8010762 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d009      	beq.n	801074e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	891b      	ldrh	r3, [r3, #8]
 801073e:	4619      	mov	r1, r3
 8010740:	68b8      	ldr	r0, [r7, #8]
 8010742:	f7ff f9bb 	bl	800fabc <tcp_recved>
    pbuf_free(p);
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f7fe fab6 	bl	800ecb8 <pbuf_free>
 801074c:	e008      	b.n	8010760 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801074e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d104      	bne.n	8010760 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010756:	68b8      	ldr	r0, [r7, #8]
 8010758:	f7fe ffc8 	bl	800f6ec <tcp_close>
 801075c:	4603      	mov	r3, r0
 801075e:	e000      	b.n	8010762 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	0801d4c4 	.word	0x0801d4c4
 8010770:	0801da34 	.word	0x0801da34
 8010774:	0801d508 	.word	0x0801d508

08010778 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af00      	add	r7, sp, #0
 801077e:	4603      	mov	r3, r0
 8010780:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010786:	2b00      	cmp	r3, #0
 8010788:	db01      	blt.n	801078e <tcp_kill_prio+0x16>
 801078a:	79fb      	ldrb	r3, [r7, #7]
 801078c:	e000      	b.n	8010790 <tcp_kill_prio+0x18>
 801078e:	237f      	movs	r3, #127	; 0x7f
 8010790:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010792:	7afb      	ldrb	r3, [r7, #11]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d034      	beq.n	8010802 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010798:	7afb      	ldrb	r3, [r7, #11]
 801079a:	3b01      	subs	r3, #1
 801079c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801079e:	2300      	movs	r3, #0
 80107a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80107a2:	2300      	movs	r3, #0
 80107a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80107a6:	4b19      	ldr	r3, [pc, #100]	; (801080c <tcp_kill_prio+0x94>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	e01f      	b.n	80107ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	7d5b      	ldrb	r3, [r3, #21]
 80107b2:	7afa      	ldrb	r2, [r7, #11]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d80c      	bhi.n	80107d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80107bc:	7afa      	ldrb	r2, [r7, #11]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d112      	bne.n	80107e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80107c2:	4b13      	ldr	r3, [pc, #76]	; (8010810 <tcp_kill_prio+0x98>)
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	6a1b      	ldr	r3, [r3, #32]
 80107ca:	1ad3      	subs	r3, r2, r3
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d80a      	bhi.n	80107e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80107d2:	4b0f      	ldr	r3, [pc, #60]	; (8010810 <tcp_kill_prio+0x98>)
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	6a1b      	ldr	r3, [r3, #32]
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	7d5b      	ldrb	r3, [r3, #21]
 80107e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	617b      	str	r3, [r7, #20]
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d1dc      	bne.n	80107ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d004      	beq.n	8010804 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80107fa:	6938      	ldr	r0, [r7, #16]
 80107fc:	f7ff f860 	bl	800f8c0 <tcp_abort>
 8010800:	e000      	b.n	8010804 <tcp_kill_prio+0x8c>
    return;
 8010802:	bf00      	nop
  }
}
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	2000c958 	.word	0x2000c958
 8010810:	2000c94c 	.word	0x2000c94c

08010814 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b086      	sub	sp, #24
 8010818:	af00      	add	r7, sp, #0
 801081a:	4603      	mov	r3, r0
 801081c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801081e:	79fb      	ldrb	r3, [r7, #7]
 8010820:	2b08      	cmp	r3, #8
 8010822:	d009      	beq.n	8010838 <tcp_kill_state+0x24>
 8010824:	79fb      	ldrb	r3, [r7, #7]
 8010826:	2b09      	cmp	r3, #9
 8010828:	d006      	beq.n	8010838 <tcp_kill_state+0x24>
 801082a:	4b1a      	ldr	r3, [pc, #104]	; (8010894 <tcp_kill_state+0x80>)
 801082c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010830:	4919      	ldr	r1, [pc, #100]	; (8010898 <tcp_kill_state+0x84>)
 8010832:	481a      	ldr	r0, [pc, #104]	; (801089c <tcp_kill_state+0x88>)
 8010834:	f00a fea2 	bl	801b57c <iprintf>

  inactivity = 0;
 8010838:	2300      	movs	r3, #0
 801083a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801083c:	2300      	movs	r3, #0
 801083e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010840:	4b17      	ldr	r3, [pc, #92]	; (80108a0 <tcp_kill_state+0x8c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	617b      	str	r3, [r7, #20]
 8010846:	e017      	b.n	8010878 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	7d1b      	ldrb	r3, [r3, #20]
 801084c:	79fa      	ldrb	r2, [r7, #7]
 801084e:	429a      	cmp	r2, r3
 8010850:	d10f      	bne.n	8010872 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010852:	4b14      	ldr	r3, [pc, #80]	; (80108a4 <tcp_kill_state+0x90>)
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	6a1b      	ldr	r3, [r3, #32]
 801085a:	1ad3      	subs	r3, r2, r3
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	429a      	cmp	r2, r3
 8010860:	d807      	bhi.n	8010872 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010862:	4b10      	ldr	r3, [pc, #64]	; (80108a4 <tcp_kill_state+0x90>)
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	617b      	str	r3, [r7, #20]
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1e4      	bne.n	8010848 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d003      	beq.n	801088c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010884:	2100      	movs	r1, #0
 8010886:	6938      	ldr	r0, [r7, #16]
 8010888:	f7fe ff5c 	bl	800f744 <tcp_abandon>
  }
}
 801088c:	bf00      	nop
 801088e:	3718      	adds	r7, #24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	0801d4c4 	.word	0x0801d4c4
 8010898:	0801da50 	.word	0x0801da50
 801089c:	0801d508 	.word	0x0801d508
 80108a0:	2000c958 	.word	0x2000c958
 80108a4:	2000c94c 	.word	0x2000c94c

080108a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80108ae:	2300      	movs	r3, #0
 80108b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80108b2:	2300      	movs	r3, #0
 80108b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80108b6:	4b12      	ldr	r3, [pc, #72]	; (8010900 <tcp_kill_timewait+0x58>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	60fb      	str	r3, [r7, #12]
 80108bc:	e012      	b.n	80108e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80108be:	4b11      	ldr	r3, [pc, #68]	; (8010904 <tcp_kill_timewait+0x5c>)
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	1ad3      	subs	r3, r2, r3
 80108c8:	687a      	ldr	r2, [r7, #4]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d807      	bhi.n	80108de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80108ce:	4b0d      	ldr	r3, [pc, #52]	; (8010904 <tcp_kill_timewait+0x5c>)
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	6a1b      	ldr	r3, [r3, #32]
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	60fb      	str	r3, [r7, #12]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d1e9      	bne.n	80108be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80108f0:	68b8      	ldr	r0, [r7, #8]
 80108f2:	f7fe ffe5 	bl	800f8c0 <tcp_abort>
  }
}
 80108f6:	bf00      	nop
 80108f8:	3710      	adds	r7, #16
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	2000c95c 	.word	0x2000c95c
 8010904:	2000c94c 	.word	0x2000c94c

08010908 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801090e:	4b10      	ldr	r3, [pc, #64]	; (8010950 <tcp_handle_closepend+0x48>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010914:	e014      	b.n	8010940 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	8b5b      	ldrh	r3, [r3, #26]
 8010920:	f003 0308 	and.w	r3, r3, #8
 8010924:	2b00      	cmp	r3, #0
 8010926:	d009      	beq.n	801093c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	8b5b      	ldrh	r3, [r3, #26]
 801092c:	f023 0308 	bic.w	r3, r3, #8
 8010930:	b29a      	uxth	r2, r3
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f7fe fe6e 	bl	800f618 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d1e7      	bne.n	8010916 <tcp_handle_closepend+0xe>
  }
}
 8010946:	bf00      	nop
 8010948:	bf00      	nop
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	2000c958 	.word	0x2000c958

08010954 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	4603      	mov	r3, r0
 801095c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801095e:	2001      	movs	r0, #1
 8010960:	f7fd faf6 	bl	800df50 <memp_malloc>
 8010964:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d126      	bne.n	80109ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801096c:	f7ff ffcc 	bl	8010908 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010970:	f7ff ff9a 	bl	80108a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010974:	2001      	movs	r0, #1
 8010976:	f7fd faeb 	bl	800df50 <memp_malloc>
 801097a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d11b      	bne.n	80109ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010982:	2009      	movs	r0, #9
 8010984:	f7ff ff46 	bl	8010814 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010988:	2001      	movs	r0, #1
 801098a:	f7fd fae1 	bl	800df50 <memp_malloc>
 801098e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d111      	bne.n	80109ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010996:	2008      	movs	r0, #8
 8010998:	f7ff ff3c 	bl	8010814 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801099c:	2001      	movs	r0, #1
 801099e:	f7fd fad7 	bl	800df50 <memp_malloc>
 80109a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d107      	bne.n	80109ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80109aa:	79fb      	ldrb	r3, [r7, #7]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7ff fee3 	bl	8010778 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109b2:	2001      	movs	r0, #1
 80109b4:	f7fd facc 	bl	800df50 <memp_malloc>
 80109b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d03f      	beq.n	8010a40 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80109c0:	229c      	movs	r2, #156	; 0x9c
 80109c2:	2100      	movs	r1, #0
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f00a fcf3 	bl	801b3b0 <memset>
    pcb->prio = prio;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	79fa      	ldrb	r2, [r7, #7]
 80109ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80109d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80109e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	22ff      	movs	r2, #255	; 0xff
 80109ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80109f6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2206      	movs	r2, #6
 80109fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2206      	movs	r2, #6
 8010a04:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a0c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2201      	movs	r2, #1
 8010a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010a16:	4b0d      	ldr	r3, [pc, #52]	; (8010a4c <tcp_alloc+0xf8>)
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010a1e:	4b0c      	ldr	r3, [pc, #48]	; (8010a50 <tcp_alloc+0xfc>)
 8010a20:	781a      	ldrb	r2, [r3, #0]
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010a2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	4a08      	ldr	r2, [pc, #32]	; (8010a54 <tcp_alloc+0x100>)
 8010a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	4a07      	ldr	r2, [pc, #28]	; (8010a58 <tcp_alloc+0x104>)
 8010a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010a40:	68fb      	ldr	r3, [r7, #12]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3710      	adds	r7, #16
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2000c94c 	.word	0x2000c94c
 8010a50:	2000c962 	.word	0x2000c962
 8010a54:	0801070d 	.word	0x0801070d
 8010a58:	006ddd00 	.word	0x006ddd00

08010a5c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	4603      	mov	r3, r0
 8010a64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010a66:	2040      	movs	r0, #64	; 0x40
 8010a68:	f7ff ff74 	bl	8010954 <tcp_alloc>
 8010a6c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3710      	adds	r7, #16
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d002      	beq.n	8010a8e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	611a      	str	r2, [r3, #16]
  }
}
 8010a8e:	bf00      	nop
 8010a90:	370c      	adds	r7, #12
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bc80      	pop	{r7}
 8010a96:	4770      	bx	lr

08010a98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d00e      	beq.n	8010ac6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	7d1b      	ldrb	r3, [r3, #20]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d106      	bne.n	8010abe <tcp_recv+0x26>
 8010ab0:	4b07      	ldr	r3, [pc, #28]	; (8010ad0 <tcp_recv+0x38>)
 8010ab2:	f240 72df 	movw	r2, #2015	; 0x7df
 8010ab6:	4907      	ldr	r1, [pc, #28]	; (8010ad4 <tcp_recv+0x3c>)
 8010ab8:	4807      	ldr	r0, [pc, #28]	; (8010ad8 <tcp_recv+0x40>)
 8010aba:	f00a fd5f 	bl	801b57c <iprintf>
    pcb->recv = recv;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010ac6:	bf00      	nop
 8010ac8:	3708      	adds	r7, #8
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	0801d4c4 	.word	0x0801d4c4
 8010ad4:	0801da60 	.word	0x0801da60
 8010ad8:	0801d508 	.word	0x0801d508

08010adc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00e      	beq.n	8010b0a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	7d1b      	ldrb	r3, [r3, #20]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d106      	bne.n	8010b02 <tcp_sent+0x26>
 8010af4:	4b07      	ldr	r3, [pc, #28]	; (8010b14 <tcp_sent+0x38>)
 8010af6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010afa:	4907      	ldr	r1, [pc, #28]	; (8010b18 <tcp_sent+0x3c>)
 8010afc:	4807      	ldr	r0, [pc, #28]	; (8010b1c <tcp_sent+0x40>)
 8010afe:	f00a fd3d 	bl	801b57c <iprintf>
    pcb->sent = sent;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010b0a:	bf00      	nop
 8010b0c:	3708      	adds	r7, #8
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	0801d4c4 	.word	0x0801d4c4
 8010b18:	0801da88 	.word	0x0801da88
 8010b1c:	0801d508 	.word	0x0801d508

08010b20 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d00e      	beq.n	8010b4e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	7d1b      	ldrb	r3, [r3, #20]
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d106      	bne.n	8010b46 <tcp_err+0x26>
 8010b38:	4b07      	ldr	r3, [pc, #28]	; (8010b58 <tcp_err+0x38>)
 8010b3a:	f640 020d 	movw	r2, #2061	; 0x80d
 8010b3e:	4907      	ldr	r1, [pc, #28]	; (8010b5c <tcp_err+0x3c>)
 8010b40:	4807      	ldr	r0, [pc, #28]	; (8010b60 <tcp_err+0x40>)
 8010b42:	f00a fd1b 	bl	801b57c <iprintf>
    pcb->errf = err;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	683a      	ldr	r2, [r7, #0]
 8010b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010b4e:	bf00      	nop
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	0801d4c4 	.word	0x0801d4c4
 8010b5c:	0801dab0 	.word	0x0801dab0
 8010b60:	0801d508 	.word	0x0801d508

08010b64 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d107      	bne.n	8010b88 <tcp_poll+0x24>
 8010b78:	4b0e      	ldr	r3, [pc, #56]	; (8010bb4 <tcp_poll+0x50>)
 8010b7a:	f640 023d 	movw	r2, #2109	; 0x83d
 8010b7e:	490e      	ldr	r1, [pc, #56]	; (8010bb8 <tcp_poll+0x54>)
 8010b80:	480e      	ldr	r0, [pc, #56]	; (8010bbc <tcp_poll+0x58>)
 8010b82:	f00a fcfb 	bl	801b57c <iprintf>
 8010b86:	e011      	b.n	8010bac <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	7d1b      	ldrb	r3, [r3, #20]
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d106      	bne.n	8010b9e <tcp_poll+0x3a>
 8010b90:	4b08      	ldr	r3, [pc, #32]	; (8010bb4 <tcp_poll+0x50>)
 8010b92:	f640 023e 	movw	r2, #2110	; 0x83e
 8010b96:	490a      	ldr	r1, [pc, #40]	; (8010bc0 <tcp_poll+0x5c>)
 8010b98:	4808      	ldr	r0, [pc, #32]	; (8010bbc <tcp_poll+0x58>)
 8010b9a:	f00a fcef 	bl	801b57c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	68ba      	ldr	r2, [r7, #8]
 8010ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	79fa      	ldrb	r2, [r7, #7]
 8010baa:	775a      	strb	r2, [r3, #29]
}
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	0801d4c4 	.word	0x0801d4c4
 8010bb8:	0801dad8 	.word	0x0801dad8
 8010bbc:	0801d508 	.word	0x0801d508
 8010bc0:	0801daf0 	.word	0x0801daf0

08010bc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d107      	bne.n	8010be2 <tcp_pcb_purge+0x1e>
 8010bd2:	4b21      	ldr	r3, [pc, #132]	; (8010c58 <tcp_pcb_purge+0x94>)
 8010bd4:	f640 0251 	movw	r2, #2129	; 0x851
 8010bd8:	4920      	ldr	r1, [pc, #128]	; (8010c5c <tcp_pcb_purge+0x98>)
 8010bda:	4821      	ldr	r0, [pc, #132]	; (8010c60 <tcp_pcb_purge+0x9c>)
 8010bdc:	f00a fcce 	bl	801b57c <iprintf>
 8010be0:	e037      	b.n	8010c52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	7d1b      	ldrb	r3, [r3, #20]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d033      	beq.n	8010c52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010bee:	2b0a      	cmp	r3, #10
 8010bf0:	d02f      	beq.n	8010c52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d02b      	beq.n	8010c52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d007      	beq.n	8010c12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fe f856 	bl	800ecb8 <pbuf_free>
      pcb->refused_data = NULL;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d002      	beq.n	8010c20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f000 f986 	bl	8010f2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7ff fd13 	bl	8010658 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7ff fd0e 	bl	8010658 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	0801d4c4 	.word	0x0801d4c4
 8010c5c:	0801db10 	.word	0x0801db10
 8010c60:	0801d508 	.word	0x0801d508

08010c64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d106      	bne.n	8010c82 <tcp_pcb_remove+0x1e>
 8010c74:	4b3e      	ldr	r3, [pc, #248]	; (8010d70 <tcp_pcb_remove+0x10c>)
 8010c76:	f640 0283 	movw	r2, #2179	; 0x883
 8010c7a:	493e      	ldr	r1, [pc, #248]	; (8010d74 <tcp_pcb_remove+0x110>)
 8010c7c:	483e      	ldr	r0, [pc, #248]	; (8010d78 <tcp_pcb_remove+0x114>)
 8010c7e:	f00a fc7d 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d106      	bne.n	8010c96 <tcp_pcb_remove+0x32>
 8010c88:	4b39      	ldr	r3, [pc, #228]	; (8010d70 <tcp_pcb_remove+0x10c>)
 8010c8a:	f640 0284 	movw	r2, #2180	; 0x884
 8010c8e:	493b      	ldr	r1, [pc, #236]	; (8010d7c <tcp_pcb_remove+0x118>)
 8010c90:	4839      	ldr	r0, [pc, #228]	; (8010d78 <tcp_pcb_remove+0x114>)
 8010c92:	f00a fc73 	bl	801b57c <iprintf>

  TCP_RMV(pcblist, pcb);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	683a      	ldr	r2, [r7, #0]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d105      	bne.n	8010cac <tcp_pcb_remove+0x48>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	68da      	ldr	r2, [r3, #12]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	e013      	b.n	8010cd4 <tcp_pcb_remove+0x70>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	60fb      	str	r3, [r7, #12]
 8010cb2:	e00c      	b.n	8010cce <tcp_pcb_remove+0x6a>
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	683a      	ldr	r2, [r7, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d104      	bne.n	8010cc8 <tcp_pcb_remove+0x64>
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	68da      	ldr	r2, [r3, #12]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	60da      	str	r2, [r3, #12]
 8010cc6:	e005      	b.n	8010cd4 <tcp_pcb_remove+0x70>
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	60fb      	str	r3, [r7, #12]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1ef      	bne.n	8010cb4 <tcp_pcb_remove+0x50>
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010cda:	6838      	ldr	r0, [r7, #0]
 8010cdc:	f7ff ff72 	bl	8010bc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	7d1b      	ldrb	r3, [r3, #20]
 8010ce4:	2b0a      	cmp	r3, #10
 8010ce6:	d013      	beq.n	8010d10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	d00f      	beq.n	8010d10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	8b5b      	ldrh	r3, [r3, #26]
 8010cf4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d009      	beq.n	8010d10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	8b5b      	ldrh	r3, [r3, #26]
 8010d00:	f043 0302 	orr.w	r3, r3, #2
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010d0a:	6838      	ldr	r0, [r7, #0]
 8010d0c:	f003 fbc6 	bl	801449c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	7d1b      	ldrb	r3, [r3, #20]
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d020      	beq.n	8010d5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d006      	beq.n	8010d2e <tcp_pcb_remove+0xca>
 8010d20:	4b13      	ldr	r3, [pc, #76]	; (8010d70 <tcp_pcb_remove+0x10c>)
 8010d22:	f640 0293 	movw	r2, #2195	; 0x893
 8010d26:	4916      	ldr	r1, [pc, #88]	; (8010d80 <tcp_pcb_remove+0x11c>)
 8010d28:	4813      	ldr	r0, [pc, #76]	; (8010d78 <tcp_pcb_remove+0x114>)
 8010d2a:	f00a fc27 	bl	801b57c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d006      	beq.n	8010d44 <tcp_pcb_remove+0xe0>
 8010d36:	4b0e      	ldr	r3, [pc, #56]	; (8010d70 <tcp_pcb_remove+0x10c>)
 8010d38:	f640 0294 	movw	r2, #2196	; 0x894
 8010d3c:	4911      	ldr	r1, [pc, #68]	; (8010d84 <tcp_pcb_remove+0x120>)
 8010d3e:	480e      	ldr	r0, [pc, #56]	; (8010d78 <tcp_pcb_remove+0x114>)
 8010d40:	f00a fc1c 	bl	801b57c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d006      	beq.n	8010d5a <tcp_pcb_remove+0xf6>
 8010d4c:	4b08      	ldr	r3, [pc, #32]	; (8010d70 <tcp_pcb_remove+0x10c>)
 8010d4e:	f640 0296 	movw	r2, #2198	; 0x896
 8010d52:	490d      	ldr	r1, [pc, #52]	; (8010d88 <tcp_pcb_remove+0x124>)
 8010d54:	4808      	ldr	r0, [pc, #32]	; (8010d78 <tcp_pcb_remove+0x114>)
 8010d56:	f00a fc11 	bl	801b57c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	2200      	movs	r2, #0
 8010d64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010d66:	bf00      	nop
 8010d68:	3710      	adds	r7, #16
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	0801d4c4 	.word	0x0801d4c4
 8010d74:	0801db2c 	.word	0x0801db2c
 8010d78:	0801d508 	.word	0x0801d508
 8010d7c:	0801db48 	.word	0x0801db48
 8010d80:	0801db68 	.word	0x0801db68
 8010d84:	0801db80 	.word	0x0801db80
 8010d88:	0801db9c 	.word	0x0801db9c

08010d8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <tcp_next_iss+0x1c>
 8010d9a:	4b0a      	ldr	r3, [pc, #40]	; (8010dc4 <tcp_next_iss+0x38>)
 8010d9c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010da0:	4909      	ldr	r1, [pc, #36]	; (8010dc8 <tcp_next_iss+0x3c>)
 8010da2:	480a      	ldr	r0, [pc, #40]	; (8010dcc <tcp_next_iss+0x40>)
 8010da4:	f00a fbea 	bl	801b57c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010da8:	4b09      	ldr	r3, [pc, #36]	; (8010dd0 <tcp_next_iss+0x44>)
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	4b09      	ldr	r3, [pc, #36]	; (8010dd4 <tcp_next_iss+0x48>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4413      	add	r3, r2
 8010db2:	4a07      	ldr	r2, [pc, #28]	; (8010dd0 <tcp_next_iss+0x44>)
 8010db4:	6013      	str	r3, [r2, #0]
  return iss;
 8010db6:	4b06      	ldr	r3, [pc, #24]	; (8010dd0 <tcp_next_iss+0x44>)
 8010db8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	0801d4c4 	.word	0x0801d4c4
 8010dc8:	0801dbb4 	.word	0x0801dbb4
 8010dcc:	0801d508 	.word	0x0801d508
 8010dd0:	200000a0 	.word	0x200000a0
 8010dd4:	2000c94c 	.word	0x2000c94c

08010dd8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	4603      	mov	r3, r0
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
 8010de4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d106      	bne.n	8010dfa <tcp_eff_send_mss_netif+0x22>
 8010dec:	4b14      	ldr	r3, [pc, #80]	; (8010e40 <tcp_eff_send_mss_netif+0x68>)
 8010dee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010df2:	4914      	ldr	r1, [pc, #80]	; (8010e44 <tcp_eff_send_mss_netif+0x6c>)
 8010df4:	4814      	ldr	r0, [pc, #80]	; (8010e48 <tcp_eff_send_mss_netif+0x70>)
 8010df6:	f00a fbc1 	bl	801b57c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d101      	bne.n	8010e04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010e00:	89fb      	ldrh	r3, [r7, #14]
 8010e02:	e019      	b.n	8010e38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010e0a:	8afb      	ldrh	r3, [r7, #22]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d012      	beq.n	8010e36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010e10:	2328      	movs	r3, #40	; 0x28
 8010e12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010e14:	8afa      	ldrh	r2, [r7, #22]
 8010e16:	8abb      	ldrh	r3, [r7, #20]
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d904      	bls.n	8010e26 <tcp_eff_send_mss_netif+0x4e>
 8010e1c:	8afa      	ldrh	r2, [r7, #22]
 8010e1e:	8abb      	ldrh	r3, [r7, #20]
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	e000      	b.n	8010e28 <tcp_eff_send_mss_netif+0x50>
 8010e26:	2300      	movs	r3, #0
 8010e28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010e2a:	8a7a      	ldrh	r2, [r7, #18]
 8010e2c:	89fb      	ldrh	r3, [r7, #14]
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	bf28      	it	cs
 8010e32:	4613      	movcs	r3, r2
 8010e34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010e36:	89fb      	ldrh	r3, [r7, #14]
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3718      	adds	r7, #24
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	0801d4c4 	.word	0x0801d4c4
 8010e44:	0801dbd0 	.word	0x0801dbd0
 8010e48:	0801d508 	.word	0x0801d508

08010e4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d119      	bne.n	8010e94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010e60:	4b10      	ldr	r3, [pc, #64]	; (8010ea4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010e62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010e66:	4910      	ldr	r1, [pc, #64]	; (8010ea8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010e68:	4810      	ldr	r0, [pc, #64]	; (8010eac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010e6a:	f00a fb87 	bl	801b57c <iprintf>

  while (pcb != NULL) {
 8010e6e:	e011      	b.n	8010e94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d108      	bne.n	8010e8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f7fe fd1c 	bl	800f8c0 <tcp_abort>
      pcb = next;
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	60fb      	str	r3, [r7, #12]
 8010e8c:	e002      	b.n	8010e94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d1ea      	bne.n	8010e70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010e9a:	bf00      	nop
 8010e9c:	bf00      	nop
 8010e9e:	3710      	adds	r7, #16
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	0801d4c4 	.word	0x0801d4c4
 8010ea8:	0801dbf8 	.word	0x0801dbf8
 8010eac:	0801d508 	.word	0x0801d508

08010eb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d02a      	beq.n	8010f16 <tcp_netif_ip_addr_changed+0x66>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d026      	beq.n	8010f16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010ec8:	4b15      	ldr	r3, [pc, #84]	; (8010f20 <tcp_netif_ip_addr_changed+0x70>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7ff ffbc 	bl	8010e4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010ed4:	4b13      	ldr	r3, [pc, #76]	; (8010f24 <tcp_netif_ip_addr_changed+0x74>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4619      	mov	r1, r3
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff ffb6 	bl	8010e4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d017      	beq.n	8010f16 <tcp_netif_ip_addr_changed+0x66>
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d013      	beq.n	8010f16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010eee:	4b0e      	ldr	r3, [pc, #56]	; (8010f28 <tcp_netif_ip_addr_changed+0x78>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	60fb      	str	r3, [r7, #12]
 8010ef4:	e00c      	b.n	8010f10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d103      	bne.n	8010f0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	60fb      	str	r3, [r7, #12]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1ef      	bne.n	8010ef6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010f16:	bf00      	nop
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	2000c958 	.word	0x2000c958
 8010f24:	2000c950 	.word	0x2000c950
 8010f28:	2000c954 	.word	0x2000c954

08010f2c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d007      	beq.n	8010f4c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7ff fb89 	bl	8010658 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010f4c:	bf00      	nop
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010f54:	b590      	push	{r4, r7, lr}
 8010f56:	b08d      	sub	sp, #52	; 0x34
 8010f58:	af04      	add	r7, sp, #16
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d105      	bne.n	8010f70 <tcp_input+0x1c>
 8010f64:	4b9b      	ldr	r3, [pc, #620]	; (80111d4 <tcp_input+0x280>)
 8010f66:	2283      	movs	r2, #131	; 0x83
 8010f68:	499b      	ldr	r1, [pc, #620]	; (80111d8 <tcp_input+0x284>)
 8010f6a:	489c      	ldr	r0, [pc, #624]	; (80111dc <tcp_input+0x288>)
 8010f6c:	f00a fb06 	bl	801b57c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	4a9a      	ldr	r2, [pc, #616]	; (80111e0 <tcp_input+0x28c>)
 8010f76:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	895b      	ldrh	r3, [r3, #10]
 8010f7c:	2b13      	cmp	r3, #19
 8010f7e:	f240 83d1 	bls.w	8011724 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010f82:	4b98      	ldr	r3, [pc, #608]	; (80111e4 <tcp_input+0x290>)
 8010f84:	695b      	ldr	r3, [r3, #20]
 8010f86:	4a97      	ldr	r2, [pc, #604]	; (80111e4 <tcp_input+0x290>)
 8010f88:	6812      	ldr	r2, [r2, #0]
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f008 fa75 	bl	801947c <ip4_addr_isbroadcast_u32>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f040 83c7 	bne.w	8011728 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f9a:	4b92      	ldr	r3, [pc, #584]	; (80111e4 <tcp_input+0x290>)
 8010f9c:	695b      	ldr	r3, [r3, #20]
 8010f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010fa2:	2be0      	cmp	r3, #224	; 0xe0
 8010fa4:	f000 83c0 	beq.w	8011728 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010fa8:	4b8d      	ldr	r3, [pc, #564]	; (80111e0 <tcp_input+0x28c>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	899b      	ldrh	r3, [r3, #12]
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fc fa1d 	bl	800d3f0 <lwip_htons>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	0b1b      	lsrs	r3, r3, #12
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010fc2:	7cbb      	ldrb	r3, [r7, #18]
 8010fc4:	2b13      	cmp	r3, #19
 8010fc6:	f240 83b1 	bls.w	801172c <tcp_input+0x7d8>
 8010fca:	7cbb      	ldrb	r3, [r7, #18]
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	891b      	ldrh	r3, [r3, #8]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	f200 83aa 	bhi.w	801172c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010fd8:	7cbb      	ldrb	r3, [r7, #18]
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	3b14      	subs	r3, #20
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	4b81      	ldr	r3, [pc, #516]	; (80111e8 <tcp_input+0x294>)
 8010fe2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010fe4:	4b81      	ldr	r3, [pc, #516]	; (80111ec <tcp_input+0x298>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	895a      	ldrh	r2, [r3, #10]
 8010fee:	7cbb      	ldrb	r3, [r7, #18]
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d309      	bcc.n	801100a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010ff6:	4b7c      	ldr	r3, [pc, #496]	; (80111e8 <tcp_input+0x294>)
 8010ff8:	881a      	ldrh	r2, [r3, #0]
 8010ffa:	4b7d      	ldr	r3, [pc, #500]	; (80111f0 <tcp_input+0x29c>)
 8010ffc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010ffe:	7cbb      	ldrb	r3, [r7, #18]
 8011000:	4619      	mov	r1, r3
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f7fd fdd2 	bl	800ebac <pbuf_remove_header>
 8011008:	e04e      	b.n	80110a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d105      	bne.n	801101e <tcp_input+0xca>
 8011012:	4b70      	ldr	r3, [pc, #448]	; (80111d4 <tcp_input+0x280>)
 8011014:	22c2      	movs	r2, #194	; 0xc2
 8011016:	4977      	ldr	r1, [pc, #476]	; (80111f4 <tcp_input+0x2a0>)
 8011018:	4870      	ldr	r0, [pc, #448]	; (80111dc <tcp_input+0x288>)
 801101a:	f00a faaf 	bl	801b57c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801101e:	2114      	movs	r1, #20
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7fd fdc3 	bl	800ebac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	895a      	ldrh	r2, [r3, #10]
 801102a:	4b71      	ldr	r3, [pc, #452]	; (80111f0 <tcp_input+0x29c>)
 801102c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801102e:	4b6e      	ldr	r3, [pc, #440]	; (80111e8 <tcp_input+0x294>)
 8011030:	881a      	ldrh	r2, [r3, #0]
 8011032:	4b6f      	ldr	r3, [pc, #444]	; (80111f0 <tcp_input+0x29c>)
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	1ad3      	subs	r3, r2, r3
 8011038:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801103a:	4b6d      	ldr	r3, [pc, #436]	; (80111f0 <tcp_input+0x29c>)
 801103c:	881b      	ldrh	r3, [r3, #0]
 801103e:	4619      	mov	r1, r3
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7fd fdb3 	bl	800ebac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	895b      	ldrh	r3, [r3, #10]
 801104c:	8a3a      	ldrh	r2, [r7, #16]
 801104e:	429a      	cmp	r2, r3
 8011050:	f200 836e 	bhi.w	8011730 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	4a64      	ldr	r2, [pc, #400]	; (80111ec <tcp_input+0x298>)
 801105c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	8a3a      	ldrh	r2, [r7, #16]
 8011064:	4611      	mov	r1, r2
 8011066:	4618      	mov	r0, r3
 8011068:	f7fd fda0 	bl	800ebac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	891a      	ldrh	r2, [r3, #8]
 8011070:	8a3b      	ldrh	r3, [r7, #16]
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	b29a      	uxth	r2, r3
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	895b      	ldrh	r3, [r3, #10]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d005      	beq.n	801108e <tcp_input+0x13a>
 8011082:	4b54      	ldr	r3, [pc, #336]	; (80111d4 <tcp_input+0x280>)
 8011084:	22df      	movs	r2, #223	; 0xdf
 8011086:	495c      	ldr	r1, [pc, #368]	; (80111f8 <tcp_input+0x2a4>)
 8011088:	4854      	ldr	r0, [pc, #336]	; (80111dc <tcp_input+0x288>)
 801108a:	f00a fa77 	bl	801b57c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	891a      	ldrh	r2, [r3, #8]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	891b      	ldrh	r3, [r3, #8]
 8011098:	429a      	cmp	r2, r3
 801109a:	d005      	beq.n	80110a8 <tcp_input+0x154>
 801109c:	4b4d      	ldr	r3, [pc, #308]	; (80111d4 <tcp_input+0x280>)
 801109e:	22e0      	movs	r2, #224	; 0xe0
 80110a0:	4956      	ldr	r1, [pc, #344]	; (80111fc <tcp_input+0x2a8>)
 80110a2:	484e      	ldr	r0, [pc, #312]	; (80111dc <tcp_input+0x288>)
 80110a4:	f00a fa6a 	bl	801b57c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80110a8:	4b4d      	ldr	r3, [pc, #308]	; (80111e0 <tcp_input+0x28c>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	881b      	ldrh	r3, [r3, #0]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	4a4b      	ldr	r2, [pc, #300]	; (80111e0 <tcp_input+0x28c>)
 80110b2:	6814      	ldr	r4, [r2, #0]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fc f99b 	bl	800d3f0 <lwip_htons>
 80110ba:	4603      	mov	r3, r0
 80110bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80110be:	4b48      	ldr	r3, [pc, #288]	; (80111e0 <tcp_input+0x28c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	885b      	ldrh	r3, [r3, #2]
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	4a46      	ldr	r2, [pc, #280]	; (80111e0 <tcp_input+0x28c>)
 80110c8:	6814      	ldr	r4, [r2, #0]
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fc f990 	bl	800d3f0 <lwip_htons>
 80110d0:	4603      	mov	r3, r0
 80110d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80110d4:	4b42      	ldr	r3, [pc, #264]	; (80111e0 <tcp_input+0x28c>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	4a41      	ldr	r2, [pc, #260]	; (80111e0 <tcp_input+0x28c>)
 80110dc:	6814      	ldr	r4, [r2, #0]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fc f99a 	bl	800d418 <lwip_htonl>
 80110e4:	4603      	mov	r3, r0
 80110e6:	6063      	str	r3, [r4, #4]
 80110e8:	6863      	ldr	r3, [r4, #4]
 80110ea:	4a45      	ldr	r2, [pc, #276]	; (8011200 <tcp_input+0x2ac>)
 80110ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80110ee:	4b3c      	ldr	r3, [pc, #240]	; (80111e0 <tcp_input+0x28c>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	4a3a      	ldr	r2, [pc, #232]	; (80111e0 <tcp_input+0x28c>)
 80110f6:	6814      	ldr	r4, [r2, #0]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fc f98d 	bl	800d418 <lwip_htonl>
 80110fe:	4603      	mov	r3, r0
 8011100:	60a3      	str	r3, [r4, #8]
 8011102:	68a3      	ldr	r3, [r4, #8]
 8011104:	4a3f      	ldr	r2, [pc, #252]	; (8011204 <tcp_input+0x2b0>)
 8011106:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011108:	4b35      	ldr	r3, [pc, #212]	; (80111e0 <tcp_input+0x28c>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	89db      	ldrh	r3, [r3, #14]
 801110e:	b29b      	uxth	r3, r3
 8011110:	4a33      	ldr	r2, [pc, #204]	; (80111e0 <tcp_input+0x28c>)
 8011112:	6814      	ldr	r4, [r2, #0]
 8011114:	4618      	mov	r0, r3
 8011116:	f7fc f96b 	bl	800d3f0 <lwip_htons>
 801111a:	4603      	mov	r3, r0
 801111c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801111e:	4b30      	ldr	r3, [pc, #192]	; (80111e0 <tcp_input+0x28c>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	899b      	ldrh	r3, [r3, #12]
 8011124:	b29b      	uxth	r3, r3
 8011126:	4618      	mov	r0, r3
 8011128:	f7fc f962 	bl	800d3f0 <lwip_htons>
 801112c:	4603      	mov	r3, r0
 801112e:	b2db      	uxtb	r3, r3
 8011130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011134:	b2da      	uxtb	r2, r3
 8011136:	4b34      	ldr	r3, [pc, #208]	; (8011208 <tcp_input+0x2b4>)
 8011138:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	891a      	ldrh	r2, [r3, #8]
 801113e:	4b33      	ldr	r3, [pc, #204]	; (801120c <tcp_input+0x2b8>)
 8011140:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011142:	4b31      	ldr	r3, [pc, #196]	; (8011208 <tcp_input+0x2b4>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	f003 0303 	and.w	r3, r3, #3
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00c      	beq.n	8011168 <tcp_input+0x214>
    tcplen++;
 801114e:	4b2f      	ldr	r3, [pc, #188]	; (801120c <tcp_input+0x2b8>)
 8011150:	881b      	ldrh	r3, [r3, #0]
 8011152:	3301      	adds	r3, #1
 8011154:	b29a      	uxth	r2, r3
 8011156:	4b2d      	ldr	r3, [pc, #180]	; (801120c <tcp_input+0x2b8>)
 8011158:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	891a      	ldrh	r2, [r3, #8]
 801115e:	4b2b      	ldr	r3, [pc, #172]	; (801120c <tcp_input+0x2b8>)
 8011160:	881b      	ldrh	r3, [r3, #0]
 8011162:	429a      	cmp	r2, r3
 8011164:	f200 82e6 	bhi.w	8011734 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011168:	2300      	movs	r3, #0
 801116a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801116c:	4b28      	ldr	r3, [pc, #160]	; (8011210 <tcp_input+0x2bc>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	61fb      	str	r3, [r7, #28]
 8011172:	e09d      	b.n	80112b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	7d1b      	ldrb	r3, [r3, #20]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d105      	bne.n	8011188 <tcp_input+0x234>
 801117c:	4b15      	ldr	r3, [pc, #84]	; (80111d4 <tcp_input+0x280>)
 801117e:	22fb      	movs	r2, #251	; 0xfb
 8011180:	4924      	ldr	r1, [pc, #144]	; (8011214 <tcp_input+0x2c0>)
 8011182:	4816      	ldr	r0, [pc, #88]	; (80111dc <tcp_input+0x288>)
 8011184:	f00a f9fa 	bl	801b57c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	7d1b      	ldrb	r3, [r3, #20]
 801118c:	2b0a      	cmp	r3, #10
 801118e:	d105      	bne.n	801119c <tcp_input+0x248>
 8011190:	4b10      	ldr	r3, [pc, #64]	; (80111d4 <tcp_input+0x280>)
 8011192:	22fc      	movs	r2, #252	; 0xfc
 8011194:	4920      	ldr	r1, [pc, #128]	; (8011218 <tcp_input+0x2c4>)
 8011196:	4811      	ldr	r0, [pc, #68]	; (80111dc <tcp_input+0x288>)
 8011198:	f00a f9f0 	bl	801b57c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	7d1b      	ldrb	r3, [r3, #20]
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d105      	bne.n	80111b0 <tcp_input+0x25c>
 80111a4:	4b0b      	ldr	r3, [pc, #44]	; (80111d4 <tcp_input+0x280>)
 80111a6:	22fd      	movs	r2, #253	; 0xfd
 80111a8:	491c      	ldr	r1, [pc, #112]	; (801121c <tcp_input+0x2c8>)
 80111aa:	480c      	ldr	r0, [pc, #48]	; (80111dc <tcp_input+0x288>)
 80111ac:	f00a f9e6 	bl	801b57c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	7a1b      	ldrb	r3, [r3, #8]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d033      	beq.n	8011220 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80111b8:	69fb      	ldr	r3, [r7, #28]
 80111ba:	7a1a      	ldrb	r2, [r3, #8]
 80111bc:	4b09      	ldr	r3, [pc, #36]	; (80111e4 <tcp_input+0x290>)
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80111c4:	3301      	adds	r3, #1
 80111c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d029      	beq.n	8011220 <tcp_input+0x2cc>
      prev = pcb;
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	61bb      	str	r3, [r7, #24]
      continue;
 80111d0:	e06b      	b.n	80112aa <tcp_input+0x356>
 80111d2:	bf00      	nop
 80111d4:	0801dc2c 	.word	0x0801dc2c
 80111d8:	0801dc60 	.word	0x0801dc60
 80111dc:	0801dc78 	.word	0x0801dc78
 80111e0:	2000c974 	.word	0x2000c974
 80111e4:	2000982c 	.word	0x2000982c
 80111e8:	2000c978 	.word	0x2000c978
 80111ec:	2000c97c 	.word	0x2000c97c
 80111f0:	2000c97a 	.word	0x2000c97a
 80111f4:	0801dca0 	.word	0x0801dca0
 80111f8:	0801dcb0 	.word	0x0801dcb0
 80111fc:	0801dcbc 	.word	0x0801dcbc
 8011200:	2000c984 	.word	0x2000c984
 8011204:	2000c988 	.word	0x2000c988
 8011208:	2000c990 	.word	0x2000c990
 801120c:	2000c98e 	.word	0x2000c98e
 8011210:	2000c958 	.word	0x2000c958
 8011214:	0801dcdc 	.word	0x0801dcdc
 8011218:	0801dd04 	.word	0x0801dd04
 801121c:	0801dd30 	.word	0x0801dd30
    }

    if (pcb->remote_port == tcphdr->src &&
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	8b1a      	ldrh	r2, [r3, #24]
 8011224:	4b72      	ldr	r3, [pc, #456]	; (80113f0 <tcp_input+0x49c>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	b29b      	uxth	r3, r3
 801122c:	429a      	cmp	r2, r3
 801122e:	d13a      	bne.n	80112a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	8ada      	ldrh	r2, [r3, #22]
 8011234:	4b6e      	ldr	r3, [pc, #440]	; (80113f0 <tcp_input+0x49c>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	885b      	ldrh	r3, [r3, #2]
 801123a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801123c:	429a      	cmp	r2, r3
 801123e:	d132      	bne.n	80112a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	685a      	ldr	r2, [r3, #4]
 8011244:	4b6b      	ldr	r3, [pc, #428]	; (80113f4 <tcp_input+0x4a0>)
 8011246:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011248:	429a      	cmp	r2, r3
 801124a:	d12c      	bne.n	80112a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801124c:	69fb      	ldr	r3, [r7, #28]
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	4b68      	ldr	r3, [pc, #416]	; (80113f4 <tcp_input+0x4a0>)
 8011252:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011254:	429a      	cmp	r2, r3
 8011256:	d126      	bne.n	80112a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	69fa      	ldr	r2, [r7, #28]
 801125e:	429a      	cmp	r2, r3
 8011260:	d106      	bne.n	8011270 <tcp_input+0x31c>
 8011262:	4b65      	ldr	r3, [pc, #404]	; (80113f8 <tcp_input+0x4a4>)
 8011264:	f240 120d 	movw	r2, #269	; 0x10d
 8011268:	4964      	ldr	r1, [pc, #400]	; (80113fc <tcp_input+0x4a8>)
 801126a:	4865      	ldr	r0, [pc, #404]	; (8011400 <tcp_input+0x4ac>)
 801126c:	f00a f986 	bl	801b57c <iprintf>
      if (prev != NULL) {
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00a      	beq.n	801128c <tcp_input+0x338>
        prev->next = pcb->next;
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	68da      	ldr	r2, [r3, #12]
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801127e:	4b61      	ldr	r3, [pc, #388]	; (8011404 <tcp_input+0x4b0>)
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011286:	4a5f      	ldr	r2, [pc, #380]	; (8011404 <tcp_input+0x4b0>)
 8011288:	69fb      	ldr	r3, [r7, #28]
 801128a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801128c:	69fb      	ldr	r3, [r7, #28]
 801128e:	68db      	ldr	r3, [r3, #12]
 8011290:	69fa      	ldr	r2, [r7, #28]
 8011292:	429a      	cmp	r2, r3
 8011294:	d111      	bne.n	80112ba <tcp_input+0x366>
 8011296:	4b58      	ldr	r3, [pc, #352]	; (80113f8 <tcp_input+0x4a4>)
 8011298:	f240 1215 	movw	r2, #277	; 0x115
 801129c:	495a      	ldr	r1, [pc, #360]	; (8011408 <tcp_input+0x4b4>)
 801129e:	4858      	ldr	r0, [pc, #352]	; (8011400 <tcp_input+0x4ac>)
 80112a0:	f00a f96c 	bl	801b57c <iprintf>
      break;
 80112a4:	e009      	b.n	80112ba <tcp_input+0x366>
    }
    prev = pcb;
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	61fb      	str	r3, [r7, #28]
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f47f af5e 	bne.w	8011174 <tcp_input+0x220>
 80112b8:	e000      	b.n	80112bc <tcp_input+0x368>
      break;
 80112ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f040 80aa 	bne.w	8011418 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80112c4:	4b51      	ldr	r3, [pc, #324]	; (801140c <tcp_input+0x4b8>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	61fb      	str	r3, [r7, #28]
 80112ca:	e03f      	b.n	801134c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	7d1b      	ldrb	r3, [r3, #20]
 80112d0:	2b0a      	cmp	r3, #10
 80112d2:	d006      	beq.n	80112e2 <tcp_input+0x38e>
 80112d4:	4b48      	ldr	r3, [pc, #288]	; (80113f8 <tcp_input+0x4a4>)
 80112d6:	f240 121f 	movw	r2, #287	; 0x11f
 80112da:	494d      	ldr	r1, [pc, #308]	; (8011410 <tcp_input+0x4bc>)
 80112dc:	4848      	ldr	r0, [pc, #288]	; (8011400 <tcp_input+0x4ac>)
 80112de:	f00a f94d 	bl	801b57c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	7a1b      	ldrb	r3, [r3, #8]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d009      	beq.n	80112fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	7a1a      	ldrb	r2, [r3, #8]
 80112ee:	4b41      	ldr	r3, [pc, #260]	; (80113f4 <tcp_input+0x4a0>)
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80112f6:	3301      	adds	r3, #1
 80112f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d122      	bne.n	8011344 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	8b1a      	ldrh	r2, [r3, #24]
 8011302:	4b3b      	ldr	r3, [pc, #236]	; (80113f0 <tcp_input+0x49c>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	881b      	ldrh	r3, [r3, #0]
 8011308:	b29b      	uxth	r3, r3
 801130a:	429a      	cmp	r2, r3
 801130c:	d11b      	bne.n	8011346 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801130e:	69fb      	ldr	r3, [r7, #28]
 8011310:	8ada      	ldrh	r2, [r3, #22]
 8011312:	4b37      	ldr	r3, [pc, #220]	; (80113f0 <tcp_input+0x49c>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	885b      	ldrh	r3, [r3, #2]
 8011318:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801131a:	429a      	cmp	r2, r3
 801131c:	d113      	bne.n	8011346 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	685a      	ldr	r2, [r3, #4]
 8011322:	4b34      	ldr	r3, [pc, #208]	; (80113f4 <tcp_input+0x4a0>)
 8011324:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011326:	429a      	cmp	r2, r3
 8011328:	d10d      	bne.n	8011346 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801132a:	69fb      	ldr	r3, [r7, #28]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	4b31      	ldr	r3, [pc, #196]	; (80113f4 <tcp_input+0x4a0>)
 8011330:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011332:	429a      	cmp	r2, r3
 8011334:	d107      	bne.n	8011346 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011336:	69f8      	ldr	r0, [r7, #28]
 8011338:	f000 fb56 	bl	80119e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7fd fcbb 	bl	800ecb8 <pbuf_free>
        return;
 8011342:	e1fd      	b.n	8011740 <tcp_input+0x7ec>
        continue;
 8011344:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	61fb      	str	r3, [r7, #28]
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d1bc      	bne.n	80112cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011352:	2300      	movs	r3, #0
 8011354:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011356:	4b2f      	ldr	r3, [pc, #188]	; (8011414 <tcp_input+0x4c0>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	617b      	str	r3, [r7, #20]
 801135c:	e02a      	b.n	80113b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	7a1b      	ldrb	r3, [r3, #8]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00c      	beq.n	8011380 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	7a1a      	ldrb	r2, [r3, #8]
 801136a:	4b22      	ldr	r3, [pc, #136]	; (80113f4 <tcp_input+0x4a0>)
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011372:	3301      	adds	r3, #1
 8011374:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011376:	429a      	cmp	r2, r3
 8011378:	d002      	beq.n	8011380 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	61bb      	str	r3, [r7, #24]
        continue;
 801137e:	e016      	b.n	80113ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	8ada      	ldrh	r2, [r3, #22]
 8011384:	4b1a      	ldr	r3, [pc, #104]	; (80113f0 <tcp_input+0x49c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	885b      	ldrh	r3, [r3, #2]
 801138a:	b29b      	uxth	r3, r3
 801138c:	429a      	cmp	r2, r3
 801138e:	d10c      	bne.n	80113aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	4b17      	ldr	r3, [pc, #92]	; (80113f4 <tcp_input+0x4a0>)
 8011396:	695b      	ldr	r3, [r3, #20]
 8011398:	429a      	cmp	r2, r3
 801139a:	d00f      	beq.n	80113bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00d      	beq.n	80113be <tcp_input+0x46a>
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d009      	beq.n	80113be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	617b      	str	r3, [r7, #20]
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d1d1      	bne.n	801135e <tcp_input+0x40a>
 80113ba:	e000      	b.n	80113be <tcp_input+0x46a>
            break;
 80113bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d029      	beq.n	8011418 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00a      	beq.n	80113e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	68da      	ldr	r2, [r3, #12]
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80113d2:	4b10      	ldr	r3, [pc, #64]	; (8011414 <tcp_input+0x4c0>)
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80113da:	4a0e      	ldr	r2, [pc, #56]	; (8011414 <tcp_input+0x4c0>)
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80113e0:	6978      	ldr	r0, [r7, #20]
 80113e2:	f000 fa03 	bl	80117ec <tcp_listen_input>
      }
      pbuf_free(p);
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f7fd fc66 	bl	800ecb8 <pbuf_free>
      return;
 80113ec:	e1a8      	b.n	8011740 <tcp_input+0x7ec>
 80113ee:	bf00      	nop
 80113f0:	2000c974 	.word	0x2000c974
 80113f4:	2000982c 	.word	0x2000982c
 80113f8:	0801dc2c 	.word	0x0801dc2c
 80113fc:	0801dd58 	.word	0x0801dd58
 8011400:	0801dc78 	.word	0x0801dc78
 8011404:	2000c958 	.word	0x2000c958
 8011408:	0801dd84 	.word	0x0801dd84
 801140c:	2000c95c 	.word	0x2000c95c
 8011410:	0801ddb0 	.word	0x0801ddb0
 8011414:	2000c954 	.word	0x2000c954
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	f000 8158 	beq.w	80116d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011420:	4b95      	ldr	r3, [pc, #596]	; (8011678 <tcp_input+0x724>)
 8011422:	2200      	movs	r2, #0
 8011424:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	891a      	ldrh	r2, [r3, #8]
 801142a:	4b93      	ldr	r3, [pc, #588]	; (8011678 <tcp_input+0x724>)
 801142c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801142e:	4a92      	ldr	r2, [pc, #584]	; (8011678 <tcp_input+0x724>)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011434:	4b91      	ldr	r3, [pc, #580]	; (801167c <tcp_input+0x728>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a8f      	ldr	r2, [pc, #572]	; (8011678 <tcp_input+0x724>)
 801143a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801143c:	4b90      	ldr	r3, [pc, #576]	; (8011680 <tcp_input+0x72c>)
 801143e:	2200      	movs	r2, #0
 8011440:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011442:	4b90      	ldr	r3, [pc, #576]	; (8011684 <tcp_input+0x730>)
 8011444:	2200      	movs	r2, #0
 8011446:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011448:	4b8f      	ldr	r3, [pc, #572]	; (8011688 <tcp_input+0x734>)
 801144a:	2200      	movs	r2, #0
 801144c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801144e:	4b8f      	ldr	r3, [pc, #572]	; (801168c <tcp_input+0x738>)
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	f003 0308 	and.w	r3, r3, #8
 8011456:	2b00      	cmp	r3, #0
 8011458:	d006      	beq.n	8011468 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	7b5b      	ldrb	r3, [r3, #13]
 801145e:	f043 0301 	orr.w	r3, r3, #1
 8011462:	b2da      	uxtb	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801146c:	2b00      	cmp	r3, #0
 801146e:	d017      	beq.n	80114a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011470:	69f8      	ldr	r0, [r7, #28]
 8011472:	f7ff f875 	bl	8010560 <tcp_process_refused_data>
 8011476:	4603      	mov	r3, r0
 8011478:	f113 0f0d 	cmn.w	r3, #13
 801147c:	d007      	beq.n	801148e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011482:	2b00      	cmp	r3, #0
 8011484:	d00c      	beq.n	80114a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011486:	4b82      	ldr	r3, [pc, #520]	; (8011690 <tcp_input+0x73c>)
 8011488:	881b      	ldrh	r3, [r3, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d008      	beq.n	80114a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011492:	2b00      	cmp	r3, #0
 8011494:	f040 80e3 	bne.w	801165e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011498:	69f8      	ldr	r0, [r7, #28]
 801149a:	f003 fe05 	bl	80150a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801149e:	e0de      	b.n	801165e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80114a0:	4a7c      	ldr	r2, [pc, #496]	; (8011694 <tcp_input+0x740>)
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80114a6:	69f8      	ldr	r0, [r7, #28]
 80114a8:	f000 fb18 	bl	8011adc <tcp_process>
 80114ac:	4603      	mov	r3, r0
 80114ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80114b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114b4:	f113 0f0d 	cmn.w	r3, #13
 80114b8:	f000 80d3 	beq.w	8011662 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80114bc:	4b71      	ldr	r3, [pc, #452]	; (8011684 <tcp_input+0x730>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	f003 0308 	and.w	r3, r3, #8
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d015      	beq.n	80114f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d008      	beq.n	80114e4 <tcp_input+0x590>
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114d8:	69fa      	ldr	r2, [r7, #28]
 80114da:	6912      	ldr	r2, [r2, #16]
 80114dc:	f06f 010d 	mvn.w	r1, #13
 80114e0:	4610      	mov	r0, r2
 80114e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80114e4:	69f9      	ldr	r1, [r7, #28]
 80114e6:	486c      	ldr	r0, [pc, #432]	; (8011698 <tcp_input+0x744>)
 80114e8:	f7ff fbbc 	bl	8010c64 <tcp_pcb_remove>
        tcp_free(pcb);
 80114ec:	69f8      	ldr	r0, [r7, #28]
 80114ee:	f7fd feff 	bl	800f2f0 <tcp_free>
 80114f2:	e0da      	b.n	80116aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80114f8:	4b63      	ldr	r3, [pc, #396]	; (8011688 <tcp_input+0x734>)
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d01d      	beq.n	801153c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011500:	4b61      	ldr	r3, [pc, #388]	; (8011688 <tcp_input+0x734>)
 8011502:	881b      	ldrh	r3, [r3, #0]
 8011504:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801150c:	2b00      	cmp	r3, #0
 801150e:	d00a      	beq.n	8011526 <tcp_input+0x5d2>
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011516:	69fa      	ldr	r2, [r7, #28]
 8011518:	6910      	ldr	r0, [r2, #16]
 801151a:	89fa      	ldrh	r2, [r7, #14]
 801151c:	69f9      	ldr	r1, [r7, #28]
 801151e:	4798      	blx	r3
 8011520:	4603      	mov	r3, r0
 8011522:	74fb      	strb	r3, [r7, #19]
 8011524:	e001      	b.n	801152a <tcp_input+0x5d6>
 8011526:	2300      	movs	r3, #0
 8011528:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801152a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801152e:	f113 0f0d 	cmn.w	r3, #13
 8011532:	f000 8098 	beq.w	8011666 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011536:	4b54      	ldr	r3, [pc, #336]	; (8011688 <tcp_input+0x734>)
 8011538:	2200      	movs	r2, #0
 801153a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801153c:	69f8      	ldr	r0, [r7, #28]
 801153e:	f000 f915 	bl	801176c <tcp_input_delayed_close>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	f040 8090 	bne.w	801166a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801154a:	4b4d      	ldr	r3, [pc, #308]	; (8011680 <tcp_input+0x72c>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d041      	beq.n	80115d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011552:	69fb      	ldr	r3, [r7, #28]
 8011554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011556:	2b00      	cmp	r3, #0
 8011558:	d006      	beq.n	8011568 <tcp_input+0x614>
 801155a:	4b50      	ldr	r3, [pc, #320]	; (801169c <tcp_input+0x748>)
 801155c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011560:	494f      	ldr	r1, [pc, #316]	; (80116a0 <tcp_input+0x74c>)
 8011562:	4850      	ldr	r0, [pc, #320]	; (80116a4 <tcp_input+0x750>)
 8011564:	f00a f80a 	bl	801b57c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	8b5b      	ldrh	r3, [r3, #26]
 801156c:	f003 0310 	and.w	r3, r3, #16
 8011570:	2b00      	cmp	r3, #0
 8011572:	d008      	beq.n	8011586 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011574:	4b42      	ldr	r3, [pc, #264]	; (8011680 <tcp_input+0x72c>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4618      	mov	r0, r3
 801157a:	f7fd fb9d 	bl	800ecb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801157e:	69f8      	ldr	r0, [r7, #28]
 8011580:	f7fe f99e 	bl	800f8c0 <tcp_abort>
            goto aborted;
 8011584:	e091      	b.n	80116aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00c      	beq.n	80115aa <tcp_input+0x656>
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	6918      	ldr	r0, [r3, #16]
 801159a:	4b39      	ldr	r3, [pc, #228]	; (8011680 <tcp_input+0x72c>)
 801159c:	681a      	ldr	r2, [r3, #0]
 801159e:	2300      	movs	r3, #0
 80115a0:	69f9      	ldr	r1, [r7, #28]
 80115a2:	47a0      	blx	r4
 80115a4:	4603      	mov	r3, r0
 80115a6:	74fb      	strb	r3, [r7, #19]
 80115a8:	e008      	b.n	80115bc <tcp_input+0x668>
 80115aa:	4b35      	ldr	r3, [pc, #212]	; (8011680 <tcp_input+0x72c>)
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	2300      	movs	r3, #0
 80115b0:	69f9      	ldr	r1, [r7, #28]
 80115b2:	2000      	movs	r0, #0
 80115b4:	f7ff f8aa 	bl	801070c <tcp_recv_null>
 80115b8:	4603      	mov	r3, r0
 80115ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80115bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115c0:	f113 0f0d 	cmn.w	r3, #13
 80115c4:	d053      	beq.n	801166e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80115c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d003      	beq.n	80115d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80115ce:	4b2c      	ldr	r3, [pc, #176]	; (8011680 <tcp_input+0x72c>)
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80115d6:	4b2b      	ldr	r3, [pc, #172]	; (8011684 <tcp_input+0x730>)
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	f003 0320 	and.w	r3, r3, #32
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d030      	beq.n	8011644 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d009      	beq.n	80115fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115ee:	7b5a      	ldrb	r2, [r3, #13]
 80115f0:	69fb      	ldr	r3, [r7, #28]
 80115f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115f4:	f042 0220 	orr.w	r2, r2, #32
 80115f8:	b2d2      	uxtb	r2, r2
 80115fa:	735a      	strb	r2, [r3, #13]
 80115fc:	e022      	b.n	8011644 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011602:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011606:	d005      	beq.n	8011614 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801160c:	3301      	adds	r3, #1
 801160e:	b29a      	uxth	r2, r3
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00b      	beq.n	8011636 <tcp_input+0x6e2>
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	6918      	ldr	r0, [r3, #16]
 8011628:	2300      	movs	r3, #0
 801162a:	2200      	movs	r2, #0
 801162c:	69f9      	ldr	r1, [r7, #28]
 801162e:	47a0      	blx	r4
 8011630:	4603      	mov	r3, r0
 8011632:	74fb      	strb	r3, [r7, #19]
 8011634:	e001      	b.n	801163a <tcp_input+0x6e6>
 8011636:	2300      	movs	r3, #0
 8011638:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801163a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801163e:	f113 0f0d 	cmn.w	r3, #13
 8011642:	d016      	beq.n	8011672 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011644:	4b13      	ldr	r3, [pc, #76]	; (8011694 <tcp_input+0x740>)
 8011646:	2200      	movs	r2, #0
 8011648:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801164a:	69f8      	ldr	r0, [r7, #28]
 801164c:	f000 f88e 	bl	801176c <tcp_input_delayed_close>
 8011650:	4603      	mov	r3, r0
 8011652:	2b00      	cmp	r3, #0
 8011654:	d128      	bne.n	80116a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011656:	69f8      	ldr	r0, [r7, #28]
 8011658:	f002 ff20 	bl	801449c <tcp_output>
 801165c:	e025      	b.n	80116aa <tcp_input+0x756>
        goto aborted;
 801165e:	bf00      	nop
 8011660:	e023      	b.n	80116aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011662:	bf00      	nop
 8011664:	e021      	b.n	80116aa <tcp_input+0x756>
              goto aborted;
 8011666:	bf00      	nop
 8011668:	e01f      	b.n	80116aa <tcp_input+0x756>
          goto aborted;
 801166a:	bf00      	nop
 801166c:	e01d      	b.n	80116aa <tcp_input+0x756>
            goto aborted;
 801166e:	bf00      	nop
 8011670:	e01b      	b.n	80116aa <tcp_input+0x756>
              goto aborted;
 8011672:	bf00      	nop
 8011674:	e019      	b.n	80116aa <tcp_input+0x756>
 8011676:	bf00      	nop
 8011678:	2000c964 	.word	0x2000c964
 801167c:	2000c974 	.word	0x2000c974
 8011680:	2000c994 	.word	0x2000c994
 8011684:	2000c991 	.word	0x2000c991
 8011688:	2000c98c 	.word	0x2000c98c
 801168c:	2000c990 	.word	0x2000c990
 8011690:	2000c98e 	.word	0x2000c98e
 8011694:	2000c998 	.word	0x2000c998
 8011698:	2000c958 	.word	0x2000c958
 801169c:	0801dc2c 	.word	0x0801dc2c
 80116a0:	0801dde0 	.word	0x0801dde0
 80116a4:	0801dc78 	.word	0x0801dc78
          goto aborted;
 80116a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80116aa:	4b27      	ldr	r3, [pc, #156]	; (8011748 <tcp_input+0x7f4>)
 80116ac:	2200      	movs	r2, #0
 80116ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80116b0:	4b26      	ldr	r3, [pc, #152]	; (801174c <tcp_input+0x7f8>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80116b6:	4b26      	ldr	r3, [pc, #152]	; (8011750 <tcp_input+0x7fc>)
 80116b8:	685b      	ldr	r3, [r3, #4]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d03f      	beq.n	801173e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80116be:	4b24      	ldr	r3, [pc, #144]	; (8011750 <tcp_input+0x7fc>)
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fd faf8 	bl	800ecb8 <pbuf_free>
      inseg.p = NULL;
 80116c8:	4b21      	ldr	r3, [pc, #132]	; (8011750 <tcp_input+0x7fc>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80116ce:	e036      	b.n	801173e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80116d0:	4b20      	ldr	r3, [pc, #128]	; (8011754 <tcp_input+0x800>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	899b      	ldrh	r3, [r3, #12]
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fb fe89 	bl	800d3f0 <lwip_htons>
 80116de:	4603      	mov	r3, r0
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	f003 0304 	and.w	r3, r3, #4
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d118      	bne.n	801171c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116ea:	4b1b      	ldr	r3, [pc, #108]	; (8011758 <tcp_input+0x804>)
 80116ec:	6819      	ldr	r1, [r3, #0]
 80116ee:	4b1b      	ldr	r3, [pc, #108]	; (801175c <tcp_input+0x808>)
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	461a      	mov	r2, r3
 80116f4:	4b1a      	ldr	r3, [pc, #104]	; (8011760 <tcp_input+0x80c>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116fa:	4b16      	ldr	r3, [pc, #88]	; (8011754 <tcp_input+0x800>)
 80116fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116fe:	885b      	ldrh	r3, [r3, #2]
 8011700:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011702:	4a14      	ldr	r2, [pc, #80]	; (8011754 <tcp_input+0x800>)
 8011704:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011706:	8812      	ldrh	r2, [r2, #0]
 8011708:	b292      	uxth	r2, r2
 801170a:	9202      	str	r2, [sp, #8]
 801170c:	9301      	str	r3, [sp, #4]
 801170e:	4b15      	ldr	r3, [pc, #84]	; (8011764 <tcp_input+0x810>)
 8011710:	9300      	str	r3, [sp, #0]
 8011712:	4b15      	ldr	r3, [pc, #84]	; (8011768 <tcp_input+0x814>)
 8011714:	4602      	mov	r2, r0
 8011716:	2000      	movs	r0, #0
 8011718:	f003 fc74 	bl	8015004 <tcp_rst>
    pbuf_free(p);
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f7fd facb 	bl	800ecb8 <pbuf_free>
  return;
 8011722:	e00c      	b.n	801173e <tcp_input+0x7ea>
    goto dropped;
 8011724:	bf00      	nop
 8011726:	e006      	b.n	8011736 <tcp_input+0x7e2>
    goto dropped;
 8011728:	bf00      	nop
 801172a:	e004      	b.n	8011736 <tcp_input+0x7e2>
    goto dropped;
 801172c:	bf00      	nop
 801172e:	e002      	b.n	8011736 <tcp_input+0x7e2>
      goto dropped;
 8011730:	bf00      	nop
 8011732:	e000      	b.n	8011736 <tcp_input+0x7e2>
      goto dropped;
 8011734:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f7fd fabe 	bl	800ecb8 <pbuf_free>
 801173c:	e000      	b.n	8011740 <tcp_input+0x7ec>
  return;
 801173e:	bf00      	nop
}
 8011740:	3724      	adds	r7, #36	; 0x24
 8011742:	46bd      	mov	sp, r7
 8011744:	bd90      	pop	{r4, r7, pc}
 8011746:	bf00      	nop
 8011748:	2000c998 	.word	0x2000c998
 801174c:	2000c994 	.word	0x2000c994
 8011750:	2000c964 	.word	0x2000c964
 8011754:	2000c974 	.word	0x2000c974
 8011758:	2000c988 	.word	0x2000c988
 801175c:	2000c98e 	.word	0x2000c98e
 8011760:	2000c984 	.word	0x2000c984
 8011764:	2000983c 	.word	0x2000983c
 8011768:	20009840 	.word	0x20009840

0801176c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d106      	bne.n	8011788 <tcp_input_delayed_close+0x1c>
 801177a:	4b17      	ldr	r3, [pc, #92]	; (80117d8 <tcp_input_delayed_close+0x6c>)
 801177c:	f240 225a 	movw	r2, #602	; 0x25a
 8011780:	4916      	ldr	r1, [pc, #88]	; (80117dc <tcp_input_delayed_close+0x70>)
 8011782:	4817      	ldr	r0, [pc, #92]	; (80117e0 <tcp_input_delayed_close+0x74>)
 8011784:	f009 fefa 	bl	801b57c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011788:	4b16      	ldr	r3, [pc, #88]	; (80117e4 <tcp_input_delayed_close+0x78>)
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f003 0310 	and.w	r3, r3, #16
 8011790:	2b00      	cmp	r3, #0
 8011792:	d01c      	beq.n	80117ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	8b5b      	ldrh	r3, [r3, #26]
 8011798:	f003 0310 	and.w	r3, r3, #16
 801179c:	2b00      	cmp	r3, #0
 801179e:	d10d      	bne.n	80117bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d008      	beq.n	80117bc <tcp_input_delayed_close+0x50>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	6912      	ldr	r2, [r2, #16]
 80117b4:	f06f 010e 	mvn.w	r1, #14
 80117b8:	4610      	mov	r0, r2
 80117ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80117bc:	6879      	ldr	r1, [r7, #4]
 80117be:	480a      	ldr	r0, [pc, #40]	; (80117e8 <tcp_input_delayed_close+0x7c>)
 80117c0:	f7ff fa50 	bl	8010c64 <tcp_pcb_remove>
    tcp_free(pcb);
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7fd fd93 	bl	800f2f0 <tcp_free>
    return 1;
 80117ca:	2301      	movs	r3, #1
 80117cc:	e000      	b.n	80117d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	0801dc2c 	.word	0x0801dc2c
 80117dc:	0801ddfc 	.word	0x0801ddfc
 80117e0:	0801dc78 	.word	0x0801dc78
 80117e4:	2000c991 	.word	0x2000c991
 80117e8:	2000c958 	.word	0x2000c958

080117ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80117ec:	b590      	push	{r4, r7, lr}
 80117ee:	b08b      	sub	sp, #44	; 0x2c
 80117f0:	af04      	add	r7, sp, #16
 80117f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80117f4:	4b6f      	ldr	r3, [pc, #444]	; (80119b4 <tcp_listen_input+0x1c8>)
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	f003 0304 	and.w	r3, r3, #4
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f040 80d2 	bne.w	80119a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d106      	bne.n	8011816 <tcp_listen_input+0x2a>
 8011808:	4b6b      	ldr	r3, [pc, #428]	; (80119b8 <tcp_listen_input+0x1cc>)
 801180a:	f240 2281 	movw	r2, #641	; 0x281
 801180e:	496b      	ldr	r1, [pc, #428]	; (80119bc <tcp_listen_input+0x1d0>)
 8011810:	486b      	ldr	r0, [pc, #428]	; (80119c0 <tcp_listen_input+0x1d4>)
 8011812:	f009 feb3 	bl	801b57c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011816:	4b67      	ldr	r3, [pc, #412]	; (80119b4 <tcp_listen_input+0x1c8>)
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	f003 0310 	and.w	r3, r3, #16
 801181e:	2b00      	cmp	r3, #0
 8011820:	d019      	beq.n	8011856 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011822:	4b68      	ldr	r3, [pc, #416]	; (80119c4 <tcp_listen_input+0x1d8>)
 8011824:	6819      	ldr	r1, [r3, #0]
 8011826:	4b68      	ldr	r3, [pc, #416]	; (80119c8 <tcp_listen_input+0x1dc>)
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	461a      	mov	r2, r3
 801182c:	4b67      	ldr	r3, [pc, #412]	; (80119cc <tcp_listen_input+0x1e0>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011832:	4b67      	ldr	r3, [pc, #412]	; (80119d0 <tcp_listen_input+0x1e4>)
 8011834:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011836:	885b      	ldrh	r3, [r3, #2]
 8011838:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801183a:	4a65      	ldr	r2, [pc, #404]	; (80119d0 <tcp_listen_input+0x1e4>)
 801183c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801183e:	8812      	ldrh	r2, [r2, #0]
 8011840:	b292      	uxth	r2, r2
 8011842:	9202      	str	r2, [sp, #8]
 8011844:	9301      	str	r3, [sp, #4]
 8011846:	4b63      	ldr	r3, [pc, #396]	; (80119d4 <tcp_listen_input+0x1e8>)
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	4b63      	ldr	r3, [pc, #396]	; (80119d8 <tcp_listen_input+0x1ec>)
 801184c:	4602      	mov	r2, r0
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f003 fbd8 	bl	8015004 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011854:	e0a9      	b.n	80119aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011856:	4b57      	ldr	r3, [pc, #348]	; (80119b4 <tcp_listen_input+0x1c8>)
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	f003 0302 	and.w	r3, r3, #2
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 80a3 	beq.w	80119aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	7d5b      	ldrb	r3, [r3, #21]
 8011868:	4618      	mov	r0, r3
 801186a:	f7ff f873 	bl	8010954 <tcp_alloc>
 801186e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d111      	bne.n	801189a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d00a      	beq.n	8011894 <tcp_listen_input+0xa8>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	699b      	ldr	r3, [r3, #24]
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	6910      	ldr	r0, [r2, #16]
 8011886:	f04f 32ff 	mov.w	r2, #4294967295
 801188a:	2100      	movs	r1, #0
 801188c:	4798      	blx	r3
 801188e:	4603      	mov	r3, r0
 8011890:	73bb      	strb	r3, [r7, #14]
      return;
 8011892:	e08b      	b.n	80119ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011894:	23f0      	movs	r3, #240	; 0xf0
 8011896:	73bb      	strb	r3, [r7, #14]
      return;
 8011898:	e088      	b.n	80119ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801189a:	4b50      	ldr	r3, [pc, #320]	; (80119dc <tcp_listen_input+0x1f0>)
 801189c:	695a      	ldr	r2, [r3, #20]
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80118a2:	4b4e      	ldr	r3, [pc, #312]	; (80119dc <tcp_listen_input+0x1f0>)
 80118a4:	691a      	ldr	r2, [r3, #16]
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	8ada      	ldrh	r2, [r3, #22]
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80118b2:	4b47      	ldr	r3, [pc, #284]	; (80119d0 <tcp_listen_input+0x1e4>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	881b      	ldrh	r3, [r3, #0]
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	2203      	movs	r2, #3
 80118c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80118c4:	4b41      	ldr	r3, [pc, #260]	; (80119cc <tcp_listen_input+0x1e0>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	1c5a      	adds	r2, r3, #1
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80118d6:	6978      	ldr	r0, [r7, #20]
 80118d8:	f7ff fa58 	bl	8010d8c <tcp_next_iss>
 80118dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	693a      	ldr	r2, [r7, #16]
 80118e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	693a      	ldr	r2, [r7, #16]
 80118e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	693a      	ldr	r2, [r7, #16]
 80118ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	693a      	ldr	r2, [r7, #16]
 80118f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80118f6:	4b35      	ldr	r3, [pc, #212]	; (80119cc <tcp_listen_input+0x1e0>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	1e5a      	subs	r2, r3, #1
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	691a      	ldr	r2, [r3, #16]
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	7a5b      	ldrb	r3, [r3, #9]
 8011912:	f003 030c 	and.w	r3, r3, #12
 8011916:	b2da      	uxtb	r2, r3
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7a1a      	ldrb	r2, [r3, #8]
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011924:	4b2e      	ldr	r3, [pc, #184]	; (80119e0 <tcp_listen_input+0x1f4>)
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	60da      	str	r2, [r3, #12]
 801192c:	4a2c      	ldr	r2, [pc, #176]	; (80119e0 <tcp_listen_input+0x1f4>)
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	6013      	str	r3, [r2, #0]
 8011932:	f003 fd29 	bl	8015388 <tcp_timer_needed>
 8011936:	4b2b      	ldr	r3, [pc, #172]	; (80119e4 <tcp_listen_input+0x1f8>)
 8011938:	2201      	movs	r2, #1
 801193a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801193c:	6978      	ldr	r0, [r7, #20]
 801193e:	f001 fd8f 	bl	8013460 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011942:	4b23      	ldr	r3, [pc, #140]	; (80119d0 <tcp_listen_input+0x1e4>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	89db      	ldrh	r3, [r3, #14]
 8011948:	b29a      	uxth	r2, r3
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	3304      	adds	r3, #4
 8011964:	4618      	mov	r0, r3
 8011966:	f007 fad7 	bl	8018f18 <ip4_route>
 801196a:	4601      	mov	r1, r0
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	3304      	adds	r3, #4
 8011970:	461a      	mov	r2, r3
 8011972:	4620      	mov	r0, r4
 8011974:	f7ff fa30 	bl	8010dd8 <tcp_eff_send_mss_netif>
 8011978:	4603      	mov	r3, r0
 801197a:	461a      	mov	r2, r3
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011980:	2112      	movs	r1, #18
 8011982:	6978      	ldr	r0, [r7, #20]
 8011984:	f002 fc9c 	bl	80142c0 <tcp_enqueue_flags>
 8011988:	4603      	mov	r3, r0
 801198a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801198c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d004      	beq.n	801199e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011994:	2100      	movs	r1, #0
 8011996:	6978      	ldr	r0, [r7, #20]
 8011998:	f7fd fed4 	bl	800f744 <tcp_abandon>
      return;
 801199c:	e006      	b.n	80119ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801199e:	6978      	ldr	r0, [r7, #20]
 80119a0:	f002 fd7c 	bl	801449c <tcp_output>
  return;
 80119a4:	e001      	b.n	80119aa <tcp_listen_input+0x1be>
    return;
 80119a6:	bf00      	nop
 80119a8:	e000      	b.n	80119ac <tcp_listen_input+0x1c0>
  return;
 80119aa:	bf00      	nop
}
 80119ac:	371c      	adds	r7, #28
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd90      	pop	{r4, r7, pc}
 80119b2:	bf00      	nop
 80119b4:	2000c990 	.word	0x2000c990
 80119b8:	0801dc2c 	.word	0x0801dc2c
 80119bc:	0801de24 	.word	0x0801de24
 80119c0:	0801dc78 	.word	0x0801dc78
 80119c4:	2000c988 	.word	0x2000c988
 80119c8:	2000c98e 	.word	0x2000c98e
 80119cc:	2000c984 	.word	0x2000c984
 80119d0:	2000c974 	.word	0x2000c974
 80119d4:	2000983c 	.word	0x2000983c
 80119d8:	20009840 	.word	0x20009840
 80119dc:	2000982c 	.word	0x2000982c
 80119e0:	2000c958 	.word	0x2000c958
 80119e4:	2000c960 	.word	0x2000c960

080119e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af04      	add	r7, sp, #16
 80119ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80119f0:	4b2f      	ldr	r3, [pc, #188]	; (8011ab0 <tcp_timewait_input+0xc8>)
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	f003 0304 	and.w	r3, r3, #4
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d153      	bne.n	8011aa4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d106      	bne.n	8011a10 <tcp_timewait_input+0x28>
 8011a02:	4b2c      	ldr	r3, [pc, #176]	; (8011ab4 <tcp_timewait_input+0xcc>)
 8011a04:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011a08:	492b      	ldr	r1, [pc, #172]	; (8011ab8 <tcp_timewait_input+0xd0>)
 8011a0a:	482c      	ldr	r0, [pc, #176]	; (8011abc <tcp_timewait_input+0xd4>)
 8011a0c:	f009 fdb6 	bl	801b57c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011a10:	4b27      	ldr	r3, [pc, #156]	; (8011ab0 <tcp_timewait_input+0xc8>)
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	f003 0302 	and.w	r3, r3, #2
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d02a      	beq.n	8011a72 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011a1c:	4b28      	ldr	r3, [pc, #160]	; (8011ac0 <tcp_timewait_input+0xd8>)
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	db2d      	blt.n	8011a86 <tcp_timewait_input+0x9e>
 8011a2a:	4b25      	ldr	r3, [pc, #148]	; (8011ac0 <tcp_timewait_input+0xd8>)
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a32:	6879      	ldr	r1, [r7, #4]
 8011a34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a36:	440b      	add	r3, r1
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	dc23      	bgt.n	8011a86 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a3e:	4b21      	ldr	r3, [pc, #132]	; (8011ac4 <tcp_timewait_input+0xdc>)
 8011a40:	6819      	ldr	r1, [r3, #0]
 8011a42:	4b21      	ldr	r3, [pc, #132]	; (8011ac8 <tcp_timewait_input+0xe0>)
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	461a      	mov	r2, r3
 8011a48:	4b1d      	ldr	r3, [pc, #116]	; (8011ac0 <tcp_timewait_input+0xd8>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a4e:	4b1f      	ldr	r3, [pc, #124]	; (8011acc <tcp_timewait_input+0xe4>)
 8011a50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a52:	885b      	ldrh	r3, [r3, #2]
 8011a54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a56:	4a1d      	ldr	r2, [pc, #116]	; (8011acc <tcp_timewait_input+0xe4>)
 8011a58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a5a:	8812      	ldrh	r2, [r2, #0]
 8011a5c:	b292      	uxth	r2, r2
 8011a5e:	9202      	str	r2, [sp, #8]
 8011a60:	9301      	str	r3, [sp, #4]
 8011a62:	4b1b      	ldr	r3, [pc, #108]	; (8011ad0 <tcp_timewait_input+0xe8>)
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	4b1b      	ldr	r3, [pc, #108]	; (8011ad4 <tcp_timewait_input+0xec>)
 8011a68:	4602      	mov	r2, r0
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f003 faca 	bl	8015004 <tcp_rst>
      return;
 8011a70:	e01b      	b.n	8011aaa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011a72:	4b0f      	ldr	r3, [pc, #60]	; (8011ab0 <tcp_timewait_input+0xc8>)
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	f003 0301 	and.w	r3, r3, #1
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d003      	beq.n	8011a86 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011a7e:	4b16      	ldr	r3, [pc, #88]	; (8011ad8 <tcp_timewait_input+0xf0>)
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011a86:	4b10      	ldr	r3, [pc, #64]	; (8011ac8 <tcp_timewait_input+0xe0>)
 8011a88:	881b      	ldrh	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d00c      	beq.n	8011aa8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	8b5b      	ldrh	r3, [r3, #26]
 8011a92:	f043 0302 	orr.w	r3, r3, #2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f002 fcfd 	bl	801449c <tcp_output>
  }
  return;
 8011aa2:	e001      	b.n	8011aa8 <tcp_timewait_input+0xc0>
    return;
 8011aa4:	bf00      	nop
 8011aa6:	e000      	b.n	8011aaa <tcp_timewait_input+0xc2>
  return;
 8011aa8:	bf00      	nop
}
 8011aaa:	3708      	adds	r7, #8
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	2000c990 	.word	0x2000c990
 8011ab4:	0801dc2c 	.word	0x0801dc2c
 8011ab8:	0801de44 	.word	0x0801de44
 8011abc:	0801dc78 	.word	0x0801dc78
 8011ac0:	2000c984 	.word	0x2000c984
 8011ac4:	2000c988 	.word	0x2000c988
 8011ac8:	2000c98e 	.word	0x2000c98e
 8011acc:	2000c974 	.word	0x2000c974
 8011ad0:	2000983c 	.word	0x2000983c
 8011ad4:	20009840 	.word	0x20009840
 8011ad8:	2000c94c 	.word	0x2000c94c

08011adc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011adc:	b590      	push	{r4, r7, lr}
 8011ade:	b08d      	sub	sp, #52	; 0x34
 8011ae0:	af04      	add	r7, sp, #16
 8011ae2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d106      	bne.n	8011b00 <tcp_process+0x24>
 8011af2:	4b9d      	ldr	r3, [pc, #628]	; (8011d68 <tcp_process+0x28c>)
 8011af4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011af8:	499c      	ldr	r1, [pc, #624]	; (8011d6c <tcp_process+0x290>)
 8011afa:	489d      	ldr	r0, [pc, #628]	; (8011d70 <tcp_process+0x294>)
 8011afc:	f009 fd3e 	bl	801b57c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011b00:	4b9c      	ldr	r3, [pc, #624]	; (8011d74 <tcp_process+0x298>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	f003 0304 	and.w	r3, r3, #4
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d04e      	beq.n	8011baa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	7d1b      	ldrb	r3, [r3, #20]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d108      	bne.n	8011b26 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b18:	4b97      	ldr	r3, [pc, #604]	; (8011d78 <tcp_process+0x29c>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d123      	bne.n	8011b68 <tcp_process+0x8c>
        acceptable = 1;
 8011b20:	2301      	movs	r3, #1
 8011b22:	76fb      	strb	r3, [r7, #27]
 8011b24:	e020      	b.n	8011b68 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b2a:	4b94      	ldr	r3, [pc, #592]	; (8011d7c <tcp_process+0x2a0>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d102      	bne.n	8011b38 <tcp_process+0x5c>
        acceptable = 1;
 8011b32:	2301      	movs	r3, #1
 8011b34:	76fb      	strb	r3, [r7, #27]
 8011b36:	e017      	b.n	8011b68 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b38:	4b90      	ldr	r3, [pc, #576]	; (8011d7c <tcp_process+0x2a0>)
 8011b3a:	681a      	ldr	r2, [r3, #0]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	db10      	blt.n	8011b68 <tcp_process+0x8c>
 8011b46:	4b8d      	ldr	r3, [pc, #564]	; (8011d7c <tcp_process+0x2a0>)
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4e:	6879      	ldr	r1, [r7, #4]
 8011b50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b52:	440b      	add	r3, r1
 8011b54:	1ad3      	subs	r3, r2, r3
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	dc06      	bgt.n	8011b68 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	8b5b      	ldrh	r3, [r3, #26]
 8011b5e:	f043 0302 	orr.w	r3, r3, #2
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011b68:	7efb      	ldrb	r3, [r7, #27]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d01b      	beq.n	8011ba6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	7d1b      	ldrb	r3, [r3, #20]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d106      	bne.n	8011b84 <tcp_process+0xa8>
 8011b76:	4b7c      	ldr	r3, [pc, #496]	; (8011d68 <tcp_process+0x28c>)
 8011b78:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011b7c:	4980      	ldr	r1, [pc, #512]	; (8011d80 <tcp_process+0x2a4>)
 8011b7e:	487c      	ldr	r0, [pc, #496]	; (8011d70 <tcp_process+0x294>)
 8011b80:	f009 fcfc 	bl	801b57c <iprintf>
      recv_flags |= TF_RESET;
 8011b84:	4b7f      	ldr	r3, [pc, #508]	; (8011d84 <tcp_process+0x2a8>)
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	f043 0308 	orr.w	r3, r3, #8
 8011b8c:	b2da      	uxtb	r2, r3
 8011b8e:	4b7d      	ldr	r3, [pc, #500]	; (8011d84 <tcp_process+0x2a8>)
 8011b90:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	8b5b      	ldrh	r3, [r3, #26]
 8011b96:	f023 0301 	bic.w	r3, r3, #1
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011ba0:	f06f 030d 	mvn.w	r3, #13
 8011ba4:	e37a      	b.n	801229c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	e378      	b.n	801229c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011baa:	4b72      	ldr	r3, [pc, #456]	; (8011d74 <tcp_process+0x298>)
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	f003 0302 	and.w	r3, r3, #2
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d010      	beq.n	8011bd8 <tcp_process+0xfc>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	7d1b      	ldrb	r3, [r3, #20]
 8011bba:	2b02      	cmp	r3, #2
 8011bbc:	d00c      	beq.n	8011bd8 <tcp_process+0xfc>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	7d1b      	ldrb	r3, [r3, #20]
 8011bc2:	2b03      	cmp	r3, #3
 8011bc4:	d008      	beq.n	8011bd8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	8b5b      	ldrh	r3, [r3, #26]
 8011bca:	f043 0302 	orr.w	r3, r3, #2
 8011bce:	b29a      	uxth	r2, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	e361      	b.n	801229c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	8b5b      	ldrh	r3, [r3, #26]
 8011bdc:	f003 0310 	and.w	r3, r3, #16
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d103      	bne.n	8011bec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011be4:	4b68      	ldr	r3, [pc, #416]	; (8011d88 <tcp_process+0x2ac>)
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f001 fc2f 	bl	8013460 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	7d1b      	ldrb	r3, [r3, #20]
 8011c06:	3b02      	subs	r3, #2
 8011c08:	2b07      	cmp	r3, #7
 8011c0a:	f200 8337 	bhi.w	801227c <tcp_process+0x7a0>
 8011c0e:	a201      	add	r2, pc, #4	; (adr r2, 8011c14 <tcp_process+0x138>)
 8011c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c14:	08011c35 	.word	0x08011c35
 8011c18:	08011e65 	.word	0x08011e65
 8011c1c:	08011fdd 	.word	0x08011fdd
 8011c20:	08012007 	.word	0x08012007
 8011c24:	0801212b 	.word	0x0801212b
 8011c28:	08011fdd 	.word	0x08011fdd
 8011c2c:	080121b7 	.word	0x080121b7
 8011c30:	08012247 	.word	0x08012247
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011c34:	4b4f      	ldr	r3, [pc, #316]	; (8011d74 <tcp_process+0x298>)
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	f003 0310 	and.w	r3, r3, #16
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 80e4 	beq.w	8011e0a <tcp_process+0x32e>
 8011c42:	4b4c      	ldr	r3, [pc, #304]	; (8011d74 <tcp_process+0x298>)
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	f003 0302 	and.w	r3, r3, #2
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f000 80dd 	beq.w	8011e0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c54:	1c5a      	adds	r2, r3, #1
 8011c56:	4b48      	ldr	r3, [pc, #288]	; (8011d78 <tcp_process+0x29c>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	f040 80d5 	bne.w	8011e0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011c60:	4b46      	ldr	r3, [pc, #280]	; (8011d7c <tcp_process+0x2a0>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011c72:	4b41      	ldr	r3, [pc, #260]	; (8011d78 <tcp_process+0x29c>)
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011c7a:	4b44      	ldr	r3, [pc, #272]	; (8011d8c <tcp_process+0x2b0>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	89db      	ldrh	r3, [r3, #14]
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011c94:	4b39      	ldr	r3, [pc, #228]	; (8011d7c <tcp_process+0x2a0>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	1e5a      	subs	r2, r3, #1
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2204      	movs	r2, #4
 8011ca2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	3304      	adds	r3, #4
 8011cac:	4618      	mov	r0, r3
 8011cae:	f007 f933 	bl	8018f18 <ip4_route>
 8011cb2:	4601      	mov	r1, r0
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	461a      	mov	r2, r3
 8011cba:	4620      	mov	r0, r4
 8011cbc:	f7ff f88c 	bl	8010dd8 <tcp_eff_send_mss_netif>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ccc:	009a      	lsls	r2, r3, #2
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cd2:	005b      	lsls	r3, r3, #1
 8011cd4:	f241 111c 	movw	r1, #4380	; 0x111c
 8011cd8:	428b      	cmp	r3, r1
 8011cda:	bf38      	it	cc
 8011cdc:	460b      	movcc	r3, r1
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d204      	bcs.n	8011cec <tcp_process+0x210>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	e00d      	b.n	8011d08 <tcp_process+0x22c>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d904      	bls.n	8011d04 <tcp_process+0x228>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cfe:	005b      	lsls	r3, r3, #1
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	e001      	b.n	8011d08 <tcp_process+0x22c>
 8011d04:	f241 131c 	movw	r3, #4380	; 0x111c
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d106      	bne.n	8011d26 <tcp_process+0x24a>
 8011d18:	4b13      	ldr	r3, [pc, #76]	; (8011d68 <tcp_process+0x28c>)
 8011d1a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011d1e:	491c      	ldr	r1, [pc, #112]	; (8011d90 <tcp_process+0x2b4>)
 8011d20:	4813      	ldr	r0, [pc, #76]	; (8011d70 <tcp_process+0x294>)
 8011d22:	f009 fc2b 	bl	801b57c <iprintf>
        --pcb->snd_queuelen;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d12a      	bne.n	8011d98 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011d48:	69fb      	ldr	r3, [r7, #28]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d106      	bne.n	8011d5c <tcp_process+0x280>
 8011d4e:	4b06      	ldr	r3, [pc, #24]	; (8011d68 <tcp_process+0x28c>)
 8011d50:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011d54:	490f      	ldr	r1, [pc, #60]	; (8011d94 <tcp_process+0x2b8>)
 8011d56:	4806      	ldr	r0, [pc, #24]	; (8011d70 <tcp_process+0x294>)
 8011d58:	f009 fc10 	bl	801b57c <iprintf>
          pcb->unsent = rseg->next;
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	66da      	str	r2, [r3, #108]	; 0x6c
 8011d64:	e01c      	b.n	8011da0 <tcp_process+0x2c4>
 8011d66:	bf00      	nop
 8011d68:	0801dc2c 	.word	0x0801dc2c
 8011d6c:	0801de64 	.word	0x0801de64
 8011d70:	0801dc78 	.word	0x0801dc78
 8011d74:	2000c990 	.word	0x2000c990
 8011d78:	2000c988 	.word	0x2000c988
 8011d7c:	2000c984 	.word	0x2000c984
 8011d80:	0801de80 	.word	0x0801de80
 8011d84:	2000c991 	.word	0x2000c991
 8011d88:	2000c94c 	.word	0x2000c94c
 8011d8c:	2000c974 	.word	0x2000c974
 8011d90:	0801dea0 	.word	0x0801dea0
 8011d94:	0801deb8 	.word	0x0801deb8
        } else {
          pcb->unacked = rseg->next;
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011da0:	69f8      	ldr	r0, [r7, #28]
 8011da2:	f7fe fc6e 	bl	8010682 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d104      	bne.n	8011db8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011db4:	861a      	strh	r2, [r3, #48]	; 0x30
 8011db6:	e006      	b.n	8011dc6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00a      	beq.n	8011de6 <tcp_process+0x30a>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011dd6:	687a      	ldr	r2, [r7, #4]
 8011dd8:	6910      	ldr	r0, [r2, #16]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	6879      	ldr	r1, [r7, #4]
 8011dde:	4798      	blx	r3
 8011de0:	4603      	mov	r3, r0
 8011de2:	76bb      	strb	r3, [r7, #26]
 8011de4:	e001      	b.n	8011dea <tcp_process+0x30e>
 8011de6:	2300      	movs	r3, #0
 8011de8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011dea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011dee:	f113 0f0d 	cmn.w	r3, #13
 8011df2:	d102      	bne.n	8011dfa <tcp_process+0x31e>
          return ERR_ABRT;
 8011df4:	f06f 030c 	mvn.w	r3, #12
 8011df8:	e250      	b.n	801229c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	8b5b      	ldrh	r3, [r3, #26]
 8011dfe:	f043 0302 	orr.w	r3, r3, #2
 8011e02:	b29a      	uxth	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011e08:	e23a      	b.n	8012280 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011e0a:	4b98      	ldr	r3, [pc, #608]	; (801206c <tcp_process+0x590>)
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	f003 0310 	and.w	r3, r3, #16
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f000 8234 	beq.w	8012280 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e18:	4b95      	ldr	r3, [pc, #596]	; (8012070 <tcp_process+0x594>)
 8011e1a:	6819      	ldr	r1, [r3, #0]
 8011e1c:	4b95      	ldr	r3, [pc, #596]	; (8012074 <tcp_process+0x598>)
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	461a      	mov	r2, r3
 8011e22:	4b95      	ldr	r3, [pc, #596]	; (8012078 <tcp_process+0x59c>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e28:	4b94      	ldr	r3, [pc, #592]	; (801207c <tcp_process+0x5a0>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e2c:	885b      	ldrh	r3, [r3, #2]
 8011e2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e30:	4a92      	ldr	r2, [pc, #584]	; (801207c <tcp_process+0x5a0>)
 8011e32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e34:	8812      	ldrh	r2, [r2, #0]
 8011e36:	b292      	uxth	r2, r2
 8011e38:	9202      	str	r2, [sp, #8]
 8011e3a:	9301      	str	r3, [sp, #4]
 8011e3c:	4b90      	ldr	r3, [pc, #576]	; (8012080 <tcp_process+0x5a4>)
 8011e3e:	9300      	str	r3, [sp, #0]
 8011e40:	4b90      	ldr	r3, [pc, #576]	; (8012084 <tcp_process+0x5a8>)
 8011e42:	4602      	mov	r2, r0
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f003 f8dd 	bl	8015004 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e50:	2b05      	cmp	r3, #5
 8011e52:	f200 8215 	bhi.w	8012280 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f002 fea7 	bl	8014bb0 <tcp_rexmit_rto>
      break;
 8011e62:	e20d      	b.n	8012280 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011e64:	4b81      	ldr	r3, [pc, #516]	; (801206c <tcp_process+0x590>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f003 0310 	and.w	r3, r3, #16
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f000 80a1 	beq.w	8011fb4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e72:	4b7f      	ldr	r3, [pc, #508]	; (8012070 <tcp_process+0x594>)
 8011e74:	681a      	ldr	r2, [r3, #0]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	3b01      	subs	r3, #1
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	db7e      	blt.n	8011f80 <tcp_process+0x4a4>
 8011e82:	4b7b      	ldr	r3, [pc, #492]	; (8012070 <tcp_process+0x594>)
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e8a:	1ad3      	subs	r3, r2, r3
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	dc77      	bgt.n	8011f80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2204      	movs	r2, #4
 8011e94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d102      	bne.n	8011ea4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011e9e:	23fa      	movs	r3, #250	; 0xfa
 8011ea0:	76bb      	strb	r3, [r7, #26]
 8011ea2:	e01d      	b.n	8011ee0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ea8:	699b      	ldr	r3, [r3, #24]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d106      	bne.n	8011ebc <tcp_process+0x3e0>
 8011eae:	4b76      	ldr	r3, [pc, #472]	; (8012088 <tcp_process+0x5ac>)
 8011eb0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011eb4:	4975      	ldr	r1, [pc, #468]	; (801208c <tcp_process+0x5b0>)
 8011eb6:	4876      	ldr	r0, [pc, #472]	; (8012090 <tcp_process+0x5b4>)
 8011eb8:	f009 fb60 	bl	801b57c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ec0:	699b      	ldr	r3, [r3, #24]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d00a      	beq.n	8011edc <tcp_process+0x400>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011eca:	699b      	ldr	r3, [r3, #24]
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	6910      	ldr	r0, [r2, #16]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	6879      	ldr	r1, [r7, #4]
 8011ed4:	4798      	blx	r3
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	76bb      	strb	r3, [r7, #26]
 8011eda:	e001      	b.n	8011ee0 <tcp_process+0x404>
 8011edc:	23f0      	movs	r3, #240	; 0xf0
 8011ede:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011ee0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00a      	beq.n	8011efe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011ee8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011eec:	f113 0f0d 	cmn.w	r3, #13
 8011ef0:	d002      	beq.n	8011ef8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f7fd fce4 	bl	800f8c0 <tcp_abort>
            }
            return ERR_ABRT;
 8011ef8:	f06f 030c 	mvn.w	r3, #12
 8011efc:	e1ce      	b.n	801229c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f000 fae0 	bl	80124c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011f04:	4b63      	ldr	r3, [pc, #396]	; (8012094 <tcp_process+0x5b8>)
 8011f06:	881b      	ldrh	r3, [r3, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d005      	beq.n	8011f18 <tcp_process+0x43c>
            recv_acked--;
 8011f0c:	4b61      	ldr	r3, [pc, #388]	; (8012094 <tcp_process+0x5b8>)
 8011f0e:	881b      	ldrh	r3, [r3, #0]
 8011f10:	3b01      	subs	r3, #1
 8011f12:	b29a      	uxth	r2, r3
 8011f14:	4b5f      	ldr	r3, [pc, #380]	; (8012094 <tcp_process+0x5b8>)
 8011f16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f1c:	009a      	lsls	r2, r3, #2
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	f241 111c 	movw	r1, #4380	; 0x111c
 8011f28:	428b      	cmp	r3, r1
 8011f2a:	bf38      	it	cc
 8011f2c:	460b      	movcc	r3, r1
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d204      	bcs.n	8011f3c <tcp_process+0x460>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f36:	009b      	lsls	r3, r3, #2
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	e00d      	b.n	8011f58 <tcp_process+0x47c>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f40:	005b      	lsls	r3, r3, #1
 8011f42:	f241 121c 	movw	r2, #4380	; 0x111c
 8011f46:	4293      	cmp	r3, r2
 8011f48:	d904      	bls.n	8011f54 <tcp_process+0x478>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f4e:	005b      	lsls	r3, r3, #1
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	e001      	b.n	8011f58 <tcp_process+0x47c>
 8011f54:	f241 131c 	movw	r3, #4380	; 0x111c
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011f5e:	4b4e      	ldr	r3, [pc, #312]	; (8012098 <tcp_process+0x5bc>)
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	f003 0320 	and.w	r3, r3, #32
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d037      	beq.n	8011fda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	8b5b      	ldrh	r3, [r3, #26]
 8011f6e:	f043 0302 	orr.w	r3, r3, #2
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2207      	movs	r2, #7
 8011f7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011f7e:	e02c      	b.n	8011fda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f80:	4b3b      	ldr	r3, [pc, #236]	; (8012070 <tcp_process+0x594>)
 8011f82:	6819      	ldr	r1, [r3, #0]
 8011f84:	4b3b      	ldr	r3, [pc, #236]	; (8012074 <tcp_process+0x598>)
 8011f86:	881b      	ldrh	r3, [r3, #0]
 8011f88:	461a      	mov	r2, r3
 8011f8a:	4b3b      	ldr	r3, [pc, #236]	; (8012078 <tcp_process+0x59c>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f90:	4b3a      	ldr	r3, [pc, #232]	; (801207c <tcp_process+0x5a0>)
 8011f92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f94:	885b      	ldrh	r3, [r3, #2]
 8011f96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f98:	4a38      	ldr	r2, [pc, #224]	; (801207c <tcp_process+0x5a0>)
 8011f9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f9c:	8812      	ldrh	r2, [r2, #0]
 8011f9e:	b292      	uxth	r2, r2
 8011fa0:	9202      	str	r2, [sp, #8]
 8011fa2:	9301      	str	r3, [sp, #4]
 8011fa4:	4b36      	ldr	r3, [pc, #216]	; (8012080 <tcp_process+0x5a4>)
 8011fa6:	9300      	str	r3, [sp, #0]
 8011fa8:	4b36      	ldr	r3, [pc, #216]	; (8012084 <tcp_process+0x5a8>)
 8011faa:	4602      	mov	r2, r0
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f003 f829 	bl	8015004 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011fb2:	e167      	b.n	8012284 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011fb4:	4b2d      	ldr	r3, [pc, #180]	; (801206c <tcp_process+0x590>)
 8011fb6:	781b      	ldrb	r3, [r3, #0]
 8011fb8:	f003 0302 	and.w	r3, r3, #2
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 8161 	beq.w	8012284 <tcp_process+0x7a8>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fc6:	1e5a      	subs	r2, r3, #1
 8011fc8:	4b2b      	ldr	r3, [pc, #172]	; (8012078 <tcp_process+0x59c>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	f040 8159 	bne.w	8012284 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f002 fe0e 	bl	8014bf4 <tcp_rexmit>
      break;
 8011fd8:	e154      	b.n	8012284 <tcp_process+0x7a8>
 8011fda:	e153      	b.n	8012284 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 fa71 	bl	80124c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011fe2:	4b2d      	ldr	r3, [pc, #180]	; (8012098 <tcp_process+0x5bc>)
 8011fe4:	781b      	ldrb	r3, [r3, #0]
 8011fe6:	f003 0320 	and.w	r3, r3, #32
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f000 814c 	beq.w	8012288 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	8b5b      	ldrh	r3, [r3, #26]
 8011ff4:	f043 0302 	orr.w	r3, r3, #2
 8011ff8:	b29a      	uxth	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2207      	movs	r2, #7
 8012002:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012004:	e140      	b.n	8012288 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fa5c 	bl	80124c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801200c:	4b22      	ldr	r3, [pc, #136]	; (8012098 <tcp_process+0x5bc>)
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	f003 0320 	and.w	r3, r3, #32
 8012014:	2b00      	cmp	r3, #0
 8012016:	d071      	beq.n	80120fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012018:	4b14      	ldr	r3, [pc, #80]	; (801206c <tcp_process+0x590>)
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	f003 0310 	and.w	r3, r3, #16
 8012020:	2b00      	cmp	r3, #0
 8012022:	d060      	beq.n	80120e6 <tcp_process+0x60a>
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012028:	4b11      	ldr	r3, [pc, #68]	; (8012070 <tcp_process+0x594>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	429a      	cmp	r2, r3
 801202e:	d15a      	bne.n	80120e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012034:	2b00      	cmp	r3, #0
 8012036:	d156      	bne.n	80120e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	8b5b      	ldrh	r3, [r3, #26]
 801203c:	f043 0302 	orr.w	r3, r3, #2
 8012040:	b29a      	uxth	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7fe fdbc 	bl	8010bc4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801204c:	4b13      	ldr	r3, [pc, #76]	; (801209c <tcp_process+0x5c0>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	429a      	cmp	r2, r3
 8012054:	d105      	bne.n	8012062 <tcp_process+0x586>
 8012056:	4b11      	ldr	r3, [pc, #68]	; (801209c <tcp_process+0x5c0>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	4a0f      	ldr	r2, [pc, #60]	; (801209c <tcp_process+0x5c0>)
 801205e:	6013      	str	r3, [r2, #0]
 8012060:	e02e      	b.n	80120c0 <tcp_process+0x5e4>
 8012062:	4b0e      	ldr	r3, [pc, #56]	; (801209c <tcp_process+0x5c0>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	617b      	str	r3, [r7, #20]
 8012068:	e027      	b.n	80120ba <tcp_process+0x5de>
 801206a:	bf00      	nop
 801206c:	2000c990 	.word	0x2000c990
 8012070:	2000c988 	.word	0x2000c988
 8012074:	2000c98e 	.word	0x2000c98e
 8012078:	2000c984 	.word	0x2000c984
 801207c:	2000c974 	.word	0x2000c974
 8012080:	2000983c 	.word	0x2000983c
 8012084:	20009840 	.word	0x20009840
 8012088:	0801dc2c 	.word	0x0801dc2c
 801208c:	0801decc 	.word	0x0801decc
 8012090:	0801dc78 	.word	0x0801dc78
 8012094:	2000c98c 	.word	0x2000c98c
 8012098:	2000c991 	.word	0x2000c991
 801209c:	2000c958 	.word	0x2000c958
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d104      	bne.n	80120b4 <tcp_process+0x5d8>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	68da      	ldr	r2, [r3, #12]
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	60da      	str	r2, [r3, #12]
 80120b2:	e005      	b.n	80120c0 <tcp_process+0x5e4>
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	617b      	str	r3, [r7, #20]
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d1ef      	bne.n	80120a0 <tcp_process+0x5c4>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2200      	movs	r2, #0
 80120c4:	60da      	str	r2, [r3, #12]
 80120c6:	4b77      	ldr	r3, [pc, #476]	; (80122a4 <tcp_process+0x7c8>)
 80120c8:	2201      	movs	r2, #1
 80120ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	220a      	movs	r2, #10
 80120d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80120d2:	4b75      	ldr	r3, [pc, #468]	; (80122a8 <tcp_process+0x7cc>)
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	60da      	str	r2, [r3, #12]
 80120da:	4a73      	ldr	r2, [pc, #460]	; (80122a8 <tcp_process+0x7cc>)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6013      	str	r3, [r2, #0]
 80120e0:	f003 f952 	bl	8015388 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80120e4:	e0d2      	b.n	801228c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	8b5b      	ldrh	r3, [r3, #26]
 80120ea:	f043 0302 	orr.w	r3, r3, #2
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2208      	movs	r2, #8
 80120f8:	751a      	strb	r2, [r3, #20]
      break;
 80120fa:	e0c7      	b.n	801228c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80120fc:	4b6b      	ldr	r3, [pc, #428]	; (80122ac <tcp_process+0x7d0>)
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	f003 0310 	and.w	r3, r3, #16
 8012104:	2b00      	cmp	r3, #0
 8012106:	f000 80c1 	beq.w	801228c <tcp_process+0x7b0>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801210e:	4b68      	ldr	r3, [pc, #416]	; (80122b0 <tcp_process+0x7d4>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	429a      	cmp	r2, r3
 8012114:	f040 80ba 	bne.w	801228c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801211c:	2b00      	cmp	r3, #0
 801211e:	f040 80b5 	bne.w	801228c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2206      	movs	r2, #6
 8012126:	751a      	strb	r2, [r3, #20]
      break;
 8012128:	e0b0      	b.n	801228c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 f9ca 	bl	80124c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012130:	4b60      	ldr	r3, [pc, #384]	; (80122b4 <tcp_process+0x7d8>)
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	f003 0320 	and.w	r3, r3, #32
 8012138:	2b00      	cmp	r3, #0
 801213a:	f000 80a9 	beq.w	8012290 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	8b5b      	ldrh	r3, [r3, #26]
 8012142:	f043 0302 	orr.w	r3, r3, #2
 8012146:	b29a      	uxth	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7fe fd39 	bl	8010bc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012152:	4b59      	ldr	r3, [pc, #356]	; (80122b8 <tcp_process+0x7dc>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	429a      	cmp	r2, r3
 801215a:	d105      	bne.n	8012168 <tcp_process+0x68c>
 801215c:	4b56      	ldr	r3, [pc, #344]	; (80122b8 <tcp_process+0x7dc>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	4a55      	ldr	r2, [pc, #340]	; (80122b8 <tcp_process+0x7dc>)
 8012164:	6013      	str	r3, [r2, #0]
 8012166:	e013      	b.n	8012190 <tcp_process+0x6b4>
 8012168:	4b53      	ldr	r3, [pc, #332]	; (80122b8 <tcp_process+0x7dc>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	613b      	str	r3, [r7, #16]
 801216e:	e00c      	b.n	801218a <tcp_process+0x6ae>
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	429a      	cmp	r2, r3
 8012178:	d104      	bne.n	8012184 <tcp_process+0x6a8>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	68da      	ldr	r2, [r3, #12]
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	60da      	str	r2, [r3, #12]
 8012182:	e005      	b.n	8012190 <tcp_process+0x6b4>
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	613b      	str	r3, [r7, #16]
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d1ef      	bne.n	8012170 <tcp_process+0x694>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2200      	movs	r2, #0
 8012194:	60da      	str	r2, [r3, #12]
 8012196:	4b43      	ldr	r3, [pc, #268]	; (80122a4 <tcp_process+0x7c8>)
 8012198:	2201      	movs	r2, #1
 801219a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	220a      	movs	r2, #10
 80121a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80121a2:	4b41      	ldr	r3, [pc, #260]	; (80122a8 <tcp_process+0x7cc>)
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	60da      	str	r2, [r3, #12]
 80121aa:	4a3f      	ldr	r2, [pc, #252]	; (80122a8 <tcp_process+0x7cc>)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6013      	str	r3, [r2, #0]
 80121b0:	f003 f8ea 	bl	8015388 <tcp_timer_needed>
      }
      break;
 80121b4:	e06c      	b.n	8012290 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f000 f984 	bl	80124c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80121bc:	4b3b      	ldr	r3, [pc, #236]	; (80122ac <tcp_process+0x7d0>)
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	f003 0310 	and.w	r3, r3, #16
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d065      	beq.n	8012294 <tcp_process+0x7b8>
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80121cc:	4b38      	ldr	r3, [pc, #224]	; (80122b0 <tcp_process+0x7d4>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d15f      	bne.n	8012294 <tcp_process+0x7b8>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d15b      	bne.n	8012294 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7fe fcf1 	bl	8010bc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80121e2:	4b35      	ldr	r3, [pc, #212]	; (80122b8 <tcp_process+0x7dc>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d105      	bne.n	80121f8 <tcp_process+0x71c>
 80121ec:	4b32      	ldr	r3, [pc, #200]	; (80122b8 <tcp_process+0x7dc>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	4a31      	ldr	r2, [pc, #196]	; (80122b8 <tcp_process+0x7dc>)
 80121f4:	6013      	str	r3, [r2, #0]
 80121f6:	e013      	b.n	8012220 <tcp_process+0x744>
 80121f8:	4b2f      	ldr	r3, [pc, #188]	; (80122b8 <tcp_process+0x7dc>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	60fb      	str	r3, [r7, #12]
 80121fe:	e00c      	b.n	801221a <tcp_process+0x73e>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	429a      	cmp	r2, r3
 8012208:	d104      	bne.n	8012214 <tcp_process+0x738>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	68da      	ldr	r2, [r3, #12]
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	60da      	str	r2, [r3, #12]
 8012212:	e005      	b.n	8012220 <tcp_process+0x744>
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	60fb      	str	r3, [r7, #12]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d1ef      	bne.n	8012200 <tcp_process+0x724>
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	60da      	str	r2, [r3, #12]
 8012226:	4b1f      	ldr	r3, [pc, #124]	; (80122a4 <tcp_process+0x7c8>)
 8012228:	2201      	movs	r2, #1
 801222a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	220a      	movs	r2, #10
 8012230:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012232:	4b1d      	ldr	r3, [pc, #116]	; (80122a8 <tcp_process+0x7cc>)
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	60da      	str	r2, [r3, #12]
 801223a:	4a1b      	ldr	r2, [pc, #108]	; (80122a8 <tcp_process+0x7cc>)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6013      	str	r3, [r2, #0]
 8012240:	f003 f8a2 	bl	8015388 <tcp_timer_needed>
      }
      break;
 8012244:	e026      	b.n	8012294 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 f93c 	bl	80124c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801224c:	4b17      	ldr	r3, [pc, #92]	; (80122ac <tcp_process+0x7d0>)
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	f003 0310 	and.w	r3, r3, #16
 8012254:	2b00      	cmp	r3, #0
 8012256:	d01f      	beq.n	8012298 <tcp_process+0x7bc>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801225c:	4b14      	ldr	r3, [pc, #80]	; (80122b0 <tcp_process+0x7d4>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	429a      	cmp	r2, r3
 8012262:	d119      	bne.n	8012298 <tcp_process+0x7bc>
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012268:	2b00      	cmp	r3, #0
 801226a:	d115      	bne.n	8012298 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801226c:	4b11      	ldr	r3, [pc, #68]	; (80122b4 <tcp_process+0x7d8>)
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	f043 0310 	orr.w	r3, r3, #16
 8012274:	b2da      	uxtb	r2, r3
 8012276:	4b0f      	ldr	r3, [pc, #60]	; (80122b4 <tcp_process+0x7d8>)
 8012278:	701a      	strb	r2, [r3, #0]
      }
      break;
 801227a:	e00d      	b.n	8012298 <tcp_process+0x7bc>
    default:
      break;
 801227c:	bf00      	nop
 801227e:	e00c      	b.n	801229a <tcp_process+0x7be>
      break;
 8012280:	bf00      	nop
 8012282:	e00a      	b.n	801229a <tcp_process+0x7be>
      break;
 8012284:	bf00      	nop
 8012286:	e008      	b.n	801229a <tcp_process+0x7be>
      break;
 8012288:	bf00      	nop
 801228a:	e006      	b.n	801229a <tcp_process+0x7be>
      break;
 801228c:	bf00      	nop
 801228e:	e004      	b.n	801229a <tcp_process+0x7be>
      break;
 8012290:	bf00      	nop
 8012292:	e002      	b.n	801229a <tcp_process+0x7be>
      break;
 8012294:	bf00      	nop
 8012296:	e000      	b.n	801229a <tcp_process+0x7be>
      break;
 8012298:	bf00      	nop
  }
  return ERR_OK;
 801229a:	2300      	movs	r3, #0
}
 801229c:	4618      	mov	r0, r3
 801229e:	3724      	adds	r7, #36	; 0x24
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd90      	pop	{r4, r7, pc}
 80122a4:	2000c960 	.word	0x2000c960
 80122a8:	2000c95c 	.word	0x2000c95c
 80122ac:	2000c990 	.word	0x2000c990
 80122b0:	2000c988 	.word	0x2000c988
 80122b4:	2000c991 	.word	0x2000c991
 80122b8:	2000c958 	.word	0x2000c958

080122bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80122bc:	b590      	push	{r4, r7, lr}
 80122be:	b085      	sub	sp, #20
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d106      	bne.n	80122da <tcp_oos_insert_segment+0x1e>
 80122cc:	4b3b      	ldr	r3, [pc, #236]	; (80123bc <tcp_oos_insert_segment+0x100>)
 80122ce:	f240 421f 	movw	r2, #1055	; 0x41f
 80122d2:	493b      	ldr	r1, [pc, #236]	; (80123c0 <tcp_oos_insert_segment+0x104>)
 80122d4:	483b      	ldr	r0, [pc, #236]	; (80123c4 <tcp_oos_insert_segment+0x108>)
 80122d6:	f009 f951 	bl	801b57c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	68db      	ldr	r3, [r3, #12]
 80122de:	899b      	ldrh	r3, [r3, #12]
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fb f884 	bl	800d3f0 <lwip_htons>
 80122e8:	4603      	mov	r3, r0
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	f003 0301 	and.w	r3, r3, #1
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d028      	beq.n	8012346 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80122f4:	6838      	ldr	r0, [r7, #0]
 80122f6:	f7fe f9af 	bl	8010658 <tcp_segs_free>
    next = NULL;
 80122fa:	2300      	movs	r3, #0
 80122fc:	603b      	str	r3, [r7, #0]
 80122fe:	e056      	b.n	80123ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	899b      	ldrh	r3, [r3, #12]
 8012306:	b29b      	uxth	r3, r3
 8012308:	4618      	mov	r0, r3
 801230a:	f7fb f871 	bl	800d3f0 <lwip_htons>
 801230e:	4603      	mov	r3, r0
 8012310:	b2db      	uxtb	r3, r3
 8012312:	f003 0301 	and.w	r3, r3, #1
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00d      	beq.n	8012336 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	899b      	ldrh	r3, [r3, #12]
 8012320:	b29c      	uxth	r4, r3
 8012322:	2001      	movs	r0, #1
 8012324:	f7fb f864 	bl	800d3f0 <lwip_htons>
 8012328:	4603      	mov	r3, r0
 801232a:	461a      	mov	r2, r3
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	4322      	orrs	r2, r4
 8012332:	b292      	uxth	r2, r2
 8012334:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012340:	68f8      	ldr	r0, [r7, #12]
 8012342:	f7fe f99e 	bl	8010682 <tcp_seg_free>
    while (next &&
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00e      	beq.n	801236a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	891b      	ldrh	r3, [r3, #8]
 8012350:	461a      	mov	r2, r3
 8012352:	4b1d      	ldr	r3, [pc, #116]	; (80123c8 <tcp_oos_insert_segment+0x10c>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	441a      	add	r2, r3
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	8909      	ldrh	r1, [r1, #8]
 8012362:	440b      	add	r3, r1
 8012364:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012366:	2b00      	cmp	r3, #0
 8012368:	daca      	bge.n	8012300 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d01e      	beq.n	80123ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	891b      	ldrh	r3, [r3, #8]
 8012374:	461a      	mov	r2, r3
 8012376:	4b14      	ldr	r3, [pc, #80]	; (80123c8 <tcp_oos_insert_segment+0x10c>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	441a      	add	r2, r3
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012384:	2b00      	cmp	r3, #0
 8012386:	dd12      	ble.n	80123ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	b29a      	uxth	r2, r3
 8012390:	4b0d      	ldr	r3, [pc, #52]	; (80123c8 <tcp_oos_insert_segment+0x10c>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	b29b      	uxth	r3, r3
 8012396:	1ad3      	subs	r3, r2, r3
 8012398:	b29a      	uxth	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	685a      	ldr	r2, [r3, #4]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	891b      	ldrh	r3, [r3, #8]
 80123a6:	4619      	mov	r1, r3
 80123a8:	4610      	mov	r0, r2
 80123aa:	f7fc faff 	bl	800e9ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	683a      	ldr	r2, [r7, #0]
 80123b2:	601a      	str	r2, [r3, #0]
}
 80123b4:	bf00      	nop
 80123b6:	3714      	adds	r7, #20
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd90      	pop	{r4, r7, pc}
 80123bc:	0801dc2c 	.word	0x0801dc2c
 80123c0:	0801deec 	.word	0x0801deec
 80123c4:	0801dc78 	.word	0x0801dc78
 80123c8:	2000c984 	.word	0x2000c984

080123cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80123cc:	b5b0      	push	{r4, r5, r7, lr}
 80123ce:	b086      	sub	sp, #24
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	60f8      	str	r0, [r7, #12]
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	607a      	str	r2, [r7, #4]
 80123d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80123da:	e03e      	b.n	801245a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fc fcf2 	bl	800edd4 <pbuf_clen>
 80123f0:	4603      	mov	r3, r0
 80123f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123fa:	8a7a      	ldrh	r2, [r7, #18]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d906      	bls.n	801240e <tcp_free_acked_segments+0x42>
 8012400:	4b2a      	ldr	r3, [pc, #168]	; (80124ac <tcp_free_acked_segments+0xe0>)
 8012402:	f240 4257 	movw	r2, #1111	; 0x457
 8012406:	492a      	ldr	r1, [pc, #168]	; (80124b0 <tcp_free_acked_segments+0xe4>)
 8012408:	482a      	ldr	r0, [pc, #168]	; (80124b4 <tcp_free_acked_segments+0xe8>)
 801240a:	f009 f8b7 	bl	801b57c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012414:	8a7b      	ldrh	r3, [r7, #18]
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	b29a      	uxth	r2, r3
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	891a      	ldrh	r2, [r3, #8]
 8012424:	4b24      	ldr	r3, [pc, #144]	; (80124b8 <tcp_free_acked_segments+0xec>)
 8012426:	881b      	ldrh	r3, [r3, #0]
 8012428:	4413      	add	r3, r2
 801242a:	b29a      	uxth	r2, r3
 801242c:	4b22      	ldr	r3, [pc, #136]	; (80124b8 <tcp_free_acked_segments+0xec>)
 801242e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012430:	6978      	ldr	r0, [r7, #20]
 8012432:	f7fe f926 	bl	8010682 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801243c:	2b00      	cmp	r3, #0
 801243e:	d00c      	beq.n	801245a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d109      	bne.n	801245a <tcp_free_acked_segments+0x8e>
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d106      	bne.n	801245a <tcp_free_acked_segments+0x8e>
 801244c:	4b17      	ldr	r3, [pc, #92]	; (80124ac <tcp_free_acked_segments+0xe0>)
 801244e:	f240 4261 	movw	r2, #1121	; 0x461
 8012452:	491a      	ldr	r1, [pc, #104]	; (80124bc <tcp_free_acked_segments+0xf0>)
 8012454:	4817      	ldr	r0, [pc, #92]	; (80124b4 <tcp_free_acked_segments+0xe8>)
 8012456:	f009 f891 	bl	801b57c <iprintf>
  while (seg_list != NULL &&
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d020      	beq.n	80124a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	4618      	mov	r0, r3
 8012468:	f7fa ffd6 	bl	800d418 <lwip_htonl>
 801246c:	4604      	mov	r4, r0
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	891b      	ldrh	r3, [r3, #8]
 8012472:	461d      	mov	r5, r3
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	899b      	ldrh	r3, [r3, #12]
 801247a:	b29b      	uxth	r3, r3
 801247c:	4618      	mov	r0, r3
 801247e:	f7fa ffb7 	bl	800d3f0 <lwip_htons>
 8012482:	4603      	mov	r3, r0
 8012484:	b2db      	uxtb	r3, r3
 8012486:	f003 0303 	and.w	r3, r3, #3
 801248a:	2b00      	cmp	r3, #0
 801248c:	d001      	beq.n	8012492 <tcp_free_acked_segments+0xc6>
 801248e:	2301      	movs	r3, #1
 8012490:	e000      	b.n	8012494 <tcp_free_acked_segments+0xc8>
 8012492:	2300      	movs	r3, #0
 8012494:	442b      	add	r3, r5
 8012496:	18e2      	adds	r2, r4, r3
 8012498:	4b09      	ldr	r3, [pc, #36]	; (80124c0 <tcp_free_acked_segments+0xf4>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801249e:	2b00      	cmp	r3, #0
 80124a0:	dd9c      	ble.n	80123dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80124a2:	68bb      	ldr	r3, [r7, #8]
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3718      	adds	r7, #24
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bdb0      	pop	{r4, r5, r7, pc}
 80124ac:	0801dc2c 	.word	0x0801dc2c
 80124b0:	0801df14 	.word	0x0801df14
 80124b4:	0801dc78 	.word	0x0801dc78
 80124b8:	2000c98c 	.word	0x2000c98c
 80124bc:	0801df3c 	.word	0x0801df3c
 80124c0:	2000c988 	.word	0x2000c988

080124c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80124c4:	b5b0      	push	{r4, r5, r7, lr}
 80124c6:	b094      	sub	sp, #80	; 0x50
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80124cc:	2300      	movs	r3, #0
 80124ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <tcp_receive+0x20>
 80124d6:	4b91      	ldr	r3, [pc, #580]	; (801271c <tcp_receive+0x258>)
 80124d8:	f240 427b 	movw	r2, #1147	; 0x47b
 80124dc:	4990      	ldr	r1, [pc, #576]	; (8012720 <tcp_receive+0x25c>)
 80124de:	4891      	ldr	r0, [pc, #580]	; (8012724 <tcp_receive+0x260>)
 80124e0:	f009 f84c 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	7d1b      	ldrb	r3, [r3, #20]
 80124e8:	2b03      	cmp	r3, #3
 80124ea:	d806      	bhi.n	80124fa <tcp_receive+0x36>
 80124ec:	4b8b      	ldr	r3, [pc, #556]	; (801271c <tcp_receive+0x258>)
 80124ee:	f240 427c 	movw	r2, #1148	; 0x47c
 80124f2:	498d      	ldr	r1, [pc, #564]	; (8012728 <tcp_receive+0x264>)
 80124f4:	488b      	ldr	r0, [pc, #556]	; (8012724 <tcp_receive+0x260>)
 80124f6:	f009 f841 	bl	801b57c <iprintf>

  if (flags & TCP_ACK) {
 80124fa:	4b8c      	ldr	r3, [pc, #560]	; (801272c <tcp_receive+0x268>)
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	f003 0310 	and.w	r3, r3, #16
 8012502:	2b00      	cmp	r3, #0
 8012504:	f000 8264 	beq.w	80129d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801250e:	461a      	mov	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012514:	4413      	add	r3, r2
 8012516:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801251c:	4b84      	ldr	r3, [pc, #528]	; (8012730 <tcp_receive+0x26c>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	1ad3      	subs	r3, r2, r3
 8012522:	2b00      	cmp	r3, #0
 8012524:	db1b      	blt.n	801255e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801252a:	4b81      	ldr	r3, [pc, #516]	; (8012730 <tcp_receive+0x26c>)
 801252c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801252e:	429a      	cmp	r2, r3
 8012530:	d106      	bne.n	8012540 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012536:	4b7f      	ldr	r3, [pc, #508]	; (8012734 <tcp_receive+0x270>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	2b00      	cmp	r3, #0
 801253e:	db0e      	blt.n	801255e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012544:	4b7b      	ldr	r3, [pc, #492]	; (8012734 <tcp_receive+0x270>)
 8012546:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012548:	429a      	cmp	r2, r3
 801254a:	d125      	bne.n	8012598 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801254c:	4b7a      	ldr	r3, [pc, #488]	; (8012738 <tcp_receive+0x274>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	89db      	ldrh	r3, [r3, #14]
 8012552:	b29a      	uxth	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801255a:	429a      	cmp	r2, r3
 801255c:	d91c      	bls.n	8012598 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801255e:	4b76      	ldr	r3, [pc, #472]	; (8012738 <tcp_receive+0x274>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	89db      	ldrh	r3, [r3, #14]
 8012564:	b29a      	uxth	r2, r3
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012578:	429a      	cmp	r2, r3
 801257a:	d205      	bcs.n	8012588 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012588:	4b69      	ldr	r3, [pc, #420]	; (8012730 <tcp_receive+0x26c>)
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012590:	4b68      	ldr	r3, [pc, #416]	; (8012734 <tcp_receive+0x270>)
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012598:	4b66      	ldr	r3, [pc, #408]	; (8012734 <tcp_receive+0x270>)
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	dc58      	bgt.n	8012658 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80125a6:	4b65      	ldr	r3, [pc, #404]	; (801273c <tcp_receive+0x278>)
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d14b      	bne.n	8012646 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80125b8:	4413      	add	r3, r2
 80125ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125bc:	429a      	cmp	r2, r3
 80125be:	d142      	bne.n	8012646 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	db3d      	blt.n	8012646 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80125ce:	4b59      	ldr	r3, [pc, #356]	; (8012734 <tcp_receive+0x270>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d137      	bne.n	8012646 <tcp_receive+0x182>
              found_dupack = 1;
 80125d6:	2301      	movs	r3, #1
 80125d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80125e0:	2bff      	cmp	r3, #255	; 0xff
 80125e2:	d007      	beq.n	80125f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80125ea:	3301      	adds	r3, #1
 80125ec:	b2da      	uxtb	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80125fa:	2b03      	cmp	r3, #3
 80125fc:	d91b      	bls.n	8012636 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012608:	4413      	add	r3, r2
 801260a:	b29a      	uxth	r2, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012612:	429a      	cmp	r2, r3
 8012614:	d30a      	bcc.n	801262c <tcp_receive+0x168>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012620:	4413      	add	r3, r2
 8012622:	b29a      	uxth	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801262a:	e004      	b.n	8012636 <tcp_receive+0x172>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801263c:	2b02      	cmp	r3, #2
 801263e:	d902      	bls.n	8012646 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f002 fb43 	bl	8014ccc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012648:	2b00      	cmp	r3, #0
 801264a:	f040 8161 	bne.w	8012910 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012656:	e15b      	b.n	8012910 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012658:	4b36      	ldr	r3, [pc, #216]	; (8012734 <tcp_receive+0x270>)
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012660:	1ad3      	subs	r3, r2, r3
 8012662:	3b01      	subs	r3, #1
 8012664:	2b00      	cmp	r3, #0
 8012666:	f2c0 814e 	blt.w	8012906 <tcp_receive+0x442>
 801266a:	4b32      	ldr	r3, [pc, #200]	; (8012734 <tcp_receive+0x270>)
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	2b00      	cmp	r3, #0
 8012676:	f300 8146 	bgt.w	8012906 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	8b5b      	ldrh	r3, [r3, #26]
 801267e:	f003 0304 	and.w	r3, r3, #4
 8012682:	2b00      	cmp	r3, #0
 8012684:	d010      	beq.n	80126a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	8b5b      	ldrh	r3, [r3, #26]
 801268a:	f023 0304 	bic.w	r3, r3, #4
 801268e:	b29a      	uxth	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2200      	movs	r2, #0
 80126a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126b6:	10db      	asrs	r3, r3, #3
 80126b8:	b21b      	sxth	r3, r3
 80126ba:	b29a      	uxth	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	4413      	add	r3, r2
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	b21a      	sxth	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80126d0:	4b18      	ldr	r3, [pc, #96]	; (8012734 <tcp_receive+0x270>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126da:	b29b      	uxth	r3, r3
 80126dc:	1ad3      	subs	r3, r2, r3
 80126de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80126e8:	4b12      	ldr	r3, [pc, #72]	; (8012734 <tcp_receive+0x270>)
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	7d1b      	ldrb	r3, [r3, #20]
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	f240 8097 	bls.w	8012828 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012706:	429a      	cmp	r2, r3
 8012708:	d245      	bcs.n	8012796 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	8b5b      	ldrh	r3, [r3, #26]
 801270e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012712:	2b00      	cmp	r3, #0
 8012714:	d014      	beq.n	8012740 <tcp_receive+0x27c>
 8012716:	2301      	movs	r3, #1
 8012718:	e013      	b.n	8012742 <tcp_receive+0x27e>
 801271a:	bf00      	nop
 801271c:	0801dc2c 	.word	0x0801dc2c
 8012720:	0801df5c 	.word	0x0801df5c
 8012724:	0801dc78 	.word	0x0801dc78
 8012728:	0801df78 	.word	0x0801df78
 801272c:	2000c990 	.word	0x2000c990
 8012730:	2000c984 	.word	0x2000c984
 8012734:	2000c988 	.word	0x2000c988
 8012738:	2000c974 	.word	0x2000c974
 801273c:	2000c98e 	.word	0x2000c98e
 8012740:	2302      	movs	r3, #2
 8012742:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012746:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801274a:	b29a      	uxth	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012750:	fb12 f303 	smulbb	r3, r2, r3
 8012754:	b29b      	uxth	r3, r3
 8012756:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012758:	4293      	cmp	r3, r2
 801275a:	bf28      	it	cs
 801275c:	4613      	movcs	r3, r2
 801275e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012766:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012768:	4413      	add	r3, r2
 801276a:	b29a      	uxth	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012772:	429a      	cmp	r2, r3
 8012774:	d309      	bcc.n	801278a <tcp_receive+0x2c6>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801277c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801277e:	4413      	add	r3, r2
 8012780:	b29a      	uxth	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012788:	e04e      	b.n	8012828 <tcp_receive+0x364>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012794:	e048      	b.n	8012828 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801279c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801279e:	4413      	add	r3, r2
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d309      	bcc.n	80127c0 <tcp_receive+0x2fc>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80127b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80127b4:	4413      	add	r3, r2
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80127be:	e004      	b.n	80127ca <tcp_receive+0x306>
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d326      	bcc.n	8012828 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127fa:	4413      	add	r3, r2
 80127fc:	b29a      	uxth	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012804:	429a      	cmp	r2, r3
 8012806:	d30a      	bcc.n	801281e <tcp_receive+0x35a>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012812:	4413      	add	r3, r2
 8012814:	b29a      	uxth	r2, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801281c:	e004      	b.n	8012828 <tcp_receive+0x364>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012824:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012830:	4a98      	ldr	r2, [pc, #608]	; (8012a94 <tcp_receive+0x5d0>)
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7ff fdca 	bl	80123cc <tcp_free_acked_segments>
 8012838:	4602      	mov	r2, r0
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012846:	4a94      	ldr	r2, [pc, #592]	; (8012a98 <tcp_receive+0x5d4>)
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7ff fdbf 	bl	80123cc <tcp_free_acked_segments>
 801284e:	4602      	mov	r2, r0
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012858:	2b00      	cmp	r3, #0
 801285a:	d104      	bne.n	8012866 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012862:	861a      	strh	r2, [r3, #48]	; 0x30
 8012864:	e002      	b.n	801286c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2200      	movs	r2, #0
 801286a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2200      	movs	r2, #0
 8012870:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012876:	2b00      	cmp	r3, #0
 8012878:	d103      	bne.n	8012882 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2200      	movs	r2, #0
 801287e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012888:	4b84      	ldr	r3, [pc, #528]	; (8012a9c <tcp_receive+0x5d8>)
 801288a:	881b      	ldrh	r3, [r3, #0]
 801288c:	4413      	add	r3, r2
 801288e:	b29a      	uxth	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	8b5b      	ldrh	r3, [r3, #26]
 801289a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d035      	beq.n	801290e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d118      	bne.n	80128dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00c      	beq.n	80128cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7fa fdaa 	bl	800d418 <lwip_htonl>
 80128c4:	4603      	mov	r3, r0
 80128c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	dc20      	bgt.n	801290e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	8b5b      	ldrh	r3, [r3, #26]
 80128d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80128da:	e018      	b.n	801290e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fa fd95 	bl	800d418 <lwip_htonl>
 80128ee:	4603      	mov	r3, r0
 80128f0:	1ae3      	subs	r3, r4, r3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dc0b      	bgt.n	801290e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	8b5b      	ldrh	r3, [r3, #26]
 80128fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80128fe:	b29a      	uxth	r2, r3
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012904:	e003      	b.n	801290e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f002 fbce 	bl	80150a8 <tcp_send_empty_ack>
 801290c:	e000      	b.n	8012910 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801290e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012914:	2b00      	cmp	r3, #0
 8012916:	d05b      	beq.n	80129d0 <tcp_receive+0x50c>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801291c:	4b60      	ldr	r3, [pc, #384]	; (8012aa0 <tcp_receive+0x5dc>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	2b00      	cmp	r3, #0
 8012924:	da54      	bge.n	80129d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012926:	4b5f      	ldr	r3, [pc, #380]	; (8012aa4 <tcp_receive+0x5e0>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	b29a      	uxth	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012930:	b29b      	uxth	r3, r3
 8012932:	1ad3      	subs	r3, r2, r3
 8012934:	b29b      	uxth	r3, r3
 8012936:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801293a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012944:	10db      	asrs	r3, r3, #3
 8012946:	b21b      	sxth	r3, r3
 8012948:	b29b      	uxth	r3, r3
 801294a:	1ad3      	subs	r3, r2, r3
 801294c:	b29b      	uxth	r3, r3
 801294e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012958:	b29a      	uxth	r2, r3
 801295a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801295e:	4413      	add	r3, r2
 8012960:	b29b      	uxth	r3, r3
 8012962:	b21a      	sxth	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012968:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801296c:	2b00      	cmp	r3, #0
 801296e:	da05      	bge.n	801297c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012974:	425b      	negs	r3, r3
 8012976:	b29b      	uxth	r3, r3
 8012978:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801297c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012986:	109b      	asrs	r3, r3, #2
 8012988:	b21b      	sxth	r3, r3
 801298a:	b29b      	uxth	r3, r3
 801298c:	1ad3      	subs	r3, r2, r3
 801298e:	b29b      	uxth	r3, r3
 8012990:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801299a:	b29a      	uxth	r2, r3
 801299c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80129a0:	4413      	add	r3, r2
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	b21a      	sxth	r2, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80129b0:	10db      	asrs	r3, r3, #3
 80129b2:	b21b      	sxth	r3, r3
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80129bc:	b29b      	uxth	r3, r3
 80129be:	4413      	add	r3, r2
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	b21a      	sxth	r2, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2200      	movs	r2, #0
 80129ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80129d0:	4b35      	ldr	r3, [pc, #212]	; (8012aa8 <tcp_receive+0x5e4>)
 80129d2:	881b      	ldrh	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	f000 84e2 	beq.w	801339e <tcp_receive+0xeda>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	7d1b      	ldrb	r3, [r3, #20]
 80129de:	2b06      	cmp	r3, #6
 80129e0:	f200 84dd 	bhi.w	801339e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129e8:	4b30      	ldr	r3, [pc, #192]	; (8012aac <tcp_receive+0x5e8>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	1ad3      	subs	r3, r2, r3
 80129ee:	3b01      	subs	r3, #1
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f2c0 808f 	blt.w	8012b14 <tcp_receive+0x650>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129fa:	4b2b      	ldr	r3, [pc, #172]	; (8012aa8 <tcp_receive+0x5e4>)
 80129fc:	881b      	ldrh	r3, [r3, #0]
 80129fe:	4619      	mov	r1, r3
 8012a00:	4b2a      	ldr	r3, [pc, #168]	; (8012aac <tcp_receive+0x5e8>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	440b      	add	r3, r1
 8012a06:	1ad3      	subs	r3, r2, r3
 8012a08:	3301      	adds	r3, #1
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f300 8082 	bgt.w	8012b14 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012a10:	4b27      	ldr	r3, [pc, #156]	; (8012ab0 <tcp_receive+0x5ec>)
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a1a:	4b24      	ldr	r3, [pc, #144]	; (8012aac <tcp_receive+0x5e8>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012a22:	4b23      	ldr	r3, [pc, #140]	; (8012ab0 <tcp_receive+0x5ec>)
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <tcp_receive+0x574>
 8012a2a:	4b22      	ldr	r3, [pc, #136]	; (8012ab4 <tcp_receive+0x5f0>)
 8012a2c:	f240 5294 	movw	r2, #1428	; 0x594
 8012a30:	4921      	ldr	r1, [pc, #132]	; (8012ab8 <tcp_receive+0x5f4>)
 8012a32:	4822      	ldr	r0, [pc, #136]	; (8012abc <tcp_receive+0x5f8>)
 8012a34:	f008 fda2 	bl	801b57c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d906      	bls.n	8012a50 <tcp_receive+0x58c>
 8012a42:	4b1c      	ldr	r3, [pc, #112]	; (8012ab4 <tcp_receive+0x5f0>)
 8012a44:	f240 5295 	movw	r2, #1429	; 0x595
 8012a48:	491d      	ldr	r1, [pc, #116]	; (8012ac0 <tcp_receive+0x5fc>)
 8012a4a:	481c      	ldr	r0, [pc, #112]	; (8012abc <tcp_receive+0x5f8>)
 8012a4c:	f008 fd96 	bl	801b57c <iprintf>
      off = (u16_t)off32;
 8012a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012a56:	4b16      	ldr	r3, [pc, #88]	; (8012ab0 <tcp_receive+0x5ec>)
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	891b      	ldrh	r3, [r3, #8]
 8012a5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d906      	bls.n	8012a72 <tcp_receive+0x5ae>
 8012a64:	4b13      	ldr	r3, [pc, #76]	; (8012ab4 <tcp_receive+0x5f0>)
 8012a66:	f240 5297 	movw	r2, #1431	; 0x597
 8012a6a:	4916      	ldr	r1, [pc, #88]	; (8012ac4 <tcp_receive+0x600>)
 8012a6c:	4813      	ldr	r0, [pc, #76]	; (8012abc <tcp_receive+0x5f8>)
 8012a6e:	f008 fd85 	bl	801b57c <iprintf>
      inseg.len -= off;
 8012a72:	4b0f      	ldr	r3, [pc, #60]	; (8012ab0 <tcp_receive+0x5ec>)
 8012a74:	891a      	ldrh	r2, [r3, #8]
 8012a76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	b29a      	uxth	r2, r3
 8012a7e:	4b0c      	ldr	r3, [pc, #48]	; (8012ab0 <tcp_receive+0x5ec>)
 8012a80:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012a82:	4b0b      	ldr	r3, [pc, #44]	; (8012ab0 <tcp_receive+0x5ec>)
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	891a      	ldrh	r2, [r3, #8]
 8012a88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a8c:	1ad3      	subs	r3, r2, r3
 8012a8e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012a90:	e02a      	b.n	8012ae8 <tcp_receive+0x624>
 8012a92:	bf00      	nop
 8012a94:	0801df94 	.word	0x0801df94
 8012a98:	0801df9c 	.word	0x0801df9c
 8012a9c:	2000c98c 	.word	0x2000c98c
 8012aa0:	2000c988 	.word	0x2000c988
 8012aa4:	2000c94c 	.word	0x2000c94c
 8012aa8:	2000c98e 	.word	0x2000c98e
 8012aac:	2000c984 	.word	0x2000c984
 8012ab0:	2000c964 	.word	0x2000c964
 8012ab4:	0801dc2c 	.word	0x0801dc2c
 8012ab8:	0801dfa4 	.word	0x0801dfa4
 8012abc:	0801dc78 	.word	0x0801dc78
 8012ac0:	0801dfb4 	.word	0x0801dfb4
 8012ac4:	0801dfc4 	.word	0x0801dfc4
        off -= p->len;
 8012ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012aca:	895b      	ldrh	r3, [r3, #10]
 8012acc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ad8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ada:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ade:	2200      	movs	r2, #0
 8012ae0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012aea:	895b      	ldrh	r3, [r3, #10]
 8012aec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d8e9      	bhi.n	8012ac8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012af4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012af8:	4619      	mov	r1, r3
 8012afa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012afc:	f7fc f856 	bl	800ebac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b04:	4a91      	ldr	r2, [pc, #580]	; (8012d4c <tcp_receive+0x888>)
 8012b06:	6013      	str	r3, [r2, #0]
 8012b08:	4b91      	ldr	r3, [pc, #580]	; (8012d50 <tcp_receive+0x88c>)
 8012b0a:	68db      	ldr	r3, [r3, #12]
 8012b0c:	4a8f      	ldr	r2, [pc, #572]	; (8012d4c <tcp_receive+0x888>)
 8012b0e:	6812      	ldr	r2, [r2, #0]
 8012b10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012b12:	e00d      	b.n	8012b30 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012b14:	4b8d      	ldr	r3, [pc, #564]	; (8012d4c <tcp_receive+0x888>)
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b1c:	1ad3      	subs	r3, r2, r3
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	da06      	bge.n	8012b30 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	8b5b      	ldrh	r3, [r3, #26]
 8012b26:	f043 0302 	orr.w	r3, r3, #2
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012b30:	4b86      	ldr	r3, [pc, #536]	; (8012d4c <tcp_receive+0x888>)
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b38:	1ad3      	subs	r3, r2, r3
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	f2c0 842a 	blt.w	8013394 <tcp_receive+0xed0>
 8012b40:	4b82      	ldr	r3, [pc, #520]	; (8012d4c <tcp_receive+0x888>)
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b48:	6879      	ldr	r1, [r7, #4]
 8012b4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b4c:	440b      	add	r3, r1
 8012b4e:	1ad3      	subs	r3, r2, r3
 8012b50:	3301      	adds	r3, #1
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f300 841e 	bgt.w	8013394 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b5c:	4b7b      	ldr	r3, [pc, #492]	; (8012d4c <tcp_receive+0x888>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	f040 829a 	bne.w	801309a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012b66:	4b7a      	ldr	r3, [pc, #488]	; (8012d50 <tcp_receive+0x88c>)
 8012b68:	891c      	ldrh	r4, [r3, #8]
 8012b6a:	4b79      	ldr	r3, [pc, #484]	; (8012d50 <tcp_receive+0x88c>)
 8012b6c:	68db      	ldr	r3, [r3, #12]
 8012b6e:	899b      	ldrh	r3, [r3, #12]
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fa fc3c 	bl	800d3f0 <lwip_htons>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	f003 0303 	and.w	r3, r3, #3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d001      	beq.n	8012b88 <tcp_receive+0x6c4>
 8012b84:	2301      	movs	r3, #1
 8012b86:	e000      	b.n	8012b8a <tcp_receive+0x6c6>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	4423      	add	r3, r4
 8012b8c:	b29a      	uxth	r2, r3
 8012b8e:	4b71      	ldr	r3, [pc, #452]	; (8012d54 <tcp_receive+0x890>)
 8012b90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b96:	4b6f      	ldr	r3, [pc, #444]	; (8012d54 <tcp_receive+0x890>)
 8012b98:	881b      	ldrh	r3, [r3, #0]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d275      	bcs.n	8012c8a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012b9e:	4b6c      	ldr	r3, [pc, #432]	; (8012d50 <tcp_receive+0x88c>)
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	899b      	ldrh	r3, [r3, #12]
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fa fc22 	bl	800d3f0 <lwip_htons>
 8012bac:	4603      	mov	r3, r0
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	f003 0301 	and.w	r3, r3, #1
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d01f      	beq.n	8012bf8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012bb8:	4b65      	ldr	r3, [pc, #404]	; (8012d50 <tcp_receive+0x88c>)
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	899b      	ldrh	r3, [r3, #12]
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	b21b      	sxth	r3, r3
 8012bc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012bc6:	b21c      	sxth	r4, r3
 8012bc8:	4b61      	ldr	r3, [pc, #388]	; (8012d50 <tcp_receive+0x88c>)
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	899b      	ldrh	r3, [r3, #12]
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7fa fc0d 	bl	800d3f0 <lwip_htons>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	b2db      	uxtb	r3, r3
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fa fc04 	bl	800d3f0 <lwip_htons>
 8012be8:	4603      	mov	r3, r0
 8012bea:	b21b      	sxth	r3, r3
 8012bec:	4323      	orrs	r3, r4
 8012bee:	b21a      	sxth	r2, r3
 8012bf0:	4b57      	ldr	r3, [pc, #348]	; (8012d50 <tcp_receive+0x88c>)
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	b292      	uxth	r2, r2
 8012bf6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bfc:	4b54      	ldr	r3, [pc, #336]	; (8012d50 <tcp_receive+0x88c>)
 8012bfe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012c00:	4b53      	ldr	r3, [pc, #332]	; (8012d50 <tcp_receive+0x88c>)
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	899b      	ldrh	r3, [r3, #12]
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7fa fbf1 	bl	800d3f0 <lwip_htons>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	f003 0302 	and.w	r3, r3, #2
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d005      	beq.n	8012c26 <tcp_receive+0x762>
            inseg.len -= 1;
 8012c1a:	4b4d      	ldr	r3, [pc, #308]	; (8012d50 <tcp_receive+0x88c>)
 8012c1c:	891b      	ldrh	r3, [r3, #8]
 8012c1e:	3b01      	subs	r3, #1
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	4b4b      	ldr	r3, [pc, #300]	; (8012d50 <tcp_receive+0x88c>)
 8012c24:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012c26:	4b4a      	ldr	r3, [pc, #296]	; (8012d50 <tcp_receive+0x88c>)
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	4a49      	ldr	r2, [pc, #292]	; (8012d50 <tcp_receive+0x88c>)
 8012c2c:	8912      	ldrh	r2, [r2, #8]
 8012c2e:	4611      	mov	r1, r2
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7fb febb 	bl	800e9ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012c36:	4b46      	ldr	r3, [pc, #280]	; (8012d50 <tcp_receive+0x88c>)
 8012c38:	891c      	ldrh	r4, [r3, #8]
 8012c3a:	4b45      	ldr	r3, [pc, #276]	; (8012d50 <tcp_receive+0x88c>)
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	899b      	ldrh	r3, [r3, #12]
 8012c40:	b29b      	uxth	r3, r3
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fa fbd4 	bl	800d3f0 <lwip_htons>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	f003 0303 	and.w	r3, r3, #3
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <tcp_receive+0x794>
 8012c54:	2301      	movs	r3, #1
 8012c56:	e000      	b.n	8012c5a <tcp_receive+0x796>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	4423      	add	r3, r4
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	4b3d      	ldr	r3, [pc, #244]	; (8012d54 <tcp_receive+0x890>)
 8012c60:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012c62:	4b3c      	ldr	r3, [pc, #240]	; (8012d54 <tcp_receive+0x890>)
 8012c64:	881b      	ldrh	r3, [r3, #0]
 8012c66:	461a      	mov	r2, r3
 8012c68:	4b38      	ldr	r3, [pc, #224]	; (8012d4c <tcp_receive+0x888>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	441a      	add	r2, r3
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c72:	6879      	ldr	r1, [r7, #4]
 8012c74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c76:	440b      	add	r3, r1
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d006      	beq.n	8012c8a <tcp_receive+0x7c6>
 8012c7c:	4b36      	ldr	r3, [pc, #216]	; (8012d58 <tcp_receive+0x894>)
 8012c7e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012c82:	4936      	ldr	r1, [pc, #216]	; (8012d5c <tcp_receive+0x898>)
 8012c84:	4836      	ldr	r0, [pc, #216]	; (8012d60 <tcp_receive+0x89c>)
 8012c86:	f008 fc79 	bl	801b57c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f000 80e7 	beq.w	8012e62 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c94:	4b2e      	ldr	r3, [pc, #184]	; (8012d50 <tcp_receive+0x88c>)
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	899b      	ldrh	r3, [r3, #12]
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7fa fba7 	bl	800d3f0 <lwip_htons>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	f003 0301 	and.w	r3, r3, #1
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d010      	beq.n	8012cd0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012cae:	e00a      	b.n	8012cc6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cb4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f7fd fcde 	bl	8010682 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d1f0      	bne.n	8012cb0 <tcp_receive+0x7ec>
 8012cce:	e0c8      	b.n	8012e62 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012cd6:	e052      	b.n	8012d7e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	899b      	ldrh	r3, [r3, #12]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fa fb85 	bl	800d3f0 <lwip_htons>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	f003 0301 	and.w	r3, r3, #1
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d03d      	beq.n	8012d6e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012cf2:	4b17      	ldr	r3, [pc, #92]	; (8012d50 <tcp_receive+0x88c>)
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	899b      	ldrh	r3, [r3, #12]
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fa fb78 	bl	800d3f0 <lwip_htons>
 8012d00:	4603      	mov	r3, r0
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d130      	bne.n	8012d6e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012d0c:	4b10      	ldr	r3, [pc, #64]	; (8012d50 <tcp_receive+0x88c>)
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	899b      	ldrh	r3, [r3, #12]
 8012d12:	b29c      	uxth	r4, r3
 8012d14:	2001      	movs	r0, #1
 8012d16:	f7fa fb6b 	bl	800d3f0 <lwip_htons>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	4b0c      	ldr	r3, [pc, #48]	; (8012d50 <tcp_receive+0x88c>)
 8012d20:	68db      	ldr	r3, [r3, #12]
 8012d22:	4322      	orrs	r2, r4
 8012d24:	b292      	uxth	r2, r2
 8012d26:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012d28:	4b09      	ldr	r3, [pc, #36]	; (8012d50 <tcp_receive+0x88c>)
 8012d2a:	891c      	ldrh	r4, [r3, #8]
 8012d2c:	4b08      	ldr	r3, [pc, #32]	; (8012d50 <tcp_receive+0x88c>)
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	899b      	ldrh	r3, [r3, #12]
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7fa fb5b 	bl	800d3f0 <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	f003 0303 	and.w	r3, r3, #3
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d00e      	beq.n	8012d64 <tcp_receive+0x8a0>
 8012d46:	2301      	movs	r3, #1
 8012d48:	e00d      	b.n	8012d66 <tcp_receive+0x8a2>
 8012d4a:	bf00      	nop
 8012d4c:	2000c984 	.word	0x2000c984
 8012d50:	2000c964 	.word	0x2000c964
 8012d54:	2000c98e 	.word	0x2000c98e
 8012d58:	0801dc2c 	.word	0x0801dc2c
 8012d5c:	0801dfd4 	.word	0x0801dfd4
 8012d60:	0801dc78 	.word	0x0801dc78
 8012d64:	2300      	movs	r3, #0
 8012d66:	4423      	add	r3, r4
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	4b98      	ldr	r3, [pc, #608]	; (8012fcc <tcp_receive+0xb08>)
 8012d6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012d78:	6938      	ldr	r0, [r7, #16]
 8012d7a:	f7fd fc82 	bl	8010682 <tcp_seg_free>
            while (next &&
 8012d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00e      	beq.n	8012da2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012d84:	4b91      	ldr	r3, [pc, #580]	; (8012fcc <tcp_receive+0xb08>)
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	461a      	mov	r2, r3
 8012d8a:	4b91      	ldr	r3, [pc, #580]	; (8012fd0 <tcp_receive+0xb0c>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	441a      	add	r2, r3
 8012d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d98:	8909      	ldrh	r1, [r1, #8]
 8012d9a:	440b      	add	r3, r1
 8012d9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	da9a      	bge.n	8012cd8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d059      	beq.n	8012e5c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012da8:	4b88      	ldr	r3, [pc, #544]	; (8012fcc <tcp_receive+0xb08>)
 8012daa:	881b      	ldrh	r3, [r3, #0]
 8012dac:	461a      	mov	r2, r3
 8012dae:	4b88      	ldr	r3, [pc, #544]	; (8012fd0 <tcp_receive+0xb0c>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	441a      	add	r2, r3
 8012db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	dd4d      	ble.n	8012e5c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	b29a      	uxth	r2, r3
 8012dc8:	4b81      	ldr	r3, [pc, #516]	; (8012fd0 <tcp_receive+0xb0c>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	1ad3      	subs	r3, r2, r3
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	4b80      	ldr	r3, [pc, #512]	; (8012fd4 <tcp_receive+0xb10>)
 8012dd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012dd6:	4b7f      	ldr	r3, [pc, #508]	; (8012fd4 <tcp_receive+0xb10>)
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	899b      	ldrh	r3, [r3, #12]
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fa fb06 	bl	800d3f0 <lwip_htons>
 8012de4:	4603      	mov	r3, r0
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	f003 0302 	and.w	r3, r3, #2
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d005      	beq.n	8012dfc <tcp_receive+0x938>
                inseg.len -= 1;
 8012df0:	4b78      	ldr	r3, [pc, #480]	; (8012fd4 <tcp_receive+0xb10>)
 8012df2:	891b      	ldrh	r3, [r3, #8]
 8012df4:	3b01      	subs	r3, #1
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	4b76      	ldr	r3, [pc, #472]	; (8012fd4 <tcp_receive+0xb10>)
 8012dfa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012dfc:	4b75      	ldr	r3, [pc, #468]	; (8012fd4 <tcp_receive+0xb10>)
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	4a74      	ldr	r2, [pc, #464]	; (8012fd4 <tcp_receive+0xb10>)
 8012e02:	8912      	ldrh	r2, [r2, #8]
 8012e04:	4611      	mov	r1, r2
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fb fdd0 	bl	800e9ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012e0c:	4b71      	ldr	r3, [pc, #452]	; (8012fd4 <tcp_receive+0xb10>)
 8012e0e:	891c      	ldrh	r4, [r3, #8]
 8012e10:	4b70      	ldr	r3, [pc, #448]	; (8012fd4 <tcp_receive+0xb10>)
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	899b      	ldrh	r3, [r3, #12]
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fa fae9 	bl	800d3f0 <lwip_htons>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	f003 0303 	and.w	r3, r3, #3
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d001      	beq.n	8012e2e <tcp_receive+0x96a>
 8012e2a:	2301      	movs	r3, #1
 8012e2c:	e000      	b.n	8012e30 <tcp_receive+0x96c>
 8012e2e:	2300      	movs	r3, #0
 8012e30:	4423      	add	r3, r4
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	4b65      	ldr	r3, [pc, #404]	; (8012fcc <tcp_receive+0xb08>)
 8012e36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012e38:	4b64      	ldr	r3, [pc, #400]	; (8012fcc <tcp_receive+0xb08>)
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	4b64      	ldr	r3, [pc, #400]	; (8012fd0 <tcp_receive+0xb0c>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	441a      	add	r2, r3
 8012e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e46:	68db      	ldr	r3, [r3, #12]
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d006      	beq.n	8012e5c <tcp_receive+0x998>
 8012e4e:	4b62      	ldr	r3, [pc, #392]	; (8012fd8 <tcp_receive+0xb14>)
 8012e50:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012e54:	4961      	ldr	r1, [pc, #388]	; (8012fdc <tcp_receive+0xb18>)
 8012e56:	4862      	ldr	r0, [pc, #392]	; (8012fe0 <tcp_receive+0xb1c>)
 8012e58:	f008 fb90 	bl	801b57c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e60:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012e62:	4b5a      	ldr	r3, [pc, #360]	; (8012fcc <tcp_receive+0xb08>)
 8012e64:	881b      	ldrh	r3, [r3, #0]
 8012e66:	461a      	mov	r2, r3
 8012e68:	4b59      	ldr	r3, [pc, #356]	; (8012fd0 <tcp_receive+0xb0c>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	441a      	add	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e76:	4b55      	ldr	r3, [pc, #340]	; (8012fcc <tcp_receive+0xb08>)
 8012e78:	881b      	ldrh	r3, [r3, #0]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d206      	bcs.n	8012e8c <tcp_receive+0x9c8>
 8012e7e:	4b56      	ldr	r3, [pc, #344]	; (8012fd8 <tcp_receive+0xb14>)
 8012e80:	f240 6207 	movw	r2, #1543	; 0x607
 8012e84:	4957      	ldr	r1, [pc, #348]	; (8012fe4 <tcp_receive+0xb20>)
 8012e86:	4856      	ldr	r0, [pc, #344]	; (8012fe0 <tcp_receive+0xb1c>)
 8012e88:	f008 fb78 	bl	801b57c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e90:	4b4e      	ldr	r3, [pc, #312]	; (8012fcc <tcp_receive+0xb08>)
 8012e92:	881b      	ldrh	r3, [r3, #0]
 8012e94:	1ad3      	subs	r3, r2, r3
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7fc fdb3 	bl	800fa08 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012ea2:	4b4c      	ldr	r3, [pc, #304]	; (8012fd4 <tcp_receive+0xb10>)
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	891b      	ldrh	r3, [r3, #8]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d006      	beq.n	8012eba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012eac:	4b49      	ldr	r3, [pc, #292]	; (8012fd4 <tcp_receive+0xb10>)
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	4a4d      	ldr	r2, [pc, #308]	; (8012fe8 <tcp_receive+0xb24>)
 8012eb2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012eb4:	4b47      	ldr	r3, [pc, #284]	; (8012fd4 <tcp_receive+0xb10>)
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012eba:	4b46      	ldr	r3, [pc, #280]	; (8012fd4 <tcp_receive+0xb10>)
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	899b      	ldrh	r3, [r3, #12]
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7fa fa94 	bl	800d3f0 <lwip_htons>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	f003 0301 	and.w	r3, r3, #1
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f000 80b8 	beq.w	8013046 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012ed6:	4b45      	ldr	r3, [pc, #276]	; (8012fec <tcp_receive+0xb28>)
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	f043 0320 	orr.w	r3, r3, #32
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	4b42      	ldr	r3, [pc, #264]	; (8012fec <tcp_receive+0xb28>)
 8012ee2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012ee4:	e0af      	b.n	8013046 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012eea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	4a36      	ldr	r2, [pc, #216]	; (8012fd0 <tcp_receive+0xb0c>)
 8012ef6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	891b      	ldrh	r3, [r3, #8]
 8012efc:	461c      	mov	r4, r3
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	68db      	ldr	r3, [r3, #12]
 8012f02:	899b      	ldrh	r3, [r3, #12]
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7fa fa72 	bl	800d3f0 <lwip_htons>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	f003 0303 	and.w	r3, r3, #3
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d001      	beq.n	8012f1c <tcp_receive+0xa58>
 8012f18:	2301      	movs	r3, #1
 8012f1a:	e000      	b.n	8012f1e <tcp_receive+0xa5a>
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	191a      	adds	r2, r3, r4
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f24:	441a      	add	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f2e:	461c      	mov	r4, r3
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	891b      	ldrh	r3, [r3, #8]
 8012f34:	461d      	mov	r5, r3
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	899b      	ldrh	r3, [r3, #12]
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fa fa56 	bl	800d3f0 <lwip_htons>
 8012f44:	4603      	mov	r3, r0
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	f003 0303 	and.w	r3, r3, #3
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <tcp_receive+0xa90>
 8012f50:	2301      	movs	r3, #1
 8012f52:	e000      	b.n	8012f56 <tcp_receive+0xa92>
 8012f54:	2300      	movs	r3, #0
 8012f56:	442b      	add	r3, r5
 8012f58:	429c      	cmp	r4, r3
 8012f5a:	d206      	bcs.n	8012f6a <tcp_receive+0xaa6>
 8012f5c:	4b1e      	ldr	r3, [pc, #120]	; (8012fd8 <tcp_receive+0xb14>)
 8012f5e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012f62:	4923      	ldr	r1, [pc, #140]	; (8012ff0 <tcp_receive+0xb2c>)
 8012f64:	481e      	ldr	r0, [pc, #120]	; (8012fe0 <tcp_receive+0xb1c>)
 8012f66:	f008 fb09 	bl	801b57c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	891b      	ldrh	r3, [r3, #8]
 8012f6e:	461c      	mov	r4, r3
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	899b      	ldrh	r3, [r3, #12]
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fa fa39 	bl	800d3f0 <lwip_htons>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	b2db      	uxtb	r3, r3
 8012f82:	f003 0303 	and.w	r3, r3, #3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d001      	beq.n	8012f8e <tcp_receive+0xaca>
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	e000      	b.n	8012f90 <tcp_receive+0xacc>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	1919      	adds	r1, r3, r4
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f96:	b28b      	uxth	r3, r1
 8012f98:	1ad3      	subs	r3, r2, r3
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f7fc fd31 	bl	800fa08 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	891b      	ldrh	r3, [r3, #8]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d028      	beq.n	8013002 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012fb0:	4b0d      	ldr	r3, [pc, #52]	; (8012fe8 <tcp_receive+0xb24>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d01d      	beq.n	8012ff4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012fb8:	4b0b      	ldr	r3, [pc, #44]	; (8012fe8 <tcp_receive+0xb24>)
 8012fba:	681a      	ldr	r2, [r3, #0]
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	4610      	mov	r0, r2
 8012fc4:	f7fb ff44 	bl	800ee50 <pbuf_cat>
 8012fc8:	e018      	b.n	8012ffc <tcp_receive+0xb38>
 8012fca:	bf00      	nop
 8012fcc:	2000c98e 	.word	0x2000c98e
 8012fd0:	2000c984 	.word	0x2000c984
 8012fd4:	2000c964 	.word	0x2000c964
 8012fd8:	0801dc2c 	.word	0x0801dc2c
 8012fdc:	0801e00c 	.word	0x0801e00c
 8012fe0:	0801dc78 	.word	0x0801dc78
 8012fe4:	0801e048 	.word	0x0801e048
 8012fe8:	2000c994 	.word	0x2000c994
 8012fec:	2000c991 	.word	0x2000c991
 8012ff0:	0801e068 	.word	0x0801e068
            } else {
              recv_data = cseg->p;
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	4a70      	ldr	r2, [pc, #448]	; (80131bc <tcp_receive+0xcf8>)
 8012ffa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	2200      	movs	r2, #0
 8013000:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	899b      	ldrh	r3, [r3, #12]
 8013008:	b29b      	uxth	r3, r3
 801300a:	4618      	mov	r0, r3
 801300c:	f7fa f9f0 	bl	800d3f0 <lwip_htons>
 8013010:	4603      	mov	r3, r0
 8013012:	b2db      	uxtb	r3, r3
 8013014:	f003 0301 	and.w	r3, r3, #1
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00d      	beq.n	8013038 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801301c:	4b68      	ldr	r3, [pc, #416]	; (80131c0 <tcp_receive+0xcfc>)
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	f043 0320 	orr.w	r3, r3, #32
 8013024:	b2da      	uxtb	r2, r3
 8013026:	4b66      	ldr	r3, [pc, #408]	; (80131c0 <tcp_receive+0xcfc>)
 8013028:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	7d1b      	ldrb	r3, [r3, #20]
 801302e:	2b04      	cmp	r3, #4
 8013030:	d102      	bne.n	8013038 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2207      	movs	r2, #7
 8013036:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013040:	68b8      	ldr	r0, [r7, #8]
 8013042:	f7fd fb1e 	bl	8010682 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801304a:	2b00      	cmp	r3, #0
 801304c:	d008      	beq.n	8013060 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013052:	68db      	ldr	r3, [r3, #12]
 8013054:	685a      	ldr	r2, [r3, #4]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801305a:	429a      	cmp	r2, r3
 801305c:	f43f af43 	beq.w	8012ee6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	8b5b      	ldrh	r3, [r3, #26]
 8013064:	f003 0301 	and.w	r3, r3, #1
 8013068:	2b00      	cmp	r3, #0
 801306a:	d00e      	beq.n	801308a <tcp_receive+0xbc6>
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	8b5b      	ldrh	r3, [r3, #26]
 8013070:	f023 0301 	bic.w	r3, r3, #1
 8013074:	b29a      	uxth	r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	835a      	strh	r2, [r3, #26]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	8b5b      	ldrh	r3, [r3, #26]
 801307e:	f043 0302 	orr.w	r3, r3, #2
 8013082:	b29a      	uxth	r2, r3
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013088:	e188      	b.n	801339c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	8b5b      	ldrh	r3, [r3, #26]
 801308e:	f043 0301 	orr.w	r3, r3, #1
 8013092:	b29a      	uxth	r2, r3
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013098:	e180      	b.n	801339c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d106      	bne.n	80130b0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80130a2:	4848      	ldr	r0, [pc, #288]	; (80131c4 <tcp_receive+0xd00>)
 80130a4:	f7fd fb06 	bl	80106b4 <tcp_seg_copy>
 80130a8:	4602      	mov	r2, r0
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	675a      	str	r2, [r3, #116]	; 0x74
 80130ae:	e16d      	b.n	801338c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80130b0:	2300      	movs	r3, #0
 80130b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80130ba:	e157      	b.n	801336c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80130bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	685a      	ldr	r2, [r3, #4]
 80130c2:	4b41      	ldr	r3, [pc, #260]	; (80131c8 <tcp_receive+0xd04>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d11d      	bne.n	8013106 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80130ca:	4b3e      	ldr	r3, [pc, #248]	; (80131c4 <tcp_receive+0xd00>)
 80130cc:	891a      	ldrh	r2, [r3, #8]
 80130ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d0:	891b      	ldrh	r3, [r3, #8]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	f240 814f 	bls.w	8013376 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80130d8:	483a      	ldr	r0, [pc, #232]	; (80131c4 <tcp_receive+0xd00>)
 80130da:	f7fd faeb 	bl	80106b4 <tcp_seg_copy>
 80130de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	f000 8149 	beq.w	801337a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80130e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d003      	beq.n	80130f6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80130ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130f0:	697a      	ldr	r2, [r7, #20]
 80130f2:	601a      	str	r2, [r3, #0]
 80130f4:	e002      	b.n	80130fc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	697a      	ldr	r2, [r7, #20]
 80130fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80130fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130fe:	6978      	ldr	r0, [r7, #20]
 8013100:	f7ff f8dc 	bl	80122bc <tcp_oos_insert_segment>
                }
                break;
 8013104:	e139      	b.n	801337a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013108:	2b00      	cmp	r3, #0
 801310a:	d117      	bne.n	801313c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801310c:	4b2e      	ldr	r3, [pc, #184]	; (80131c8 <tcp_receive+0xd04>)
 801310e:	681a      	ldr	r2, [r3, #0]
 8013110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	1ad3      	subs	r3, r2, r3
 8013118:	2b00      	cmp	r3, #0
 801311a:	da57      	bge.n	80131cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801311c:	4829      	ldr	r0, [pc, #164]	; (80131c4 <tcp_receive+0xd00>)
 801311e:	f7fd fac9 	bl	80106b4 <tcp_seg_copy>
 8013122:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013124:	69bb      	ldr	r3, [r7, #24]
 8013126:	2b00      	cmp	r3, #0
 8013128:	f000 8129 	beq.w	801337e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	69ba      	ldr	r2, [r7, #24]
 8013130:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013134:	69b8      	ldr	r0, [r7, #24]
 8013136:	f7ff f8c1 	bl	80122bc <tcp_oos_insert_segment>
                  }
                  break;
 801313a:	e120      	b.n	801337e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801313c:	4b22      	ldr	r3, [pc, #136]	; (80131c8 <tcp_receive+0xd04>)
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	1ad3      	subs	r3, r2, r3
 8013148:	3b01      	subs	r3, #1
 801314a:	2b00      	cmp	r3, #0
 801314c:	db3e      	blt.n	80131cc <tcp_receive+0xd08>
 801314e:	4b1e      	ldr	r3, [pc, #120]	; (80131c8 <tcp_receive+0xd04>)
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013154:	68db      	ldr	r3, [r3, #12]
 8013156:	685b      	ldr	r3, [r3, #4]
 8013158:	1ad3      	subs	r3, r2, r3
 801315a:	3301      	adds	r3, #1
 801315c:	2b00      	cmp	r3, #0
 801315e:	dc35      	bgt.n	80131cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013160:	4818      	ldr	r0, [pc, #96]	; (80131c4 <tcp_receive+0xd00>)
 8013162:	f7fd faa7 	bl	80106b4 <tcp_seg_copy>
 8013166:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013168:	69fb      	ldr	r3, [r7, #28]
 801316a:	2b00      	cmp	r3, #0
 801316c:	f000 8109 	beq.w	8013382 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013178:	8912      	ldrh	r2, [r2, #8]
 801317a:	441a      	add	r2, r3
 801317c:	4b12      	ldr	r3, [pc, #72]	; (80131c8 <tcp_receive+0xd04>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	2b00      	cmp	r3, #0
 8013184:	dd12      	ble.n	80131ac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013186:	4b10      	ldr	r3, [pc, #64]	; (80131c8 <tcp_receive+0xd04>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	b29a      	uxth	r2, r3
 801318c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	b29b      	uxth	r3, r3
 8013194:	1ad3      	subs	r3, r2, r3
 8013196:	b29a      	uxth	r2, r3
 8013198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801319a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801319e:	685a      	ldr	r2, [r3, #4]
 80131a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131a2:	891b      	ldrh	r3, [r3, #8]
 80131a4:	4619      	mov	r1, r3
 80131a6:	4610      	mov	r0, r2
 80131a8:	f7fb fc00 	bl	800e9ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 80131ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ae:	69fa      	ldr	r2, [r7, #28]
 80131b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80131b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80131b4:	69f8      	ldr	r0, [r7, #28]
 80131b6:	f7ff f881 	bl	80122bc <tcp_oos_insert_segment>
                  }
                  break;
 80131ba:	e0e2      	b.n	8013382 <tcp_receive+0xebe>
 80131bc:	2000c994 	.word	0x2000c994
 80131c0:	2000c991 	.word	0x2000c991
 80131c4:	2000c964 	.word	0x2000c964
 80131c8:	2000c984 	.word	0x2000c984
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80131cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80131d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	f040 80c6 	bne.w	8013366 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80131da:	4b80      	ldr	r3, [pc, #512]	; (80133dc <tcp_receive+0xf18>)
 80131dc:	681a      	ldr	r2, [r3, #0]
 80131de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f340 80bd 	ble.w	8013366 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80131ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	899b      	ldrh	r3, [r3, #12]
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fa f8fb 	bl	800d3f0 <lwip_htons>
 80131fa:	4603      	mov	r3, r0
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	f003 0301 	and.w	r3, r3, #1
 8013202:	2b00      	cmp	r3, #0
 8013204:	f040 80bf 	bne.w	8013386 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013208:	4875      	ldr	r0, [pc, #468]	; (80133e0 <tcp_receive+0xf1c>)
 801320a:	f7fd fa53 	bl	80106b4 <tcp_seg_copy>
 801320e:	4602      	mov	r2, r0
 8013210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013212:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	f000 80b6 	beq.w	801338a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013226:	8912      	ldrh	r2, [r2, #8]
 8013228:	441a      	add	r2, r3
 801322a:	4b6c      	ldr	r3, [pc, #432]	; (80133dc <tcp_receive+0xf18>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	2b00      	cmp	r3, #0
 8013232:	dd12      	ble.n	801325a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013234:	4b69      	ldr	r3, [pc, #420]	; (80133dc <tcp_receive+0xf18>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	b29a      	uxth	r2, r3
 801323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	b29b      	uxth	r3, r3
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	b29a      	uxth	r2, r3
 8013246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013248:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324c:	685a      	ldr	r2, [r3, #4]
 801324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013250:	891b      	ldrh	r3, [r3, #8]
 8013252:	4619      	mov	r1, r3
 8013254:	4610      	mov	r0, r2
 8013256:	f7fb fba9 	bl	800e9ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801325a:	4b62      	ldr	r3, [pc, #392]	; (80133e4 <tcp_receive+0xf20>)
 801325c:	881b      	ldrh	r3, [r3, #0]
 801325e:	461a      	mov	r2, r3
 8013260:	4b5e      	ldr	r3, [pc, #376]	; (80133dc <tcp_receive+0xf18>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	441a      	add	r2, r3
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801326a:	6879      	ldr	r1, [r7, #4]
 801326c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801326e:	440b      	add	r3, r1
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	2b00      	cmp	r3, #0
 8013274:	f340 8089 	ble.w	801338a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	899b      	ldrh	r3, [r3, #12]
 8013280:	b29b      	uxth	r3, r3
 8013282:	4618      	mov	r0, r3
 8013284:	f7fa f8b4 	bl	800d3f0 <lwip_htons>
 8013288:	4603      	mov	r3, r0
 801328a:	b2db      	uxtb	r3, r3
 801328c:	f003 0301 	and.w	r3, r3, #1
 8013290:	2b00      	cmp	r3, #0
 8013292:	d022      	beq.n	80132da <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	899b      	ldrh	r3, [r3, #12]
 801329c:	b29b      	uxth	r3, r3
 801329e:	b21b      	sxth	r3, r3
 80132a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80132a4:	b21c      	sxth	r4, r3
 80132a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	899b      	ldrh	r3, [r3, #12]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fa f89d 	bl	800d3f0 <lwip_htons>
 80132b6:	4603      	mov	r3, r0
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80132c0:	b29b      	uxth	r3, r3
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fa f894 	bl	800d3f0 <lwip_htons>
 80132c8:	4603      	mov	r3, r0
 80132ca:	b21b      	sxth	r3, r3
 80132cc:	4323      	orrs	r3, r4
 80132ce:	b21a      	sxth	r2, r3
 80132d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	b292      	uxth	r2, r2
 80132d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132de:	b29a      	uxth	r2, r3
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132e4:	4413      	add	r3, r2
 80132e6:	b299      	uxth	r1, r3
 80132e8:	4b3c      	ldr	r3, [pc, #240]	; (80133dc <tcp_receive+0xf18>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	1a8a      	subs	r2, r1, r2
 80132f4:	b292      	uxth	r2, r2
 80132f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80132f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	685a      	ldr	r2, [r3, #4]
 80132fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	891b      	ldrh	r3, [r3, #8]
 8013304:	4619      	mov	r1, r3
 8013306:	4610      	mov	r0, r2
 8013308:	f7fb fb50 	bl	800e9ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	891c      	ldrh	r4, [r3, #8]
 8013312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	899b      	ldrh	r3, [r3, #12]
 801331a:	b29b      	uxth	r3, r3
 801331c:	4618      	mov	r0, r3
 801331e:	f7fa f867 	bl	800d3f0 <lwip_htons>
 8013322:	4603      	mov	r3, r0
 8013324:	b2db      	uxtb	r3, r3
 8013326:	f003 0303 	and.w	r3, r3, #3
 801332a:	2b00      	cmp	r3, #0
 801332c:	d001      	beq.n	8013332 <tcp_receive+0xe6e>
 801332e:	2301      	movs	r3, #1
 8013330:	e000      	b.n	8013334 <tcp_receive+0xe70>
 8013332:	2300      	movs	r3, #0
 8013334:	4423      	add	r3, r4
 8013336:	b29a      	uxth	r2, r3
 8013338:	4b2a      	ldr	r3, [pc, #168]	; (80133e4 <tcp_receive+0xf20>)
 801333a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801333c:	4b29      	ldr	r3, [pc, #164]	; (80133e4 <tcp_receive+0xf20>)
 801333e:	881b      	ldrh	r3, [r3, #0]
 8013340:	461a      	mov	r2, r3
 8013342:	4b26      	ldr	r3, [pc, #152]	; (80133dc <tcp_receive+0xf18>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	441a      	add	r2, r3
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801334c:	6879      	ldr	r1, [r7, #4]
 801334e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013350:	440b      	add	r3, r1
 8013352:	429a      	cmp	r2, r3
 8013354:	d019      	beq.n	801338a <tcp_receive+0xec6>
 8013356:	4b24      	ldr	r3, [pc, #144]	; (80133e8 <tcp_receive+0xf24>)
 8013358:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801335c:	4923      	ldr	r1, [pc, #140]	; (80133ec <tcp_receive+0xf28>)
 801335e:	4824      	ldr	r0, [pc, #144]	; (80133f0 <tcp_receive+0xf2c>)
 8013360:	f008 f90c 	bl	801b57c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013364:	e011      	b.n	801338a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	63bb      	str	r3, [r7, #56]	; 0x38
 801336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336e:	2b00      	cmp	r3, #0
 8013370:	f47f aea4 	bne.w	80130bc <tcp_receive+0xbf8>
 8013374:	e00a      	b.n	801338c <tcp_receive+0xec8>
                break;
 8013376:	bf00      	nop
 8013378:	e008      	b.n	801338c <tcp_receive+0xec8>
                break;
 801337a:	bf00      	nop
 801337c:	e006      	b.n	801338c <tcp_receive+0xec8>
                  break;
 801337e:	bf00      	nop
 8013380:	e004      	b.n	801338c <tcp_receive+0xec8>
                  break;
 8013382:	bf00      	nop
 8013384:	e002      	b.n	801338c <tcp_receive+0xec8>
                  break;
 8013386:	bf00      	nop
 8013388:	e000      	b.n	801338c <tcp_receive+0xec8>
                break;
 801338a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f001 fe8b 	bl	80150a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013392:	e003      	b.n	801339c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f001 fe87 	bl	80150a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801339a:	e01a      	b.n	80133d2 <tcp_receive+0xf0e>
 801339c:	e019      	b.n	80133d2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801339e:	4b0f      	ldr	r3, [pc, #60]	; (80133dc <tcp_receive+0xf18>)
 80133a0:	681a      	ldr	r2, [r3, #0]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a6:	1ad3      	subs	r3, r2, r3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	db0a      	blt.n	80133c2 <tcp_receive+0xefe>
 80133ac:	4b0b      	ldr	r3, [pc, #44]	; (80133dc <tcp_receive+0xf18>)
 80133ae:	681a      	ldr	r2, [r3, #0]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b4:	6879      	ldr	r1, [r7, #4]
 80133b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80133b8:	440b      	add	r3, r1
 80133ba:	1ad3      	subs	r3, r2, r3
 80133bc:	3301      	adds	r3, #1
 80133be:	2b00      	cmp	r3, #0
 80133c0:	dd07      	ble.n	80133d2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	8b5b      	ldrh	r3, [r3, #26]
 80133c6:	f043 0302 	orr.w	r3, r3, #2
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80133d0:	e7ff      	b.n	80133d2 <tcp_receive+0xf0e>
 80133d2:	bf00      	nop
 80133d4:	3750      	adds	r7, #80	; 0x50
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bdb0      	pop	{r4, r5, r7, pc}
 80133da:	bf00      	nop
 80133dc:	2000c984 	.word	0x2000c984
 80133e0:	2000c964 	.word	0x2000c964
 80133e4:	2000c98e 	.word	0x2000c98e
 80133e8:	0801dc2c 	.word	0x0801dc2c
 80133ec:	0801dfd4 	.word	0x0801dfd4
 80133f0:	0801dc78 	.word	0x0801dc78

080133f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b083      	sub	sp, #12
 80133f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80133fa:	4b15      	ldr	r3, [pc, #84]	; (8013450 <tcp_get_next_optbyte+0x5c>)
 80133fc:	881b      	ldrh	r3, [r3, #0]
 80133fe:	1c5a      	adds	r2, r3, #1
 8013400:	b291      	uxth	r1, r2
 8013402:	4a13      	ldr	r2, [pc, #76]	; (8013450 <tcp_get_next_optbyte+0x5c>)
 8013404:	8011      	strh	r1, [r2, #0]
 8013406:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013408:	4b12      	ldr	r3, [pc, #72]	; (8013454 <tcp_get_next_optbyte+0x60>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d004      	beq.n	801341a <tcp_get_next_optbyte+0x26>
 8013410:	4b11      	ldr	r3, [pc, #68]	; (8013458 <tcp_get_next_optbyte+0x64>)
 8013412:	881b      	ldrh	r3, [r3, #0]
 8013414:	88fa      	ldrh	r2, [r7, #6]
 8013416:	429a      	cmp	r2, r3
 8013418:	d208      	bcs.n	801342c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801341a:	4b10      	ldr	r3, [pc, #64]	; (801345c <tcp_get_next_optbyte+0x68>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	3314      	adds	r3, #20
 8013420:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013422:	88fb      	ldrh	r3, [r7, #6]
 8013424:	683a      	ldr	r2, [r7, #0]
 8013426:	4413      	add	r3, r2
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	e00b      	b.n	8013444 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801342c:	88fb      	ldrh	r3, [r7, #6]
 801342e:	b2da      	uxtb	r2, r3
 8013430:	4b09      	ldr	r3, [pc, #36]	; (8013458 <tcp_get_next_optbyte+0x64>)
 8013432:	881b      	ldrh	r3, [r3, #0]
 8013434:	b2db      	uxtb	r3, r3
 8013436:	1ad3      	subs	r3, r2, r3
 8013438:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801343a:	4b06      	ldr	r3, [pc, #24]	; (8013454 <tcp_get_next_optbyte+0x60>)
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	797b      	ldrb	r3, [r7, #5]
 8013440:	4413      	add	r3, r2
 8013442:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013444:	4618      	mov	r0, r3
 8013446:	370c      	adds	r7, #12
 8013448:	46bd      	mov	sp, r7
 801344a:	bc80      	pop	{r7}
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	2000c980 	.word	0x2000c980
 8013454:	2000c97c 	.word	0x2000c97c
 8013458:	2000c97a 	.word	0x2000c97a
 801345c:	2000c974 	.word	0x2000c974

08013460 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d106      	bne.n	801347c <tcp_parseopt+0x1c>
 801346e:	4b32      	ldr	r3, [pc, #200]	; (8013538 <tcp_parseopt+0xd8>)
 8013470:	f240 727d 	movw	r2, #1917	; 0x77d
 8013474:	4931      	ldr	r1, [pc, #196]	; (801353c <tcp_parseopt+0xdc>)
 8013476:	4832      	ldr	r0, [pc, #200]	; (8013540 <tcp_parseopt+0xe0>)
 8013478:	f008 f880 	bl	801b57c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801347c:	4b31      	ldr	r3, [pc, #196]	; (8013544 <tcp_parseopt+0xe4>)
 801347e:	881b      	ldrh	r3, [r3, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d055      	beq.n	8013530 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013484:	4b30      	ldr	r3, [pc, #192]	; (8013548 <tcp_parseopt+0xe8>)
 8013486:	2200      	movs	r2, #0
 8013488:	801a      	strh	r2, [r3, #0]
 801348a:	e045      	b.n	8013518 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801348c:	f7ff ffb2 	bl	80133f4 <tcp_get_next_optbyte>
 8013490:	4603      	mov	r3, r0
 8013492:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013494:	7bfb      	ldrb	r3, [r7, #15]
 8013496:	2b02      	cmp	r3, #2
 8013498:	d006      	beq.n	80134a8 <tcp_parseopt+0x48>
 801349a:	2b02      	cmp	r3, #2
 801349c:	dc2b      	bgt.n	80134f6 <tcp_parseopt+0x96>
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d041      	beq.n	8013526 <tcp_parseopt+0xc6>
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d127      	bne.n	80134f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80134a6:	e037      	b.n	8013518 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80134a8:	f7ff ffa4 	bl	80133f4 <tcp_get_next_optbyte>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b04      	cmp	r3, #4
 80134b0:	d13b      	bne.n	801352a <tcp_parseopt+0xca>
 80134b2:	4b25      	ldr	r3, [pc, #148]	; (8013548 <tcp_parseopt+0xe8>)
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	3301      	adds	r3, #1
 80134b8:	4a22      	ldr	r2, [pc, #136]	; (8013544 <tcp_parseopt+0xe4>)
 80134ba:	8812      	ldrh	r2, [r2, #0]
 80134bc:	4293      	cmp	r3, r2
 80134be:	da34      	bge.n	801352a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80134c0:	f7ff ff98 	bl	80133f4 <tcp_get_next_optbyte>
 80134c4:	4603      	mov	r3, r0
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	021b      	lsls	r3, r3, #8
 80134ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80134cc:	f7ff ff92 	bl	80133f4 <tcp_get_next_optbyte>
 80134d0:	4603      	mov	r3, r0
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	89bb      	ldrh	r3, [r7, #12]
 80134d6:	4313      	orrs	r3, r2
 80134d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80134da:	89bb      	ldrh	r3, [r7, #12]
 80134dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80134e0:	d804      	bhi.n	80134ec <tcp_parseopt+0x8c>
 80134e2:	89bb      	ldrh	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d001      	beq.n	80134ec <tcp_parseopt+0x8c>
 80134e8:	89ba      	ldrh	r2, [r7, #12]
 80134ea:	e001      	b.n	80134f0 <tcp_parseopt+0x90>
 80134ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80134f4:	e010      	b.n	8013518 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80134f6:	f7ff ff7d 	bl	80133f4 <tcp_get_next_optbyte>
 80134fa:	4603      	mov	r3, r0
 80134fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80134fe:	7afb      	ldrb	r3, [r7, #11]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d914      	bls.n	801352e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013504:	7afb      	ldrb	r3, [r7, #11]
 8013506:	b29a      	uxth	r2, r3
 8013508:	4b0f      	ldr	r3, [pc, #60]	; (8013548 <tcp_parseopt+0xe8>)
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	4413      	add	r3, r2
 801350e:	b29b      	uxth	r3, r3
 8013510:	3b02      	subs	r3, #2
 8013512:	b29a      	uxth	r2, r3
 8013514:	4b0c      	ldr	r3, [pc, #48]	; (8013548 <tcp_parseopt+0xe8>)
 8013516:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013518:	4b0b      	ldr	r3, [pc, #44]	; (8013548 <tcp_parseopt+0xe8>)
 801351a:	881a      	ldrh	r2, [r3, #0]
 801351c:	4b09      	ldr	r3, [pc, #36]	; (8013544 <tcp_parseopt+0xe4>)
 801351e:	881b      	ldrh	r3, [r3, #0]
 8013520:	429a      	cmp	r2, r3
 8013522:	d3b3      	bcc.n	801348c <tcp_parseopt+0x2c>
 8013524:	e004      	b.n	8013530 <tcp_parseopt+0xd0>
          return;
 8013526:	bf00      	nop
 8013528:	e002      	b.n	8013530 <tcp_parseopt+0xd0>
            return;
 801352a:	bf00      	nop
 801352c:	e000      	b.n	8013530 <tcp_parseopt+0xd0>
            return;
 801352e:	bf00      	nop
      }
    }
  }
}
 8013530:	3710      	adds	r7, #16
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	0801dc2c 	.word	0x0801dc2c
 801353c:	0801e090 	.word	0x0801e090
 8013540:	0801dc78 	.word	0x0801dc78
 8013544:	2000c978 	.word	0x2000c978
 8013548:	2000c980 	.word	0x2000c980

0801354c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801354c:	b480      	push	{r7}
 801354e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013550:	4b05      	ldr	r3, [pc, #20]	; (8013568 <tcp_trigger_input_pcb_close+0x1c>)
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	f043 0310 	orr.w	r3, r3, #16
 8013558:	b2da      	uxtb	r2, r3
 801355a:	4b03      	ldr	r3, [pc, #12]	; (8013568 <tcp_trigger_input_pcb_close+0x1c>)
 801355c:	701a      	strb	r2, [r3, #0]
}
 801355e:	bf00      	nop
 8013560:	46bd      	mov	sp, r7
 8013562:	bc80      	pop	{r7}
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	2000c991 	.word	0x2000c991

0801356c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	60f8      	str	r0, [r7, #12]
 8013574:	60b9      	str	r1, [r7, #8]
 8013576:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00a      	beq.n	8013594 <tcp_route+0x28>
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	7a1b      	ldrb	r3, [r3, #8]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d006      	beq.n	8013594 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	7a1b      	ldrb	r3, [r3, #8]
 801358a:	4618      	mov	r0, r3
 801358c:	f7fb f808 	bl	800e5a0 <netif_get_by_index>
 8013590:	4603      	mov	r3, r0
 8013592:	e003      	b.n	801359c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f005 fcbf 	bl	8018f18 <ip4_route>
 801359a:	4603      	mov	r3, r0
  }
}
 801359c:	4618      	mov	r0, r3
 801359e:	3710      	adds	r7, #16
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80135a4:	b590      	push	{r4, r7, lr}
 80135a6:	b087      	sub	sp, #28
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	603b      	str	r3, [r7, #0]
 80135b0:	4613      	mov	r3, r2
 80135b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d105      	bne.n	80135c6 <tcp_create_segment+0x22>
 80135ba:	4b44      	ldr	r3, [pc, #272]	; (80136cc <tcp_create_segment+0x128>)
 80135bc:	22a3      	movs	r2, #163	; 0xa3
 80135be:	4944      	ldr	r1, [pc, #272]	; (80136d0 <tcp_create_segment+0x12c>)
 80135c0:	4844      	ldr	r0, [pc, #272]	; (80136d4 <tcp_create_segment+0x130>)
 80135c2:	f007 ffdb 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d105      	bne.n	80135d8 <tcp_create_segment+0x34>
 80135cc:	4b3f      	ldr	r3, [pc, #252]	; (80136cc <tcp_create_segment+0x128>)
 80135ce:	22a4      	movs	r2, #164	; 0xa4
 80135d0:	4941      	ldr	r1, [pc, #260]	; (80136d8 <tcp_create_segment+0x134>)
 80135d2:	4840      	ldr	r0, [pc, #256]	; (80136d4 <tcp_create_segment+0x130>)
 80135d4:	f007 ffd2 	bl	801b57c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80135d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	b2db      	uxtb	r3, r3
 80135e0:	f003 0304 	and.w	r3, r3, #4
 80135e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80135e6:	2003      	movs	r0, #3
 80135e8:	f7fa fcb2 	bl	800df50 <memp_malloc>
 80135ec:	6138      	str	r0, [r7, #16]
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d104      	bne.n	80135fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80135f4:	68b8      	ldr	r0, [r7, #8]
 80135f6:	f7fb fb5f 	bl	800ecb8 <pbuf_free>
    return NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	e061      	b.n	80136c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013604:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	2200      	movs	r2, #0
 801360a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	68ba      	ldr	r2, [r7, #8]
 8013610:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	891a      	ldrh	r2, [r3, #8]
 8013616:	7dfb      	ldrb	r3, [r7, #23]
 8013618:	b29b      	uxth	r3, r3
 801361a:	429a      	cmp	r2, r3
 801361c:	d205      	bcs.n	801362a <tcp_create_segment+0x86>
 801361e:	4b2b      	ldr	r3, [pc, #172]	; (80136cc <tcp_create_segment+0x128>)
 8013620:	22b0      	movs	r2, #176	; 0xb0
 8013622:	492e      	ldr	r1, [pc, #184]	; (80136dc <tcp_create_segment+0x138>)
 8013624:	482b      	ldr	r0, [pc, #172]	; (80136d4 <tcp_create_segment+0x130>)
 8013626:	f007 ffa9 	bl	801b57c <iprintf>
  seg->len = p->tot_len - optlen;
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	891a      	ldrh	r2, [r3, #8]
 801362e:	7dfb      	ldrb	r3, [r7, #23]
 8013630:	b29b      	uxth	r3, r3
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	b29a      	uxth	r2, r3
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801363a:	2114      	movs	r1, #20
 801363c:	68b8      	ldr	r0, [r7, #8]
 801363e:	f7fb faa5 	bl	800eb8c <pbuf_add_header>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d004      	beq.n	8013652 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013648:	6938      	ldr	r0, [r7, #16]
 801364a:	f7fd f81a 	bl	8010682 <tcp_seg_free>
    return NULL;
 801364e:	2300      	movs	r3, #0
 8013650:	e037      	b.n	80136c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	685a      	ldr	r2, [r3, #4]
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	8ada      	ldrh	r2, [r3, #22]
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	68dc      	ldr	r4, [r3, #12]
 8013664:	4610      	mov	r0, r2
 8013666:	f7f9 fec3 	bl	800d3f0 <lwip_htons>
 801366a:	4603      	mov	r3, r0
 801366c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	8b1a      	ldrh	r2, [r3, #24]
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	68dc      	ldr	r4, [r3, #12]
 8013676:	4610      	mov	r0, r2
 8013678:	f7f9 feba 	bl	800d3f0 <lwip_htons>
 801367c:	4603      	mov	r3, r0
 801367e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	68dc      	ldr	r4, [r3, #12]
 8013684:	6838      	ldr	r0, [r7, #0]
 8013686:	f7f9 fec7 	bl	800d418 <lwip_htonl>
 801368a:	4603      	mov	r3, r0
 801368c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801368e:	7dfb      	ldrb	r3, [r7, #23]
 8013690:	089b      	lsrs	r3, r3, #2
 8013692:	b2db      	uxtb	r3, r3
 8013694:	b29b      	uxth	r3, r3
 8013696:	3305      	adds	r3, #5
 8013698:	b29b      	uxth	r3, r3
 801369a:	031b      	lsls	r3, r3, #12
 801369c:	b29a      	uxth	r2, r3
 801369e:	79fb      	ldrb	r3, [r7, #7]
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	4313      	orrs	r3, r2
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	68dc      	ldr	r4, [r3, #12]
 80136aa:	4610      	mov	r0, r2
 80136ac:	f7f9 fea0 	bl	800d3f0 <lwip_htons>
 80136b0:	4603      	mov	r3, r0
 80136b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	2200      	movs	r2, #0
 80136ba:	749a      	strb	r2, [r3, #18]
 80136bc:	2200      	movs	r2, #0
 80136be:	74da      	strb	r2, [r3, #19]
  return seg;
 80136c0:	693b      	ldr	r3, [r7, #16]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	371c      	adds	r7, #28
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd90      	pop	{r4, r7, pc}
 80136ca:	bf00      	nop
 80136cc:	0801e0ac 	.word	0x0801e0ac
 80136d0:	0801e0e0 	.word	0x0801e0e0
 80136d4:	0801e100 	.word	0x0801e100
 80136d8:	0801e128 	.word	0x0801e128
 80136dc:	0801e14c 	.word	0x0801e14c

080136e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	607b      	str	r3, [r7, #4]
 80136e8:	4603      	mov	r3, r0
 80136ea:	73fb      	strb	r3, [r7, #15]
 80136ec:	460b      	mov	r3, r1
 80136ee:	81bb      	strh	r3, [r7, #12]
 80136f0:	4613      	mov	r3, r2
 80136f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80136f4:	89bb      	ldrh	r3, [r7, #12]
 80136f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d105      	bne.n	801370a <tcp_pbuf_prealloc+0x2a>
 80136fe:	4b30      	ldr	r3, [pc, #192]	; (80137c0 <tcp_pbuf_prealloc+0xe0>)
 8013700:	22e8      	movs	r2, #232	; 0xe8
 8013702:	4930      	ldr	r1, [pc, #192]	; (80137c4 <tcp_pbuf_prealloc+0xe4>)
 8013704:	4830      	ldr	r0, [pc, #192]	; (80137c8 <tcp_pbuf_prealloc+0xe8>)
 8013706:	f007 ff39 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801370a:	6a3b      	ldr	r3, [r7, #32]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d105      	bne.n	801371c <tcp_pbuf_prealloc+0x3c>
 8013710:	4b2b      	ldr	r3, [pc, #172]	; (80137c0 <tcp_pbuf_prealloc+0xe0>)
 8013712:	22e9      	movs	r2, #233	; 0xe9
 8013714:	492d      	ldr	r1, [pc, #180]	; (80137cc <tcp_pbuf_prealloc+0xec>)
 8013716:	482c      	ldr	r0, [pc, #176]	; (80137c8 <tcp_pbuf_prealloc+0xe8>)
 8013718:	f007 ff30 	bl	801b57c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801371c:	89ba      	ldrh	r2, [r7, #12]
 801371e:	897b      	ldrh	r3, [r7, #10]
 8013720:	429a      	cmp	r2, r3
 8013722:	d221      	bcs.n	8013768 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013728:	f003 0302 	and.w	r3, r3, #2
 801372c:	2b00      	cmp	r3, #0
 801372e:	d111      	bne.n	8013754 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013730:	6a3b      	ldr	r3, [r7, #32]
 8013732:	8b5b      	ldrh	r3, [r3, #26]
 8013734:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013738:	2b00      	cmp	r3, #0
 801373a:	d115      	bne.n	8013768 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801373c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013740:	2b00      	cmp	r3, #0
 8013742:	d007      	beq.n	8013754 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013744:	6a3b      	ldr	r3, [r7, #32]
 8013746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013748:	2b00      	cmp	r3, #0
 801374a:	d103      	bne.n	8013754 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801374c:	6a3b      	ldr	r3, [r7, #32]
 801374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013750:	2b00      	cmp	r3, #0
 8013752:	d009      	beq.n	8013768 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013754:	89bb      	ldrh	r3, [r7, #12]
 8013756:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801375a:	f023 0203 	bic.w	r2, r3, #3
 801375e:	897b      	ldrh	r3, [r7, #10]
 8013760:	4293      	cmp	r3, r2
 8013762:	bf28      	it	cs
 8013764:	4613      	movcs	r3, r2
 8013766:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013768:	8af9      	ldrh	r1, [r7, #22]
 801376a:	7bfb      	ldrb	r3, [r7, #15]
 801376c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013770:	4618      	mov	r0, r3
 8013772:	f7fa ffbd 	bl	800e6f0 <pbuf_alloc>
 8013776:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d101      	bne.n	8013782 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801377e:	2300      	movs	r3, #0
 8013780:	e019      	b.n	80137b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d006      	beq.n	8013798 <tcp_pbuf_prealloc+0xb8>
 801378a:	4b0d      	ldr	r3, [pc, #52]	; (80137c0 <tcp_pbuf_prealloc+0xe0>)
 801378c:	f240 120b 	movw	r2, #267	; 0x10b
 8013790:	490f      	ldr	r1, [pc, #60]	; (80137d0 <tcp_pbuf_prealloc+0xf0>)
 8013792:	480d      	ldr	r0, [pc, #52]	; (80137c8 <tcp_pbuf_prealloc+0xe8>)
 8013794:	f007 fef2 	bl	801b57c <iprintf>
  *oversize = p->len - length;
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	895a      	ldrh	r2, [r3, #10]
 801379c:	89bb      	ldrh	r3, [r7, #12]
 801379e:	1ad3      	subs	r3, r2, r3
 80137a0:	b29a      	uxth	r2, r3
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	89ba      	ldrh	r2, [r7, #12]
 80137aa:	811a      	strh	r2, [r3, #8]
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	891a      	ldrh	r2, [r3, #8]
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	815a      	strh	r2, [r3, #10]
  return p;
 80137b4:	693b      	ldr	r3, [r7, #16]
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3718      	adds	r7, #24
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	0801e0ac 	.word	0x0801e0ac
 80137c4:	0801e164 	.word	0x0801e164
 80137c8:	0801e100 	.word	0x0801e100
 80137cc:	0801e188 	.word	0x0801e188
 80137d0:	0801e1a8 	.word	0x0801e1a8

080137d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	460b      	mov	r3, r1
 80137de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d106      	bne.n	80137f4 <tcp_write_checks+0x20>
 80137e6:	4b33      	ldr	r3, [pc, #204]	; (80138b4 <tcp_write_checks+0xe0>)
 80137e8:	f240 1233 	movw	r2, #307	; 0x133
 80137ec:	4932      	ldr	r1, [pc, #200]	; (80138b8 <tcp_write_checks+0xe4>)
 80137ee:	4833      	ldr	r0, [pc, #204]	; (80138bc <tcp_write_checks+0xe8>)
 80137f0:	f007 fec4 	bl	801b57c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	7d1b      	ldrb	r3, [r3, #20]
 80137f8:	2b04      	cmp	r3, #4
 80137fa:	d00e      	beq.n	801381a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013800:	2b07      	cmp	r3, #7
 8013802:	d00a      	beq.n	801381a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013808:	2b02      	cmp	r3, #2
 801380a:	d006      	beq.n	801381a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013810:	2b03      	cmp	r3, #3
 8013812:	d002      	beq.n	801381a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013814:	f06f 030a 	mvn.w	r3, #10
 8013818:	e048      	b.n	80138ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801381a:	887b      	ldrh	r3, [r7, #2]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <tcp_write_checks+0x50>
    return ERR_OK;
 8013820:	2300      	movs	r3, #0
 8013822:	e043      	b.n	80138ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801382a:	887a      	ldrh	r2, [r7, #2]
 801382c:	429a      	cmp	r2, r3
 801382e:	d909      	bls.n	8013844 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	8b5b      	ldrh	r3, [r3, #26]
 8013834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013838:	b29a      	uxth	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801383e:	f04f 33ff 	mov.w	r3, #4294967295
 8013842:	e033      	b.n	80138ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801384a:	2b08      	cmp	r3, #8
 801384c:	d909      	bls.n	8013862 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	8b5b      	ldrh	r3, [r3, #26]
 8013852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013856:	b29a      	uxth	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801385c:	f04f 33ff 	mov.w	r3, #4294967295
 8013860:	e024      	b.n	80138ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013868:	2b00      	cmp	r3, #0
 801386a:	d00f      	beq.n	801388c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013870:	2b00      	cmp	r3, #0
 8013872:	d11a      	bne.n	80138aa <tcp_write_checks+0xd6>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013878:	2b00      	cmp	r3, #0
 801387a:	d116      	bne.n	80138aa <tcp_write_checks+0xd6>
 801387c:	4b0d      	ldr	r3, [pc, #52]	; (80138b4 <tcp_write_checks+0xe0>)
 801387e:	f240 1255 	movw	r2, #341	; 0x155
 8013882:	490f      	ldr	r1, [pc, #60]	; (80138c0 <tcp_write_checks+0xec>)
 8013884:	480d      	ldr	r0, [pc, #52]	; (80138bc <tcp_write_checks+0xe8>)
 8013886:	f007 fe79 	bl	801b57c <iprintf>
 801388a:	e00e      	b.n	80138aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013890:	2b00      	cmp	r3, #0
 8013892:	d103      	bne.n	801389c <tcp_write_checks+0xc8>
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013898:	2b00      	cmp	r3, #0
 801389a:	d006      	beq.n	80138aa <tcp_write_checks+0xd6>
 801389c:	4b05      	ldr	r3, [pc, #20]	; (80138b4 <tcp_write_checks+0xe0>)
 801389e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80138a2:	4908      	ldr	r1, [pc, #32]	; (80138c4 <tcp_write_checks+0xf0>)
 80138a4:	4805      	ldr	r0, [pc, #20]	; (80138bc <tcp_write_checks+0xe8>)
 80138a6:	f007 fe69 	bl	801b57c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80138aa:	2300      	movs	r3, #0
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3708      	adds	r7, #8
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}
 80138b4:	0801e0ac 	.word	0x0801e0ac
 80138b8:	0801e1bc 	.word	0x0801e1bc
 80138bc:	0801e100 	.word	0x0801e100
 80138c0:	0801e1dc 	.word	0x0801e1dc
 80138c4:	0801e218 	.word	0x0801e218

080138c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80138c8:	b590      	push	{r4, r7, lr}
 80138ca:	b09b      	sub	sp, #108	; 0x6c
 80138cc:	af04      	add	r7, sp, #16
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	4611      	mov	r1, r2
 80138d4:	461a      	mov	r2, r3
 80138d6:	460b      	mov	r3, r1
 80138d8:	80fb      	strh	r3, [r7, #6]
 80138da:	4613      	mov	r3, r2
 80138dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80138de:	2300      	movs	r3, #0
 80138e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80138e2:	2300      	movs	r3, #0
 80138e4:	653b      	str	r3, [r7, #80]	; 0x50
 80138e6:	2300      	movs	r3, #0
 80138e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80138ea:	2300      	movs	r3, #0
 80138ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80138ee:	2300      	movs	r3, #0
 80138f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80138f2:	2300      	movs	r3, #0
 80138f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80138f8:	2300      	movs	r3, #0
 80138fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80138fe:	2300      	movs	r3, #0
 8013900:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013902:	2300      	movs	r3, #0
 8013904:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013906:	2300      	movs	r3, #0
 8013908:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d109      	bne.n	8013924 <tcp_write+0x5c>
 8013910:	4ba4      	ldr	r3, [pc, #656]	; (8013ba4 <tcp_write+0x2dc>)
 8013912:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013916:	49a4      	ldr	r1, [pc, #656]	; (8013ba8 <tcp_write+0x2e0>)
 8013918:	48a4      	ldr	r0, [pc, #656]	; (8013bac <tcp_write+0x2e4>)
 801391a:	f007 fe2f 	bl	801b57c <iprintf>
 801391e:	f06f 030f 	mvn.w	r3, #15
 8013922:	e32a      	b.n	8013f7a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801392a:	085b      	lsrs	r3, r3, #1
 801392c:	b29a      	uxth	r2, r3
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013932:	4293      	cmp	r3, r2
 8013934:	bf28      	it	cs
 8013936:	4613      	movcs	r3, r2
 8013938:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801393a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801393c:	2b00      	cmp	r3, #0
 801393e:	d102      	bne.n	8013946 <tcp_write+0x7e>
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013944:	e000      	b.n	8013948 <tcp_write+0x80>
 8013946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013948:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d109      	bne.n	8013964 <tcp_write+0x9c>
 8013950:	4b94      	ldr	r3, [pc, #592]	; (8013ba4 <tcp_write+0x2dc>)
 8013952:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013956:	4996      	ldr	r1, [pc, #600]	; (8013bb0 <tcp_write+0x2e8>)
 8013958:	4894      	ldr	r0, [pc, #592]	; (8013bac <tcp_write+0x2e4>)
 801395a:	f007 fe0f 	bl	801b57c <iprintf>
 801395e:	f06f 030f 	mvn.w	r3, #15
 8013962:	e30a      	b.n	8013f7a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013964:	88fb      	ldrh	r3, [r7, #6]
 8013966:	4619      	mov	r1, r3
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f7ff ff33 	bl	80137d4 <tcp_write_checks>
 801396e:	4603      	mov	r3, r0
 8013970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013974:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013978:	2b00      	cmp	r3, #0
 801397a:	d002      	beq.n	8013982 <tcp_write+0xba>
    return err;
 801397c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013980:	e2fb      	b.n	8013f7a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013988:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801398c:	2300      	movs	r3, #0
 801398e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013996:	2b00      	cmp	r3, #0
 8013998:	f000 80f6 	beq.w	8013b88 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139a0:	653b      	str	r3, [r7, #80]	; 0x50
 80139a2:	e002      	b.n	80139aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80139a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80139aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1f8      	bne.n	80139a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80139b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139b4:	7a9b      	ldrb	r3, [r3, #10]
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	f003 0304 	and.w	r3, r3, #4
 80139be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80139c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80139c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139c4:	891b      	ldrh	r3, [r3, #8]
 80139c6:	4619      	mov	r1, r3
 80139c8:	8c3b      	ldrh	r3, [r7, #32]
 80139ca:	440b      	add	r3, r1
 80139cc:	429a      	cmp	r2, r3
 80139ce:	da06      	bge.n	80139de <tcp_write+0x116>
 80139d0:	4b74      	ldr	r3, [pc, #464]	; (8013ba4 <tcp_write+0x2dc>)
 80139d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80139d6:	4977      	ldr	r1, [pc, #476]	; (8013bb4 <tcp_write+0x2ec>)
 80139d8:	4874      	ldr	r0, [pc, #464]	; (8013bac <tcp_write+0x2e4>)
 80139da:	f007 fdcf 	bl	801b57c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80139de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139e0:	891a      	ldrh	r2, [r3, #8]
 80139e2:	8c3b      	ldrh	r3, [r7, #32]
 80139e4:	4413      	add	r3, r2
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80139f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80139f6:	8a7b      	ldrh	r3, [r7, #18]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d026      	beq.n	8013a4a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80139fc:	8a7b      	ldrh	r3, [r7, #18]
 80139fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d206      	bcs.n	8013a12 <tcp_write+0x14a>
 8013a04:	4b67      	ldr	r3, [pc, #412]	; (8013ba4 <tcp_write+0x2dc>)
 8013a06:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013a0a:	496b      	ldr	r1, [pc, #428]	; (8013bb8 <tcp_write+0x2f0>)
 8013a0c:	4867      	ldr	r0, [pc, #412]	; (8013bac <tcp_write+0x2e4>)
 8013a0e:	f007 fdb5 	bl	801b57c <iprintf>
      seg = last_unsent;
 8013a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a14:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013a16:	8a7b      	ldrh	r3, [r7, #18]
 8013a18:	88fa      	ldrh	r2, [r7, #6]
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	bf28      	it	cs
 8013a1e:	4613      	movcs	r3, r2
 8013a20:	b29b      	uxth	r3, r3
 8013a22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a24:	4293      	cmp	r3, r2
 8013a26:	bf28      	it	cs
 8013a28:	4613      	movcs	r3, r2
 8013a2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013a2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a32:	4413      	add	r3, r2
 8013a34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013a38:	8a7a      	ldrh	r2, [r7, #18]
 8013a3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a3c:	1ad3      	subs	r3, r2, r3
 8013a3e:	b29b      	uxth	r3, r3
 8013a40:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013a42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a46:	1ad3      	subs	r3, r2, r3
 8013a48:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013a4a:	8a7b      	ldrh	r3, [r7, #18]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d00b      	beq.n	8013a68 <tcp_write+0x1a0>
 8013a50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a54:	88fb      	ldrh	r3, [r7, #6]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	d006      	beq.n	8013a68 <tcp_write+0x1a0>
 8013a5a:	4b52      	ldr	r3, [pc, #328]	; (8013ba4 <tcp_write+0x2dc>)
 8013a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a60:	4956      	ldr	r1, [pc, #344]	; (8013bbc <tcp_write+0x2f4>)
 8013a62:	4852      	ldr	r0, [pc, #328]	; (8013bac <tcp_write+0x2e4>)
 8013a64:	f007 fd8a 	bl	801b57c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013a68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a6c:	88fb      	ldrh	r3, [r7, #6]
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	f080 8167 	bcs.w	8013d42 <tcp_write+0x47a>
 8013a74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f000 8163 	beq.w	8013d42 <tcp_write+0x47a>
 8013a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a7e:	891b      	ldrh	r3, [r3, #8]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f000 815e 	beq.w	8013d42 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013a86:	88fa      	ldrh	r2, [r7, #6]
 8013a88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a8c:	1ad2      	subs	r2, r2, r3
 8013a8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a90:	4293      	cmp	r3, r2
 8013a92:	bfa8      	it	ge
 8013a94:	4613      	movge	r3, r2
 8013a96:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a9a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013a9c:	797b      	ldrb	r3, [r7, #5]
 8013a9e:	f003 0301 	and.w	r3, r3, #1
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d027      	beq.n	8013af6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013aa6:	f107 0012 	add.w	r0, r7, #18
 8013aaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013aac:	8bf9      	ldrh	r1, [r7, #30]
 8013aae:	2301      	movs	r3, #1
 8013ab0:	9302      	str	r3, [sp, #8]
 8013ab2:	797b      	ldrb	r3, [r7, #5]
 8013ab4:	9301      	str	r3, [sp, #4]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	9300      	str	r3, [sp, #0]
 8013aba:	4603      	mov	r3, r0
 8013abc:	2000      	movs	r0, #0
 8013abe:	f7ff fe0f 	bl	80136e0 <tcp_pbuf_prealloc>
 8013ac2:	6578      	str	r0, [r7, #84]	; 0x54
 8013ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f000 8225 	beq.w	8013f16 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ace:	6858      	ldr	r0, [r3, #4]
 8013ad0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ad4:	68ba      	ldr	r2, [r7, #8]
 8013ad6:	4413      	add	r3, r2
 8013ad8:	8bfa      	ldrh	r2, [r7, #30]
 8013ada:	4619      	mov	r1, r3
 8013adc:	f007 fc5a 	bl	801b394 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013ae0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013ae2:	f7fb f977 	bl	800edd4 <pbuf_clen>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	461a      	mov	r2, r3
 8013aea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013aee:	4413      	add	r3, r2
 8013af0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013af4:	e041      	b.n	8013b7a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	637b      	str	r3, [r7, #52]	; 0x34
 8013afc:	e002      	b.n	8013b04 <tcp_write+0x23c>
 8013afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	637b      	str	r3, [r7, #52]	; 0x34
 8013b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1f8      	bne.n	8013afe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0e:	7b1b      	ldrb	r3, [r3, #12]
 8013b10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d115      	bne.n	8013b44 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b1e:	8952      	ldrh	r2, [r2, #10]
 8013b20:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013b22:	68ba      	ldr	r2, [r7, #8]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d10d      	bne.n	8013b44 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013b28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d006      	beq.n	8013b3e <tcp_write+0x276>
 8013b30:	4b1c      	ldr	r3, [pc, #112]	; (8013ba4 <tcp_write+0x2dc>)
 8013b32:	f240 2231 	movw	r2, #561	; 0x231
 8013b36:	4922      	ldr	r1, [pc, #136]	; (8013bc0 <tcp_write+0x2f8>)
 8013b38:	481c      	ldr	r0, [pc, #112]	; (8013bac <tcp_write+0x2e4>)
 8013b3a:	f007 fd1f 	bl	801b57c <iprintf>
          extendlen = seglen;
 8013b3e:	8bfb      	ldrh	r3, [r7, #30]
 8013b40:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013b42:	e01a      	b.n	8013b7a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013b44:	8bfb      	ldrh	r3, [r7, #30]
 8013b46:	2201      	movs	r2, #1
 8013b48:	4619      	mov	r1, r3
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	f7fa fdd0 	bl	800e6f0 <pbuf_alloc>
 8013b50:	6578      	str	r0, [r7, #84]	; 0x54
 8013b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	f000 81e0 	beq.w	8013f1a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013b5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b5e:	68ba      	ldr	r2, [r7, #8]
 8013b60:	441a      	add	r2, r3
 8013b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b64:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013b66:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013b68:	f7fb f934 	bl	800edd4 <pbuf_clen>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	461a      	mov	r2, r3
 8013b70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b74:	4413      	add	r3, r2
 8013b76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b7e:	8bfb      	ldrh	r3, [r7, #30]
 8013b80:	4413      	add	r3, r2
 8013b82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013b86:	e0dc      	b.n	8013d42 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f000 80d7 	beq.w	8013d42 <tcp_write+0x47a>
 8013b94:	4b03      	ldr	r3, [pc, #12]	; (8013ba4 <tcp_write+0x2dc>)
 8013b96:	f240 224a 	movw	r2, #586	; 0x24a
 8013b9a:	490a      	ldr	r1, [pc, #40]	; (8013bc4 <tcp_write+0x2fc>)
 8013b9c:	4803      	ldr	r0, [pc, #12]	; (8013bac <tcp_write+0x2e4>)
 8013b9e:	f007 fced 	bl	801b57c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013ba2:	e0ce      	b.n	8013d42 <tcp_write+0x47a>
 8013ba4:	0801e0ac 	.word	0x0801e0ac
 8013ba8:	0801e24c 	.word	0x0801e24c
 8013bac:	0801e100 	.word	0x0801e100
 8013bb0:	0801e264 	.word	0x0801e264
 8013bb4:	0801e298 	.word	0x0801e298
 8013bb8:	0801e2b0 	.word	0x0801e2b0
 8013bbc:	0801e2d0 	.word	0x0801e2d0
 8013bc0:	0801e2f0 	.word	0x0801e2f0
 8013bc4:	0801e31c 	.word	0x0801e31c
    struct pbuf *p;
    u16_t left = len - pos;
 8013bc8:	88fa      	ldrh	r2, [r7, #6]
 8013bca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013bce:	1ad3      	subs	r3, r2, r3
 8013bd0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013bd2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013bda:	1ad3      	subs	r3, r2, r3
 8013bdc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013bde:	8b7a      	ldrh	r2, [r7, #26]
 8013be0:	8bbb      	ldrh	r3, [r7, #28]
 8013be2:	4293      	cmp	r3, r2
 8013be4:	bf28      	it	cs
 8013be6:	4613      	movcs	r3, r2
 8013be8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013bea:	797b      	ldrb	r3, [r7, #5]
 8013bec:	f003 0301 	and.w	r3, r3, #1
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d036      	beq.n	8013c62 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013bf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	8b3b      	ldrh	r3, [r7, #24]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	b299      	uxth	r1, r3
 8013c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	bf0c      	ite	eq
 8013c06:	2301      	moveq	r3, #1
 8013c08:	2300      	movne	r3, #0
 8013c0a:	b2db      	uxtb	r3, r3
 8013c0c:	f107 0012 	add.w	r0, r7, #18
 8013c10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013c12:	9302      	str	r3, [sp, #8]
 8013c14:	797b      	ldrb	r3, [r7, #5]
 8013c16:	9301      	str	r3, [sp, #4]
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	9300      	str	r3, [sp, #0]
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2036      	movs	r0, #54	; 0x36
 8013c20:	f7ff fd5e 	bl	80136e0 <tcp_pbuf_prealloc>
 8013c24:	6338      	str	r0, [r7, #48]	; 0x30
 8013c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f000 8178 	beq.w	8013f1e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c30:	895b      	ldrh	r3, [r3, #10]
 8013c32:	8b3a      	ldrh	r2, [r7, #24]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d906      	bls.n	8013c46 <tcp_write+0x37e>
 8013c38:	4b8c      	ldr	r3, [pc, #560]	; (8013e6c <tcp_write+0x5a4>)
 8013c3a:	f240 2266 	movw	r2, #614	; 0x266
 8013c3e:	498c      	ldr	r1, [pc, #560]	; (8013e70 <tcp_write+0x5a8>)
 8013c40:	488c      	ldr	r0, [pc, #560]	; (8013e74 <tcp_write+0x5ac>)
 8013c42:	f007 fc9b 	bl	801b57c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013c4e:	18d0      	adds	r0, r2, r3
 8013c50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c54:	68ba      	ldr	r2, [r7, #8]
 8013c56:	4413      	add	r3, r2
 8013c58:	8b3a      	ldrh	r2, [r7, #24]
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	f007 fb9a 	bl	801b394 <memcpy>
 8013c60:	e02f      	b.n	8013cc2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013c62:	8a7b      	ldrh	r3, [r7, #18]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d006      	beq.n	8013c76 <tcp_write+0x3ae>
 8013c68:	4b80      	ldr	r3, [pc, #512]	; (8013e6c <tcp_write+0x5a4>)
 8013c6a:	f240 2271 	movw	r2, #625	; 0x271
 8013c6e:	4982      	ldr	r1, [pc, #520]	; (8013e78 <tcp_write+0x5b0>)
 8013c70:	4880      	ldr	r0, [pc, #512]	; (8013e74 <tcp_write+0x5ac>)
 8013c72:	f007 fc83 	bl	801b57c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013c76:	8b3b      	ldrh	r3, [r7, #24]
 8013c78:	2201      	movs	r2, #1
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	2036      	movs	r0, #54	; 0x36
 8013c7e:	f7fa fd37 	bl	800e6f0 <pbuf_alloc>
 8013c82:	6178      	str	r0, [r7, #20]
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	f000 814b 	beq.w	8013f22 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013c8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c90:	68ba      	ldr	r2, [r7, #8]
 8013c92:	441a      	add	r2, r3
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013c98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	2036      	movs	r0, #54	; 0x36
 8013ca6:	f7fa fd23 	bl	800e6f0 <pbuf_alloc>
 8013caa:	6338      	str	r0, [r7, #48]	; 0x30
 8013cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d103      	bne.n	8013cba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013cb2:	6978      	ldr	r0, [r7, #20]
 8013cb4:	f7fb f800 	bl	800ecb8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013cb8:	e136      	b.n	8013f28 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013cba:	6979      	ldr	r1, [r7, #20]
 8013cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cbe:	f7fb f8c7 	bl	800ee50 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cc4:	f7fb f886 	bl	800edd4 <pbuf_clen>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	461a      	mov	r2, r3
 8013ccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013cd0:	4413      	add	r3, r2
 8013cd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013cd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013cda:	2b09      	cmp	r3, #9
 8013cdc:	d903      	bls.n	8013ce6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ce0:	f7fa ffea 	bl	800ecb8 <pbuf_free>
      goto memerr;
 8013ce4:	e120      	b.n	8013f28 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013cee:	441a      	add	r2, r3
 8013cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f7ff fc51 	bl	80135a4 <tcp_create_segment>
 8013d02:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	f000 810d 	beq.w	8013f26 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d102      	bne.n	8013d18 <tcp_write+0x450>
      queue = seg;
 8013d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d14:	647b      	str	r3, [r7, #68]	; 0x44
 8013d16:	e00c      	b.n	8013d32 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d106      	bne.n	8013d2c <tcp_write+0x464>
 8013d1e:	4b53      	ldr	r3, [pc, #332]	; (8013e6c <tcp_write+0x5a4>)
 8013d20:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013d24:	4955      	ldr	r1, [pc, #340]	; (8013e7c <tcp_write+0x5b4>)
 8013d26:	4853      	ldr	r0, [pc, #332]	; (8013e74 <tcp_write+0x5ac>)
 8013d28:	f007 fc28 	bl	801b57c <iprintf>
      prev_seg->next = seg;
 8013d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d30:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d34:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013d36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d3a:	8b3b      	ldrh	r3, [r7, #24]
 8013d3c:	4413      	add	r3, r2
 8013d3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013d42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d46:	88fb      	ldrh	r3, [r7, #6]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	f4ff af3d 	bcc.w	8013bc8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013d4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d02c      	beq.n	8013dae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d56:	685b      	ldr	r3, [r3, #4]
 8013d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d5a:	e01e      	b.n	8013d9a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5e:	891a      	ldrh	r2, [r3, #8]
 8013d60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d62:	4413      	add	r3, r2
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d68:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d110      	bne.n	8013d94 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d78:	8952      	ldrh	r2, [r2, #10]
 8013d7a:	4413      	add	r3, r2
 8013d7c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013d7e:	68b9      	ldr	r1, [r7, #8]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f007 fb07 	bl	801b394 <memcpy>
        p->len += oversize_used;
 8013d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d88:	895a      	ldrh	r2, [r3, #10]
 8013d8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d8c:	4413      	add	r3, r2
 8013d8e:	b29a      	uxth	r2, r3
 8013d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d92:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d1dd      	bne.n	8013d5c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013da2:	891a      	ldrh	r2, [r3, #8]
 8013da4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013da6:	4413      	add	r3, r2
 8013da8:	b29a      	uxth	r2, r3
 8013daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013dae:	8a7a      	ldrh	r2, [r7, #18]
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d018      	beq.n	8013dee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d106      	bne.n	8013dd0 <tcp_write+0x508>
 8013dc2:	4b2a      	ldr	r3, [pc, #168]	; (8013e6c <tcp_write+0x5a4>)
 8013dc4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013dc8:	492d      	ldr	r1, [pc, #180]	; (8013e80 <tcp_write+0x5b8>)
 8013dca:	482a      	ldr	r0, [pc, #168]	; (8013e74 <tcp_write+0x5ac>)
 8013dcc:	f007 fbd6 	bl	801b57c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7fb f83a 	bl	800ee50 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dde:	891a      	ldrh	r2, [r3, #8]
 8013de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013de2:	891b      	ldrh	r3, [r3, #8]
 8013de4:	4413      	add	r3, r2
 8013de6:	b29a      	uxth	r2, r3
 8013de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dea:	811a      	strh	r2, [r3, #8]
 8013dec:	e037      	b.n	8013e5e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013dee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d034      	beq.n	8013e5e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d003      	beq.n	8013e02 <tcp_write+0x53a>
 8013dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d106      	bne.n	8013e10 <tcp_write+0x548>
 8013e02:	4b1a      	ldr	r3, [pc, #104]	; (8013e6c <tcp_write+0x5a4>)
 8013e04:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013e08:	491e      	ldr	r1, [pc, #120]	; (8013e84 <tcp_write+0x5bc>)
 8013e0a:	481a      	ldr	r0, [pc, #104]	; (8013e74 <tcp_write+0x5ac>)
 8013e0c:	f007 fbb6 	bl	801b57c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e16:	e009      	b.n	8013e2c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e1a:	891a      	ldrh	r2, [r3, #8]
 8013e1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e1e:	4413      	add	r3, r2
 8013e20:	b29a      	uxth	r2, r3
 8013e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e24:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d1f1      	bne.n	8013e18 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e36:	891a      	ldrh	r2, [r3, #8]
 8013e38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e3a:	4413      	add	r3, r2
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e40:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e44:	895a      	ldrh	r2, [r3, #10]
 8013e46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e48:	4413      	add	r3, r2
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e52:	891a      	ldrh	r2, [r3, #8]
 8013e54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013e56:	4413      	add	r3, r2
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e5c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d111      	bne.n	8013e88 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e68:	66da      	str	r2, [r3, #108]	; 0x6c
 8013e6a:	e010      	b.n	8013e8e <tcp_write+0x5c6>
 8013e6c:	0801e0ac 	.word	0x0801e0ac
 8013e70:	0801e34c 	.word	0x0801e34c
 8013e74:	0801e100 	.word	0x0801e100
 8013e78:	0801e38c 	.word	0x0801e38c
 8013e7c:	0801e39c 	.word	0x0801e39c
 8013e80:	0801e3b0 	.word	0x0801e3b0
 8013e84:	0801e3e8 	.word	0x0801e3e8
  } else {
    last_unsent->next = queue;
 8013e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e8c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013e92:	88fb      	ldrh	r3, [r7, #6]
 8013e94:	441a      	add	r2, r3
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013ea0:	88fb      	ldrh	r3, [r7, #6]
 8013ea2:	1ad3      	subs	r3, r2, r3
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013eb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d00e      	beq.n	8013ede <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d10a      	bne.n	8013ede <tcp_write+0x616>
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d106      	bne.n	8013ede <tcp_write+0x616>
 8013ed0:	4b2c      	ldr	r3, [pc, #176]	; (8013f84 <tcp_write+0x6bc>)
 8013ed2:	f240 3212 	movw	r2, #786	; 0x312
 8013ed6:	492c      	ldr	r1, [pc, #176]	; (8013f88 <tcp_write+0x6c0>)
 8013ed8:	482c      	ldr	r0, [pc, #176]	; (8013f8c <tcp_write+0x6c4>)
 8013eda:	f007 fb4f 	bl	801b57c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d016      	beq.n	8013f12 <tcp_write+0x64a>
 8013ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d012      	beq.n	8013f12 <tcp_write+0x64a>
 8013eec:	797b      	ldrb	r3, [r7, #5]
 8013eee:	f003 0302 	and.w	r3, r3, #2
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d10d      	bne.n	8013f12 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ef8:	68db      	ldr	r3, [r3, #12]
 8013efa:	899b      	ldrh	r3, [r3, #12]
 8013efc:	b29c      	uxth	r4, r3
 8013efe:	2008      	movs	r0, #8
 8013f00:	f7f9 fa76 	bl	800d3f0 <lwip_htons>
 8013f04:	4603      	mov	r3, r0
 8013f06:	461a      	mov	r2, r3
 8013f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	4322      	orrs	r2, r4
 8013f0e:	b292      	uxth	r2, r2
 8013f10:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013f12:	2300      	movs	r3, #0
 8013f14:	e031      	b.n	8013f7a <tcp_write+0x6b2>
          goto memerr;
 8013f16:	bf00      	nop
 8013f18:	e006      	b.n	8013f28 <tcp_write+0x660>
            goto memerr;
 8013f1a:	bf00      	nop
 8013f1c:	e004      	b.n	8013f28 <tcp_write+0x660>
        goto memerr;
 8013f1e:	bf00      	nop
 8013f20:	e002      	b.n	8013f28 <tcp_write+0x660>
        goto memerr;
 8013f22:	bf00      	nop
 8013f24:	e000      	b.n	8013f28 <tcp_write+0x660>
      goto memerr;
 8013f26:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	8b5b      	ldrh	r3, [r3, #26]
 8013f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f30:	b29a      	uxth	r2, r3
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d002      	beq.n	8013f42 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013f3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013f3e:	f7fa febb 	bl	800ecb8 <pbuf_free>
  }
  if (queue != NULL) {
 8013f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d002      	beq.n	8013f4e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013f48:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013f4a:	f7fc fb85 	bl	8010658 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d00e      	beq.n	8013f76 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d10a      	bne.n	8013f76 <tcp_write+0x6ae>
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d106      	bne.n	8013f76 <tcp_write+0x6ae>
 8013f68:	4b06      	ldr	r3, [pc, #24]	; (8013f84 <tcp_write+0x6bc>)
 8013f6a:	f240 3227 	movw	r2, #807	; 0x327
 8013f6e:	4906      	ldr	r1, [pc, #24]	; (8013f88 <tcp_write+0x6c0>)
 8013f70:	4806      	ldr	r0, [pc, #24]	; (8013f8c <tcp_write+0x6c4>)
 8013f72:	f007 fb03 	bl	801b57c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	375c      	adds	r7, #92	; 0x5c
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd90      	pop	{r4, r7, pc}
 8013f82:	bf00      	nop
 8013f84:	0801e0ac 	.word	0x0801e0ac
 8013f88:	0801e420 	.word	0x0801e420
 8013f8c:	0801e100 	.word	0x0801e100

08013f90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013f90:	b590      	push	{r4, r7, lr}
 8013f92:	b08b      	sub	sp, #44	; 0x2c
 8013f94:	af02      	add	r7, sp, #8
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	460b      	mov	r3, r1
 8013f9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	61fb      	str	r3, [r7, #28]
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d106      	bne.n	8013fbc <tcp_split_unsent_seg+0x2c>
 8013fae:	4b95      	ldr	r3, [pc, #596]	; (8014204 <tcp_split_unsent_seg+0x274>)
 8013fb0:	f240 324b 	movw	r2, #843	; 0x34b
 8013fb4:	4994      	ldr	r1, [pc, #592]	; (8014208 <tcp_split_unsent_seg+0x278>)
 8013fb6:	4895      	ldr	r0, [pc, #596]	; (801420c <tcp_split_unsent_seg+0x27c>)
 8013fb8:	f007 fae0 	bl	801b57c <iprintf>

  useg = pcb->unsent;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fc0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d102      	bne.n	8013fce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013fcc:	e116      	b.n	80141fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013fce:	887b      	ldrh	r3, [r7, #2]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d109      	bne.n	8013fe8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013fd4:	4b8b      	ldr	r3, [pc, #556]	; (8014204 <tcp_split_unsent_seg+0x274>)
 8013fd6:	f240 3253 	movw	r2, #851	; 0x353
 8013fda:	498d      	ldr	r1, [pc, #564]	; (8014210 <tcp_split_unsent_seg+0x280>)
 8013fdc:	488b      	ldr	r0, [pc, #556]	; (801420c <tcp_split_unsent_seg+0x27c>)
 8013fde:	f007 facd 	bl	801b57c <iprintf>
    return ERR_VAL;
 8013fe2:	f06f 0305 	mvn.w	r3, #5
 8013fe6:	e109      	b.n	80141fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	891b      	ldrh	r3, [r3, #8]
 8013fec:	887a      	ldrh	r2, [r7, #2]
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d301      	bcc.n	8013ff6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	e102      	b.n	80141fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ffa:	887a      	ldrh	r2, [r7, #2]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d906      	bls.n	801400e <tcp_split_unsent_seg+0x7e>
 8014000:	4b80      	ldr	r3, [pc, #512]	; (8014204 <tcp_split_unsent_seg+0x274>)
 8014002:	f240 325b 	movw	r2, #859	; 0x35b
 8014006:	4983      	ldr	r1, [pc, #524]	; (8014214 <tcp_split_unsent_seg+0x284>)
 8014008:	4880      	ldr	r0, [pc, #512]	; (801420c <tcp_split_unsent_seg+0x27c>)
 801400a:	f007 fab7 	bl	801b57c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	891b      	ldrh	r3, [r3, #8]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d106      	bne.n	8014024 <tcp_split_unsent_seg+0x94>
 8014016:	4b7b      	ldr	r3, [pc, #492]	; (8014204 <tcp_split_unsent_seg+0x274>)
 8014018:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801401c:	497e      	ldr	r1, [pc, #504]	; (8014218 <tcp_split_unsent_seg+0x288>)
 801401e:	487b      	ldr	r0, [pc, #492]	; (801420c <tcp_split_unsent_seg+0x27c>)
 8014020:	f007 faac 	bl	801b57c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	7a9b      	ldrb	r3, [r3, #10]
 8014028:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801402a:	7bfb      	ldrb	r3, [r7, #15]
 801402c:	009b      	lsls	r3, r3, #2
 801402e:	b2db      	uxtb	r3, r3
 8014030:	f003 0304 	and.w	r3, r3, #4
 8014034:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	891a      	ldrh	r2, [r3, #8]
 801403a:	887b      	ldrh	r3, [r7, #2]
 801403c:	1ad3      	subs	r3, r2, r3
 801403e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014040:	7bbb      	ldrb	r3, [r7, #14]
 8014042:	b29a      	uxth	r2, r3
 8014044:	89bb      	ldrh	r3, [r7, #12]
 8014046:	4413      	add	r3, r2
 8014048:	b29b      	uxth	r3, r3
 801404a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801404e:	4619      	mov	r1, r3
 8014050:	2036      	movs	r0, #54	; 0x36
 8014052:	f7fa fb4d 	bl	800e6f0 <pbuf_alloc>
 8014056:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	2b00      	cmp	r3, #0
 801405c:	f000 80b7 	beq.w	80141ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	891a      	ldrh	r2, [r3, #8]
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	891b      	ldrh	r3, [r3, #8]
 801406a:	1ad3      	subs	r3, r2, r3
 801406c:	b29a      	uxth	r2, r3
 801406e:	887b      	ldrh	r3, [r7, #2]
 8014070:	4413      	add	r3, r2
 8014072:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	6858      	ldr	r0, [r3, #4]
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	685a      	ldr	r2, [r3, #4]
 801407c:	7bbb      	ldrb	r3, [r7, #14]
 801407e:	18d1      	adds	r1, r2, r3
 8014080:	897b      	ldrh	r3, [r7, #10]
 8014082:	89ba      	ldrh	r2, [r7, #12]
 8014084:	f7fb f81c 	bl	800f0c0 <pbuf_copy_partial>
 8014088:	4603      	mov	r3, r0
 801408a:	461a      	mov	r2, r3
 801408c:	89bb      	ldrh	r3, [r7, #12]
 801408e:	4293      	cmp	r3, r2
 8014090:	f040 809f 	bne.w	80141d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	68db      	ldr	r3, [r3, #12]
 8014098:	899b      	ldrh	r3, [r3, #12]
 801409a:	b29b      	uxth	r3, r3
 801409c:	4618      	mov	r0, r3
 801409e:	f7f9 f9a7 	bl	800d3f0 <lwip_htons>
 80140a2:	4603      	mov	r3, r0
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80140ac:	2300      	movs	r3, #0
 80140ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80140b0:	7efb      	ldrb	r3, [r7, #27]
 80140b2:	f003 0308 	and.w	r3, r3, #8
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d007      	beq.n	80140ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80140ba:	7efb      	ldrb	r3, [r7, #27]
 80140bc:	f023 0308 	bic.w	r3, r3, #8
 80140c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80140c2:	7ebb      	ldrb	r3, [r7, #26]
 80140c4:	f043 0308 	orr.w	r3, r3, #8
 80140c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80140ca:	7efb      	ldrb	r3, [r7, #27]
 80140cc:	f003 0301 	and.w	r3, r3, #1
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d007      	beq.n	80140e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80140d4:	7efb      	ldrb	r3, [r7, #27]
 80140d6:	f023 0301 	bic.w	r3, r3, #1
 80140da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80140dc:	7ebb      	ldrb	r3, [r7, #26]
 80140de:	f043 0301 	orr.w	r3, r3, #1
 80140e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7f9 f994 	bl	800d418 <lwip_htonl>
 80140f0:	4602      	mov	r2, r0
 80140f2:	887b      	ldrh	r3, [r7, #2]
 80140f4:	18d1      	adds	r1, r2, r3
 80140f6:	7eba      	ldrb	r2, [r7, #26]
 80140f8:	7bfb      	ldrb	r3, [r7, #15]
 80140fa:	9300      	str	r3, [sp, #0]
 80140fc:	460b      	mov	r3, r1
 80140fe:	6939      	ldr	r1, [r7, #16]
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f7ff fa4f 	bl	80135a4 <tcp_create_segment>
 8014106:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014108:	69fb      	ldr	r3, [r7, #28]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d063      	beq.n	80141d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	4618      	mov	r0, r3
 8014114:	f7fa fe5e 	bl	800edd4 <pbuf_clen>
 8014118:	4603      	mov	r3, r0
 801411a:	461a      	mov	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014122:	1a9b      	subs	r3, r3, r2
 8014124:	b29a      	uxth	r2, r3
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	6858      	ldr	r0, [r3, #4]
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	891a      	ldrh	r2, [r3, #8]
 8014136:	89bb      	ldrh	r3, [r7, #12]
 8014138:	1ad3      	subs	r3, r2, r3
 801413a:	b29b      	uxth	r3, r3
 801413c:	4619      	mov	r1, r3
 801413e:	f7fa fc35 	bl	800e9ac <pbuf_realloc>
  useg->len -= remainder;
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	891a      	ldrh	r2, [r3, #8]
 8014146:	89bb      	ldrh	r3, [r7, #12]
 8014148:	1ad3      	subs	r3, r2, r3
 801414a:	b29a      	uxth	r2, r3
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	899b      	ldrh	r3, [r3, #12]
 8014156:	b29c      	uxth	r4, r3
 8014158:	7efb      	ldrb	r3, [r7, #27]
 801415a:	b29b      	uxth	r3, r3
 801415c:	4618      	mov	r0, r3
 801415e:	f7f9 f947 	bl	800d3f0 <lwip_htons>
 8014162:	4603      	mov	r3, r0
 8014164:	461a      	mov	r2, r3
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	68db      	ldr	r3, [r3, #12]
 801416a:	4322      	orrs	r2, r4
 801416c:	b292      	uxth	r2, r2
 801416e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	4618      	mov	r0, r3
 8014176:	f7fa fe2d 	bl	800edd4 <pbuf_clen>
 801417a:	4603      	mov	r3, r0
 801417c:	461a      	mov	r2, r3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014184:	4413      	add	r3, r2
 8014186:	b29a      	uxth	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	4618      	mov	r0, r3
 8014194:	f7fa fe1e 	bl	800edd4 <pbuf_clen>
 8014198:	4603      	mov	r3, r0
 801419a:	461a      	mov	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141a2:	4413      	add	r3, r2
 80141a4:	b29a      	uxth	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	69fb      	ldr	r3, [r7, #28]
 80141b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	69fa      	ldr	r2, [r7, #28]
 80141b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80141ba:	69fb      	ldr	r3, [r7, #28]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d103      	bne.n	80141ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2200      	movs	r2, #0
 80141c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80141ca:	2300      	movs	r3, #0
 80141cc:	e016      	b.n	80141fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80141ce:	bf00      	nop
 80141d0:	e002      	b.n	80141d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80141d2:	bf00      	nop
 80141d4:	e000      	b.n	80141d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80141d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80141d8:	69fb      	ldr	r3, [r7, #28]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d006      	beq.n	80141ec <tcp_split_unsent_seg+0x25c>
 80141de:	4b09      	ldr	r3, [pc, #36]	; (8014204 <tcp_split_unsent_seg+0x274>)
 80141e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80141e4:	490d      	ldr	r1, [pc, #52]	; (801421c <tcp_split_unsent_seg+0x28c>)
 80141e6:	4809      	ldr	r0, [pc, #36]	; (801420c <tcp_split_unsent_seg+0x27c>)
 80141e8:	f007 f9c8 	bl	801b57c <iprintf>
  if (p != NULL) {
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d002      	beq.n	80141f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80141f2:	6938      	ldr	r0, [r7, #16]
 80141f4:	f7fa fd60 	bl	800ecb8 <pbuf_free>
  }

  return ERR_MEM;
 80141f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3724      	adds	r7, #36	; 0x24
 8014200:	46bd      	mov	sp, r7
 8014202:	bd90      	pop	{r4, r7, pc}
 8014204:	0801e0ac 	.word	0x0801e0ac
 8014208:	0801e440 	.word	0x0801e440
 801420c:	0801e100 	.word	0x0801e100
 8014210:	0801e464 	.word	0x0801e464
 8014214:	0801e488 	.word	0x0801e488
 8014218:	0801e498 	.word	0x0801e498
 801421c:	0801e4a8 	.word	0x0801e4a8

08014220 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014220:	b590      	push	{r4, r7, lr}
 8014222:	b085      	sub	sp, #20
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d106      	bne.n	801423c <tcp_send_fin+0x1c>
 801422e:	4b21      	ldr	r3, [pc, #132]	; (80142b4 <tcp_send_fin+0x94>)
 8014230:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014234:	4920      	ldr	r1, [pc, #128]	; (80142b8 <tcp_send_fin+0x98>)
 8014236:	4821      	ldr	r0, [pc, #132]	; (80142bc <tcp_send_fin+0x9c>)
 8014238:	f007 f9a0 	bl	801b57c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014240:	2b00      	cmp	r3, #0
 8014242:	d02e      	beq.n	80142a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014248:	60fb      	str	r3, [r7, #12]
 801424a:	e002      	b.n	8014252 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d1f8      	bne.n	801424c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	68db      	ldr	r3, [r3, #12]
 801425e:	899b      	ldrh	r3, [r3, #12]
 8014260:	b29b      	uxth	r3, r3
 8014262:	4618      	mov	r0, r3
 8014264:	f7f9 f8c4 	bl	800d3f0 <lwip_htons>
 8014268:	4603      	mov	r3, r0
 801426a:	b2db      	uxtb	r3, r3
 801426c:	f003 0307 	and.w	r3, r3, #7
 8014270:	2b00      	cmp	r3, #0
 8014272:	d116      	bne.n	80142a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	899b      	ldrh	r3, [r3, #12]
 801427a:	b29c      	uxth	r4, r3
 801427c:	2001      	movs	r0, #1
 801427e:	f7f9 f8b7 	bl	800d3f0 <lwip_htons>
 8014282:	4603      	mov	r3, r0
 8014284:	461a      	mov	r2, r3
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	68db      	ldr	r3, [r3, #12]
 801428a:	4322      	orrs	r2, r4
 801428c:	b292      	uxth	r2, r2
 801428e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	8b5b      	ldrh	r3, [r3, #26]
 8014294:	f043 0320 	orr.w	r3, r3, #32
 8014298:	b29a      	uxth	r2, r3
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801429e:	2300      	movs	r3, #0
 80142a0:	e004      	b.n	80142ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80142a2:	2101      	movs	r1, #1
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f000 f80b 	bl	80142c0 <tcp_enqueue_flags>
 80142aa:	4603      	mov	r3, r0
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3714      	adds	r7, #20
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd90      	pop	{r4, r7, pc}
 80142b4:	0801e0ac 	.word	0x0801e0ac
 80142b8:	0801e4b4 	.word	0x0801e4b4
 80142bc:	0801e100 	.word	0x0801e100

080142c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b08a      	sub	sp, #40	; 0x28
 80142c4:	af02      	add	r7, sp, #8
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	460b      	mov	r3, r1
 80142ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80142cc:	2300      	movs	r3, #0
 80142ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80142d0:	2300      	movs	r3, #0
 80142d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80142d4:	78fb      	ldrb	r3, [r7, #3]
 80142d6:	f003 0303 	and.w	r3, r3, #3
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d106      	bne.n	80142ec <tcp_enqueue_flags+0x2c>
 80142de:	4b67      	ldr	r3, [pc, #412]	; (801447c <tcp_enqueue_flags+0x1bc>)
 80142e0:	f240 4211 	movw	r2, #1041	; 0x411
 80142e4:	4966      	ldr	r1, [pc, #408]	; (8014480 <tcp_enqueue_flags+0x1c0>)
 80142e6:	4867      	ldr	r0, [pc, #412]	; (8014484 <tcp_enqueue_flags+0x1c4>)
 80142e8:	f007 f948 	bl	801b57c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d106      	bne.n	8014300 <tcp_enqueue_flags+0x40>
 80142f2:	4b62      	ldr	r3, [pc, #392]	; (801447c <tcp_enqueue_flags+0x1bc>)
 80142f4:	f240 4213 	movw	r2, #1043	; 0x413
 80142f8:	4963      	ldr	r1, [pc, #396]	; (8014488 <tcp_enqueue_flags+0x1c8>)
 80142fa:	4862      	ldr	r0, [pc, #392]	; (8014484 <tcp_enqueue_flags+0x1c4>)
 80142fc:	f007 f93e 	bl	801b57c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014300:	78fb      	ldrb	r3, [r7, #3]
 8014302:	f003 0302 	and.w	r3, r3, #2
 8014306:	2b00      	cmp	r3, #0
 8014308:	d001      	beq.n	801430e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801430a:	2301      	movs	r3, #1
 801430c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801430e:	7ffb      	ldrb	r3, [r7, #31]
 8014310:	009b      	lsls	r3, r3, #2
 8014312:	b2db      	uxtb	r3, r3
 8014314:	f003 0304 	and.w	r3, r3, #4
 8014318:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801431a:	7dfb      	ldrb	r3, [r7, #23]
 801431c:	b29b      	uxth	r3, r3
 801431e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014322:	4619      	mov	r1, r3
 8014324:	2036      	movs	r0, #54	; 0x36
 8014326:	f7fa f9e3 	bl	800e6f0 <pbuf_alloc>
 801432a:	6138      	str	r0, [r7, #16]
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d109      	bne.n	8014346 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	8b5b      	ldrh	r3, [r3, #26]
 8014336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801433a:	b29a      	uxth	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014340:	f04f 33ff 	mov.w	r3, #4294967295
 8014344:	e095      	b.n	8014472 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	895a      	ldrh	r2, [r3, #10]
 801434a:	7dfb      	ldrb	r3, [r7, #23]
 801434c:	b29b      	uxth	r3, r3
 801434e:	429a      	cmp	r2, r3
 8014350:	d206      	bcs.n	8014360 <tcp_enqueue_flags+0xa0>
 8014352:	4b4a      	ldr	r3, [pc, #296]	; (801447c <tcp_enqueue_flags+0x1bc>)
 8014354:	f240 4239 	movw	r2, #1081	; 0x439
 8014358:	494c      	ldr	r1, [pc, #304]	; (801448c <tcp_enqueue_flags+0x1cc>)
 801435a:	484a      	ldr	r0, [pc, #296]	; (8014484 <tcp_enqueue_flags+0x1c4>)
 801435c:	f007 f90e 	bl	801b57c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014364:	78fa      	ldrb	r2, [r7, #3]
 8014366:	7ffb      	ldrb	r3, [r7, #31]
 8014368:	9300      	str	r3, [sp, #0]
 801436a:	460b      	mov	r3, r1
 801436c:	6939      	ldr	r1, [r7, #16]
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f7ff f918 	bl	80135a4 <tcp_create_segment>
 8014374:	60f8      	str	r0, [r7, #12]
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d109      	bne.n	8014390 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	8b5b      	ldrh	r3, [r3, #26]
 8014380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014384:	b29a      	uxth	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801438a:	f04f 33ff 	mov.w	r3, #4294967295
 801438e:	e070      	b.n	8014472 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	f003 0303 	and.w	r3, r3, #3
 8014398:	2b00      	cmp	r3, #0
 801439a:	d006      	beq.n	80143aa <tcp_enqueue_flags+0xea>
 801439c:	4b37      	ldr	r3, [pc, #220]	; (801447c <tcp_enqueue_flags+0x1bc>)
 801439e:	f240 4242 	movw	r2, #1090	; 0x442
 80143a2:	493b      	ldr	r1, [pc, #236]	; (8014490 <tcp_enqueue_flags+0x1d0>)
 80143a4:	4837      	ldr	r0, [pc, #220]	; (8014484 <tcp_enqueue_flags+0x1c4>)
 80143a6:	f007 f8e9 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	891b      	ldrh	r3, [r3, #8]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d006      	beq.n	80143c0 <tcp_enqueue_flags+0x100>
 80143b2:	4b32      	ldr	r3, [pc, #200]	; (801447c <tcp_enqueue_flags+0x1bc>)
 80143b4:	f240 4243 	movw	r2, #1091	; 0x443
 80143b8:	4936      	ldr	r1, [pc, #216]	; (8014494 <tcp_enqueue_flags+0x1d4>)
 80143ba:	4832      	ldr	r0, [pc, #200]	; (8014484 <tcp_enqueue_flags+0x1c4>)
 80143bc:	f007 f8de 	bl	801b57c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d103      	bne.n	80143d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	68fa      	ldr	r2, [r7, #12]
 80143cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80143ce:	e00d      	b.n	80143ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143d4:	61bb      	str	r3, [r7, #24]
 80143d6:	e002      	b.n	80143de <tcp_enqueue_flags+0x11e>
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	61bb      	str	r3, [r7, #24]
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d1f8      	bne.n	80143d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	68fa      	ldr	r2, [r7, #12]
 80143ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2200      	movs	r2, #0
 80143f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80143f4:	78fb      	ldrb	r3, [r7, #3]
 80143f6:	f003 0302 	and.w	r3, r3, #2
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d104      	bne.n	8014408 <tcp_enqueue_flags+0x148>
 80143fe:	78fb      	ldrb	r3, [r7, #3]
 8014400:	f003 0301 	and.w	r3, r3, #1
 8014404:	2b00      	cmp	r3, #0
 8014406:	d004      	beq.n	8014412 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801440c:	1c5a      	adds	r2, r3, #1
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014412:	78fb      	ldrb	r3, [r7, #3]
 8014414:	f003 0301 	and.w	r3, r3, #1
 8014418:	2b00      	cmp	r3, #0
 801441a:	d006      	beq.n	801442a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	8b5b      	ldrh	r3, [r3, #26]
 8014420:	f043 0320 	orr.w	r3, r3, #32
 8014424:	b29a      	uxth	r2, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	4618      	mov	r0, r3
 8014430:	f7fa fcd0 	bl	800edd4 <pbuf_clen>
 8014434:	4603      	mov	r3, r0
 8014436:	461a      	mov	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801443e:	4413      	add	r3, r2
 8014440:	b29a      	uxth	r2, r3
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00e      	beq.n	8014470 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014456:	2b00      	cmp	r3, #0
 8014458:	d10a      	bne.n	8014470 <tcp_enqueue_flags+0x1b0>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801445e:	2b00      	cmp	r3, #0
 8014460:	d106      	bne.n	8014470 <tcp_enqueue_flags+0x1b0>
 8014462:	4b06      	ldr	r3, [pc, #24]	; (801447c <tcp_enqueue_flags+0x1bc>)
 8014464:	f240 4265 	movw	r2, #1125	; 0x465
 8014468:	490b      	ldr	r1, [pc, #44]	; (8014498 <tcp_enqueue_flags+0x1d8>)
 801446a:	4806      	ldr	r0, [pc, #24]	; (8014484 <tcp_enqueue_flags+0x1c4>)
 801446c:	f007 f886 	bl	801b57c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014470:	2300      	movs	r3, #0
}
 8014472:	4618      	mov	r0, r3
 8014474:	3720      	adds	r7, #32
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	0801e0ac 	.word	0x0801e0ac
 8014480:	0801e4d0 	.word	0x0801e4d0
 8014484:	0801e100 	.word	0x0801e100
 8014488:	0801e528 	.word	0x0801e528
 801448c:	0801e548 	.word	0x0801e548
 8014490:	0801e584 	.word	0x0801e584
 8014494:	0801e59c 	.word	0x0801e59c
 8014498:	0801e5c8 	.word	0x0801e5c8

0801449c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801449c:	b5b0      	push	{r4, r5, r7, lr}
 801449e:	b08a      	sub	sp, #40	; 0x28
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d106      	bne.n	80144b8 <tcp_output+0x1c>
 80144aa:	4b8a      	ldr	r3, [pc, #552]	; (80146d4 <tcp_output+0x238>)
 80144ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80144b0:	4989      	ldr	r1, [pc, #548]	; (80146d8 <tcp_output+0x23c>)
 80144b2:	488a      	ldr	r0, [pc, #552]	; (80146dc <tcp_output+0x240>)
 80144b4:	f007 f862 	bl	801b57c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	7d1b      	ldrb	r3, [r3, #20]
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d106      	bne.n	80144ce <tcp_output+0x32>
 80144c0:	4b84      	ldr	r3, [pc, #528]	; (80146d4 <tcp_output+0x238>)
 80144c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80144c6:	4986      	ldr	r1, [pc, #536]	; (80146e0 <tcp_output+0x244>)
 80144c8:	4884      	ldr	r0, [pc, #528]	; (80146dc <tcp_output+0x240>)
 80144ca:	f007 f857 	bl	801b57c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80144ce:	4b85      	ldr	r3, [pc, #532]	; (80146e4 <tcp_output+0x248>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	687a      	ldr	r2, [r7, #4]
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d101      	bne.n	80144dc <tcp_output+0x40>
    return ERR_OK;
 80144d8:	2300      	movs	r3, #0
 80144da:	e1ce      	b.n	801487a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80144e8:	4293      	cmp	r3, r2
 80144ea:	bf28      	it	cs
 80144ec:	4613      	movcs	r3, r2
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80144f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10b      	bne.n	8014516 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	8b5b      	ldrh	r3, [r3, #26]
 8014502:	f003 0302 	and.w	r3, r3, #2
 8014506:	2b00      	cmp	r3, #0
 8014508:	f000 81aa 	beq.w	8014860 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f000 fdcb 	bl	80150a8 <tcp_send_empty_ack>
 8014512:	4603      	mov	r3, r0
 8014514:	e1b1      	b.n	801487a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014516:	6879      	ldr	r1, [r7, #4]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	3304      	adds	r3, #4
 801451c:	461a      	mov	r2, r3
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f7ff f824 	bl	801356c <tcp_route>
 8014524:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d102      	bne.n	8014532 <tcp_output+0x96>
    return ERR_RTE;
 801452c:	f06f 0303 	mvn.w	r3, #3
 8014530:	e1a3      	b.n	801487a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d003      	beq.n	8014540 <tcp_output+0xa4>
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d111      	bne.n	8014564 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d002      	beq.n	801454c <tcp_output+0xb0>
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	3304      	adds	r3, #4
 801454a:	e000      	b.n	801454e <tcp_output+0xb2>
 801454c:	2300      	movs	r3, #0
 801454e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d102      	bne.n	801455c <tcp_output+0xc0>
      return ERR_RTE;
 8014556:	f06f 0303 	mvn.w	r3, #3
 801455a:	e18e      	b.n	801487a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	4618      	mov	r0, r3
 801456c:	f7f8 ff54 	bl	800d418 <lwip_htonl>
 8014570:	4602      	mov	r2, r0
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801457a:	8912      	ldrh	r2, [r2, #8]
 801457c:	4413      	add	r3, r2
 801457e:	69ba      	ldr	r2, [r7, #24]
 8014580:	429a      	cmp	r2, r3
 8014582:	d227      	bcs.n	80145d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801458a:	461a      	mov	r2, r3
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	4293      	cmp	r3, r2
 8014590:	d114      	bne.n	80145bc <tcp_output+0x120>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014596:	2b00      	cmp	r3, #0
 8014598:	d110      	bne.n	80145bc <tcp_output+0x120>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d10b      	bne.n	80145bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2200      	movs	r2, #0
 80145a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2201      	movs	r2, #1
 80145b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2200      	movs	r2, #0
 80145b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	8b5b      	ldrh	r3, [r3, #26]
 80145c0:	f003 0302 	and.w	r3, r3, #2
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	f000 814d 	beq.w	8014864 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f000 fd6c 	bl	80150a8 <tcp_send_empty_ack>
 80145d0:	4603      	mov	r3, r0
 80145d2:	e152      	b.n	801487a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2200      	movs	r2, #0
 80145d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80145e2:	6a3b      	ldr	r3, [r7, #32]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f000 811c 	beq.w	8014822 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80145ea:	e002      	b.n	80145f2 <tcp_output+0x156>
 80145ec:	6a3b      	ldr	r3, [r7, #32]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	623b      	str	r3, [r7, #32]
 80145f2:	6a3b      	ldr	r3, [r7, #32]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d1f8      	bne.n	80145ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80145fa:	e112      	b.n	8014822 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80145fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	899b      	ldrh	r3, [r3, #12]
 8014602:	b29b      	uxth	r3, r3
 8014604:	4618      	mov	r0, r3
 8014606:	f7f8 fef3 	bl	800d3f0 <lwip_htons>
 801460a:	4603      	mov	r3, r0
 801460c:	b2db      	uxtb	r3, r3
 801460e:	f003 0304 	and.w	r3, r3, #4
 8014612:	2b00      	cmp	r3, #0
 8014614:	d006      	beq.n	8014624 <tcp_output+0x188>
 8014616:	4b2f      	ldr	r3, [pc, #188]	; (80146d4 <tcp_output+0x238>)
 8014618:	f240 5236 	movw	r2, #1334	; 0x536
 801461c:	4932      	ldr	r1, [pc, #200]	; (80146e8 <tcp_output+0x24c>)
 801461e:	482f      	ldr	r0, [pc, #188]	; (80146dc <tcp_output+0x240>)
 8014620:	f006 ffac 	bl	801b57c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014628:	2b00      	cmp	r3, #0
 801462a:	d01f      	beq.n	801466c <tcp_output+0x1d0>
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	8b5b      	ldrh	r3, [r3, #26]
 8014630:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014634:	2b00      	cmp	r3, #0
 8014636:	d119      	bne.n	801466c <tcp_output+0x1d0>
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801463c:	2b00      	cmp	r3, #0
 801463e:	d00b      	beq.n	8014658 <tcp_output+0x1bc>
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d110      	bne.n	801466c <tcp_output+0x1d0>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801464e:	891a      	ldrh	r2, [r3, #8]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014654:	429a      	cmp	r2, r3
 8014656:	d209      	bcs.n	801466c <tcp_output+0x1d0>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801465e:	2b00      	cmp	r3, #0
 8014660:	d004      	beq.n	801466c <tcp_output+0x1d0>
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014668:	2b08      	cmp	r3, #8
 801466a:	d901      	bls.n	8014670 <tcp_output+0x1d4>
 801466c:	2301      	movs	r3, #1
 801466e:	e000      	b.n	8014672 <tcp_output+0x1d6>
 8014670:	2300      	movs	r3, #0
 8014672:	2b00      	cmp	r3, #0
 8014674:	d106      	bne.n	8014684 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	8b5b      	ldrh	r3, [r3, #26]
 801467a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801467e:	2b00      	cmp	r3, #0
 8014680:	f000 80e4 	beq.w	801484c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	7d1b      	ldrb	r3, [r3, #20]
 8014688:	2b02      	cmp	r3, #2
 801468a:	d00d      	beq.n	80146a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	899b      	ldrh	r3, [r3, #12]
 8014692:	b29c      	uxth	r4, r3
 8014694:	2010      	movs	r0, #16
 8014696:	f7f8 feab 	bl	800d3f0 <lwip_htons>
 801469a:	4603      	mov	r3, r0
 801469c:	461a      	mov	r2, r3
 801469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a0:	68db      	ldr	r3, [r3, #12]
 80146a2:	4322      	orrs	r2, r4
 80146a4:	b292      	uxth	r2, r2
 80146a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80146a8:	697a      	ldr	r2, [r7, #20]
 80146aa:	6879      	ldr	r1, [r7, #4]
 80146ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146ae:	f000 f909 	bl	80148c4 <tcp_output_segment>
 80146b2:	4603      	mov	r3, r0
 80146b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80146b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d016      	beq.n	80146ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	8b5b      	ldrh	r3, [r3, #26]
 80146c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	835a      	strh	r2, [r3, #26]
      return err;
 80146cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146d0:	e0d3      	b.n	801487a <tcp_output+0x3de>
 80146d2:	bf00      	nop
 80146d4:	0801e0ac 	.word	0x0801e0ac
 80146d8:	0801e5f0 	.word	0x0801e5f0
 80146dc:	0801e100 	.word	0x0801e100
 80146e0:	0801e608 	.word	0x0801e608
 80146e4:	2000c998 	.word	0x2000c998
 80146e8:	0801e630 	.word	0x0801e630
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80146ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	7d1b      	ldrb	r3, [r3, #20]
 80146f8:	2b02      	cmp	r3, #2
 80146fa:	d006      	beq.n	801470a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	8b5b      	ldrh	r3, [r3, #26]
 8014700:	f023 0303 	bic.w	r3, r3, #3
 8014704:	b29a      	uxth	r2, r3
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	4618      	mov	r0, r3
 8014712:	f7f8 fe81 	bl	800d418 <lwip_htonl>
 8014716:	4604      	mov	r4, r0
 8014718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471a:	891b      	ldrh	r3, [r3, #8]
 801471c:	461d      	mov	r5, r3
 801471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014720:	68db      	ldr	r3, [r3, #12]
 8014722:	899b      	ldrh	r3, [r3, #12]
 8014724:	b29b      	uxth	r3, r3
 8014726:	4618      	mov	r0, r3
 8014728:	f7f8 fe62 	bl	800d3f0 <lwip_htons>
 801472c:	4603      	mov	r3, r0
 801472e:	b2db      	uxtb	r3, r3
 8014730:	f003 0303 	and.w	r3, r3, #3
 8014734:	2b00      	cmp	r3, #0
 8014736:	d001      	beq.n	801473c <tcp_output+0x2a0>
 8014738:	2301      	movs	r3, #1
 801473a:	e000      	b.n	801473e <tcp_output+0x2a2>
 801473c:	2300      	movs	r3, #0
 801473e:	442b      	add	r3, r5
 8014740:	4423      	add	r3, r4
 8014742:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	1ad3      	subs	r3, r2, r3
 801474c:	2b00      	cmp	r3, #0
 801474e:	da02      	bge.n	8014756 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	68ba      	ldr	r2, [r7, #8]
 8014754:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014758:	891b      	ldrh	r3, [r3, #8]
 801475a:	461c      	mov	r4, r3
 801475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475e:	68db      	ldr	r3, [r3, #12]
 8014760:	899b      	ldrh	r3, [r3, #12]
 8014762:	b29b      	uxth	r3, r3
 8014764:	4618      	mov	r0, r3
 8014766:	f7f8 fe43 	bl	800d3f0 <lwip_htons>
 801476a:	4603      	mov	r3, r0
 801476c:	b2db      	uxtb	r3, r3
 801476e:	f003 0303 	and.w	r3, r3, #3
 8014772:	2b00      	cmp	r3, #0
 8014774:	d001      	beq.n	801477a <tcp_output+0x2de>
 8014776:	2301      	movs	r3, #1
 8014778:	e000      	b.n	801477c <tcp_output+0x2e0>
 801477a:	2300      	movs	r3, #0
 801477c:	4423      	add	r3, r4
 801477e:	2b00      	cmp	r3, #0
 8014780:	d049      	beq.n	8014816 <tcp_output+0x37a>
      seg->next = NULL;
 8014782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014784:	2200      	movs	r2, #0
 8014786:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801478c:	2b00      	cmp	r3, #0
 801478e:	d105      	bne.n	801479c <tcp_output+0x300>
        pcb->unacked = seg;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014794:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014798:	623b      	str	r3, [r7, #32]
 801479a:	e03f      	b.n	801481c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	685b      	ldr	r3, [r3, #4]
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7f8 fe38 	bl	800d418 <lwip_htonl>
 80147a8:	4604      	mov	r4, r0
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7f8 fe31 	bl	800d418 <lwip_htonl>
 80147b6:	4603      	mov	r3, r0
 80147b8:	1ae3      	subs	r3, r4, r3
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	da24      	bge.n	8014808 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	3370      	adds	r3, #112	; 0x70
 80147c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80147c4:	e002      	b.n	80147cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d011      	beq.n	80147f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147d4:	69fb      	ldr	r3, [r7, #28]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	685b      	ldr	r3, [r3, #4]
 80147dc:	4618      	mov	r0, r3
 80147de:	f7f8 fe1b 	bl	800d418 <lwip_htonl>
 80147e2:	4604      	mov	r4, r0
 80147e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e6:	68db      	ldr	r3, [r3, #12]
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7f8 fe14 	bl	800d418 <lwip_htonl>
 80147f0:	4603      	mov	r3, r0
 80147f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	dbe6      	blt.n	80147c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014800:	69fb      	ldr	r3, [r7, #28]
 8014802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014804:	601a      	str	r2, [r3, #0]
 8014806:	e009      	b.n	801481c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014808:	6a3b      	ldr	r3, [r7, #32]
 801480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801480c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801480e:	6a3b      	ldr	r3, [r7, #32]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	623b      	str	r3, [r7, #32]
 8014814:	e002      	b.n	801481c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014818:	f7fb ff33 	bl	8010682 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014820:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014824:	2b00      	cmp	r3, #0
 8014826:	d012      	beq.n	801484e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	4618      	mov	r0, r3
 8014830:	f7f8 fdf2 	bl	800d418 <lwip_htonl>
 8014834:	4602      	mov	r2, r0
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801483e:	8912      	ldrh	r2, [r2, #8]
 8014840:	4413      	add	r3, r2
  while (seg != NULL &&
 8014842:	69ba      	ldr	r2, [r7, #24]
 8014844:	429a      	cmp	r2, r3
 8014846:	f4bf aed9 	bcs.w	80145fc <tcp_output+0x160>
 801484a:	e000      	b.n	801484e <tcp_output+0x3b2>
      break;
 801484c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014852:	2b00      	cmp	r3, #0
 8014854:	d108      	bne.n	8014868 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2200      	movs	r2, #0
 801485a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801485e:	e004      	b.n	801486a <tcp_output+0x3ce>
    goto output_done;
 8014860:	bf00      	nop
 8014862:	e002      	b.n	801486a <tcp_output+0x3ce>
    goto output_done;
 8014864:	bf00      	nop
 8014866:	e000      	b.n	801486a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014868:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	8b5b      	ldrh	r3, [r3, #26]
 801486e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014872:	b29a      	uxth	r2, r3
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014878:	2300      	movs	r3, #0
}
 801487a:	4618      	mov	r0, r3
 801487c:	3728      	adds	r7, #40	; 0x28
 801487e:	46bd      	mov	sp, r7
 8014880:	bdb0      	pop	{r4, r5, r7, pc}
 8014882:	bf00      	nop

08014884 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d106      	bne.n	80148a0 <tcp_output_segment_busy+0x1c>
 8014892:	4b09      	ldr	r3, [pc, #36]	; (80148b8 <tcp_output_segment_busy+0x34>)
 8014894:	f240 529a 	movw	r2, #1434	; 0x59a
 8014898:	4908      	ldr	r1, [pc, #32]	; (80148bc <tcp_output_segment_busy+0x38>)
 801489a:	4809      	ldr	r0, [pc, #36]	; (80148c0 <tcp_output_segment_busy+0x3c>)
 801489c:	f006 fe6e 	bl	801b57c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	7b9b      	ldrb	r3, [r3, #14]
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d001      	beq.n	80148ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80148aa:	2301      	movs	r3, #1
 80148ac:	e000      	b.n	80148b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80148ae:	2300      	movs	r3, #0
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3708      	adds	r7, #8
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}
 80148b8:	0801e0ac 	.word	0x0801e0ac
 80148bc:	0801e648 	.word	0x0801e648
 80148c0:	0801e100 	.word	0x0801e100

080148c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80148c4:	b5b0      	push	{r4, r5, r7, lr}
 80148c6:	b08c      	sub	sp, #48	; 0x30
 80148c8:	af04      	add	r7, sp, #16
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d106      	bne.n	80148e4 <tcp_output_segment+0x20>
 80148d6:	4b63      	ldr	r3, [pc, #396]	; (8014a64 <tcp_output_segment+0x1a0>)
 80148d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80148dc:	4962      	ldr	r1, [pc, #392]	; (8014a68 <tcp_output_segment+0x1a4>)
 80148de:	4863      	ldr	r0, [pc, #396]	; (8014a6c <tcp_output_segment+0x1a8>)
 80148e0:	f006 fe4c 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d106      	bne.n	80148f8 <tcp_output_segment+0x34>
 80148ea:	4b5e      	ldr	r3, [pc, #376]	; (8014a64 <tcp_output_segment+0x1a0>)
 80148ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80148f0:	495f      	ldr	r1, [pc, #380]	; (8014a70 <tcp_output_segment+0x1ac>)
 80148f2:	485e      	ldr	r0, [pc, #376]	; (8014a6c <tcp_output_segment+0x1a8>)
 80148f4:	f006 fe42 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d106      	bne.n	801490c <tcp_output_segment+0x48>
 80148fe:	4b59      	ldr	r3, [pc, #356]	; (8014a64 <tcp_output_segment+0x1a0>)
 8014900:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014904:	495b      	ldr	r1, [pc, #364]	; (8014a74 <tcp_output_segment+0x1b0>)
 8014906:	4859      	ldr	r0, [pc, #356]	; (8014a6c <tcp_output_segment+0x1a8>)
 8014908:	f006 fe38 	bl	801b57c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f7ff ffb9 	bl	8014884 <tcp_output_segment_busy>
 8014912:	4603      	mov	r3, r0
 8014914:	2b00      	cmp	r3, #0
 8014916:	d001      	beq.n	801491c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014918:	2300      	movs	r3, #0
 801491a:	e09f      	b.n	8014a5c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	68dc      	ldr	r4, [r3, #12]
 8014924:	4610      	mov	r0, r2
 8014926:	f7f8 fd77 	bl	800d418 <lwip_htonl>
 801492a:	4603      	mov	r3, r0
 801492c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	68dc      	ldr	r4, [r3, #12]
 8014936:	4610      	mov	r0, r2
 8014938:	f7f8 fd5a 	bl	800d3f0 <lwip_htons>
 801493c:	4603      	mov	r3, r0
 801493e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014948:	441a      	add	r2, r3
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	3314      	adds	r3, #20
 8014954:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	7a9b      	ldrb	r3, [r3, #10]
 801495a:	f003 0301 	and.w	r3, r3, #1
 801495e:	2b00      	cmp	r3, #0
 8014960:	d015      	beq.n	801498e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	3304      	adds	r3, #4
 8014966:	461a      	mov	r2, r3
 8014968:	6879      	ldr	r1, [r7, #4]
 801496a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801496e:	f7fc fa33 	bl	8010dd8 <tcp_eff_send_mss_netif>
 8014972:	4603      	mov	r3, r0
 8014974:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014976:	8b7b      	ldrh	r3, [r7, #26]
 8014978:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801497c:	4618      	mov	r0, r3
 801497e:	f7f8 fd4b 	bl	800d418 <lwip_htonl>
 8014982:	4602      	mov	r2, r0
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	3304      	adds	r3, #4
 801498c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014994:	2b00      	cmp	r3, #0
 8014996:	da02      	bge.n	801499e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	2200      	movs	r2, #0
 801499c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d10c      	bne.n	80149c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80149a6:	4b34      	ldr	r3, [pc, #208]	; (8014a78 <tcp_output_segment+0x1b4>)
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7f8 fd2f 	bl	800d418 <lwip_htonl>
 80149ba:	4602      	mov	r2, r0
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	68da      	ldr	r2, [r3, #12]
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	8959      	ldrh	r1, [r3, #10]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	8b3a      	ldrh	r2, [r7, #24]
 80149da:	1a8a      	subs	r2, r1, r2
 80149dc:	b292      	uxth	r2, r2
 80149de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	685b      	ldr	r3, [r3, #4]
 80149e4:	8919      	ldrh	r1, [r3, #8]
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	8b3a      	ldrh	r2, [r7, #24]
 80149ec:	1a8a      	subs	r2, r1, r2
 80149ee:	b292      	uxth	r2, r2
 80149f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	68d2      	ldr	r2, [r2, #12]
 80149fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	68db      	ldr	r3, [r3, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	741a      	strb	r2, [r3, #16]
 8014a04:	2200      	movs	r2, #0
 8014a06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	f103 0214 	add.w	r2, r3, #20
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	7a9b      	ldrb	r3, [r3, #10]
 8014a14:	009b      	lsls	r3, r3, #2
 8014a16:	f003 0304 	and.w	r3, r3, #4
 8014a1a:	4413      	add	r3, r2
 8014a1c:	69fa      	ldr	r2, [r7, #28]
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d006      	beq.n	8014a30 <tcp_output_segment+0x16c>
 8014a22:	4b10      	ldr	r3, [pc, #64]	; (8014a64 <tcp_output_segment+0x1a0>)
 8014a24:	f240 621c 	movw	r2, #1564	; 0x61c
 8014a28:	4914      	ldr	r1, [pc, #80]	; (8014a7c <tcp_output_segment+0x1b8>)
 8014a2a:	4810      	ldr	r0, [pc, #64]	; (8014a6c <tcp_output_segment+0x1a8>)
 8014a2c:	f006 fda6 	bl	801b57c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	6858      	ldr	r0, [r3, #4]
 8014a34:	68b9      	ldr	r1, [r7, #8]
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	1d1c      	adds	r4, r3, #4
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	7add      	ldrb	r5, [r3, #11]
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	7a9b      	ldrb	r3, [r3, #10]
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	9202      	str	r2, [sp, #8]
 8014a46:	2206      	movs	r2, #6
 8014a48:	9201      	str	r2, [sp, #4]
 8014a4a:	9300      	str	r3, [sp, #0]
 8014a4c:	462b      	mov	r3, r5
 8014a4e:	4622      	mov	r2, r4
 8014a50:	f004 fc3c 	bl	80192cc <ip4_output_if>
 8014a54:	4603      	mov	r3, r0
 8014a56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3720      	adds	r7, #32
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bdb0      	pop	{r4, r5, r7, pc}
 8014a64:	0801e0ac 	.word	0x0801e0ac
 8014a68:	0801e670 	.word	0x0801e670
 8014a6c:	0801e100 	.word	0x0801e100
 8014a70:	0801e690 	.word	0x0801e690
 8014a74:	0801e6b0 	.word	0x0801e6b0
 8014a78:	2000c94c 	.word	0x2000c94c
 8014a7c:	0801e6d4 	.word	0x0801e6d4

08014a80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014a80:	b5b0      	push	{r4, r5, r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d106      	bne.n	8014a9c <tcp_rexmit_rto_prepare+0x1c>
 8014a8e:	4b31      	ldr	r3, [pc, #196]	; (8014b54 <tcp_rexmit_rto_prepare+0xd4>)
 8014a90:	f240 6263 	movw	r2, #1635	; 0x663
 8014a94:	4930      	ldr	r1, [pc, #192]	; (8014b58 <tcp_rexmit_rto_prepare+0xd8>)
 8014a96:	4831      	ldr	r0, [pc, #196]	; (8014b5c <tcp_rexmit_rto_prepare+0xdc>)
 8014a98:	f006 fd70 	bl	801b57c <iprintf>

  if (pcb->unacked == NULL) {
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d102      	bne.n	8014aaa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014aa4:	f06f 0305 	mvn.w	r3, #5
 8014aa8:	e050      	b.n	8014b4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014aae:	60fb      	str	r3, [r7, #12]
 8014ab0:	e00b      	b.n	8014aca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014ab2:	68f8      	ldr	r0, [r7, #12]
 8014ab4:	f7ff fee6 	bl	8014884 <tcp_output_segment_busy>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d002      	beq.n	8014ac4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014abe:	f06f 0305 	mvn.w	r3, #5
 8014ac2:	e043      	b.n	8014b4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	60fb      	str	r3, [r7, #12]
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d1ef      	bne.n	8014ab2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014ad2:	68f8      	ldr	r0, [r7, #12]
 8014ad4:	f7ff fed6 	bl	8014884 <tcp_output_segment_busy>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d002      	beq.n	8014ae4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014ade:	f06f 0305 	mvn.w	r3, #5
 8014ae2:	e033      	b.n	8014b4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2200      	movs	r2, #0
 8014af8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	8b5b      	ldrh	r3, [r3, #26]
 8014afe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014b02:	b29a      	uxth	r2, r3
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	68db      	ldr	r3, [r3, #12]
 8014b0c:	685b      	ldr	r3, [r3, #4]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7f8 fc82 	bl	800d418 <lwip_htonl>
 8014b14:	4604      	mov	r4, r0
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	891b      	ldrh	r3, [r3, #8]
 8014b1a:	461d      	mov	r5, r3
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	68db      	ldr	r3, [r3, #12]
 8014b20:	899b      	ldrh	r3, [r3, #12]
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f8 fc63 	bl	800d3f0 <lwip_htons>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	f003 0303 	and.w	r3, r3, #3
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d001      	beq.n	8014b3a <tcp_rexmit_rto_prepare+0xba>
 8014b36:	2301      	movs	r3, #1
 8014b38:	e000      	b.n	8014b3c <tcp_rexmit_rto_prepare+0xbc>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	442b      	add	r3, r5
 8014b3e:	18e2      	adds	r2, r4, r3
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2200      	movs	r2, #0
 8014b48:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014b4a:	2300      	movs	r3, #0
}
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3710      	adds	r7, #16
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bdb0      	pop	{r4, r5, r7, pc}
 8014b54:	0801e0ac 	.word	0x0801e0ac
 8014b58:	0801e6e8 	.word	0x0801e6e8
 8014b5c:	0801e100 	.word	0x0801e100

08014b60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d106      	bne.n	8014b7c <tcp_rexmit_rto_commit+0x1c>
 8014b6e:	4b0d      	ldr	r3, [pc, #52]	; (8014ba4 <tcp_rexmit_rto_commit+0x44>)
 8014b70:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014b74:	490c      	ldr	r1, [pc, #48]	; (8014ba8 <tcp_rexmit_rto_commit+0x48>)
 8014b76:	480d      	ldr	r0, [pc, #52]	; (8014bac <tcp_rexmit_rto_commit+0x4c>)
 8014b78:	f006 fd00 	bl	801b57c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b82:	2bff      	cmp	r3, #255	; 0xff
 8014b84:	d007      	beq.n	8014b96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	b2da      	uxtb	r2, r3
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f7ff fc80 	bl	801449c <tcp_output>
}
 8014b9c:	bf00      	nop
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	0801e0ac 	.word	0x0801e0ac
 8014ba8:	0801e70c 	.word	0x0801e70c
 8014bac:	0801e100 	.word	0x0801e100

08014bb0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d106      	bne.n	8014bcc <tcp_rexmit_rto+0x1c>
 8014bbe:	4b0a      	ldr	r3, [pc, #40]	; (8014be8 <tcp_rexmit_rto+0x38>)
 8014bc0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014bc4:	4909      	ldr	r1, [pc, #36]	; (8014bec <tcp_rexmit_rto+0x3c>)
 8014bc6:	480a      	ldr	r0, [pc, #40]	; (8014bf0 <tcp_rexmit_rto+0x40>)
 8014bc8:	f006 fcd8 	bl	801b57c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f7ff ff57 	bl	8014a80 <tcp_rexmit_rto_prepare>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d102      	bne.n	8014bde <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f7ff ffc1 	bl	8014b60 <tcp_rexmit_rto_commit>
  }
}
 8014bde:	bf00      	nop
 8014be0:	3708      	adds	r7, #8
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	bf00      	nop
 8014be8:	0801e0ac 	.word	0x0801e0ac
 8014bec:	0801e730 	.word	0x0801e730
 8014bf0:	0801e100 	.word	0x0801e100

08014bf4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014bf4:	b590      	push	{r4, r7, lr}
 8014bf6:	b085      	sub	sp, #20
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d106      	bne.n	8014c10 <tcp_rexmit+0x1c>
 8014c02:	4b2f      	ldr	r3, [pc, #188]	; (8014cc0 <tcp_rexmit+0xcc>)
 8014c04:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014c08:	492e      	ldr	r1, [pc, #184]	; (8014cc4 <tcp_rexmit+0xd0>)
 8014c0a:	482f      	ldr	r0, [pc, #188]	; (8014cc8 <tcp_rexmit+0xd4>)
 8014c0c:	f006 fcb6 	bl	801b57c <iprintf>

  if (pcb->unacked == NULL) {
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d102      	bne.n	8014c1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014c18:	f06f 0305 	mvn.w	r3, #5
 8014c1c:	e04c      	b.n	8014cb8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014c24:	68b8      	ldr	r0, [r7, #8]
 8014c26:	f7ff fe2d 	bl	8014884 <tcp_output_segment_busy>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d002      	beq.n	8014c36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014c30:	f06f 0305 	mvn.w	r3, #5
 8014c34:	e040      	b.n	8014cb8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	681a      	ldr	r2, [r3, #0]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	336c      	adds	r3, #108	; 0x6c
 8014c42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014c44:	e002      	b.n	8014c4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d011      	beq.n	8014c78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	68db      	ldr	r3, [r3, #12]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7f8 fbdb 	bl	800d418 <lwip_htonl>
 8014c62:	4604      	mov	r4, r0
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7f8 fbd4 	bl	800d418 <lwip_htonl>
 8014c70:	4603      	mov	r3, r0
 8014c72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dbe6      	blt.n	8014c46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	68ba      	ldr	r2, [r7, #8]
 8014c84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d103      	bne.n	8014c96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2200      	movs	r2, #0
 8014c92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c9c:	2bff      	cmp	r3, #255	; 0xff
 8014c9e:	d007      	beq.n	8014cb0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	b2da      	uxtb	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014cb6:	2300      	movs	r3, #0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3714      	adds	r7, #20
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd90      	pop	{r4, r7, pc}
 8014cc0:	0801e0ac 	.word	0x0801e0ac
 8014cc4:	0801e74c 	.word	0x0801e74c
 8014cc8:	0801e100 	.word	0x0801e100

08014ccc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b082      	sub	sp, #8
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d106      	bne.n	8014ce8 <tcp_rexmit_fast+0x1c>
 8014cda:	4b2a      	ldr	r3, [pc, #168]	; (8014d84 <tcp_rexmit_fast+0xb8>)
 8014cdc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014ce0:	4929      	ldr	r1, [pc, #164]	; (8014d88 <tcp_rexmit_fast+0xbc>)
 8014ce2:	482a      	ldr	r0, [pc, #168]	; (8014d8c <tcp_rexmit_fast+0xc0>)
 8014ce4:	f006 fc4a 	bl	801b57c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d044      	beq.n	8014d7a <tcp_rexmit_fast+0xae>
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	8b5b      	ldrh	r3, [r3, #26]
 8014cf4:	f003 0304 	and.w	r3, r3, #4
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d13e      	bne.n	8014d7a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f7ff ff79 	bl	8014bf4 <tcp_rexmit>
 8014d02:	4603      	mov	r3, r0
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d138      	bne.n	8014d7a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d14:	4293      	cmp	r3, r2
 8014d16:	bf28      	it	cs
 8014d18:	4613      	movcs	r3, r2
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	0fda      	lsrs	r2, r3, #31
 8014d1e:	4413      	add	r3, r2
 8014d20:	105b      	asrs	r3, r3, #1
 8014d22:	b29a      	uxth	r2, r3
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014d30:	461a      	mov	r2, r3
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d206      	bcs.n	8014d4a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d40:	005b      	lsls	r3, r3, #1
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d54:	4619      	mov	r1, r3
 8014d56:	0049      	lsls	r1, r1, #1
 8014d58:	440b      	add	r3, r1
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	4413      	add	r3, r2
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	8b5b      	ldrh	r3, [r3, #26]
 8014d6a:	f043 0304 	orr.w	r3, r3, #4
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2200      	movs	r2, #0
 8014d78:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014d7a:	bf00      	nop
 8014d7c:	3708      	adds	r7, #8
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}
 8014d82:	bf00      	nop
 8014d84:	0801e0ac 	.word	0x0801e0ac
 8014d88:	0801e764 	.word	0x0801e764
 8014d8c:	0801e100 	.word	0x0801e100

08014d90 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	607b      	str	r3, [r7, #4]
 8014d9a:	460b      	mov	r3, r1
 8014d9c:	817b      	strh	r3, [r7, #10]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014da2:	897a      	ldrh	r2, [r7, #10]
 8014da4:	893b      	ldrh	r3, [r7, #8]
 8014da6:	4413      	add	r3, r2
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	3314      	adds	r3, #20
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014db2:	4619      	mov	r1, r3
 8014db4:	2022      	movs	r0, #34	; 0x22
 8014db6:	f7f9 fc9b 	bl	800e6f0 <pbuf_alloc>
 8014dba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d04d      	beq.n	8014e5e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014dc2:	897b      	ldrh	r3, [r7, #10]
 8014dc4:	3313      	adds	r3, #19
 8014dc6:	697a      	ldr	r2, [r7, #20]
 8014dc8:	8952      	ldrh	r2, [r2, #10]
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	db06      	blt.n	8014ddc <tcp_output_alloc_header_common+0x4c>
 8014dce:	4b26      	ldr	r3, [pc, #152]	; (8014e68 <tcp_output_alloc_header_common+0xd8>)
 8014dd0:	f240 7223 	movw	r2, #1827	; 0x723
 8014dd4:	4925      	ldr	r1, [pc, #148]	; (8014e6c <tcp_output_alloc_header_common+0xdc>)
 8014dd6:	4826      	ldr	r0, [pc, #152]	; (8014e70 <tcp_output_alloc_header_common+0xe0>)
 8014dd8:	f006 fbd0 	bl	801b57c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014de2:	8c3b      	ldrh	r3, [r7, #32]
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7f8 fb03 	bl	800d3f0 <lwip_htons>
 8014dea:	4603      	mov	r3, r0
 8014dec:	461a      	mov	r2, r3
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7f8 fafb 	bl	800d3f0 <lwip_htons>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014e02:	693b      	ldr	r3, [r7, #16]
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014e08:	68f8      	ldr	r0, [r7, #12]
 8014e0a:	f7f8 fb05 	bl	800d418 <lwip_htonl>
 8014e0e:	4602      	mov	r2, r0
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014e14:	897b      	ldrh	r3, [r7, #10]
 8014e16:	089b      	lsrs	r3, r3, #2
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	3305      	adds	r3, #5
 8014e1c:	b29b      	uxth	r3, r3
 8014e1e:	031b      	lsls	r3, r3, #12
 8014e20:	b29a      	uxth	r2, r3
 8014e22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	4313      	orrs	r3, r2
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f8 fadf 	bl	800d3f0 <lwip_htons>
 8014e32:	4603      	mov	r3, r0
 8014e34:	461a      	mov	r2, r3
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014e3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7f8 fad7 	bl	800d3f0 <lwip_htons>
 8014e42:	4603      	mov	r3, r0
 8014e44:	461a      	mov	r2, r3
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	741a      	strb	r2, [r3, #16]
 8014e50:	2200      	movs	r2, #0
 8014e52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	2200      	movs	r2, #0
 8014e58:	749a      	strb	r2, [r3, #18]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014e5e:	697b      	ldr	r3, [r7, #20]
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	3718      	adds	r7, #24
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	0801e0ac 	.word	0x0801e0ac
 8014e6c:	0801e784 	.word	0x0801e784
 8014e70:	0801e100 	.word	0x0801e100

08014e74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014e74:	b5b0      	push	{r4, r5, r7, lr}
 8014e76:	b08a      	sub	sp, #40	; 0x28
 8014e78:	af04      	add	r7, sp, #16
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	607b      	str	r3, [r7, #4]
 8014e7e:	460b      	mov	r3, r1
 8014e80:	817b      	strh	r3, [r7, #10]
 8014e82:	4613      	mov	r3, r2
 8014e84:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d106      	bne.n	8014e9a <tcp_output_alloc_header+0x26>
 8014e8c:	4b15      	ldr	r3, [pc, #84]	; (8014ee4 <tcp_output_alloc_header+0x70>)
 8014e8e:	f240 7242 	movw	r2, #1858	; 0x742
 8014e92:	4915      	ldr	r1, [pc, #84]	; (8014ee8 <tcp_output_alloc_header+0x74>)
 8014e94:	4815      	ldr	r0, [pc, #84]	; (8014eec <tcp_output_alloc_header+0x78>)
 8014e96:	f006 fb71 	bl	801b57c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	8adb      	ldrh	r3, [r3, #22]
 8014ea2:	68fa      	ldr	r2, [r7, #12]
 8014ea4:	8b12      	ldrh	r2, [r2, #24]
 8014ea6:	68f9      	ldr	r1, [r7, #12]
 8014ea8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014eaa:	893d      	ldrh	r5, [r7, #8]
 8014eac:	897c      	ldrh	r4, [r7, #10]
 8014eae:	9103      	str	r1, [sp, #12]
 8014eb0:	2110      	movs	r1, #16
 8014eb2:	9102      	str	r1, [sp, #8]
 8014eb4:	9201      	str	r2, [sp, #4]
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	462a      	mov	r2, r5
 8014ebc:	4621      	mov	r1, r4
 8014ebe:	f7ff ff67 	bl	8014d90 <tcp_output_alloc_header_common>
 8014ec2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d006      	beq.n	8014ed8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ece:	68fa      	ldr	r2, [r7, #12]
 8014ed0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014ed2:	441a      	add	r2, r3
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014ed8:	697b      	ldr	r3, [r7, #20]
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3718      	adds	r7, #24
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	0801e0ac 	.word	0x0801e0ac
 8014ee8:	0801e7b4 	.word	0x0801e7b4
 8014eec:	0801e100 	.word	0x0801e100

08014ef0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b088      	sub	sp, #32
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	4611      	mov	r1, r2
 8014efc:	461a      	mov	r2, r3
 8014efe:	460b      	mov	r3, r1
 8014f00:	71fb      	strb	r3, [r7, #7]
 8014f02:	4613      	mov	r3, r2
 8014f04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d106      	bne.n	8014f1e <tcp_output_fill_options+0x2e>
 8014f10:	4b13      	ldr	r3, [pc, #76]	; (8014f60 <tcp_output_fill_options+0x70>)
 8014f12:	f240 7256 	movw	r2, #1878	; 0x756
 8014f16:	4913      	ldr	r1, [pc, #76]	; (8014f64 <tcp_output_fill_options+0x74>)
 8014f18:	4813      	ldr	r0, [pc, #76]	; (8014f68 <tcp_output_fill_options+0x78>)
 8014f1a:	f006 fb2f 	bl	801b57c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	3314      	adds	r3, #20
 8014f28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	f103 0214 	add.w	r2, r3, #20
 8014f30:	8bfb      	ldrh	r3, [r7, #30]
 8014f32:	009b      	lsls	r3, r3, #2
 8014f34:	4619      	mov	r1, r3
 8014f36:	79fb      	ldrb	r3, [r7, #7]
 8014f38:	009b      	lsls	r3, r3, #2
 8014f3a:	f003 0304 	and.w	r3, r3, #4
 8014f3e:	440b      	add	r3, r1
 8014f40:	4413      	add	r3, r2
 8014f42:	697a      	ldr	r2, [r7, #20]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d006      	beq.n	8014f56 <tcp_output_fill_options+0x66>
 8014f48:	4b05      	ldr	r3, [pc, #20]	; (8014f60 <tcp_output_fill_options+0x70>)
 8014f4a:	f240 7275 	movw	r2, #1909	; 0x775
 8014f4e:	4907      	ldr	r1, [pc, #28]	; (8014f6c <tcp_output_fill_options+0x7c>)
 8014f50:	4805      	ldr	r0, [pc, #20]	; (8014f68 <tcp_output_fill_options+0x78>)
 8014f52:	f006 fb13 	bl	801b57c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014f56:	bf00      	nop
 8014f58:	3720      	adds	r7, #32
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	0801e0ac 	.word	0x0801e0ac
 8014f64:	0801e7dc 	.word	0x0801e7dc
 8014f68:	0801e100 	.word	0x0801e100
 8014f6c:	0801e6d4 	.word	0x0801e6d4

08014f70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08a      	sub	sp, #40	; 0x28
 8014f74:	af04      	add	r7, sp, #16
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
 8014f7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d106      	bne.n	8014f92 <tcp_output_control_segment+0x22>
 8014f84:	4b1c      	ldr	r3, [pc, #112]	; (8014ff8 <tcp_output_control_segment+0x88>)
 8014f86:	f240 7287 	movw	r2, #1927	; 0x787
 8014f8a:	491c      	ldr	r1, [pc, #112]	; (8014ffc <tcp_output_control_segment+0x8c>)
 8014f8c:	481c      	ldr	r0, [pc, #112]	; (8015000 <tcp_output_control_segment+0x90>)
 8014f8e:	f006 faf5 	bl	801b57c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014f92:	683a      	ldr	r2, [r7, #0]
 8014f94:	6879      	ldr	r1, [r7, #4]
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f7fe fae8 	bl	801356c <tcp_route>
 8014f9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d102      	bne.n	8014faa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014fa4:	23fc      	movs	r3, #252	; 0xfc
 8014fa6:	75fb      	strb	r3, [r7, #23]
 8014fa8:	e01c      	b.n	8014fe4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d006      	beq.n	8014fbe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	7adb      	ldrb	r3, [r3, #11]
 8014fb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	7a9b      	ldrb	r3, [r3, #10]
 8014fba:	757b      	strb	r3, [r7, #21]
 8014fbc:	e003      	b.n	8014fc6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014fbe:	23ff      	movs	r3, #255	; 0xff
 8014fc0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014fc6:	7dba      	ldrb	r2, [r7, #22]
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	9302      	str	r3, [sp, #8]
 8014fcc:	2306      	movs	r3, #6
 8014fce:	9301      	str	r3, [sp, #4]
 8014fd0:	7d7b      	ldrb	r3, [r7, #21]
 8014fd2:	9300      	str	r3, [sp, #0]
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	683a      	ldr	r2, [r7, #0]
 8014fd8:	6879      	ldr	r1, [r7, #4]
 8014fda:	68b8      	ldr	r0, [r7, #8]
 8014fdc:	f004 f976 	bl	80192cc <ip4_output_if>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014fe4:	68b8      	ldr	r0, [r7, #8]
 8014fe6:	f7f9 fe67 	bl	800ecb8 <pbuf_free>
  return err;
 8014fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3718      	adds	r7, #24
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	0801e0ac 	.word	0x0801e0ac
 8014ffc:	0801e804 	.word	0x0801e804
 8015000:	0801e100 	.word	0x0801e100

08015004 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015004:	b590      	push	{r4, r7, lr}
 8015006:	b08b      	sub	sp, #44	; 0x2c
 8015008:	af04      	add	r7, sp, #16
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	607a      	str	r2, [r7, #4]
 8015010:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d106      	bne.n	8015026 <tcp_rst+0x22>
 8015018:	4b1f      	ldr	r3, [pc, #124]	; (8015098 <tcp_rst+0x94>)
 801501a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801501e:	491f      	ldr	r1, [pc, #124]	; (801509c <tcp_rst+0x98>)
 8015020:	481f      	ldr	r0, [pc, #124]	; (80150a0 <tcp_rst+0x9c>)
 8015022:	f006 faab 	bl	801b57c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015028:	2b00      	cmp	r3, #0
 801502a:	d106      	bne.n	801503a <tcp_rst+0x36>
 801502c:	4b1a      	ldr	r3, [pc, #104]	; (8015098 <tcp_rst+0x94>)
 801502e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015032:	491c      	ldr	r1, [pc, #112]	; (80150a4 <tcp_rst+0xa0>)
 8015034:	481a      	ldr	r0, [pc, #104]	; (80150a0 <tcp_rst+0x9c>)
 8015036:	f006 faa1 	bl	801b57c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801503a:	2300      	movs	r3, #0
 801503c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801503e:	f246 0308 	movw	r3, #24584	; 0x6008
 8015042:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015044:	7dfb      	ldrb	r3, [r7, #23]
 8015046:	b29c      	uxth	r4, r3
 8015048:	68b8      	ldr	r0, [r7, #8]
 801504a:	f7f8 f9e5 	bl	800d418 <lwip_htonl>
 801504e:	4602      	mov	r2, r0
 8015050:	8abb      	ldrh	r3, [r7, #20]
 8015052:	9303      	str	r3, [sp, #12]
 8015054:	2314      	movs	r3, #20
 8015056:	9302      	str	r3, [sp, #8]
 8015058:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801505a:	9301      	str	r3, [sp, #4]
 801505c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801505e:	9300      	str	r3, [sp, #0]
 8015060:	4613      	mov	r3, r2
 8015062:	2200      	movs	r2, #0
 8015064:	4621      	mov	r1, r4
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	f7ff fe92 	bl	8014d90 <tcp_output_alloc_header_common>
 801506c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801506e:	693b      	ldr	r3, [r7, #16]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d00c      	beq.n	801508e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015074:	7dfb      	ldrb	r3, [r7, #23]
 8015076:	2200      	movs	r2, #0
 8015078:	6939      	ldr	r1, [r7, #16]
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f7ff ff38 	bl	8014ef0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015082:	683a      	ldr	r2, [r7, #0]
 8015084:	6939      	ldr	r1, [r7, #16]
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f7ff ff72 	bl	8014f70 <tcp_output_control_segment>
 801508c:	e000      	b.n	8015090 <tcp_rst+0x8c>
    return;
 801508e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015090:	371c      	adds	r7, #28
 8015092:	46bd      	mov	sp, r7
 8015094:	bd90      	pop	{r4, r7, pc}
 8015096:	bf00      	nop
 8015098:	0801e0ac 	.word	0x0801e0ac
 801509c:	0801e830 	.word	0x0801e830
 80150a0:	0801e100 	.word	0x0801e100
 80150a4:	0801e84c 	.word	0x0801e84c

080150a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80150a8:	b590      	push	{r4, r7, lr}
 80150aa:	b087      	sub	sp, #28
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80150b0:	2300      	movs	r3, #0
 80150b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80150b4:	2300      	movs	r3, #0
 80150b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d106      	bne.n	80150cc <tcp_send_empty_ack+0x24>
 80150be:	4b28      	ldr	r3, [pc, #160]	; (8015160 <tcp_send_empty_ack+0xb8>)
 80150c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80150c4:	4927      	ldr	r1, [pc, #156]	; (8015164 <tcp_send_empty_ack+0xbc>)
 80150c6:	4828      	ldr	r0, [pc, #160]	; (8015168 <tcp_send_empty_ack+0xc0>)
 80150c8:	f006 fa58 	bl	801b57c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80150cc:	7dfb      	ldrb	r3, [r7, #23]
 80150ce:	009b      	lsls	r3, r3, #2
 80150d0:	b2db      	uxtb	r3, r3
 80150d2:	f003 0304 	and.w	r3, r3, #4
 80150d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80150d8:	7d7b      	ldrb	r3, [r7, #21]
 80150da:	b29c      	uxth	r4, r3
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7f8 f999 	bl	800d418 <lwip_htonl>
 80150e6:	4603      	mov	r3, r0
 80150e8:	2200      	movs	r2, #0
 80150ea:	4621      	mov	r1, r4
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f7ff fec1 	bl	8014e74 <tcp_output_alloc_header>
 80150f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d109      	bne.n	801510e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	8b5b      	ldrh	r3, [r3, #26]
 80150fe:	f043 0303 	orr.w	r3, r3, #3
 8015102:	b29a      	uxth	r2, r3
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015108:	f06f 0301 	mvn.w	r3, #1
 801510c:	e023      	b.n	8015156 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801510e:	7dbb      	ldrb	r3, [r7, #22]
 8015110:	7dfa      	ldrb	r2, [r7, #23]
 8015112:	6939      	ldr	r1, [r7, #16]
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f7ff feeb 	bl	8014ef0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	3304      	adds	r3, #4
 8015120:	6939      	ldr	r1, [r7, #16]
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f7ff ff24 	bl	8014f70 <tcp_output_control_segment>
 8015128:	4603      	mov	r3, r0
 801512a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801512c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d007      	beq.n	8015144 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	8b5b      	ldrh	r3, [r3, #26]
 8015138:	f043 0303 	orr.w	r3, r3, #3
 801513c:	b29a      	uxth	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	835a      	strh	r2, [r3, #26]
 8015142:	e006      	b.n	8015152 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	8b5b      	ldrh	r3, [r3, #26]
 8015148:	f023 0303 	bic.w	r3, r3, #3
 801514c:	b29a      	uxth	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015152:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015156:	4618      	mov	r0, r3
 8015158:	371c      	adds	r7, #28
 801515a:	46bd      	mov	sp, r7
 801515c:	bd90      	pop	{r4, r7, pc}
 801515e:	bf00      	nop
 8015160:	0801e0ac 	.word	0x0801e0ac
 8015164:	0801e868 	.word	0x0801e868
 8015168:	0801e100 	.word	0x0801e100

0801516c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801516c:	b590      	push	{r4, r7, lr}
 801516e:	b087      	sub	sp, #28
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015174:	2300      	movs	r3, #0
 8015176:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d106      	bne.n	801518c <tcp_keepalive+0x20>
 801517e:	4b18      	ldr	r3, [pc, #96]	; (80151e0 <tcp_keepalive+0x74>)
 8015180:	f640 0224 	movw	r2, #2084	; 0x824
 8015184:	4917      	ldr	r1, [pc, #92]	; (80151e4 <tcp_keepalive+0x78>)
 8015186:	4818      	ldr	r0, [pc, #96]	; (80151e8 <tcp_keepalive+0x7c>)
 8015188:	f006 f9f8 	bl	801b57c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801518c:	7dfb      	ldrb	r3, [r7, #23]
 801518e:	b29c      	uxth	r4, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015194:	3b01      	subs	r3, #1
 8015196:	4618      	mov	r0, r3
 8015198:	f7f8 f93e 	bl	800d418 <lwip_htonl>
 801519c:	4603      	mov	r3, r0
 801519e:	2200      	movs	r2, #0
 80151a0:	4621      	mov	r1, r4
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f7ff fe66 	bl	8014e74 <tcp_output_alloc_header>
 80151a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d102      	bne.n	80151b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80151b0:	f04f 33ff 	mov.w	r3, #4294967295
 80151b4:	e010      	b.n	80151d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80151b6:	7dfb      	ldrb	r3, [r7, #23]
 80151b8:	2200      	movs	r2, #0
 80151ba:	6939      	ldr	r1, [r7, #16]
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f7ff fe97 	bl	8014ef0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	3304      	adds	r3, #4
 80151c8:	6939      	ldr	r1, [r7, #16]
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f7ff fed0 	bl	8014f70 <tcp_output_control_segment>
 80151d0:	4603      	mov	r3, r0
 80151d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80151d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80151d8:	4618      	mov	r0, r3
 80151da:	371c      	adds	r7, #28
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd90      	pop	{r4, r7, pc}
 80151e0:	0801e0ac 	.word	0x0801e0ac
 80151e4:	0801e888 	.word	0x0801e888
 80151e8:	0801e100 	.word	0x0801e100

080151ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80151ec:	b590      	push	{r4, r7, lr}
 80151ee:	b08b      	sub	sp, #44	; 0x2c
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80151f4:	2300      	movs	r3, #0
 80151f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d106      	bne.n	801520e <tcp_zero_window_probe+0x22>
 8015200:	4b4c      	ldr	r3, [pc, #304]	; (8015334 <tcp_zero_window_probe+0x148>)
 8015202:	f640 024f 	movw	r2, #2127	; 0x84f
 8015206:	494c      	ldr	r1, [pc, #304]	; (8015338 <tcp_zero_window_probe+0x14c>)
 8015208:	484c      	ldr	r0, [pc, #304]	; (801533c <tcp_zero_window_probe+0x150>)
 801520a:	f006 f9b7 	bl	801b57c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015212:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015214:	6a3b      	ldr	r3, [r7, #32]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d101      	bne.n	801521e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801521a:	2300      	movs	r3, #0
 801521c:	e086      	b.n	801532c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015224:	2bff      	cmp	r3, #255	; 0xff
 8015226:	d007      	beq.n	8015238 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801522e:	3301      	adds	r3, #1
 8015230:	b2da      	uxtb	r2, r3
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015238:	6a3b      	ldr	r3, [r7, #32]
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	899b      	ldrh	r3, [r3, #12]
 801523e:	b29b      	uxth	r3, r3
 8015240:	4618      	mov	r0, r3
 8015242:	f7f8 f8d5 	bl	800d3f0 <lwip_htons>
 8015246:	4603      	mov	r3, r0
 8015248:	b2db      	uxtb	r3, r3
 801524a:	f003 0301 	and.w	r3, r3, #1
 801524e:	2b00      	cmp	r3, #0
 8015250:	d005      	beq.n	801525e <tcp_zero_window_probe+0x72>
 8015252:	6a3b      	ldr	r3, [r7, #32]
 8015254:	891b      	ldrh	r3, [r3, #8]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d101      	bne.n	801525e <tcp_zero_window_probe+0x72>
 801525a:	2301      	movs	r3, #1
 801525c:	e000      	b.n	8015260 <tcp_zero_window_probe+0x74>
 801525e:	2300      	movs	r3, #0
 8015260:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015262:	7ffb      	ldrb	r3, [r7, #31]
 8015264:	2b00      	cmp	r3, #0
 8015266:	bf0c      	ite	eq
 8015268:	2301      	moveq	r3, #1
 801526a:	2300      	movne	r3, #0
 801526c:	b2db      	uxtb	r3, r3
 801526e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015274:	b299      	uxth	r1, r3
 8015276:	6a3b      	ldr	r3, [r7, #32]
 8015278:	68db      	ldr	r3, [r3, #12]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	8bba      	ldrh	r2, [r7, #28]
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f7ff fdf8 	bl	8014e74 <tcp_output_alloc_header>
 8015284:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d102      	bne.n	8015292 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801528c:	f04f 33ff 	mov.w	r3, #4294967295
 8015290:	e04c      	b.n	801532c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015298:	7ffb      	ldrb	r3, [r7, #31]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d011      	beq.n	80152c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	899b      	ldrh	r3, [r3, #12]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	b21b      	sxth	r3, r3
 80152a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80152aa:	b21c      	sxth	r4, r3
 80152ac:	2011      	movs	r0, #17
 80152ae:	f7f8 f89f 	bl	800d3f0 <lwip_htons>
 80152b2:	4603      	mov	r3, r0
 80152b4:	b21b      	sxth	r3, r3
 80152b6:	4323      	orrs	r3, r4
 80152b8:	b21b      	sxth	r3, r3
 80152ba:	b29a      	uxth	r2, r3
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	819a      	strh	r2, [r3, #12]
 80152c0:	e010      	b.n	80152e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	3314      	adds	r3, #20
 80152c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80152ca:	6a3b      	ldr	r3, [r7, #32]
 80152cc:	6858      	ldr	r0, [r3, #4]
 80152ce:	6a3b      	ldr	r3, [r7, #32]
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	891a      	ldrh	r2, [r3, #8]
 80152d4:	6a3b      	ldr	r3, [r7, #32]
 80152d6:	891b      	ldrh	r3, [r3, #8]
 80152d8:	1ad3      	subs	r3, r2, r3
 80152da:	b29b      	uxth	r3, r3
 80152dc:	2201      	movs	r2, #1
 80152de:	6939      	ldr	r1, [r7, #16]
 80152e0:	f7f9 feee 	bl	800f0c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80152e4:	6a3b      	ldr	r3, [r7, #32]
 80152e6:	68db      	ldr	r3, [r3, #12]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7f8 f894 	bl	800d418 <lwip_htonl>
 80152f0:	4603      	mov	r3, r0
 80152f2:	3301      	adds	r3, #1
 80152f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	1ad3      	subs	r3, r2, r3
 80152fe:	2b00      	cmp	r3, #0
 8015300:	da02      	bge.n	8015308 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801530c:	2200      	movs	r2, #0
 801530e:	69b9      	ldr	r1, [r7, #24]
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f7ff fded 	bl	8014ef0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	3304      	adds	r3, #4
 801531c:	69b9      	ldr	r1, [r7, #24]
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f7ff fe26 	bl	8014f70 <tcp_output_control_segment>
 8015324:	4603      	mov	r3, r0
 8015326:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015328:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801532c:	4618      	mov	r0, r3
 801532e:	372c      	adds	r7, #44	; 0x2c
 8015330:	46bd      	mov	sp, r7
 8015332:	bd90      	pop	{r4, r7, pc}
 8015334:	0801e0ac 	.word	0x0801e0ac
 8015338:	0801e8a4 	.word	0x0801e8a4
 801533c:	0801e100 	.word	0x0801e100

08015340 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015348:	f7fa f80a 	bl	800f360 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801534c:	4b0a      	ldr	r3, [pc, #40]	; (8015378 <tcpip_tcp_timer+0x38>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d103      	bne.n	801535c <tcpip_tcp_timer+0x1c>
 8015354:	4b09      	ldr	r3, [pc, #36]	; (801537c <tcpip_tcp_timer+0x3c>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d005      	beq.n	8015368 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801535c:	2200      	movs	r2, #0
 801535e:	4908      	ldr	r1, [pc, #32]	; (8015380 <tcpip_tcp_timer+0x40>)
 8015360:	20fa      	movs	r0, #250	; 0xfa
 8015362:	f000 f8f3 	bl	801554c <sys_timeout>
 8015366:	e003      	b.n	8015370 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015368:	4b06      	ldr	r3, [pc, #24]	; (8015384 <tcpip_tcp_timer+0x44>)
 801536a:	2200      	movs	r2, #0
 801536c:	601a      	str	r2, [r3, #0]
  }
}
 801536e:	bf00      	nop
 8015370:	bf00      	nop
 8015372:	3708      	adds	r7, #8
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	2000c958 	.word	0x2000c958
 801537c:	2000c95c 	.word	0x2000c95c
 8015380:	08015341 	.word	0x08015341
 8015384:	2000c9a4 	.word	0x2000c9a4

08015388 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801538c:	4b0a      	ldr	r3, [pc, #40]	; (80153b8 <tcp_timer_needed+0x30>)
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d10f      	bne.n	80153b4 <tcp_timer_needed+0x2c>
 8015394:	4b09      	ldr	r3, [pc, #36]	; (80153bc <tcp_timer_needed+0x34>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d103      	bne.n	80153a4 <tcp_timer_needed+0x1c>
 801539c:	4b08      	ldr	r3, [pc, #32]	; (80153c0 <tcp_timer_needed+0x38>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d007      	beq.n	80153b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80153a4:	4b04      	ldr	r3, [pc, #16]	; (80153b8 <tcp_timer_needed+0x30>)
 80153a6:	2201      	movs	r2, #1
 80153a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80153aa:	2200      	movs	r2, #0
 80153ac:	4905      	ldr	r1, [pc, #20]	; (80153c4 <tcp_timer_needed+0x3c>)
 80153ae:	20fa      	movs	r0, #250	; 0xfa
 80153b0:	f000 f8cc 	bl	801554c <sys_timeout>
  }
}
 80153b4:	bf00      	nop
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	2000c9a4 	.word	0x2000c9a4
 80153bc:	2000c958 	.word	0x2000c958
 80153c0:	2000c95c 	.word	0x2000c95c
 80153c4:	08015341 	.word	0x08015341

080153c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b086      	sub	sp, #24
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	60f8      	str	r0, [r7, #12]
 80153d0:	60b9      	str	r1, [r7, #8]
 80153d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80153d4:	200a      	movs	r0, #10
 80153d6:	f7f8 fdbb 	bl	800df50 <memp_malloc>
 80153da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d109      	bne.n	80153f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d151      	bne.n	801548c <sys_timeout_abs+0xc4>
 80153e8:	4b2a      	ldr	r3, [pc, #168]	; (8015494 <sys_timeout_abs+0xcc>)
 80153ea:	22be      	movs	r2, #190	; 0xbe
 80153ec:	492a      	ldr	r1, [pc, #168]	; (8015498 <sys_timeout_abs+0xd0>)
 80153ee:	482b      	ldr	r0, [pc, #172]	; (801549c <sys_timeout_abs+0xd4>)
 80153f0:	f006 f8c4 	bl	801b57c <iprintf>
    return;
 80153f4:	e04a      	b.n	801548c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	2200      	movs	r2, #0
 80153fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	68ba      	ldr	r2, [r7, #8]
 8015400:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015408:	693b      	ldr	r3, [r7, #16]
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801540e:	4b24      	ldr	r3, [pc, #144]	; (80154a0 <sys_timeout_abs+0xd8>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d103      	bne.n	801541e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015416:	4a22      	ldr	r2, [pc, #136]	; (80154a0 <sys_timeout_abs+0xd8>)
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	6013      	str	r3, [r2, #0]
    return;
 801541c:	e037      	b.n	801548e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	685a      	ldr	r2, [r3, #4]
 8015422:	4b1f      	ldr	r3, [pc, #124]	; (80154a0 <sys_timeout_abs+0xd8>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	1ad3      	subs	r3, r2, r3
 801542a:	0fdb      	lsrs	r3, r3, #31
 801542c:	f003 0301 	and.w	r3, r3, #1
 8015430:	b2db      	uxtb	r3, r3
 8015432:	2b00      	cmp	r3, #0
 8015434:	d007      	beq.n	8015446 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015436:	4b1a      	ldr	r3, [pc, #104]	; (80154a0 <sys_timeout_abs+0xd8>)
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801543e:	4a18      	ldr	r2, [pc, #96]	; (80154a0 <sys_timeout_abs+0xd8>)
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	6013      	str	r3, [r2, #0]
 8015444:	e023      	b.n	801548e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015446:	4b16      	ldr	r3, [pc, #88]	; (80154a0 <sys_timeout_abs+0xd8>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	617b      	str	r3, [r7, #20]
 801544c:	e01a      	b.n	8015484 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d00b      	beq.n	801546e <sys_timeout_abs+0xa6>
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	685a      	ldr	r2, [r3, #4]
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	1ad3      	subs	r3, r2, r3
 8015462:	0fdb      	lsrs	r3, r3, #31
 8015464:	f003 0301 	and.w	r3, r3, #1
 8015468:	b2db      	uxtb	r3, r3
 801546a:	2b00      	cmp	r3, #0
 801546c:	d007      	beq.n	801547e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	681a      	ldr	r2, [r3, #0]
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	693a      	ldr	r2, [r7, #16]
 801547a:	601a      	str	r2, [r3, #0]
        break;
 801547c:	e007      	b.n	801548e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	617b      	str	r3, [r7, #20]
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d1e1      	bne.n	801544e <sys_timeout_abs+0x86>
 801548a:	e000      	b.n	801548e <sys_timeout_abs+0xc6>
    return;
 801548c:	bf00      	nop
      }
    }
  }
}
 801548e:	3718      	adds	r7, #24
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}
 8015494:	0801e8c8 	.word	0x0801e8c8
 8015498:	0801e8fc 	.word	0x0801e8fc
 801549c:	0801e93c 	.word	0x0801e93c
 80154a0:	2000c99c 	.word	0x2000c99c

080154a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b086      	sub	sp, #24
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	4798      	blx	r3

  now = sys_now();
 80154b6:	f7f0 fda1 	bl	8005ffc <sys_now>
 80154ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	681a      	ldr	r2, [r3, #0]
 80154c0:	4b0f      	ldr	r3, [pc, #60]	; (8015500 <lwip_cyclic_timer+0x5c>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4413      	add	r3, r2
 80154c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	1ad3      	subs	r3, r2, r3
 80154ce:	0fdb      	lsrs	r3, r3, #31
 80154d0:	f003 0301 	and.w	r3, r3, #1
 80154d4:	b2db      	uxtb	r3, r3
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d009      	beq.n	80154ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	4413      	add	r3, r2
 80154e2:	687a      	ldr	r2, [r7, #4]
 80154e4:	4907      	ldr	r1, [pc, #28]	; (8015504 <lwip_cyclic_timer+0x60>)
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7ff ff6e 	bl	80153c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80154ec:	e004      	b.n	80154f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80154ee:	687a      	ldr	r2, [r7, #4]
 80154f0:	4904      	ldr	r1, [pc, #16]	; (8015504 <lwip_cyclic_timer+0x60>)
 80154f2:	68f8      	ldr	r0, [r7, #12]
 80154f4:	f7ff ff68 	bl	80153c8 <sys_timeout_abs>
}
 80154f8:	bf00      	nop
 80154fa:	3718      	adds	r7, #24
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	2000c9a0 	.word	0x2000c9a0
 8015504:	080154a5 	.word	0x080154a5

08015508 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801550e:	2301      	movs	r3, #1
 8015510:	607b      	str	r3, [r7, #4]
 8015512:	e00e      	b.n	8015532 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015514:	4a0b      	ldr	r2, [pc, #44]	; (8015544 <sys_timeouts_init+0x3c>)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	00db      	lsls	r3, r3, #3
 8015520:	4a08      	ldr	r2, [pc, #32]	; (8015544 <sys_timeouts_init+0x3c>)
 8015522:	4413      	add	r3, r2
 8015524:	461a      	mov	r2, r3
 8015526:	4908      	ldr	r1, [pc, #32]	; (8015548 <sys_timeouts_init+0x40>)
 8015528:	f000 f810 	bl	801554c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	3301      	adds	r3, #1
 8015530:	607b      	str	r3, [r7, #4]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2b04      	cmp	r3, #4
 8015536:	d9ed      	bls.n	8015514 <sys_timeouts_init+0xc>
  }
}
 8015538:	bf00      	nop
 801553a:	bf00      	nop
 801553c:	3708      	adds	r7, #8
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	0801f90c 	.word	0x0801f90c
 8015548:	080154a5 	.word	0x080154a5

0801554c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b086      	sub	sp, #24
 8015550:	af00      	add	r7, sp, #0
 8015552:	60f8      	str	r0, [r7, #12]
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801555e:	d306      	bcc.n	801556e <sys_timeout+0x22>
 8015560:	4b0a      	ldr	r3, [pc, #40]	; (801558c <sys_timeout+0x40>)
 8015562:	f240 1229 	movw	r2, #297	; 0x129
 8015566:	490a      	ldr	r1, [pc, #40]	; (8015590 <sys_timeout+0x44>)
 8015568:	480a      	ldr	r0, [pc, #40]	; (8015594 <sys_timeout+0x48>)
 801556a:	f006 f807 	bl	801b57c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801556e:	f7f0 fd45 	bl	8005ffc <sys_now>
 8015572:	4602      	mov	r2, r0
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	4413      	add	r3, r2
 8015578:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	68b9      	ldr	r1, [r7, #8]
 801557e:	6978      	ldr	r0, [r7, #20]
 8015580:	f7ff ff22 	bl	80153c8 <sys_timeout_abs>
#endif
}
 8015584:	bf00      	nop
 8015586:	3718      	adds	r7, #24
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	0801e8c8 	.word	0x0801e8c8
 8015590:	0801e964 	.word	0x0801e964
 8015594:	0801e93c 	.word	0x0801e93c

08015598 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80155a2:	4b19      	ldr	r3, [pc, #100]	; (8015608 <sys_untimeout+0x70>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d029      	beq.n	80155fe <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80155aa:	4b17      	ldr	r3, [pc, #92]	; (8015608 <sys_untimeout+0x70>)
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	60bb      	str	r3, [r7, #8]
 80155b0:	2300      	movs	r3, #0
 80155b2:	60fb      	str	r3, [r7, #12]
 80155b4:	e01f      	b.n	80155f6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	689b      	ldr	r3, [r3, #8]
 80155ba:	687a      	ldr	r2, [r7, #4]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d115      	bne.n	80155ec <sys_untimeout+0x54>
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	68db      	ldr	r3, [r3, #12]
 80155c4:	683a      	ldr	r2, [r7, #0]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d110      	bne.n	80155ec <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d104      	bne.n	80155da <sys_untimeout+0x42>
        next_timeout = t->next;
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4a0c      	ldr	r2, [pc, #48]	; (8015608 <sys_untimeout+0x70>)
 80155d6:	6013      	str	r3, [r2, #0]
 80155d8:	e003      	b.n	80155e2 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	681a      	ldr	r2, [r3, #0]
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80155e2:	68b9      	ldr	r1, [r7, #8]
 80155e4:	200a      	movs	r0, #10
 80155e6:	f7f8 fd29 	bl	800e03c <memp_free>
      return;
 80155ea:	e009      	b.n	8015600 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	60fb      	str	r3, [r7, #12]
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	60bb      	str	r3, [r7, #8]
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d1dc      	bne.n	80155b6 <sys_untimeout+0x1e>
    }
  }
  return;
 80155fc:	e000      	b.n	8015600 <sys_untimeout+0x68>
    return;
 80155fe:	bf00      	nop
}
 8015600:	3710      	adds	r7, #16
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}
 8015606:	bf00      	nop
 8015608:	2000c99c 	.word	0x2000c99c

0801560c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015612:	f7f0 fcf3 	bl	8005ffc <sys_now>
 8015616:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015618:	4b17      	ldr	r3, [pc, #92]	; (8015678 <sys_check_timeouts+0x6c>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d022      	beq.n	801566a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	68fa      	ldr	r2, [r7, #12]
 801562a:	1ad3      	subs	r3, r2, r3
 801562c:	0fdb      	lsrs	r3, r3, #31
 801562e:	f003 0301 	and.w	r3, r3, #1
 8015632:	b2db      	uxtb	r3, r3
 8015634:	2b00      	cmp	r3, #0
 8015636:	d11a      	bne.n	801566e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4a0e      	ldr	r2, [pc, #56]	; (8015678 <sys_check_timeouts+0x6c>)
 801563e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015640:	68bb      	ldr	r3, [r7, #8]
 8015642:	689b      	ldr	r3, [r3, #8]
 8015644:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	68db      	ldr	r3, [r3, #12]
 801564a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	685b      	ldr	r3, [r3, #4]
 8015650:	4a0a      	ldr	r2, [pc, #40]	; (801567c <sys_check_timeouts+0x70>)
 8015652:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015654:	68b9      	ldr	r1, [r7, #8]
 8015656:	200a      	movs	r0, #10
 8015658:	f7f8 fcf0 	bl	800e03c <memp_free>
    if (handler != NULL) {
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d0da      	beq.n	8015618 <sys_check_timeouts+0xc>
      handler(arg);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	6838      	ldr	r0, [r7, #0]
 8015666:	4798      	blx	r3
  do {
 8015668:	e7d6      	b.n	8015618 <sys_check_timeouts+0xc>
      return;
 801566a:	bf00      	nop
 801566c:	e000      	b.n	8015670 <sys_check_timeouts+0x64>
      return;
 801566e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015670:	3710      	adds	r7, #16
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}
 8015676:	bf00      	nop
 8015678:	2000c99c 	.word	0x2000c99c
 801567c:	2000c9a0 	.word	0x2000c9a0

08015680 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015686:	4b16      	ldr	r3, [pc, #88]	; (80156e0 <sys_timeouts_sleeptime+0x60>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d102      	bne.n	8015694 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801568e:	f04f 33ff 	mov.w	r3, #4294967295
 8015692:	e020      	b.n	80156d6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015694:	f7f0 fcb2 	bl	8005ffc <sys_now>
 8015698:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801569a:	4b11      	ldr	r3, [pc, #68]	; (80156e0 <sys_timeouts_sleeptime+0x60>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	685a      	ldr	r2, [r3, #4]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	0fdb      	lsrs	r3, r3, #31
 80156a6:	f003 0301 	and.w	r3, r3, #1
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d001      	beq.n	80156b4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80156b0:	2300      	movs	r3, #0
 80156b2:	e010      	b.n	80156d6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80156b4:	4b0a      	ldr	r3, [pc, #40]	; (80156e0 <sys_timeouts_sleeptime+0x60>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	685a      	ldr	r2, [r3, #4]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	1ad3      	subs	r3, r2, r3
 80156be:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	da06      	bge.n	80156d4 <sys_timeouts_sleeptime+0x54>
 80156c6:	4b07      	ldr	r3, [pc, #28]	; (80156e4 <sys_timeouts_sleeptime+0x64>)
 80156c8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80156cc:	4906      	ldr	r1, [pc, #24]	; (80156e8 <sys_timeouts_sleeptime+0x68>)
 80156ce:	4807      	ldr	r0, [pc, #28]	; (80156ec <sys_timeouts_sleeptime+0x6c>)
 80156d0:	f005 ff54 	bl	801b57c <iprintf>
    return ret;
 80156d4:	683b      	ldr	r3, [r7, #0]
  }
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3708      	adds	r7, #8
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	2000c99c 	.word	0x2000c99c
 80156e4:	0801e8c8 	.word	0x0801e8c8
 80156e8:	0801e99c 	.word	0x0801e99c
 80156ec:	0801e93c 	.word	0x0801e93c

080156f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80156f4:	f005 ff5a 	bl	801b5ac <rand>
 80156f8:	4603      	mov	r3, r0
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015700:	b29b      	uxth	r3, r3
 8015702:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015706:	b29a      	uxth	r2, r3
 8015708:	4b01      	ldr	r3, [pc, #4]	; (8015710 <udp_init+0x20>)
 801570a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801570c:	bf00      	nop
 801570e:	bd80      	pop	{r7, pc}
 8015710:	200000a4 	.word	0x200000a4

08015714 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801571a:	2300      	movs	r3, #0
 801571c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801571e:	4b17      	ldr	r3, [pc, #92]	; (801577c <udp_new_port+0x68>)
 8015720:	881b      	ldrh	r3, [r3, #0]
 8015722:	1c5a      	adds	r2, r3, #1
 8015724:	b291      	uxth	r1, r2
 8015726:	4a15      	ldr	r2, [pc, #84]	; (801577c <udp_new_port+0x68>)
 8015728:	8011      	strh	r1, [r2, #0]
 801572a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801572e:	4293      	cmp	r3, r2
 8015730:	d103      	bne.n	801573a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015732:	4b12      	ldr	r3, [pc, #72]	; (801577c <udp_new_port+0x68>)
 8015734:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015738:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801573a:	4b11      	ldr	r3, [pc, #68]	; (8015780 <udp_new_port+0x6c>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	603b      	str	r3, [r7, #0]
 8015740:	e011      	b.n	8015766 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	8a5a      	ldrh	r2, [r3, #18]
 8015746:	4b0d      	ldr	r3, [pc, #52]	; (801577c <udp_new_port+0x68>)
 8015748:	881b      	ldrh	r3, [r3, #0]
 801574a:	429a      	cmp	r2, r3
 801574c:	d108      	bne.n	8015760 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801574e:	88fb      	ldrh	r3, [r7, #6]
 8015750:	3301      	adds	r3, #1
 8015752:	80fb      	strh	r3, [r7, #6]
 8015754:	88fb      	ldrh	r3, [r7, #6]
 8015756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801575a:	d3e0      	bcc.n	801571e <udp_new_port+0xa>
        return 0;
 801575c:	2300      	movs	r3, #0
 801575e:	e007      	b.n	8015770 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	68db      	ldr	r3, [r3, #12]
 8015764:	603b      	str	r3, [r7, #0]
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1ea      	bne.n	8015742 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801576c:	4b03      	ldr	r3, [pc, #12]	; (801577c <udp_new_port+0x68>)
 801576e:	881b      	ldrh	r3, [r3, #0]
}
 8015770:	4618      	mov	r0, r3
 8015772:	370c      	adds	r7, #12
 8015774:	46bd      	mov	sp, r7
 8015776:	bc80      	pop	{r7}
 8015778:	4770      	bx	lr
 801577a:	bf00      	nop
 801577c:	200000a4 	.word	0x200000a4
 8015780:	2000c9a8 	.word	0x2000c9a8

08015784 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b084      	sub	sp, #16
 8015788:	af00      	add	r7, sp, #0
 801578a:	60f8      	str	r0, [r7, #12]
 801578c:	60b9      	str	r1, [r7, #8]
 801578e:	4613      	mov	r3, r2
 8015790:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d105      	bne.n	80157a4 <udp_input_local_match+0x20>
 8015798:	4b27      	ldr	r3, [pc, #156]	; (8015838 <udp_input_local_match+0xb4>)
 801579a:	2287      	movs	r2, #135	; 0x87
 801579c:	4927      	ldr	r1, [pc, #156]	; (801583c <udp_input_local_match+0xb8>)
 801579e:	4828      	ldr	r0, [pc, #160]	; (8015840 <udp_input_local_match+0xbc>)
 80157a0:	f005 feec 	bl	801b57c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d105      	bne.n	80157b6 <udp_input_local_match+0x32>
 80157aa:	4b23      	ldr	r3, [pc, #140]	; (8015838 <udp_input_local_match+0xb4>)
 80157ac:	2288      	movs	r2, #136	; 0x88
 80157ae:	4925      	ldr	r1, [pc, #148]	; (8015844 <udp_input_local_match+0xc0>)
 80157b0:	4823      	ldr	r0, [pc, #140]	; (8015840 <udp_input_local_match+0xbc>)
 80157b2:	f005 fee3 	bl	801b57c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	7a1b      	ldrb	r3, [r3, #8]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d00b      	beq.n	80157d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	7a1a      	ldrb	r2, [r3, #8]
 80157c2:	4b21      	ldr	r3, [pc, #132]	; (8015848 <udp_input_local_match+0xc4>)
 80157c4:	685b      	ldr	r3, [r3, #4]
 80157c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80157ca:	3301      	adds	r3, #1
 80157cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d001      	beq.n	80157d6 <udp_input_local_match+0x52>
    return 0;
 80157d2:	2300      	movs	r3, #0
 80157d4:	e02b      	b.n	801582e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80157d6:	79fb      	ldrb	r3, [r7, #7]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d018      	beq.n	801580e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d013      	beq.n	801580a <udp_input_local_match+0x86>
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d00f      	beq.n	801580a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80157ea:	4b17      	ldr	r3, [pc, #92]	; (8015848 <udp_input_local_match+0xc4>)
 80157ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80157ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157f2:	d00a      	beq.n	801580a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	681a      	ldr	r2, [r3, #0]
 80157f8:	4b13      	ldr	r3, [pc, #76]	; (8015848 <udp_input_local_match+0xc4>)
 80157fa:	695b      	ldr	r3, [r3, #20]
 80157fc:	405a      	eors	r2, r3
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	3308      	adds	r3, #8
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015806:	2b00      	cmp	r3, #0
 8015808:	d110      	bne.n	801582c <udp_input_local_match+0xa8>
          return 1;
 801580a:	2301      	movs	r3, #1
 801580c:	e00f      	b.n	801582e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d009      	beq.n	8015828 <udp_input_local_match+0xa4>
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d005      	beq.n	8015828 <udp_input_local_match+0xa4>
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	681a      	ldr	r2, [r3, #0]
 8015820:	4b09      	ldr	r3, [pc, #36]	; (8015848 <udp_input_local_match+0xc4>)
 8015822:	695b      	ldr	r3, [r3, #20]
 8015824:	429a      	cmp	r2, r3
 8015826:	d101      	bne.n	801582c <udp_input_local_match+0xa8>
        return 1;
 8015828:	2301      	movs	r3, #1
 801582a:	e000      	b.n	801582e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801582c:	2300      	movs	r3, #0
}
 801582e:	4618      	mov	r0, r3
 8015830:	3710      	adds	r7, #16
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}
 8015836:	bf00      	nop
 8015838:	0801e9b0 	.word	0x0801e9b0
 801583c:	0801e9e0 	.word	0x0801e9e0
 8015840:	0801ea04 	.word	0x0801ea04
 8015844:	0801ea2c 	.word	0x0801ea2c
 8015848:	2000982c 	.word	0x2000982c

0801584c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801584c:	b590      	push	{r4, r7, lr}
 801584e:	b08d      	sub	sp, #52	; 0x34
 8015850:	af02      	add	r7, sp, #8
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015856:	2300      	movs	r3, #0
 8015858:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d105      	bne.n	801586c <udp_input+0x20>
 8015860:	4b7c      	ldr	r3, [pc, #496]	; (8015a54 <udp_input+0x208>)
 8015862:	22cf      	movs	r2, #207	; 0xcf
 8015864:	497c      	ldr	r1, [pc, #496]	; (8015a58 <udp_input+0x20c>)
 8015866:	487d      	ldr	r0, [pc, #500]	; (8015a5c <udp_input+0x210>)
 8015868:	f005 fe88 	bl	801b57c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d105      	bne.n	801587e <udp_input+0x32>
 8015872:	4b78      	ldr	r3, [pc, #480]	; (8015a54 <udp_input+0x208>)
 8015874:	22d0      	movs	r2, #208	; 0xd0
 8015876:	497a      	ldr	r1, [pc, #488]	; (8015a60 <udp_input+0x214>)
 8015878:	4878      	ldr	r0, [pc, #480]	; (8015a5c <udp_input+0x210>)
 801587a:	f005 fe7f 	bl	801b57c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	895b      	ldrh	r3, [r3, #10]
 8015882:	2b07      	cmp	r3, #7
 8015884:	d803      	bhi.n	801588e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015886:	6878      	ldr	r0, [r7, #4]
 8015888:	f7f9 fa16 	bl	800ecb8 <pbuf_free>
    goto end;
 801588c:	e0de      	b.n	8015a4c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	685b      	ldr	r3, [r3, #4]
 8015892:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015894:	4b73      	ldr	r3, [pc, #460]	; (8015a64 <udp_input+0x218>)
 8015896:	695b      	ldr	r3, [r3, #20]
 8015898:	4a72      	ldr	r2, [pc, #456]	; (8015a64 <udp_input+0x218>)
 801589a:	6812      	ldr	r2, [r2, #0]
 801589c:	4611      	mov	r1, r2
 801589e:	4618      	mov	r0, r3
 80158a0:	f003 fdec 	bl	801947c <ip4_addr_isbroadcast_u32>
 80158a4:	4603      	mov	r3, r0
 80158a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	881b      	ldrh	r3, [r3, #0]
 80158ac:	b29b      	uxth	r3, r3
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7f7 fd9e 	bl	800d3f0 <lwip_htons>
 80158b4:	4603      	mov	r3, r0
 80158b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	885b      	ldrh	r3, [r3, #2]
 80158bc:	b29b      	uxth	r3, r3
 80158be:	4618      	mov	r0, r3
 80158c0:	f7f7 fd96 	bl	800d3f0 <lwip_htons>
 80158c4:	4603      	mov	r3, r0
 80158c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80158c8:	2300      	movs	r3, #0
 80158ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80158cc:	2300      	movs	r3, #0
 80158ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80158d0:	2300      	movs	r3, #0
 80158d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80158d4:	4b64      	ldr	r3, [pc, #400]	; (8015a68 <udp_input+0x21c>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	627b      	str	r3, [r7, #36]	; 0x24
 80158da:	e054      	b.n	8015986 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80158dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158de:	8a5b      	ldrh	r3, [r3, #18]
 80158e0:	89fa      	ldrh	r2, [r7, #14]
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d14a      	bne.n	801597c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80158e6:	7cfb      	ldrb	r3, [r7, #19]
 80158e8:	461a      	mov	r2, r3
 80158ea:	6839      	ldr	r1, [r7, #0]
 80158ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158ee:	f7ff ff49 	bl	8015784 <udp_input_local_match>
 80158f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d041      	beq.n	801597c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80158f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fa:	7c1b      	ldrb	r3, [r3, #16]
 80158fc:	f003 0304 	and.w	r3, r3, #4
 8015900:	2b00      	cmp	r3, #0
 8015902:	d11d      	bne.n	8015940 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d102      	bne.n	8015910 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801590c:	61fb      	str	r3, [r7, #28]
 801590e:	e017      	b.n	8015940 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015910:	7cfb      	ldrb	r3, [r7, #19]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d014      	beq.n	8015940 <udp_input+0xf4>
 8015916:	4b53      	ldr	r3, [pc, #332]	; (8015a64 <udp_input+0x218>)
 8015918:	695b      	ldr	r3, [r3, #20]
 801591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801591e:	d10f      	bne.n	8015940 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	681a      	ldr	r2, [r3, #0]
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	3304      	adds	r3, #4
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	429a      	cmp	r2, r3
 801592c:	d008      	beq.n	8015940 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015930:	681a      	ldr	r2, [r3, #0]
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	3304      	adds	r3, #4
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	429a      	cmp	r2, r3
 801593a:	d101      	bne.n	8015940 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015942:	8a9b      	ldrh	r3, [r3, #20]
 8015944:	8a3a      	ldrh	r2, [r7, #16]
 8015946:	429a      	cmp	r2, r3
 8015948:	d118      	bne.n	801597c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801594c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801594e:	2b00      	cmp	r3, #0
 8015950:	d005      	beq.n	801595e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015954:	685a      	ldr	r2, [r3, #4]
 8015956:	4b43      	ldr	r3, [pc, #268]	; (8015a64 <udp_input+0x218>)
 8015958:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801595a:	429a      	cmp	r2, r3
 801595c:	d10e      	bne.n	801597c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801595e:	6a3b      	ldr	r3, [r7, #32]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d014      	beq.n	801598e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015966:	68da      	ldr	r2, [r3, #12]
 8015968:	6a3b      	ldr	r3, [r7, #32]
 801596a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801596c:	4b3e      	ldr	r3, [pc, #248]	; (8015a68 <udp_input+0x21c>)
 801596e:	681a      	ldr	r2, [r3, #0]
 8015970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015972:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015974:	4a3c      	ldr	r2, [pc, #240]	; (8015a68 <udp_input+0x21c>)
 8015976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015978:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801597a:	e008      	b.n	801598e <udp_input+0x142>
      }
    }

    prev = pcb;
 801597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801597e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015982:	68db      	ldr	r3, [r3, #12]
 8015984:	627b      	str	r3, [r7, #36]	; 0x24
 8015986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015988:	2b00      	cmp	r3, #0
 801598a:	d1a7      	bne.n	80158dc <udp_input+0x90>
 801598c:	e000      	b.n	8015990 <udp_input+0x144>
        break;
 801598e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015992:	2b00      	cmp	r3, #0
 8015994:	d101      	bne.n	801599a <udp_input+0x14e>
    pcb = uncon_pcb;
 8015996:	69fb      	ldr	r3, [r7, #28]
 8015998:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801599c:	2b00      	cmp	r3, #0
 801599e:	d002      	beq.n	80159a6 <udp_input+0x15a>
    for_us = 1;
 80159a0:	2301      	movs	r3, #1
 80159a2:	76fb      	strb	r3, [r7, #27]
 80159a4:	e00a      	b.n	80159bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	3304      	adds	r3, #4
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	4b2d      	ldr	r3, [pc, #180]	; (8015a64 <udp_input+0x218>)
 80159ae:	695b      	ldr	r3, [r3, #20]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	bf0c      	ite	eq
 80159b4:	2301      	moveq	r3, #1
 80159b6:	2300      	movne	r3, #0
 80159b8:	b2db      	uxtb	r3, r3
 80159ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80159bc:	7efb      	ldrb	r3, [r7, #27]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d041      	beq.n	8015a46 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80159c2:	2108      	movs	r1, #8
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f7f9 f8f1 	bl	800ebac <pbuf_remove_header>
 80159ca:	4603      	mov	r3, r0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00a      	beq.n	80159e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80159d0:	4b20      	ldr	r3, [pc, #128]	; (8015a54 <udp_input+0x208>)
 80159d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80159d6:	4925      	ldr	r1, [pc, #148]	; (8015a6c <udp_input+0x220>)
 80159d8:	4820      	ldr	r0, [pc, #128]	; (8015a5c <udp_input+0x210>)
 80159da:	f005 fdcf 	bl	801b57c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f7f9 f96a 	bl	800ecb8 <pbuf_free>
      goto end;
 80159e4:	e032      	b.n	8015a4c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80159e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d012      	beq.n	8015a12 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80159ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ee:	699b      	ldr	r3, [r3, #24]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d00a      	beq.n	8015a0a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80159f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f6:	699c      	ldr	r4, [r3, #24]
 80159f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fa:	69d8      	ldr	r0, [r3, #28]
 80159fc:	8a3b      	ldrh	r3, [r7, #16]
 80159fe:	9300      	str	r3, [sp, #0]
 8015a00:	4b1b      	ldr	r3, [pc, #108]	; (8015a70 <udp_input+0x224>)
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a06:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015a08:	e021      	b.n	8015a4e <udp_input+0x202>
        pbuf_free(p);
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f7f9 f954 	bl	800ecb8 <pbuf_free>
        goto end;
 8015a10:	e01c      	b.n	8015a4c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015a12:	7cfb      	ldrb	r3, [r7, #19]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d112      	bne.n	8015a3e <udp_input+0x1f2>
 8015a18:	4b12      	ldr	r3, [pc, #72]	; (8015a64 <udp_input+0x218>)
 8015a1a:	695b      	ldr	r3, [r3, #20]
 8015a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a20:	2be0      	cmp	r3, #224	; 0xe0
 8015a22:	d00c      	beq.n	8015a3e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015a24:	4b0f      	ldr	r3, [pc, #60]	; (8015a64 <udp_input+0x218>)
 8015a26:	899b      	ldrh	r3, [r3, #12]
 8015a28:	3308      	adds	r3, #8
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	b21b      	sxth	r3, r3
 8015a2e:	4619      	mov	r1, r3
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f7f9 f92e 	bl	800ec92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015a36:	2103      	movs	r1, #3
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f003 f9d9 	bl	8018df0 <icmp_dest_unreach>
      pbuf_free(p);
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f7f9 f93a 	bl	800ecb8 <pbuf_free>
  return;
 8015a44:	e003      	b.n	8015a4e <udp_input+0x202>
    pbuf_free(p);
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f7f9 f936 	bl	800ecb8 <pbuf_free>
  return;
 8015a4c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015a4e:	372c      	adds	r7, #44	; 0x2c
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd90      	pop	{r4, r7, pc}
 8015a54:	0801e9b0 	.word	0x0801e9b0
 8015a58:	0801ea54 	.word	0x0801ea54
 8015a5c:	0801ea04 	.word	0x0801ea04
 8015a60:	0801ea6c 	.word	0x0801ea6c
 8015a64:	2000982c 	.word	0x2000982c
 8015a68:	2000c9a8 	.word	0x2000c9a8
 8015a6c:	0801ea88 	.word	0x0801ea88
 8015a70:	2000983c 	.word	0x2000983c

08015a74 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b088      	sub	sp, #32
 8015a78:	af02      	add	r7, sp, #8
 8015a7a:	60f8      	str	r0, [r7, #12]
 8015a7c:	60b9      	str	r1, [r7, #8]
 8015a7e:	607a      	str	r2, [r7, #4]
 8015a80:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d109      	bne.n	8015a9c <udp_sendto_if+0x28>
 8015a88:	4b2e      	ldr	r3, [pc, #184]	; (8015b44 <udp_sendto_if+0xd0>)
 8015a8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a8e:	492e      	ldr	r1, [pc, #184]	; (8015b48 <udp_sendto_if+0xd4>)
 8015a90:	482e      	ldr	r0, [pc, #184]	; (8015b4c <udp_sendto_if+0xd8>)
 8015a92:	f005 fd73 	bl	801b57c <iprintf>
 8015a96:	f06f 030f 	mvn.w	r3, #15
 8015a9a:	e04f      	b.n	8015b3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d109      	bne.n	8015ab6 <udp_sendto_if+0x42>
 8015aa2:	4b28      	ldr	r3, [pc, #160]	; (8015b44 <udp_sendto_if+0xd0>)
 8015aa4:	f240 2281 	movw	r2, #641	; 0x281
 8015aa8:	4929      	ldr	r1, [pc, #164]	; (8015b50 <udp_sendto_if+0xdc>)
 8015aaa:	4828      	ldr	r0, [pc, #160]	; (8015b4c <udp_sendto_if+0xd8>)
 8015aac:	f005 fd66 	bl	801b57c <iprintf>
 8015ab0:	f06f 030f 	mvn.w	r3, #15
 8015ab4:	e042      	b.n	8015b3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d109      	bne.n	8015ad0 <udp_sendto_if+0x5c>
 8015abc:	4b21      	ldr	r3, [pc, #132]	; (8015b44 <udp_sendto_if+0xd0>)
 8015abe:	f240 2282 	movw	r2, #642	; 0x282
 8015ac2:	4924      	ldr	r1, [pc, #144]	; (8015b54 <udp_sendto_if+0xe0>)
 8015ac4:	4821      	ldr	r0, [pc, #132]	; (8015b4c <udp_sendto_if+0xd8>)
 8015ac6:	f005 fd59 	bl	801b57c <iprintf>
 8015aca:	f06f 030f 	mvn.w	r3, #15
 8015ace:	e035      	b.n	8015b3c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015ad0:	6a3b      	ldr	r3, [r7, #32]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d109      	bne.n	8015aea <udp_sendto_if+0x76>
 8015ad6:	4b1b      	ldr	r3, [pc, #108]	; (8015b44 <udp_sendto_if+0xd0>)
 8015ad8:	f240 2283 	movw	r2, #643	; 0x283
 8015adc:	491e      	ldr	r1, [pc, #120]	; (8015b58 <udp_sendto_if+0xe4>)
 8015ade:	481b      	ldr	r0, [pc, #108]	; (8015b4c <udp_sendto_if+0xd8>)
 8015ae0:	f005 fd4c 	bl	801b57c <iprintf>
 8015ae4:	f06f 030f 	mvn.w	r3, #15
 8015ae8:	e028      	b.n	8015b3c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d009      	beq.n	8015b04 <udp_sendto_if+0x90>
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d005      	beq.n	8015b04 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b00:	2be0      	cmp	r3, #224	; 0xe0
 8015b02:	d103      	bne.n	8015b0c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015b04:	6a3b      	ldr	r3, [r7, #32]
 8015b06:	3304      	adds	r3, #4
 8015b08:	617b      	str	r3, [r7, #20]
 8015b0a:	e00b      	b.n	8015b24 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	6a3b      	ldr	r3, [r7, #32]
 8015b12:	3304      	adds	r3, #4
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d002      	beq.n	8015b20 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015b1a:	f06f 0303 	mvn.w	r3, #3
 8015b1e:	e00d      	b.n	8015b3c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015b24:	887a      	ldrh	r2, [r7, #2]
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	9301      	str	r3, [sp, #4]
 8015b2a:	6a3b      	ldr	r3, [r7, #32]
 8015b2c:	9300      	str	r3, [sp, #0]
 8015b2e:	4613      	mov	r3, r2
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	68b9      	ldr	r1, [r7, #8]
 8015b34:	68f8      	ldr	r0, [r7, #12]
 8015b36:	f000 f811 	bl	8015b5c <udp_sendto_if_src>
 8015b3a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3718      	adds	r7, #24
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	0801e9b0 	.word	0x0801e9b0
 8015b48:	0801eb24 	.word	0x0801eb24
 8015b4c:	0801ea04 	.word	0x0801ea04
 8015b50:	0801eb40 	.word	0x0801eb40
 8015b54:	0801eb5c 	.word	0x0801eb5c
 8015b58:	0801eb7c 	.word	0x0801eb7c

08015b5c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b08c      	sub	sp, #48	; 0x30
 8015b60:	af04      	add	r7, sp, #16
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
 8015b68:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d109      	bne.n	8015b84 <udp_sendto_if_src+0x28>
 8015b70:	4b65      	ldr	r3, [pc, #404]	; (8015d08 <udp_sendto_if_src+0x1ac>)
 8015b72:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015b76:	4965      	ldr	r1, [pc, #404]	; (8015d0c <udp_sendto_if_src+0x1b0>)
 8015b78:	4865      	ldr	r0, [pc, #404]	; (8015d10 <udp_sendto_if_src+0x1b4>)
 8015b7a:	f005 fcff 	bl	801b57c <iprintf>
 8015b7e:	f06f 030f 	mvn.w	r3, #15
 8015b82:	e0bc      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d109      	bne.n	8015b9e <udp_sendto_if_src+0x42>
 8015b8a:	4b5f      	ldr	r3, [pc, #380]	; (8015d08 <udp_sendto_if_src+0x1ac>)
 8015b8c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015b90:	4960      	ldr	r1, [pc, #384]	; (8015d14 <udp_sendto_if_src+0x1b8>)
 8015b92:	485f      	ldr	r0, [pc, #380]	; (8015d10 <udp_sendto_if_src+0x1b4>)
 8015b94:	f005 fcf2 	bl	801b57c <iprintf>
 8015b98:	f06f 030f 	mvn.w	r3, #15
 8015b9c:	e0af      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d109      	bne.n	8015bb8 <udp_sendto_if_src+0x5c>
 8015ba4:	4b58      	ldr	r3, [pc, #352]	; (8015d08 <udp_sendto_if_src+0x1ac>)
 8015ba6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015baa:	495b      	ldr	r1, [pc, #364]	; (8015d18 <udp_sendto_if_src+0x1bc>)
 8015bac:	4858      	ldr	r0, [pc, #352]	; (8015d10 <udp_sendto_if_src+0x1b4>)
 8015bae:	f005 fce5 	bl	801b57c <iprintf>
 8015bb2:	f06f 030f 	mvn.w	r3, #15
 8015bb6:	e0a2      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d109      	bne.n	8015bd2 <udp_sendto_if_src+0x76>
 8015bbe:	4b52      	ldr	r3, [pc, #328]	; (8015d08 <udp_sendto_if_src+0x1ac>)
 8015bc0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015bc4:	4955      	ldr	r1, [pc, #340]	; (8015d1c <udp_sendto_if_src+0x1c0>)
 8015bc6:	4852      	ldr	r0, [pc, #328]	; (8015d10 <udp_sendto_if_src+0x1b4>)
 8015bc8:	f005 fcd8 	bl	801b57c <iprintf>
 8015bcc:	f06f 030f 	mvn.w	r3, #15
 8015bd0:	e095      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d109      	bne.n	8015bec <udp_sendto_if_src+0x90>
 8015bd8:	4b4b      	ldr	r3, [pc, #300]	; (8015d08 <udp_sendto_if_src+0x1ac>)
 8015bda:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015bde:	4950      	ldr	r1, [pc, #320]	; (8015d20 <udp_sendto_if_src+0x1c4>)
 8015be0:	484b      	ldr	r0, [pc, #300]	; (8015d10 <udp_sendto_if_src+0x1b4>)
 8015be2:	f005 fccb 	bl	801b57c <iprintf>
 8015be6:	f06f 030f 	mvn.w	r3, #15
 8015bea:	e088      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	8a5b      	ldrh	r3, [r3, #18]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d10f      	bne.n	8015c14 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015bf4:	68f9      	ldr	r1, [r7, #12]
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	8a5b      	ldrh	r3, [r3, #18]
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	68f8      	ldr	r0, [r7, #12]
 8015bfe:	f000 f893 	bl	8015d28 <udp_bind>
 8015c02:	4603      	mov	r3, r0
 8015c04:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015c06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d002      	beq.n	8015c14 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015c0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c12:	e074      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	891b      	ldrh	r3, [r3, #8]
 8015c18:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015c1c:	4293      	cmp	r3, r2
 8015c1e:	d902      	bls.n	8015c26 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015c20:	f04f 33ff 	mov.w	r3, #4294967295
 8015c24:	e06b      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015c26:	2108      	movs	r1, #8
 8015c28:	68b8      	ldr	r0, [r7, #8]
 8015c2a:	f7f8 ffaf 	bl	800eb8c <pbuf_add_header>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d015      	beq.n	8015c60 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015c34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c38:	2108      	movs	r1, #8
 8015c3a:	2022      	movs	r0, #34	; 0x22
 8015c3c:	f7f8 fd58 	bl	800e6f0 <pbuf_alloc>
 8015c40:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015c42:	69fb      	ldr	r3, [r7, #28]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d102      	bne.n	8015c4e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015c48:	f04f 33ff 	mov.w	r3, #4294967295
 8015c4c:	e057      	b.n	8015cfe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	891b      	ldrh	r3, [r3, #8]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d006      	beq.n	8015c64 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015c56:	68b9      	ldr	r1, [r7, #8]
 8015c58:	69f8      	ldr	r0, [r7, #28]
 8015c5a:	f7f9 f94f 	bl	800eefc <pbuf_chain>
 8015c5e:	e001      	b.n	8015c64 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015c64:	69fb      	ldr	r3, [r7, #28]
 8015c66:	895b      	ldrh	r3, [r3, #10]
 8015c68:	2b07      	cmp	r3, #7
 8015c6a:	d806      	bhi.n	8015c7a <udp_sendto_if_src+0x11e>
 8015c6c:	4b26      	ldr	r3, [pc, #152]	; (8015d08 <udp_sendto_if_src+0x1ac>)
 8015c6e:	f240 320d 	movw	r2, #781	; 0x30d
 8015c72:	492c      	ldr	r1, [pc, #176]	; (8015d24 <udp_sendto_if_src+0x1c8>)
 8015c74:	4826      	ldr	r0, [pc, #152]	; (8015d10 <udp_sendto_if_src+0x1b4>)
 8015c76:	f005 fc81 	bl	801b57c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	685b      	ldr	r3, [r3, #4]
 8015c7e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	8a5b      	ldrh	r3, [r3, #18]
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7f7 fbb3 	bl	800d3f0 <lwip_htons>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	461a      	mov	r2, r3
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015c92:	887b      	ldrh	r3, [r7, #2]
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7f7 fbab 	bl	800d3f0 <lwip_htons>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	719a      	strb	r2, [r3, #6]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	891b      	ldrh	r3, [r3, #8]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7f7 fb9d 	bl	800d3f0 <lwip_htons>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	461a      	mov	r2, r3
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015cbe:	2311      	movs	r3, #17
 8015cc0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	7adb      	ldrb	r3, [r3, #11]
 8015cc6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	7a9b      	ldrb	r3, [r3, #10]
 8015ccc:	7cb9      	ldrb	r1, [r7, #18]
 8015cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cd0:	9202      	str	r2, [sp, #8]
 8015cd2:	7cfa      	ldrb	r2, [r7, #19]
 8015cd4:	9201      	str	r2, [sp, #4]
 8015cd6:	9300      	str	r3, [sp, #0]
 8015cd8:	460b      	mov	r3, r1
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cde:	69f8      	ldr	r0, [r7, #28]
 8015ce0:	f003 fb1e 	bl	8019320 <ip4_output_if_src>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015ce8:	69fa      	ldr	r2, [r7, #28]
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d004      	beq.n	8015cfa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015cf0:	69f8      	ldr	r0, [r7, #28]
 8015cf2:	f7f8 ffe1 	bl	800ecb8 <pbuf_free>
    q = NULL;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015cfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3720      	adds	r7, #32
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	bf00      	nop
 8015d08:	0801e9b0 	.word	0x0801e9b0
 8015d0c:	0801eb9c 	.word	0x0801eb9c
 8015d10:	0801ea04 	.word	0x0801ea04
 8015d14:	0801ebbc 	.word	0x0801ebbc
 8015d18:	0801ebdc 	.word	0x0801ebdc
 8015d1c:	0801ec00 	.word	0x0801ec00
 8015d20:	0801ec24 	.word	0x0801ec24
 8015d24:	0801ec48 	.word	0x0801ec48

08015d28 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b086      	sub	sp, #24
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	4613      	mov	r3, r2
 8015d34:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d101      	bne.n	8015d40 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015d3c:	4b39      	ldr	r3, [pc, #228]	; (8015e24 <udp_bind+0xfc>)
 8015d3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d109      	bne.n	8015d5a <udp_bind+0x32>
 8015d46:	4b38      	ldr	r3, [pc, #224]	; (8015e28 <udp_bind+0x100>)
 8015d48:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015d4c:	4937      	ldr	r1, [pc, #220]	; (8015e2c <udp_bind+0x104>)
 8015d4e:	4838      	ldr	r0, [pc, #224]	; (8015e30 <udp_bind+0x108>)
 8015d50:	f005 fc14 	bl	801b57c <iprintf>
 8015d54:	f06f 030f 	mvn.w	r3, #15
 8015d58:	e060      	b.n	8015e1c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015d5e:	4b35      	ldr	r3, [pc, #212]	; (8015e34 <udp_bind+0x10c>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	617b      	str	r3, [r7, #20]
 8015d64:	e009      	b.n	8015d7a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015d66:	68fa      	ldr	r2, [r7, #12]
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d102      	bne.n	8015d74 <udp_bind+0x4c>
      rebind = 1;
 8015d6e:	2301      	movs	r3, #1
 8015d70:	74fb      	strb	r3, [r7, #19]
      break;
 8015d72:	e005      	b.n	8015d80 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	68db      	ldr	r3, [r3, #12]
 8015d78:	617b      	str	r3, [r7, #20]
 8015d7a:	697b      	ldr	r3, [r7, #20]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d1f2      	bne.n	8015d66 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015d80:	88fb      	ldrh	r3, [r7, #6]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d109      	bne.n	8015d9a <udp_bind+0x72>
    port = udp_new_port();
 8015d86:	f7ff fcc5 	bl	8015714 <udp_new_port>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015d8e:	88fb      	ldrh	r3, [r7, #6]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d12c      	bne.n	8015dee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015d94:	f06f 0307 	mvn.w	r3, #7
 8015d98:	e040      	b.n	8015e1c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015d9a:	4b26      	ldr	r3, [pc, #152]	; (8015e34 <udp_bind+0x10c>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	617b      	str	r3, [r7, #20]
 8015da0:	e022      	b.n	8015de8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015da2:	68fa      	ldr	r2, [r7, #12]
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d01b      	beq.n	8015de2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	8a5b      	ldrh	r3, [r3, #18]
 8015dae:	88fa      	ldrh	r2, [r7, #6]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d116      	bne.n	8015de2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	681a      	ldr	r2, [r3, #0]
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d00d      	beq.n	8015ddc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00a      	beq.n	8015ddc <udp_bind+0xb4>
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d006      	beq.n	8015ddc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015dce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d003      	beq.n	8015ddc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d102      	bne.n	8015de2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015ddc:	f06f 0307 	mvn.w	r3, #7
 8015de0:	e01c      	b.n	8015e1c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	617b      	str	r3, [r7, #20]
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d1d9      	bne.n	8015da2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d002      	beq.n	8015dfa <udp_bind+0xd2>
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	e000      	b.n	8015dfc <udp_bind+0xd4>
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	68fa      	ldr	r2, [r7, #12]
 8015dfe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	88fa      	ldrh	r2, [r7, #6]
 8015e04:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015e06:	7cfb      	ldrb	r3, [r7, #19]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d106      	bne.n	8015e1a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015e0c:	4b09      	ldr	r3, [pc, #36]	; (8015e34 <udp_bind+0x10c>)
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015e14:	4a07      	ldr	r2, [pc, #28]	; (8015e34 <udp_bind+0x10c>)
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015e1a:	2300      	movs	r3, #0
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3718      	adds	r7, #24
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	0801f934 	.word	0x0801f934
 8015e28:	0801e9b0 	.word	0x0801e9b0
 8015e2c:	0801ec78 	.word	0x0801ec78
 8015e30:	0801ea04 	.word	0x0801ea04
 8015e34:	2000c9a8 	.word	0x2000c9a8

08015e38 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b086      	sub	sp, #24
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	60f8      	str	r0, [r7, #12]
 8015e40:	60b9      	str	r1, [r7, #8]
 8015e42:	4613      	mov	r3, r2
 8015e44:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d109      	bne.n	8015e60 <udp_connect+0x28>
 8015e4c:	4b2c      	ldr	r3, [pc, #176]	; (8015f00 <udp_connect+0xc8>)
 8015e4e:	f240 4235 	movw	r2, #1077	; 0x435
 8015e52:	492c      	ldr	r1, [pc, #176]	; (8015f04 <udp_connect+0xcc>)
 8015e54:	482c      	ldr	r0, [pc, #176]	; (8015f08 <udp_connect+0xd0>)
 8015e56:	f005 fb91 	bl	801b57c <iprintf>
 8015e5a:	f06f 030f 	mvn.w	r3, #15
 8015e5e:	e04b      	b.n	8015ef8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d109      	bne.n	8015e7a <udp_connect+0x42>
 8015e66:	4b26      	ldr	r3, [pc, #152]	; (8015f00 <udp_connect+0xc8>)
 8015e68:	f240 4236 	movw	r2, #1078	; 0x436
 8015e6c:	4927      	ldr	r1, [pc, #156]	; (8015f0c <udp_connect+0xd4>)
 8015e6e:	4826      	ldr	r0, [pc, #152]	; (8015f08 <udp_connect+0xd0>)
 8015e70:	f005 fb84 	bl	801b57c <iprintf>
 8015e74:	f06f 030f 	mvn.w	r3, #15
 8015e78:	e03e      	b.n	8015ef8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	8a5b      	ldrh	r3, [r3, #18]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d10f      	bne.n	8015ea2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015e82:	68f9      	ldr	r1, [r7, #12]
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	8a5b      	ldrh	r3, [r3, #18]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	68f8      	ldr	r0, [r7, #12]
 8015e8c:	f7ff ff4c 	bl	8015d28 <udp_bind>
 8015e90:	4603      	mov	r3, r0
 8015e92:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015e94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d002      	beq.n	8015ea2 <udp_connect+0x6a>
      return err;
 8015e9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ea0:	e02a      	b.n	8015ef8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015ea2:	68bb      	ldr	r3, [r7, #8]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d002      	beq.n	8015eae <udp_connect+0x76>
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	e000      	b.n	8015eb0 <udp_connect+0x78>
 8015eae:	2300      	movs	r3, #0
 8015eb0:	68fa      	ldr	r2, [r7, #12]
 8015eb2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	88fa      	ldrh	r2, [r7, #6]
 8015eb8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	7c1b      	ldrb	r3, [r3, #16]
 8015ebe:	f043 0304 	orr.w	r3, r3, #4
 8015ec2:	b2da      	uxtb	r2, r3
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015ec8:	4b11      	ldr	r3, [pc, #68]	; (8015f10 <udp_connect+0xd8>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	617b      	str	r3, [r7, #20]
 8015ece:	e008      	b.n	8015ee2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015ed0:	68fa      	ldr	r2, [r7, #12]
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d101      	bne.n	8015edc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	e00d      	b.n	8015ef8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	68db      	ldr	r3, [r3, #12]
 8015ee0:	617b      	str	r3, [r7, #20]
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1f3      	bne.n	8015ed0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015ee8:	4b09      	ldr	r3, [pc, #36]	; (8015f10 <udp_connect+0xd8>)
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015ef0:	4a07      	ldr	r2, [pc, #28]	; (8015f10 <udp_connect+0xd8>)
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8015ef6:	2300      	movs	r3, #0
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3718      	adds	r7, #24
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	0801e9b0 	.word	0x0801e9b0
 8015f04:	0801ec90 	.word	0x0801ec90
 8015f08:	0801ea04 	.word	0x0801ea04
 8015f0c:	0801ecac 	.word	0x0801ecac
 8015f10:	2000c9a8 	.word	0x2000c9a8

08015f14 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d107      	bne.n	8015f36 <udp_recv+0x22>
 8015f26:	4b08      	ldr	r3, [pc, #32]	; (8015f48 <udp_recv+0x34>)
 8015f28:	f240 428a 	movw	r2, #1162	; 0x48a
 8015f2c:	4907      	ldr	r1, [pc, #28]	; (8015f4c <udp_recv+0x38>)
 8015f2e:	4808      	ldr	r0, [pc, #32]	; (8015f50 <udp_recv+0x3c>)
 8015f30:	f005 fb24 	bl	801b57c <iprintf>
 8015f34:	e005      	b.n	8015f42 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	68ba      	ldr	r2, [r7, #8]
 8015f3a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	687a      	ldr	r2, [r7, #4]
 8015f40:	61da      	str	r2, [r3, #28]
}
 8015f42:	3710      	adds	r7, #16
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}
 8015f48:	0801e9b0 	.word	0x0801e9b0
 8015f4c:	0801ece4 	.word	0x0801ece4
 8015f50:	0801ea04 	.word	0x0801ea04

08015f54 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d107      	bne.n	8015f72 <udp_remove+0x1e>
 8015f62:	4b19      	ldr	r3, [pc, #100]	; (8015fc8 <udp_remove+0x74>)
 8015f64:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015f68:	4918      	ldr	r1, [pc, #96]	; (8015fcc <udp_remove+0x78>)
 8015f6a:	4819      	ldr	r0, [pc, #100]	; (8015fd0 <udp_remove+0x7c>)
 8015f6c:	f005 fb06 	bl	801b57c <iprintf>
 8015f70:	e026      	b.n	8015fc0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015f72:	4b18      	ldr	r3, [pc, #96]	; (8015fd4 <udp_remove+0x80>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d105      	bne.n	8015f88 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015f7c:	4b15      	ldr	r3, [pc, #84]	; (8015fd4 <udp_remove+0x80>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	4a14      	ldr	r2, [pc, #80]	; (8015fd4 <udp_remove+0x80>)
 8015f84:	6013      	str	r3, [r2, #0]
 8015f86:	e017      	b.n	8015fb8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015f88:	4b12      	ldr	r3, [pc, #72]	; (8015fd4 <udp_remove+0x80>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	60fb      	str	r3, [r7, #12]
 8015f8e:	e010      	b.n	8015fb2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	68db      	ldr	r3, [r3, #12]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d009      	beq.n	8015fac <udp_remove+0x58>
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	68db      	ldr	r3, [r3, #12]
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d104      	bne.n	8015fac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	68da      	ldr	r2, [r3, #12]
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	60da      	str	r2, [r3, #12]
        break;
 8015faa:	e005      	b.n	8015fb8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	68db      	ldr	r3, [r3, #12]
 8015fb0:	60fb      	str	r3, [r7, #12]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d1eb      	bne.n	8015f90 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015fb8:	6879      	ldr	r1, [r7, #4]
 8015fba:	2000      	movs	r0, #0
 8015fbc:	f7f8 f83e 	bl	800e03c <memp_free>
}
 8015fc0:	3710      	adds	r7, #16
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}
 8015fc6:	bf00      	nop
 8015fc8:	0801e9b0 	.word	0x0801e9b0
 8015fcc:	0801ecfc 	.word	0x0801ecfc
 8015fd0:	0801ea04 	.word	0x0801ea04
 8015fd4:	2000c9a8 	.word	0x2000c9a8

08015fd8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015fde:	2000      	movs	r0, #0
 8015fe0:	f7f7 ffb6 	bl	800df50 <memp_malloc>
 8015fe4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d007      	beq.n	8015ffc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015fec:	2220      	movs	r2, #32
 8015fee:	2100      	movs	r1, #0
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f005 f9dd 	bl	801b3b0 <memset>
    pcb->ttl = UDP_TTL;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	22ff      	movs	r2, #255	; 0xff
 8015ffa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015ffc:	687b      	ldr	r3, [r7, #4]
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3708      	adds	r7, #8
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}
	...

08016008 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016008:	b480      	push	{r7}
 801600a:	b085      	sub	sp, #20
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d01e      	beq.n	8016056 <udp_netif_ip_addr_changed+0x4e>
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d01a      	beq.n	8016056 <udp_netif_ip_addr_changed+0x4e>
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d017      	beq.n	8016056 <udp_netif_ip_addr_changed+0x4e>
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d013      	beq.n	8016056 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801602e:	4b0c      	ldr	r3, [pc, #48]	; (8016060 <udp_netif_ip_addr_changed+0x58>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	60fb      	str	r3, [r7, #12]
 8016034:	e00c      	b.n	8016050 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	681a      	ldr	r2, [r3, #0]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	429a      	cmp	r2, r3
 8016040:	d103      	bne.n	801604a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016042:	683b      	ldr	r3, [r7, #0]
 8016044:	681a      	ldr	r2, [r3, #0]
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	68db      	ldr	r3, [r3, #12]
 801604e:	60fb      	str	r3, [r7, #12]
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d1ef      	bne.n	8016036 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016056:	bf00      	nop
 8016058:	3714      	adds	r7, #20
 801605a:	46bd      	mov	sp, r7
 801605c:	bc80      	pop	{r7}
 801605e:	4770      	bx	lr
 8016060:	2000c9a8 	.word	0x2000c9a8

08016064 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8016068:	4b20      	ldr	r3, [pc, #128]	; (80160ec <dhcp_inc_pcb_refcount+0x88>)
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d133      	bne.n	80160d8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8016070:	4b1f      	ldr	r3, [pc, #124]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d005      	beq.n	8016084 <dhcp_inc_pcb_refcount+0x20>
 8016078:	4b1e      	ldr	r3, [pc, #120]	; (80160f4 <dhcp_inc_pcb_refcount+0x90>)
 801607a:	22e5      	movs	r2, #229	; 0xe5
 801607c:	491e      	ldr	r1, [pc, #120]	; (80160f8 <dhcp_inc_pcb_refcount+0x94>)
 801607e:	481f      	ldr	r0, [pc, #124]	; (80160fc <dhcp_inc_pcb_refcount+0x98>)
 8016080:	f005 fa7c 	bl	801b57c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8016084:	f7ff ffa8 	bl	8015fd8 <udp_new>
 8016088:	4603      	mov	r3, r0
 801608a:	4a19      	ldr	r2, [pc, #100]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 801608c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801608e:	4b18      	ldr	r3, [pc, #96]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d102      	bne.n	801609c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8016096:	f04f 33ff 	mov.w	r3, #4294967295
 801609a:	e024      	b.n	80160e6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801609c:	4b14      	ldr	r3, [pc, #80]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	7a5a      	ldrb	r2, [r3, #9]
 80160a2:	4b13      	ldr	r3, [pc, #76]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f042 0220 	orr.w	r2, r2, #32
 80160aa:	b2d2      	uxtb	r2, r2
 80160ac:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80160ae:	4b10      	ldr	r3, [pc, #64]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	2244      	movs	r2, #68	; 0x44
 80160b4:	4912      	ldr	r1, [pc, #72]	; (8016100 <dhcp_inc_pcb_refcount+0x9c>)
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7ff fe36 	bl	8015d28 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80160bc:	4b0c      	ldr	r3, [pc, #48]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	2243      	movs	r2, #67	; 0x43
 80160c2:	490f      	ldr	r1, [pc, #60]	; (8016100 <dhcp_inc_pcb_refcount+0x9c>)
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7ff feb7 	bl	8015e38 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80160ca:	4b09      	ldr	r3, [pc, #36]	; (80160f0 <dhcp_inc_pcb_refcount+0x8c>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	2200      	movs	r2, #0
 80160d0:	490c      	ldr	r1, [pc, #48]	; (8016104 <dhcp_inc_pcb_refcount+0xa0>)
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7ff ff1e 	bl	8015f14 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80160d8:	4b04      	ldr	r3, [pc, #16]	; (80160ec <dhcp_inc_pcb_refcount+0x88>)
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	3301      	adds	r3, #1
 80160de:	b2da      	uxtb	r2, r3
 80160e0:	4b02      	ldr	r3, [pc, #8]	; (80160ec <dhcp_inc_pcb_refcount+0x88>)
 80160e2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80160e4:	2300      	movs	r3, #0
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	bd80      	pop	{r7, pc}
 80160ea:	bf00      	nop
 80160ec:	2000c9d8 	.word	0x2000c9d8
 80160f0:	2000c9d4 	.word	0x2000c9d4
 80160f4:	0801ed14 	.word	0x0801ed14
 80160f8:	0801ed4c 	.word	0x0801ed4c
 80160fc:	0801ed74 	.word	0x0801ed74
 8016100:	0801f934 	.word	0x0801f934
 8016104:	08017921 	.word	0x08017921

08016108 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801610c:	4b0e      	ldr	r3, [pc, #56]	; (8016148 <dhcp_dec_pcb_refcount+0x40>)
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d105      	bne.n	8016120 <dhcp_dec_pcb_refcount+0x18>
 8016114:	4b0d      	ldr	r3, [pc, #52]	; (801614c <dhcp_dec_pcb_refcount+0x44>)
 8016116:	22ff      	movs	r2, #255	; 0xff
 8016118:	490d      	ldr	r1, [pc, #52]	; (8016150 <dhcp_dec_pcb_refcount+0x48>)
 801611a:	480e      	ldr	r0, [pc, #56]	; (8016154 <dhcp_dec_pcb_refcount+0x4c>)
 801611c:	f005 fa2e 	bl	801b57c <iprintf>
  dhcp_pcb_refcount--;
 8016120:	4b09      	ldr	r3, [pc, #36]	; (8016148 <dhcp_dec_pcb_refcount+0x40>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	3b01      	subs	r3, #1
 8016126:	b2da      	uxtb	r2, r3
 8016128:	4b07      	ldr	r3, [pc, #28]	; (8016148 <dhcp_dec_pcb_refcount+0x40>)
 801612a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801612c:	4b06      	ldr	r3, [pc, #24]	; (8016148 <dhcp_dec_pcb_refcount+0x40>)
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d107      	bne.n	8016144 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8016134:	4b08      	ldr	r3, [pc, #32]	; (8016158 <dhcp_dec_pcb_refcount+0x50>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	4618      	mov	r0, r3
 801613a:	f7ff ff0b 	bl	8015f54 <udp_remove>
    dhcp_pcb = NULL;
 801613e:	4b06      	ldr	r3, [pc, #24]	; (8016158 <dhcp_dec_pcb_refcount+0x50>)
 8016140:	2200      	movs	r2, #0
 8016142:	601a      	str	r2, [r3, #0]
  }
}
 8016144:	bf00      	nop
 8016146:	bd80      	pop	{r7, pc}
 8016148:	2000c9d8 	.word	0x2000c9d8
 801614c:	0801ed14 	.word	0x0801ed14
 8016150:	0801ed9c 	.word	0x0801ed9c
 8016154:	0801ed74 	.word	0x0801ed74
 8016158:	2000c9d4 	.word	0x2000c9d4

0801615c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b084      	sub	sp, #16
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016168:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801616a:	210c      	movs	r1, #12
 801616c:	68f8      	ldr	r0, [r7, #12]
 801616e:	f001 f819 	bl	80171a4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016172:	4b06      	ldr	r3, [pc, #24]	; (801618c <dhcp_handle_nak+0x30>)
 8016174:	4a05      	ldr	r2, [pc, #20]	; (801618c <dhcp_handle_nak+0x30>)
 8016176:	4905      	ldr	r1, [pc, #20]	; (801618c <dhcp_handle_nak+0x30>)
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f7f8 f8fd 	bl	800e378 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 fc0c 	bl	801699c <dhcp_discover>
}
 8016184:	bf00      	nop
 8016186:	3710      	adds	r7, #16
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}
 801618c:	0801f934 	.word	0x0801f934

08016190 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b084      	sub	sp, #16
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801619c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801619e:	2108      	movs	r1, #8
 80161a0:	68f8      	ldr	r0, [r7, #12]
 80161a2:	f000 ffff 	bl	80171a4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	331c      	adds	r3, #28
 80161aa:	2200      	movs	r2, #0
 80161ac:	4619      	mov	r1, r3
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f002 fb00 	bl	80187b4 <etharp_query>
 80161b4:	4603      	mov	r3, r0
 80161b6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	799b      	ldrb	r3, [r3, #6]
 80161bc:	2bff      	cmp	r3, #255	; 0xff
 80161be:	d005      	beq.n	80161cc <dhcp_check+0x3c>
    dhcp->tries++;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	799b      	ldrb	r3, [r3, #6]
 80161c4:	3301      	adds	r3, #1
 80161c6:	b2da      	uxtb	r2, r3
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80161cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80161d0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80161d2:	893b      	ldrh	r3, [r7, #8]
 80161d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80161d8:	4a06      	ldr	r2, [pc, #24]	; (80161f4 <dhcp_check+0x64>)
 80161da:	fb82 1203 	smull	r1, r2, r2, r3
 80161de:	1152      	asrs	r2, r2, #5
 80161e0:	17db      	asrs	r3, r3, #31
 80161e2:	1ad3      	subs	r3, r2, r3
 80161e4:	b29a      	uxth	r2, r3
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80161ea:	bf00      	nop
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	10624dd3 	.word	0x10624dd3

080161f8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b084      	sub	sp, #16
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016206:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016208:	4b0c      	ldr	r3, [pc, #48]	; (801623c <dhcp_handle_offer+0x44>)
 801620a:	789b      	ldrb	r3, [r3, #2]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d011      	beq.n	8016234 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2200      	movs	r2, #0
 8016214:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016216:	4b0a      	ldr	r3, [pc, #40]	; (8016240 <dhcp_handle_offer+0x48>)
 8016218:	689b      	ldr	r3, [r3, #8]
 801621a:	4618      	mov	r0, r3
 801621c:	f7f7 f8fc 	bl	800d418 <lwip_htonl>
 8016220:	4602      	mov	r2, r0
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	691a      	ldr	r2, [r3, #16]
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f000 f808 	bl	8016244 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8016234:	bf00      	nop
 8016236:	3710      	adds	r7, #16
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	2000c9cc 	.word	0x2000c9cc
 8016240:	2000c9ac 	.word	0x2000c9ac

08016244 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8016244:	b5b0      	push	{r4, r5, r7, lr}
 8016246:	b08a      	sub	sp, #40	; 0x28
 8016248:	af02      	add	r7, sp, #8
 801624a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d109      	bne.n	8016266 <dhcp_select+0x22>
 8016252:	4b71      	ldr	r3, [pc, #452]	; (8016418 <dhcp_select+0x1d4>)
 8016254:	f240 1277 	movw	r2, #375	; 0x177
 8016258:	4970      	ldr	r1, [pc, #448]	; (801641c <dhcp_select+0x1d8>)
 801625a:	4871      	ldr	r0, [pc, #452]	; (8016420 <dhcp_select+0x1dc>)
 801625c:	f005 f98e 	bl	801b57c <iprintf>
 8016260:	f06f 030f 	mvn.w	r3, #15
 8016264:	e0d3      	b.n	801640e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801626a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d109      	bne.n	8016286 <dhcp_select+0x42>
 8016272:	4b69      	ldr	r3, [pc, #420]	; (8016418 <dhcp_select+0x1d4>)
 8016274:	f240 1279 	movw	r2, #377	; 0x179
 8016278:	496a      	ldr	r1, [pc, #424]	; (8016424 <dhcp_select+0x1e0>)
 801627a:	4869      	ldr	r0, [pc, #420]	; (8016420 <dhcp_select+0x1dc>)
 801627c:	f005 f97e 	bl	801b57c <iprintf>
 8016280:	f06f 0305 	mvn.w	r3, #5
 8016284:	e0c3      	b.n	801640e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8016286:	2101      	movs	r1, #1
 8016288:	69b8      	ldr	r0, [r7, #24]
 801628a:	f000 ff8b 	bl	80171a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801628e:	f107 030c 	add.w	r3, r7, #12
 8016292:	2203      	movs	r2, #3
 8016294:	69b9      	ldr	r1, [r7, #24]
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f001 fc10 	bl	8017abc <dhcp_create_msg>
 801629c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f000 8085 	beq.w	80163b0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	685b      	ldr	r3, [r3, #4]
 80162aa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80162ac:	89b8      	ldrh	r0, [r7, #12]
 80162ae:	693b      	ldr	r3, [r7, #16]
 80162b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80162b4:	2302      	movs	r3, #2
 80162b6:	2239      	movs	r2, #57	; 0x39
 80162b8:	f000 ff8e 	bl	80171d8 <dhcp_option>
 80162bc:	4603      	mov	r3, r0
 80162be:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80162c0:	89b8      	ldrh	r0, [r7, #12]
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162cc:	461a      	mov	r2, r3
 80162ce:	f000 ffdd 	bl	801728c <dhcp_option_short>
 80162d2:	4603      	mov	r3, r0
 80162d4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80162d6:	89b8      	ldrh	r0, [r7, #12]
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80162de:	2304      	movs	r3, #4
 80162e0:	2232      	movs	r2, #50	; 0x32
 80162e2:	f000 ff79 	bl	80171d8 <dhcp_option>
 80162e6:	4603      	mov	r3, r0
 80162e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80162ea:	89bc      	ldrh	r4, [r7, #12]
 80162ec:	693b      	ldr	r3, [r7, #16]
 80162ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80162f2:	69bb      	ldr	r3, [r7, #24]
 80162f4:	69db      	ldr	r3, [r3, #28]
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7f7 f88e 	bl	800d418 <lwip_htonl>
 80162fc:	4603      	mov	r3, r0
 80162fe:	461a      	mov	r2, r3
 8016300:	4629      	mov	r1, r5
 8016302:	4620      	mov	r0, r4
 8016304:	f000 fff4 	bl	80172f0 <dhcp_option_long>
 8016308:	4603      	mov	r3, r0
 801630a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801630c:	89b8      	ldrh	r0, [r7, #12]
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016314:	2304      	movs	r3, #4
 8016316:	2236      	movs	r2, #54	; 0x36
 8016318:	f000 ff5e 	bl	80171d8 <dhcp_option>
 801631c:	4603      	mov	r3, r0
 801631e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016320:	89bc      	ldrh	r4, [r7, #12]
 8016322:	693b      	ldr	r3, [r7, #16]
 8016324:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	699b      	ldr	r3, [r3, #24]
 801632c:	4618      	mov	r0, r3
 801632e:	f7f7 f873 	bl	800d418 <lwip_htonl>
 8016332:	4603      	mov	r3, r0
 8016334:	461a      	mov	r2, r3
 8016336:	4629      	mov	r1, r5
 8016338:	4620      	mov	r0, r4
 801633a:	f000 ffd9 	bl	80172f0 <dhcp_option_long>
 801633e:	4603      	mov	r3, r0
 8016340:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016342:	89b8      	ldrh	r0, [r7, #12]
 8016344:	693b      	ldr	r3, [r7, #16]
 8016346:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801634a:	2303      	movs	r3, #3
 801634c:	2237      	movs	r2, #55	; 0x37
 801634e:	f000 ff43 	bl	80171d8 <dhcp_option>
 8016352:	4603      	mov	r3, r0
 8016354:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016356:	2300      	movs	r3, #0
 8016358:	77bb      	strb	r3, [r7, #30]
 801635a:	e00e      	b.n	801637a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801635c:	89b8      	ldrh	r0, [r7, #12]
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016364:	7fbb      	ldrb	r3, [r7, #30]
 8016366:	4a30      	ldr	r2, [pc, #192]	; (8016428 <dhcp_select+0x1e4>)
 8016368:	5cd3      	ldrb	r3, [r2, r3]
 801636a:	461a      	mov	r2, r3
 801636c:	f000 ff68 	bl	8017240 <dhcp_option_byte>
 8016370:	4603      	mov	r3, r0
 8016372:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016374:	7fbb      	ldrb	r3, [r7, #30]
 8016376:	3301      	adds	r3, #1
 8016378:	77bb      	strb	r3, [r7, #30]
 801637a:	7fbb      	ldrb	r3, [r7, #30]
 801637c:	2b02      	cmp	r3, #2
 801637e:	d9ed      	bls.n	801635c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016380:	89b8      	ldrh	r0, [r7, #12]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	33f0      	adds	r3, #240	; 0xf0
 8016386:	697a      	ldr	r2, [r7, #20]
 8016388:	4619      	mov	r1, r3
 801638a:	f001 fc6d 	bl	8017c68 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801638e:	4b27      	ldr	r3, [pc, #156]	; (801642c <dhcp_select+0x1e8>)
 8016390:	6818      	ldr	r0, [r3, #0]
 8016392:	4b27      	ldr	r3, [pc, #156]	; (8016430 <dhcp_select+0x1ec>)
 8016394:	9301      	str	r3, [sp, #4]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	9300      	str	r3, [sp, #0]
 801639a:	2343      	movs	r3, #67	; 0x43
 801639c:	4a25      	ldr	r2, [pc, #148]	; (8016434 <dhcp_select+0x1f0>)
 801639e:	6979      	ldr	r1, [r7, #20]
 80163a0:	f7ff fbdc 	bl	8015b5c <udp_sendto_if_src>
 80163a4:	4603      	mov	r3, r0
 80163a6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80163a8:	6978      	ldr	r0, [r7, #20]
 80163aa:	f7f8 fc85 	bl	800ecb8 <pbuf_free>
 80163ae:	e001      	b.n	80163b4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80163b0:	23ff      	movs	r3, #255	; 0xff
 80163b2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80163b4:	69bb      	ldr	r3, [r7, #24]
 80163b6:	799b      	ldrb	r3, [r3, #6]
 80163b8:	2bff      	cmp	r3, #255	; 0xff
 80163ba:	d005      	beq.n	80163c8 <dhcp_select+0x184>
    dhcp->tries++;
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	799b      	ldrb	r3, [r3, #6]
 80163c0:	3301      	adds	r3, #1
 80163c2:	b2da      	uxtb	r2, r3
 80163c4:	69bb      	ldr	r3, [r7, #24]
 80163c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80163c8:	69bb      	ldr	r3, [r7, #24]
 80163ca:	799b      	ldrb	r3, [r3, #6]
 80163cc:	2b05      	cmp	r3, #5
 80163ce:	d80d      	bhi.n	80163ec <dhcp_select+0x1a8>
 80163d0:	69bb      	ldr	r3, [r7, #24]
 80163d2:	799b      	ldrb	r3, [r3, #6]
 80163d4:	461a      	mov	r2, r3
 80163d6:	2301      	movs	r3, #1
 80163d8:	4093      	lsls	r3, r2
 80163da:	b29b      	uxth	r3, r3
 80163dc:	461a      	mov	r2, r3
 80163de:	0152      	lsls	r2, r2, #5
 80163e0:	1ad2      	subs	r2, r2, r3
 80163e2:	0092      	lsls	r2, r2, #2
 80163e4:	4413      	add	r3, r2
 80163e6:	00db      	lsls	r3, r3, #3
 80163e8:	b29b      	uxth	r3, r3
 80163ea:	e001      	b.n	80163f0 <dhcp_select+0x1ac>
 80163ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80163f0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80163f2:	89fb      	ldrh	r3, [r7, #14]
 80163f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80163f8:	4a0f      	ldr	r2, [pc, #60]	; (8016438 <dhcp_select+0x1f4>)
 80163fa:	fb82 1203 	smull	r1, r2, r2, r3
 80163fe:	1152      	asrs	r2, r2, #5
 8016400:	17db      	asrs	r3, r3, #31
 8016402:	1ad3      	subs	r3, r2, r3
 8016404:	b29a      	uxth	r2, r3
 8016406:	69bb      	ldr	r3, [r7, #24]
 8016408:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801640a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801640e:	4618      	mov	r0, r3
 8016410:	3720      	adds	r7, #32
 8016412:	46bd      	mov	sp, r7
 8016414:	bdb0      	pop	{r4, r5, r7, pc}
 8016416:	bf00      	nop
 8016418:	0801ed14 	.word	0x0801ed14
 801641c:	0801edc0 	.word	0x0801edc0
 8016420:	0801ed74 	.word	0x0801ed74
 8016424:	0801eddc 	.word	0x0801eddc
 8016428:	200000a8 	.word	0x200000a8
 801642c:	2000c9d4 	.word	0x2000c9d4
 8016430:	0801f934 	.word	0x0801f934
 8016434:	0801f938 	.word	0x0801f938
 8016438:	10624dd3 	.word	0x10624dd3

0801643c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8016442:	4b27      	ldr	r3, [pc, #156]	; (80164e0 <dhcp_coarse_tmr+0xa4>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	607b      	str	r3, [r7, #4]
 8016448:	e042      	b.n	80164d0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801644e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d039      	beq.n	80164ca <dhcp_coarse_tmr+0x8e>
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	795b      	ldrb	r3, [r3, #5]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d035      	beq.n	80164ca <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	8a9b      	ldrh	r3, [r3, #20]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d012      	beq.n	801648c <dhcp_coarse_tmr+0x50>
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	8a5b      	ldrh	r3, [r3, #18]
 801646a:	3301      	adds	r3, #1
 801646c:	b29a      	uxth	r2, r3
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	825a      	strh	r2, [r3, #18]
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	8a5a      	ldrh	r2, [r3, #18]
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	8a9b      	ldrh	r3, [r3, #20]
 801647a:	429a      	cmp	r2, r3
 801647c:	d106      	bne.n	801648c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f000 fdf6 	bl	8017070 <dhcp_release_and_stop>
        dhcp_start(netif);
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	f000 f969 	bl	801675c <dhcp_start>
 801648a:	e01e      	b.n	80164ca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	8a1b      	ldrh	r3, [r3, #16]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d00b      	beq.n	80164ac <dhcp_coarse_tmr+0x70>
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	8a1b      	ldrh	r3, [r3, #16]
 8016498:	1e5a      	subs	r2, r3, #1
 801649a:	b291      	uxth	r1, r2
 801649c:	683a      	ldr	r2, [r7, #0]
 801649e:	8211      	strh	r1, [r2, #16]
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d103      	bne.n	80164ac <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f000 f8c6 	bl	8016636 <dhcp_t2_timeout>
 80164aa:	e00e      	b.n	80164ca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	89db      	ldrh	r3, [r3, #14]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d00a      	beq.n	80164ca <dhcp_coarse_tmr+0x8e>
 80164b4:	683b      	ldr	r3, [r7, #0]
 80164b6:	89db      	ldrh	r3, [r3, #14]
 80164b8:	1e5a      	subs	r2, r3, #1
 80164ba:	b291      	uxth	r1, r2
 80164bc:	683a      	ldr	r2, [r7, #0]
 80164be:	81d1      	strh	r1, [r2, #14]
 80164c0:	2b01      	cmp	r3, #1
 80164c2:	d102      	bne.n	80164ca <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f000 f888 	bl	80165da <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	607b      	str	r3, [r7, #4]
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d1b9      	bne.n	801644a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80164d6:	bf00      	nop
 80164d8:	bf00      	nop
 80164da:	3708      	adds	r7, #8
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd80      	pop	{r7, pc}
 80164e0:	2000c940 	.word	0x2000c940

080164e4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80164ea:	4b16      	ldr	r3, [pc, #88]	; (8016544 <dhcp_fine_tmr+0x60>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	607b      	str	r3, [r7, #4]
 80164f0:	e020      	b.n	8016534 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164f6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d017      	beq.n	801652e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	891b      	ldrh	r3, [r3, #8]
 8016502:	2b01      	cmp	r3, #1
 8016504:	d906      	bls.n	8016514 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	891b      	ldrh	r3, [r3, #8]
 801650a:	3b01      	subs	r3, #1
 801650c:	b29a      	uxth	r2, r3
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	811a      	strh	r2, [r3, #8]
 8016512:	e00c      	b.n	801652e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	891b      	ldrh	r3, [r3, #8]
 8016518:	2b01      	cmp	r3, #1
 801651a:	d108      	bne.n	801652e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	891b      	ldrh	r3, [r3, #8]
 8016520:	3b01      	subs	r3, #1
 8016522:	b29a      	uxth	r2, r3
 8016524:	683b      	ldr	r3, [r7, #0]
 8016526:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f000 f80d 	bl	8016548 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	607b      	str	r3, [r7, #4]
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d1db      	bne.n	80164f2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801653a:	bf00      	nop
 801653c:	bf00      	nop
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	2000c940 	.word	0x2000c940

08016548 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b084      	sub	sp, #16
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016554:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	795b      	ldrb	r3, [r3, #5]
 801655a:	2b0c      	cmp	r3, #12
 801655c:	d003      	beq.n	8016566 <dhcp_timeout+0x1e>
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	795b      	ldrb	r3, [r3, #5]
 8016562:	2b06      	cmp	r3, #6
 8016564:	d103      	bne.n	801656e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016566:	6878      	ldr	r0, [r7, #4]
 8016568:	f000 fa18 	bl	801699c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801656c:	e031      	b.n	80165d2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	795b      	ldrb	r3, [r3, #5]
 8016572:	2b01      	cmp	r3, #1
 8016574:	d10e      	bne.n	8016594 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	799b      	ldrb	r3, [r3, #6]
 801657a:	2b05      	cmp	r3, #5
 801657c:	d803      	bhi.n	8016586 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f7ff fe60 	bl	8016244 <dhcp_select>
}
 8016584:	e025      	b.n	80165d2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f000 fd72 	bl	8017070 <dhcp_release_and_stop>
      dhcp_start(netif);
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f000 f8e5 	bl	801675c <dhcp_start>
}
 8016592:	e01e      	b.n	80165d2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	795b      	ldrb	r3, [r3, #5]
 8016598:	2b08      	cmp	r3, #8
 801659a:	d10b      	bne.n	80165b4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	799b      	ldrb	r3, [r3, #6]
 80165a0:	2b01      	cmp	r3, #1
 80165a2:	d803      	bhi.n	80165ac <dhcp_timeout+0x64>
      dhcp_check(netif);
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f7ff fdf3 	bl	8016190 <dhcp_check>
}
 80165aa:	e012      	b.n	80165d2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f000 fa97 	bl	8016ae0 <dhcp_bind>
}
 80165b2:	e00e      	b.n	80165d2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	795b      	ldrb	r3, [r3, #5]
 80165b8:	2b03      	cmp	r3, #3
 80165ba:	d10a      	bne.n	80165d2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	799b      	ldrb	r3, [r3, #6]
 80165c0:	2b01      	cmp	r3, #1
 80165c2:	d803      	bhi.n	80165cc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80165c4:	6878      	ldr	r0, [r7, #4]
 80165c6:	f000 fc9d 	bl	8016f04 <dhcp_reboot>
}
 80165ca:	e002      	b.n	80165d2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80165cc:	6878      	ldr	r0, [r7, #4]
 80165ce:	f000 f9e5 	bl	801699c <dhcp_discover>
}
 80165d2:	bf00      	nop
 80165d4:	3710      	adds	r7, #16
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}

080165da <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80165da:	b580      	push	{r7, lr}
 80165dc:	b084      	sub	sp, #16
 80165de:	af00      	add	r7, sp, #0
 80165e0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	795b      	ldrb	r3, [r3, #5]
 80165ec:	2b01      	cmp	r3, #1
 80165ee:	d007      	beq.n	8016600 <dhcp_t1_timeout+0x26>
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	795b      	ldrb	r3, [r3, #5]
 80165f4:	2b0a      	cmp	r3, #10
 80165f6:	d003      	beq.n	8016600 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80165fc:	2b05      	cmp	r3, #5
 80165fe:	d116      	bne.n	801662e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f000 fb47 	bl	8016c94 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	899b      	ldrh	r3, [r3, #12]
 801660a:	461a      	mov	r2, r3
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	8a5b      	ldrh	r3, [r3, #18]
 8016610:	1ad3      	subs	r3, r2, r3
 8016612:	2b01      	cmp	r3, #1
 8016614:	dd0b      	ble.n	801662e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	899b      	ldrh	r3, [r3, #12]
 801661a:	461a      	mov	r2, r3
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	8a5b      	ldrh	r3, [r3, #18]
 8016620:	1ad3      	subs	r3, r2, r3
 8016622:	0fda      	lsrs	r2, r3, #31
 8016624:	4413      	add	r3, r2
 8016626:	105b      	asrs	r3, r3, #1
 8016628:	b29a      	uxth	r2, r3
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801662e:	bf00      	nop
 8016630:	3710      	adds	r7, #16
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}

08016636 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016636:	b580      	push	{r7, lr}
 8016638:	b084      	sub	sp, #16
 801663a:	af00      	add	r7, sp, #0
 801663c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016642:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	795b      	ldrb	r3, [r3, #5]
 8016648:	2b01      	cmp	r3, #1
 801664a:	d00b      	beq.n	8016664 <dhcp_t2_timeout+0x2e>
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	795b      	ldrb	r3, [r3, #5]
 8016650:	2b0a      	cmp	r3, #10
 8016652:	d007      	beq.n	8016664 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016658:	2b05      	cmp	r3, #5
 801665a:	d003      	beq.n	8016664 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	795b      	ldrb	r3, [r3, #5]
 8016660:	2b04      	cmp	r3, #4
 8016662:	d116      	bne.n	8016692 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016664:	6878      	ldr	r0, [r7, #4]
 8016666:	f000 fbb1 	bl	8016dcc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	8a9b      	ldrh	r3, [r3, #20]
 801666e:	461a      	mov	r2, r3
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	8a5b      	ldrh	r3, [r3, #18]
 8016674:	1ad3      	subs	r3, r2, r3
 8016676:	2b01      	cmp	r3, #1
 8016678:	dd0b      	ble.n	8016692 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	8a9b      	ldrh	r3, [r3, #20]
 801667e:	461a      	mov	r2, r3
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	8a5b      	ldrh	r3, [r3, #18]
 8016684:	1ad3      	subs	r3, r2, r3
 8016686:	0fda      	lsrs	r2, r3, #31
 8016688:	4413      	add	r3, r2
 801668a:	105b      	asrs	r3, r3, #1
 801668c:	b29a      	uxth	r2, r3
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8016692:	bf00      	nop
 8016694:	3710      	adds	r7, #16
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}
	...

0801669c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b084      	sub	sp, #16
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166aa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2200      	movs	r2, #0
 80166b0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	2200      	movs	r2, #0
 80166b6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80166b8:	4b26      	ldr	r3, [pc, #152]	; (8016754 <dhcp_handle_ack+0xb8>)
 80166ba:	78db      	ldrb	r3, [r3, #3]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d003      	beq.n	80166c8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80166c0:	4b25      	ldr	r3, [pc, #148]	; (8016758 <dhcp_handle_ack+0xbc>)
 80166c2:	68da      	ldr	r2, [r3, #12]
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80166c8:	4b22      	ldr	r3, [pc, #136]	; (8016754 <dhcp_handle_ack+0xb8>)
 80166ca:	791b      	ldrb	r3, [r3, #4]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d004      	beq.n	80166da <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80166d0:	4b21      	ldr	r3, [pc, #132]	; (8016758 <dhcp_handle_ack+0xbc>)
 80166d2:	691a      	ldr	r2, [r3, #16]
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80166d8:	e004      	b.n	80166e4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166de:	085a      	lsrs	r2, r3, #1
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80166e4:	4b1b      	ldr	r3, [pc, #108]	; (8016754 <dhcp_handle_ack+0xb8>)
 80166e6:	795b      	ldrb	r3, [r3, #5]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d004      	beq.n	80166f6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80166ec:	4b1a      	ldr	r3, [pc, #104]	; (8016758 <dhcp_handle_ack+0xbc>)
 80166ee:	695a      	ldr	r2, [r3, #20]
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	631a      	str	r2, [r3, #48]	; 0x30
 80166f4:	e007      	b.n	8016706 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80166fa:	4613      	mov	r3, r2
 80166fc:	00db      	lsls	r3, r3, #3
 80166fe:	1a9b      	subs	r3, r3, r2
 8016700:	08da      	lsrs	r2, r3, #3
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	691a      	ldr	r2, [r3, #16]
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801670e:	4b11      	ldr	r3, [pc, #68]	; (8016754 <dhcp_handle_ack+0xb8>)
 8016710:	799b      	ldrb	r3, [r3, #6]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d00b      	beq.n	801672e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016716:	4b10      	ldr	r3, [pc, #64]	; (8016758 <dhcp_handle_ack+0xbc>)
 8016718:	699b      	ldr	r3, [r3, #24]
 801671a:	4618      	mov	r0, r3
 801671c:	f7f6 fe7c 	bl	800d418 <lwip_htonl>
 8016720:	4602      	mov	r2, r0
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2201      	movs	r2, #1
 801672a:	71da      	strb	r2, [r3, #7]
 801672c:	e002      	b.n	8016734 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	2200      	movs	r2, #0
 8016732:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016734:	4b07      	ldr	r3, [pc, #28]	; (8016754 <dhcp_handle_ack+0xb8>)
 8016736:	79db      	ldrb	r3, [r3, #7]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d007      	beq.n	801674c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801673c:	4b06      	ldr	r3, [pc, #24]	; (8016758 <dhcp_handle_ack+0xbc>)
 801673e:	69db      	ldr	r3, [r3, #28]
 8016740:	4618      	mov	r0, r3
 8016742:	f7f6 fe69 	bl	800d418 <lwip_htonl>
 8016746:	4602      	mov	r2, r0
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801674c:	bf00      	nop
 801674e:	3710      	adds	r7, #16
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}
 8016754:	2000c9cc 	.word	0x2000c9cc
 8016758:	2000c9ac 	.word	0x2000c9ac

0801675c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d109      	bne.n	801677e <dhcp_start+0x22>
 801676a:	4b37      	ldr	r3, [pc, #220]	; (8016848 <dhcp_start+0xec>)
 801676c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016770:	4936      	ldr	r1, [pc, #216]	; (801684c <dhcp_start+0xf0>)
 8016772:	4837      	ldr	r0, [pc, #220]	; (8016850 <dhcp_start+0xf4>)
 8016774:	f004 ff02 	bl	801b57c <iprintf>
 8016778:	f06f 030f 	mvn.w	r3, #15
 801677c:	e060      	b.n	8016840 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016784:	f003 0301 	and.w	r3, r3, #1
 8016788:	2b00      	cmp	r3, #0
 801678a:	d109      	bne.n	80167a0 <dhcp_start+0x44>
 801678c:	4b2e      	ldr	r3, [pc, #184]	; (8016848 <dhcp_start+0xec>)
 801678e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8016792:	4930      	ldr	r1, [pc, #192]	; (8016854 <dhcp_start+0xf8>)
 8016794:	482e      	ldr	r0, [pc, #184]	; (8016850 <dhcp_start+0xf4>)
 8016796:	f004 fef1 	bl	801b57c <iprintf>
 801679a:	f06f 030f 	mvn.w	r3, #15
 801679e:	e04f      	b.n	8016840 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80167aa:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80167ae:	d202      	bcs.n	80167b6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80167b0:	f04f 33ff 	mov.w	r3, #4294967295
 80167b4:	e044      	b.n	8016840 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d10d      	bne.n	80167d8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80167bc:	2034      	movs	r0, #52	; 0x34
 80167be:	f7f7 f9fb 	bl	800dbb8 <mem_malloc>
 80167c2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d102      	bne.n	80167d0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80167ca:	f04f 33ff 	mov.w	r3, #4294967295
 80167ce:	e037      	b.n	8016840 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	68fa      	ldr	r2, [r7, #12]
 80167d4:	625a      	str	r2, [r3, #36]	; 0x24
 80167d6:	e005      	b.n	80167e4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	791b      	ldrb	r3, [r3, #4]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d001      	beq.n	80167e4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80167e0:	f7ff fc92 	bl	8016108 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80167e4:	2234      	movs	r2, #52	; 0x34
 80167e6:	2100      	movs	r1, #0
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	f004 fde1 	bl	801b3b0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80167ee:	f7ff fc39 	bl	8016064 <dhcp_inc_pcb_refcount>
 80167f2:	4603      	mov	r3, r0
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d002      	beq.n	80167fe <dhcp_start+0xa2>
    return ERR_MEM;
 80167f8:	f04f 33ff 	mov.w	r3, #4294967295
 80167fc:	e020      	b.n	8016840 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	2201      	movs	r2, #1
 8016802:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801680a:	f003 0304 	and.w	r3, r3, #4
 801680e:	2b00      	cmp	r3, #0
 8016810:	d105      	bne.n	801681e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016812:	2102      	movs	r1, #2
 8016814:	68f8      	ldr	r0, [r7, #12]
 8016816:	f000 fcc5 	bl	80171a4 <dhcp_set_state>
    return ERR_OK;
 801681a:	2300      	movs	r3, #0
 801681c:	e010      	b.n	8016840 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 f8bc 	bl	801699c <dhcp_discover>
 8016824:	4603      	mov	r3, r0
 8016826:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016828:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d005      	beq.n	801683c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f000 fc1d 	bl	8017070 <dhcp_release_and_stop>
    return ERR_MEM;
 8016836:	f04f 33ff 	mov.w	r3, #4294967295
 801683a:	e001      	b.n	8016840 <dhcp_start+0xe4>
  }
  return result;
 801683c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016840:	4618      	mov	r0, r3
 8016842:	3710      	adds	r7, #16
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	0801ed14 	.word	0x0801ed14
 801684c:	0801edf8 	.word	0x0801edf8
 8016850:	0801ed74 	.word	0x0801ed74
 8016854:	0801ee3c 	.word	0x0801ee3c

08016858 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b084      	sub	sp, #16
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d107      	bne.n	8016878 <dhcp_arp_reply+0x20>
 8016868:	4b0e      	ldr	r3, [pc, #56]	; (80168a4 <dhcp_arp_reply+0x4c>)
 801686a:	f240 328b 	movw	r2, #907	; 0x38b
 801686e:	490e      	ldr	r1, [pc, #56]	; (80168a8 <dhcp_arp_reply+0x50>)
 8016870:	480e      	ldr	r0, [pc, #56]	; (80168ac <dhcp_arp_reply+0x54>)
 8016872:	f004 fe83 	bl	801b57c <iprintf>
 8016876:	e012      	b.n	801689e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801687c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d00c      	beq.n	801689e <dhcp_arp_reply+0x46>
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	795b      	ldrb	r3, [r3, #5]
 8016888:	2b08      	cmp	r3, #8
 801688a:	d108      	bne.n	801689e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	681a      	ldr	r2, [r3, #0]
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	69db      	ldr	r3, [r3, #28]
 8016894:	429a      	cmp	r2, r3
 8016896:	d102      	bne.n	801689e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f000 f809 	bl	80168b0 <dhcp_decline>
    }
  }
}
 801689e:	3710      	adds	r7, #16
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	0801ed14 	.word	0x0801ed14
 80168a8:	0801edf8 	.word	0x0801edf8
 80168ac:	0801ed74 	.word	0x0801ed74

080168b0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80168b0:	b5b0      	push	{r4, r5, r7, lr}
 80168b2:	b08a      	sub	sp, #40	; 0x28
 80168b4:	af02      	add	r7, sp, #8
 80168b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168bc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80168be:	210c      	movs	r1, #12
 80168c0:	69b8      	ldr	r0, [r7, #24]
 80168c2:	f000 fc6f 	bl	80171a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80168c6:	f107 030c 	add.w	r3, r7, #12
 80168ca:	2204      	movs	r2, #4
 80168cc:	69b9      	ldr	r1, [r7, #24]
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f001 f8f4 	bl	8017abc <dhcp_create_msg>
 80168d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80168d6:	697b      	ldr	r3, [r7, #20]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d035      	beq.n	8016948 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80168dc:	697b      	ldr	r3, [r7, #20]
 80168de:	685b      	ldr	r3, [r3, #4]
 80168e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80168e2:	89b8      	ldrh	r0, [r7, #12]
 80168e4:	693b      	ldr	r3, [r7, #16]
 80168e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168ea:	2304      	movs	r3, #4
 80168ec:	2232      	movs	r2, #50	; 0x32
 80168ee:	f000 fc73 	bl	80171d8 <dhcp_option>
 80168f2:	4603      	mov	r3, r0
 80168f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80168f6:	89bc      	ldrh	r4, [r7, #12]
 80168f8:	693b      	ldr	r3, [r7, #16]
 80168fa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80168fe:	69bb      	ldr	r3, [r7, #24]
 8016900:	69db      	ldr	r3, [r3, #28]
 8016902:	4618      	mov	r0, r3
 8016904:	f7f6 fd88 	bl	800d418 <lwip_htonl>
 8016908:	4603      	mov	r3, r0
 801690a:	461a      	mov	r2, r3
 801690c:	4629      	mov	r1, r5
 801690e:	4620      	mov	r0, r4
 8016910:	f000 fcee 	bl	80172f0 <dhcp_option_long>
 8016914:	4603      	mov	r3, r0
 8016916:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016918:	89b8      	ldrh	r0, [r7, #12]
 801691a:	693b      	ldr	r3, [r7, #16]
 801691c:	33f0      	adds	r3, #240	; 0xf0
 801691e:	697a      	ldr	r2, [r7, #20]
 8016920:	4619      	mov	r1, r3
 8016922:	f001 f9a1 	bl	8017c68 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016926:	4b19      	ldr	r3, [pc, #100]	; (801698c <dhcp_decline+0xdc>)
 8016928:	6818      	ldr	r0, [r3, #0]
 801692a:	4b19      	ldr	r3, [pc, #100]	; (8016990 <dhcp_decline+0xe0>)
 801692c:	9301      	str	r3, [sp, #4]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	9300      	str	r3, [sp, #0]
 8016932:	2343      	movs	r3, #67	; 0x43
 8016934:	4a17      	ldr	r2, [pc, #92]	; (8016994 <dhcp_decline+0xe4>)
 8016936:	6979      	ldr	r1, [r7, #20]
 8016938:	f7ff f910 	bl	8015b5c <udp_sendto_if_src>
 801693c:	4603      	mov	r3, r0
 801693e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016940:	6978      	ldr	r0, [r7, #20]
 8016942:	f7f8 f9b9 	bl	800ecb8 <pbuf_free>
 8016946:	e001      	b.n	801694c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016948:	23ff      	movs	r3, #255	; 0xff
 801694a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801694c:	69bb      	ldr	r3, [r7, #24]
 801694e:	799b      	ldrb	r3, [r3, #6]
 8016950:	2bff      	cmp	r3, #255	; 0xff
 8016952:	d005      	beq.n	8016960 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016954:	69bb      	ldr	r3, [r7, #24]
 8016956:	799b      	ldrb	r3, [r3, #6]
 8016958:	3301      	adds	r3, #1
 801695a:	b2da      	uxtb	r2, r3
 801695c:	69bb      	ldr	r3, [r7, #24]
 801695e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016960:	f242 7310 	movw	r3, #10000	; 0x2710
 8016964:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016966:	89fb      	ldrh	r3, [r7, #14]
 8016968:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801696c:	4a0a      	ldr	r2, [pc, #40]	; (8016998 <dhcp_decline+0xe8>)
 801696e:	fb82 1203 	smull	r1, r2, r2, r3
 8016972:	1152      	asrs	r2, r2, #5
 8016974:	17db      	asrs	r3, r3, #31
 8016976:	1ad3      	subs	r3, r2, r3
 8016978:	b29a      	uxth	r2, r3
 801697a:	69bb      	ldr	r3, [r7, #24]
 801697c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801697e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016982:	4618      	mov	r0, r3
 8016984:	3720      	adds	r7, #32
 8016986:	46bd      	mov	sp, r7
 8016988:	bdb0      	pop	{r4, r5, r7, pc}
 801698a:	bf00      	nop
 801698c:	2000c9d4 	.word	0x2000c9d4
 8016990:	0801f934 	.word	0x0801f934
 8016994:	0801f938 	.word	0x0801f938
 8016998:	10624dd3 	.word	0x10624dd3

0801699c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b08a      	sub	sp, #40	; 0x28
 80169a0:	af02      	add	r7, sp, #8
 80169a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169a8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80169aa:	2300      	movs	r3, #0
 80169ac:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	2200      	movs	r2, #0
 80169b2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80169b4:	2106      	movs	r1, #6
 80169b6:	69b8      	ldr	r0, [r7, #24]
 80169b8:	f000 fbf4 	bl	80171a4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80169bc:	f107 0308 	add.w	r3, r7, #8
 80169c0:	2201      	movs	r2, #1
 80169c2:	69b9      	ldr	r1, [r7, #24]
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f001 f879 	bl	8017abc <dhcp_create_msg>
 80169ca:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80169cc:	693b      	ldr	r3, [r7, #16]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d04b      	beq.n	8016a6a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80169d8:	8938      	ldrh	r0, [r7, #8]
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169e0:	2302      	movs	r3, #2
 80169e2:	2239      	movs	r2, #57	; 0x39
 80169e4:	f000 fbf8 	bl	80171d8 <dhcp_option>
 80169e8:	4603      	mov	r3, r0
 80169ea:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80169ec:	8938      	ldrh	r0, [r7, #8]
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80169f8:	461a      	mov	r2, r3
 80169fa:	f000 fc47 	bl	801728c <dhcp_option_short>
 80169fe:	4603      	mov	r3, r0
 8016a00:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016a02:	8938      	ldrh	r0, [r7, #8]
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a0a:	2303      	movs	r3, #3
 8016a0c:	2237      	movs	r2, #55	; 0x37
 8016a0e:	f000 fbe3 	bl	80171d8 <dhcp_option>
 8016a12:	4603      	mov	r3, r0
 8016a14:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016a16:	2300      	movs	r3, #0
 8016a18:	77fb      	strb	r3, [r7, #31]
 8016a1a:	e00e      	b.n	8016a3a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016a1c:	8938      	ldrh	r0, [r7, #8]
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a24:	7ffb      	ldrb	r3, [r7, #31]
 8016a26:	4a29      	ldr	r2, [pc, #164]	; (8016acc <dhcp_discover+0x130>)
 8016a28:	5cd3      	ldrb	r3, [r2, r3]
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	f000 fc08 	bl	8017240 <dhcp_option_byte>
 8016a30:	4603      	mov	r3, r0
 8016a32:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016a34:	7ffb      	ldrb	r3, [r7, #31]
 8016a36:	3301      	adds	r3, #1
 8016a38:	77fb      	strb	r3, [r7, #31]
 8016a3a:	7ffb      	ldrb	r3, [r7, #31]
 8016a3c:	2b02      	cmp	r3, #2
 8016a3e:	d9ed      	bls.n	8016a1c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016a40:	8938      	ldrh	r0, [r7, #8]
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	33f0      	adds	r3, #240	; 0xf0
 8016a46:	693a      	ldr	r2, [r7, #16]
 8016a48:	4619      	mov	r1, r3
 8016a4a:	f001 f90d 	bl	8017c68 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016a4e:	4b20      	ldr	r3, [pc, #128]	; (8016ad0 <dhcp_discover+0x134>)
 8016a50:	6818      	ldr	r0, [r3, #0]
 8016a52:	4b20      	ldr	r3, [pc, #128]	; (8016ad4 <dhcp_discover+0x138>)
 8016a54:	9301      	str	r3, [sp, #4]
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	9300      	str	r3, [sp, #0]
 8016a5a:	2343      	movs	r3, #67	; 0x43
 8016a5c:	4a1e      	ldr	r2, [pc, #120]	; (8016ad8 <dhcp_discover+0x13c>)
 8016a5e:	6939      	ldr	r1, [r7, #16]
 8016a60:	f7ff f87c 	bl	8015b5c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016a64:	6938      	ldr	r0, [r7, #16]
 8016a66:	f7f8 f927 	bl	800ecb8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016a6a:	69bb      	ldr	r3, [r7, #24]
 8016a6c:	799b      	ldrb	r3, [r3, #6]
 8016a6e:	2bff      	cmp	r3, #255	; 0xff
 8016a70:	d005      	beq.n	8016a7e <dhcp_discover+0xe2>
    dhcp->tries++;
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	799b      	ldrb	r3, [r3, #6]
 8016a76:	3301      	adds	r3, #1
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016a7e:	69bb      	ldr	r3, [r7, #24]
 8016a80:	799b      	ldrb	r3, [r3, #6]
 8016a82:	2b05      	cmp	r3, #5
 8016a84:	d80d      	bhi.n	8016aa2 <dhcp_discover+0x106>
 8016a86:	69bb      	ldr	r3, [r7, #24]
 8016a88:	799b      	ldrb	r3, [r3, #6]
 8016a8a:	461a      	mov	r2, r3
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	4093      	lsls	r3, r2
 8016a90:	b29b      	uxth	r3, r3
 8016a92:	461a      	mov	r2, r3
 8016a94:	0152      	lsls	r2, r2, #5
 8016a96:	1ad2      	subs	r2, r2, r3
 8016a98:	0092      	lsls	r2, r2, #2
 8016a9a:	4413      	add	r3, r2
 8016a9c:	00db      	lsls	r3, r3, #3
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	e001      	b.n	8016aa6 <dhcp_discover+0x10a>
 8016aa2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016aa6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016aa8:	897b      	ldrh	r3, [r7, #10]
 8016aaa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016aae:	4a0b      	ldr	r2, [pc, #44]	; (8016adc <dhcp_discover+0x140>)
 8016ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8016ab4:	1152      	asrs	r2, r2, #5
 8016ab6:	17db      	asrs	r3, r3, #31
 8016ab8:	1ad3      	subs	r3, r2, r3
 8016aba:	b29a      	uxth	r2, r3
 8016abc:	69bb      	ldr	r3, [r7, #24]
 8016abe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016ac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3720      	adds	r7, #32
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	200000a8 	.word	0x200000a8
 8016ad0:	2000c9d4 	.word	0x2000c9d4
 8016ad4:	0801f934 	.word	0x0801f934
 8016ad8:	0801f938 	.word	0x0801f938
 8016adc:	10624dd3 	.word	0x10624dd3

08016ae0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b088      	sub	sp, #32
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d107      	bne.n	8016afe <dhcp_bind+0x1e>
 8016aee:	4b64      	ldr	r3, [pc, #400]	; (8016c80 <dhcp_bind+0x1a0>)
 8016af0:	f240 4215 	movw	r2, #1045	; 0x415
 8016af4:	4963      	ldr	r1, [pc, #396]	; (8016c84 <dhcp_bind+0x1a4>)
 8016af6:	4864      	ldr	r0, [pc, #400]	; (8016c88 <dhcp_bind+0x1a8>)
 8016af8:	f004 fd40 	bl	801b57c <iprintf>
 8016afc:	e0bc      	b.n	8016c78 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b02:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016b04:	69bb      	ldr	r3, [r7, #24]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d107      	bne.n	8016b1a <dhcp_bind+0x3a>
 8016b0a:	4b5d      	ldr	r3, [pc, #372]	; (8016c80 <dhcp_bind+0x1a0>)
 8016b0c:	f240 4217 	movw	r2, #1047	; 0x417
 8016b10:	495e      	ldr	r1, [pc, #376]	; (8016c8c <dhcp_bind+0x1ac>)
 8016b12:	485d      	ldr	r0, [pc, #372]	; (8016c88 <dhcp_bind+0x1a8>)
 8016b14:	f004 fd32 	bl	801b57c <iprintf>
 8016b18:	e0ae      	b.n	8016c78 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8016b1a:	69bb      	ldr	r3, [r7, #24]
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016b20:	69bb      	ldr	r3, [r7, #24]
 8016b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b28:	d019      	beq.n	8016b5e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016b2a:	69bb      	ldr	r3, [r7, #24]
 8016b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b2e:	331e      	adds	r3, #30
 8016b30:	4a57      	ldr	r2, [pc, #348]	; (8016c90 <dhcp_bind+0x1b0>)
 8016b32:	fba2 2303 	umull	r2, r3, r2, r3
 8016b36:	095b      	lsrs	r3, r3, #5
 8016b38:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016b3a:	69fb      	ldr	r3, [r7, #28]
 8016b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b40:	d302      	bcc.n	8016b48 <dhcp_bind+0x68>
      timeout = 0xffff;
 8016b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b46:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8016b48:	69fb      	ldr	r3, [r7, #28]
 8016b4a:	b29a      	uxth	r2, r3
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016b50:	69bb      	ldr	r3, [r7, #24]
 8016b52:	8a9b      	ldrh	r3, [r3, #20]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d102      	bne.n	8016b5e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8016b58:	69bb      	ldr	r3, [r7, #24]
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016b5e:	69bb      	ldr	r3, [r7, #24]
 8016b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b66:	d01d      	beq.n	8016ba4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016b68:	69bb      	ldr	r3, [r7, #24]
 8016b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b6c:	331e      	adds	r3, #30
 8016b6e:	4a48      	ldr	r2, [pc, #288]	; (8016c90 <dhcp_bind+0x1b0>)
 8016b70:	fba2 2303 	umull	r2, r3, r2, r3
 8016b74:	095b      	lsrs	r3, r3, #5
 8016b76:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b7e:	d302      	bcc.n	8016b86 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b84:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	b29a      	uxth	r2, r3
 8016b8a:	69bb      	ldr	r3, [r7, #24]
 8016b8c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	895b      	ldrh	r3, [r3, #10]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d102      	bne.n	8016b9c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8016b96:	69bb      	ldr	r3, [r7, #24]
 8016b98:	2201      	movs	r2, #1
 8016b9a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016b9c:	69bb      	ldr	r3, [r7, #24]
 8016b9e:	895a      	ldrh	r2, [r3, #10]
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016ba4:	69bb      	ldr	r3, [r7, #24]
 8016ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bac:	d01d      	beq.n	8016bea <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016bae:	69bb      	ldr	r3, [r7, #24]
 8016bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bb2:	331e      	adds	r3, #30
 8016bb4:	4a36      	ldr	r2, [pc, #216]	; (8016c90 <dhcp_bind+0x1b0>)
 8016bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8016bba:	095b      	lsrs	r3, r3, #5
 8016bbc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016bbe:	69fb      	ldr	r3, [r7, #28]
 8016bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016bc4:	d302      	bcc.n	8016bcc <dhcp_bind+0xec>
      timeout = 0xffff;
 8016bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016bca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016bcc:	69fb      	ldr	r3, [r7, #28]
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8016bd4:	69bb      	ldr	r3, [r7, #24]
 8016bd6:	899b      	ldrh	r3, [r3, #12]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d102      	bne.n	8016be2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016bdc:	69bb      	ldr	r3, [r7, #24]
 8016bde:	2201      	movs	r2, #1
 8016be0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8016be2:	69bb      	ldr	r3, [r7, #24]
 8016be4:	899a      	ldrh	r2, [r3, #12]
 8016be6:	69bb      	ldr	r3, [r7, #24]
 8016be8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016bea:	69bb      	ldr	r3, [r7, #24]
 8016bec:	895a      	ldrh	r2, [r3, #10]
 8016bee:	69bb      	ldr	r3, [r7, #24]
 8016bf0:	899b      	ldrh	r3, [r3, #12]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d306      	bcc.n	8016c04 <dhcp_bind+0x124>
 8016bf6:	69bb      	ldr	r3, [r7, #24]
 8016bf8:	899b      	ldrh	r3, [r3, #12]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d002      	beq.n	8016c04 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8016bfe:	69bb      	ldr	r3, [r7, #24]
 8016c00:	2200      	movs	r2, #0
 8016c02:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016c04:	69bb      	ldr	r3, [r7, #24]
 8016c06:	79db      	ldrb	r3, [r3, #7]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d003      	beq.n	8016c14 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016c0c:	69bb      	ldr	r3, [r7, #24]
 8016c0e:	6a1b      	ldr	r3, [r3, #32]
 8016c10:	613b      	str	r3, [r7, #16]
 8016c12:	e014      	b.n	8016c3e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016c14:	69bb      	ldr	r3, [r7, #24]
 8016c16:	331c      	adds	r3, #28
 8016c18:	781b      	ldrb	r3, [r3, #0]
 8016c1a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	db02      	blt.n	8016c2a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016c24:	23ff      	movs	r3, #255	; 0xff
 8016c26:	613b      	str	r3, [r7, #16]
 8016c28:	e009      	b.n	8016c3e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8016c2a:	7dfb      	ldrb	r3, [r7, #23]
 8016c2c:	2bbf      	cmp	r3, #191	; 0xbf
 8016c2e:	d903      	bls.n	8016c38 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016c30:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016c34:	613b      	str	r3, [r7, #16]
 8016c36:	e002      	b.n	8016c3e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8016c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c3c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016c3e:	69bb      	ldr	r3, [r7, #24]
 8016c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c42:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d108      	bne.n	8016c5c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8016c4a:	69bb      	ldr	r3, [r7, #24]
 8016c4c:	69da      	ldr	r2, [r3, #28]
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	4013      	ands	r3, r2
 8016c52:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016c5a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016c5c:	210a      	movs	r1, #10
 8016c5e:	69b8      	ldr	r0, [r7, #24]
 8016c60:	f000 faa0 	bl	80171a4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016c64:	69bb      	ldr	r3, [r7, #24]
 8016c66:	f103 011c 	add.w	r1, r3, #28
 8016c6a:	f107 030c 	add.w	r3, r7, #12
 8016c6e:	f107 0210 	add.w	r2, r7, #16
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f7f7 fb80 	bl	800e378 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8016c78:	3720      	adds	r7, #32
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	0801ed14 	.word	0x0801ed14
 8016c84:	0801ee74 	.word	0x0801ee74
 8016c88:	0801ed74 	.word	0x0801ed74
 8016c8c:	0801ee90 	.word	0x0801ee90
 8016c90:	88888889 	.word	0x88888889

08016c94 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b08a      	sub	sp, #40	; 0x28
 8016c98:	af02      	add	r7, sp, #8
 8016c9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ca0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016ca2:	2105      	movs	r1, #5
 8016ca4:	69b8      	ldr	r0, [r7, #24]
 8016ca6:	f000 fa7d 	bl	80171a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016caa:	f107 030c 	add.w	r3, r7, #12
 8016cae:	2203      	movs	r2, #3
 8016cb0:	69b9      	ldr	r1, [r7, #24]
 8016cb2:	6878      	ldr	r0, [r7, #4]
 8016cb4:	f000 ff02 	bl	8017abc <dhcp_create_msg>
 8016cb8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d04e      	beq.n	8016d5e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016cc6:	89b8      	ldrh	r0, [r7, #12]
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016cce:	2302      	movs	r3, #2
 8016cd0:	2239      	movs	r2, #57	; 0x39
 8016cd2:	f000 fa81 	bl	80171d8 <dhcp_option>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016cda:	89b8      	ldrh	r0, [r7, #12]
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	f000 fad0 	bl	801728c <dhcp_option_short>
 8016cec:	4603      	mov	r3, r0
 8016cee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016cf0:	89b8      	ldrh	r0, [r7, #12]
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016cf8:	2303      	movs	r3, #3
 8016cfa:	2237      	movs	r2, #55	; 0x37
 8016cfc:	f000 fa6c 	bl	80171d8 <dhcp_option>
 8016d00:	4603      	mov	r3, r0
 8016d02:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016d04:	2300      	movs	r3, #0
 8016d06:	77bb      	strb	r3, [r7, #30]
 8016d08:	e00e      	b.n	8016d28 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016d0a:	89b8      	ldrh	r0, [r7, #12]
 8016d0c:	693b      	ldr	r3, [r7, #16]
 8016d0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d12:	7fbb      	ldrb	r3, [r7, #30]
 8016d14:	4a2a      	ldr	r2, [pc, #168]	; (8016dc0 <dhcp_renew+0x12c>)
 8016d16:	5cd3      	ldrb	r3, [r2, r3]
 8016d18:	461a      	mov	r2, r3
 8016d1a:	f000 fa91 	bl	8017240 <dhcp_option_byte>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016d22:	7fbb      	ldrb	r3, [r7, #30]
 8016d24:	3301      	adds	r3, #1
 8016d26:	77bb      	strb	r3, [r7, #30]
 8016d28:	7fbb      	ldrb	r3, [r7, #30]
 8016d2a:	2b02      	cmp	r3, #2
 8016d2c:	d9ed      	bls.n	8016d0a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016d2e:	89b8      	ldrh	r0, [r7, #12]
 8016d30:	693b      	ldr	r3, [r7, #16]
 8016d32:	33f0      	adds	r3, #240	; 0xf0
 8016d34:	697a      	ldr	r2, [r7, #20]
 8016d36:	4619      	mov	r1, r3
 8016d38:	f000 ff96 	bl	8017c68 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016d3c:	4b21      	ldr	r3, [pc, #132]	; (8016dc4 <dhcp_renew+0x130>)
 8016d3e:	6818      	ldr	r0, [r3, #0]
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	f103 0218 	add.w	r2, r3, #24
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	9300      	str	r3, [sp, #0]
 8016d4a:	2343      	movs	r3, #67	; 0x43
 8016d4c:	6979      	ldr	r1, [r7, #20]
 8016d4e:	f7fe fe91 	bl	8015a74 <udp_sendto_if>
 8016d52:	4603      	mov	r3, r0
 8016d54:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016d56:	6978      	ldr	r0, [r7, #20]
 8016d58:	f7f7 ffae 	bl	800ecb8 <pbuf_free>
 8016d5c:	e001      	b.n	8016d62 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016d5e:	23ff      	movs	r3, #255	; 0xff
 8016d60:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	799b      	ldrb	r3, [r3, #6]
 8016d66:	2bff      	cmp	r3, #255	; 0xff
 8016d68:	d005      	beq.n	8016d76 <dhcp_renew+0xe2>
    dhcp->tries++;
 8016d6a:	69bb      	ldr	r3, [r7, #24]
 8016d6c:	799b      	ldrb	r3, [r3, #6]
 8016d6e:	3301      	adds	r3, #1
 8016d70:	b2da      	uxtb	r2, r3
 8016d72:	69bb      	ldr	r3, [r7, #24]
 8016d74:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	799b      	ldrb	r3, [r3, #6]
 8016d7a:	2b09      	cmp	r3, #9
 8016d7c:	d80a      	bhi.n	8016d94 <dhcp_renew+0x100>
 8016d7e:	69bb      	ldr	r3, [r7, #24]
 8016d80:	799b      	ldrb	r3, [r3, #6]
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	461a      	mov	r2, r3
 8016d86:	0152      	lsls	r2, r2, #5
 8016d88:	1ad2      	subs	r2, r2, r3
 8016d8a:	0092      	lsls	r2, r2, #2
 8016d8c:	4413      	add	r3, r2
 8016d8e:	011b      	lsls	r3, r3, #4
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	e001      	b.n	8016d98 <dhcp_renew+0x104>
 8016d94:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016d98:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016d9a:	89fb      	ldrh	r3, [r7, #14]
 8016d9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016da0:	4a09      	ldr	r2, [pc, #36]	; (8016dc8 <dhcp_renew+0x134>)
 8016da2:	fb82 1203 	smull	r1, r2, r2, r3
 8016da6:	1152      	asrs	r2, r2, #5
 8016da8:	17db      	asrs	r3, r3, #31
 8016daa:	1ad3      	subs	r3, r2, r3
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	69bb      	ldr	r3, [r7, #24]
 8016db0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016db2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016db6:	4618      	mov	r0, r3
 8016db8:	3720      	adds	r7, #32
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd80      	pop	{r7, pc}
 8016dbe:	bf00      	nop
 8016dc0:	200000a8 	.word	0x200000a8
 8016dc4:	2000c9d4 	.word	0x2000c9d4
 8016dc8:	10624dd3 	.word	0x10624dd3

08016dcc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b08a      	sub	sp, #40	; 0x28
 8016dd0:	af02      	add	r7, sp, #8
 8016dd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dd8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016dda:	2104      	movs	r1, #4
 8016ddc:	69b8      	ldr	r0, [r7, #24]
 8016dde:	f000 f9e1 	bl	80171a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016de2:	f107 030c 	add.w	r3, r7, #12
 8016de6:	2203      	movs	r2, #3
 8016de8:	69b9      	ldr	r1, [r7, #24]
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	f000 fe66 	bl	8017abc <dhcp_create_msg>
 8016df0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d04c      	beq.n	8016e92 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	685b      	ldr	r3, [r3, #4]
 8016dfc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016dfe:	89b8      	ldrh	r0, [r7, #12]
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e06:	2302      	movs	r3, #2
 8016e08:	2239      	movs	r2, #57	; 0x39
 8016e0a:	f000 f9e5 	bl	80171d8 <dhcp_option>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016e12:	89b8      	ldrh	r0, [r7, #12]
 8016e14:	693b      	ldr	r3, [r7, #16]
 8016e16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e1e:	461a      	mov	r2, r3
 8016e20:	f000 fa34 	bl	801728c <dhcp_option_short>
 8016e24:	4603      	mov	r3, r0
 8016e26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016e28:	89b8      	ldrh	r0, [r7, #12]
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e30:	2303      	movs	r3, #3
 8016e32:	2237      	movs	r2, #55	; 0x37
 8016e34:	f000 f9d0 	bl	80171d8 <dhcp_option>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	77bb      	strb	r3, [r7, #30]
 8016e40:	e00e      	b.n	8016e60 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016e42:	89b8      	ldrh	r0, [r7, #12]
 8016e44:	693b      	ldr	r3, [r7, #16]
 8016e46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e4a:	7fbb      	ldrb	r3, [r7, #30]
 8016e4c:	4a29      	ldr	r2, [pc, #164]	; (8016ef4 <dhcp_rebind+0x128>)
 8016e4e:	5cd3      	ldrb	r3, [r2, r3]
 8016e50:	461a      	mov	r2, r3
 8016e52:	f000 f9f5 	bl	8017240 <dhcp_option_byte>
 8016e56:	4603      	mov	r3, r0
 8016e58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e5a:	7fbb      	ldrb	r3, [r7, #30]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	77bb      	strb	r3, [r7, #30]
 8016e60:	7fbb      	ldrb	r3, [r7, #30]
 8016e62:	2b02      	cmp	r3, #2
 8016e64:	d9ed      	bls.n	8016e42 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e66:	89b8      	ldrh	r0, [r7, #12]
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	33f0      	adds	r3, #240	; 0xf0
 8016e6c:	697a      	ldr	r2, [r7, #20]
 8016e6e:	4619      	mov	r1, r3
 8016e70:	f000 fefa 	bl	8017c68 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016e74:	4b20      	ldr	r3, [pc, #128]	; (8016ef8 <dhcp_rebind+0x12c>)
 8016e76:	6818      	ldr	r0, [r3, #0]
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	9300      	str	r3, [sp, #0]
 8016e7c:	2343      	movs	r3, #67	; 0x43
 8016e7e:	4a1f      	ldr	r2, [pc, #124]	; (8016efc <dhcp_rebind+0x130>)
 8016e80:	6979      	ldr	r1, [r7, #20]
 8016e82:	f7fe fdf7 	bl	8015a74 <udp_sendto_if>
 8016e86:	4603      	mov	r3, r0
 8016e88:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016e8a:	6978      	ldr	r0, [r7, #20]
 8016e8c:	f7f7 ff14 	bl	800ecb8 <pbuf_free>
 8016e90:	e001      	b.n	8016e96 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016e92:	23ff      	movs	r3, #255	; 0xff
 8016e94:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	799b      	ldrb	r3, [r3, #6]
 8016e9a:	2bff      	cmp	r3, #255	; 0xff
 8016e9c:	d005      	beq.n	8016eaa <dhcp_rebind+0xde>
    dhcp->tries++;
 8016e9e:	69bb      	ldr	r3, [r7, #24]
 8016ea0:	799b      	ldrb	r3, [r3, #6]
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	b2da      	uxtb	r2, r3
 8016ea6:	69bb      	ldr	r3, [r7, #24]
 8016ea8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	799b      	ldrb	r3, [r3, #6]
 8016eae:	2b09      	cmp	r3, #9
 8016eb0:	d80a      	bhi.n	8016ec8 <dhcp_rebind+0xfc>
 8016eb2:	69bb      	ldr	r3, [r7, #24]
 8016eb4:	799b      	ldrb	r3, [r3, #6]
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	461a      	mov	r2, r3
 8016eba:	0152      	lsls	r2, r2, #5
 8016ebc:	1ad2      	subs	r2, r2, r3
 8016ebe:	0092      	lsls	r2, r2, #2
 8016ec0:	4413      	add	r3, r2
 8016ec2:	00db      	lsls	r3, r3, #3
 8016ec4:	b29b      	uxth	r3, r3
 8016ec6:	e001      	b.n	8016ecc <dhcp_rebind+0x100>
 8016ec8:	f242 7310 	movw	r3, #10000	; 0x2710
 8016ecc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016ece:	89fb      	ldrh	r3, [r7, #14]
 8016ed0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016ed4:	4a0a      	ldr	r2, [pc, #40]	; (8016f00 <dhcp_rebind+0x134>)
 8016ed6:	fb82 1203 	smull	r1, r2, r2, r3
 8016eda:	1152      	asrs	r2, r2, #5
 8016edc:	17db      	asrs	r3, r3, #31
 8016ede:	1ad3      	subs	r3, r2, r3
 8016ee0:	b29a      	uxth	r2, r3
 8016ee2:	69bb      	ldr	r3, [r7, #24]
 8016ee4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016ee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	3720      	adds	r7, #32
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}
 8016ef2:	bf00      	nop
 8016ef4:	200000a8 	.word	0x200000a8
 8016ef8:	2000c9d4 	.word	0x2000c9d4
 8016efc:	0801f938 	.word	0x0801f938
 8016f00:	10624dd3 	.word	0x10624dd3

08016f04 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016f04:	b5b0      	push	{r4, r5, r7, lr}
 8016f06:	b08a      	sub	sp, #40	; 0x28
 8016f08:	af02      	add	r7, sp, #8
 8016f0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f10:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016f12:	2103      	movs	r1, #3
 8016f14:	69b8      	ldr	r0, [r7, #24]
 8016f16:	f000 f945 	bl	80171a4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016f1a:	f107 030c 	add.w	r3, r7, #12
 8016f1e:	2203      	movs	r2, #3
 8016f20:	69b9      	ldr	r1, [r7, #24]
 8016f22:	6878      	ldr	r0, [r7, #4]
 8016f24:	f000 fdca 	bl	8017abc <dhcp_create_msg>
 8016f28:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016f2a:	697b      	ldr	r3, [r7, #20]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d066      	beq.n	8016ffe <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016f36:	89b8      	ldrh	r0, [r7, #12]
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f3e:	2302      	movs	r3, #2
 8016f40:	2239      	movs	r2, #57	; 0x39
 8016f42:	f000 f949 	bl	80171d8 <dhcp_option>
 8016f46:	4603      	mov	r3, r0
 8016f48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016f4a:	89b8      	ldrh	r0, [r7, #12]
 8016f4c:	693b      	ldr	r3, [r7, #16]
 8016f4e:	33f0      	adds	r3, #240	; 0xf0
 8016f50:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016f54:	4619      	mov	r1, r3
 8016f56:	f000 f999 	bl	801728c <dhcp_option_short>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016f5e:	89b8      	ldrh	r0, [r7, #12]
 8016f60:	693b      	ldr	r3, [r7, #16]
 8016f62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f66:	2304      	movs	r3, #4
 8016f68:	2232      	movs	r2, #50	; 0x32
 8016f6a:	f000 f935 	bl	80171d8 <dhcp_option>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016f72:	89bc      	ldrh	r4, [r7, #12]
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016f7a:	69bb      	ldr	r3, [r7, #24]
 8016f7c:	69db      	ldr	r3, [r3, #28]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7f6 fa4a 	bl	800d418 <lwip_htonl>
 8016f84:	4603      	mov	r3, r0
 8016f86:	461a      	mov	r2, r3
 8016f88:	4629      	mov	r1, r5
 8016f8a:	4620      	mov	r0, r4
 8016f8c:	f000 f9b0 	bl	80172f0 <dhcp_option_long>
 8016f90:	4603      	mov	r3, r0
 8016f92:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f94:	89b8      	ldrh	r0, [r7, #12]
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f9c:	2303      	movs	r3, #3
 8016f9e:	2237      	movs	r2, #55	; 0x37
 8016fa0:	f000 f91a 	bl	80171d8 <dhcp_option>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016fa8:	2300      	movs	r3, #0
 8016faa:	77bb      	strb	r3, [r7, #30]
 8016fac:	e00e      	b.n	8016fcc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016fae:	89b8      	ldrh	r0, [r7, #12]
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016fb6:	7fbb      	ldrb	r3, [r7, #30]
 8016fb8:	4a29      	ldr	r2, [pc, #164]	; (8017060 <dhcp_reboot+0x15c>)
 8016fba:	5cd3      	ldrb	r3, [r2, r3]
 8016fbc:	461a      	mov	r2, r3
 8016fbe:	f000 f93f 	bl	8017240 <dhcp_option_byte>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016fc6:	7fbb      	ldrb	r3, [r7, #30]
 8016fc8:	3301      	adds	r3, #1
 8016fca:	77bb      	strb	r3, [r7, #30]
 8016fcc:	7fbb      	ldrb	r3, [r7, #30]
 8016fce:	2b02      	cmp	r3, #2
 8016fd0:	d9ed      	bls.n	8016fae <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016fd2:	89b8      	ldrh	r0, [r7, #12]
 8016fd4:	693b      	ldr	r3, [r7, #16]
 8016fd6:	33f0      	adds	r3, #240	; 0xf0
 8016fd8:	697a      	ldr	r2, [r7, #20]
 8016fda:	4619      	mov	r1, r3
 8016fdc:	f000 fe44 	bl	8017c68 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016fe0:	4b20      	ldr	r3, [pc, #128]	; (8017064 <dhcp_reboot+0x160>)
 8016fe2:	6818      	ldr	r0, [r3, #0]
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	9300      	str	r3, [sp, #0]
 8016fe8:	2343      	movs	r3, #67	; 0x43
 8016fea:	4a1f      	ldr	r2, [pc, #124]	; (8017068 <dhcp_reboot+0x164>)
 8016fec:	6979      	ldr	r1, [r7, #20]
 8016fee:	f7fe fd41 	bl	8015a74 <udp_sendto_if>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016ff6:	6978      	ldr	r0, [r7, #20]
 8016ff8:	f7f7 fe5e 	bl	800ecb8 <pbuf_free>
 8016ffc:	e001      	b.n	8017002 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016ffe:	23ff      	movs	r3, #255	; 0xff
 8017000:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017002:	69bb      	ldr	r3, [r7, #24]
 8017004:	799b      	ldrb	r3, [r3, #6]
 8017006:	2bff      	cmp	r3, #255	; 0xff
 8017008:	d005      	beq.n	8017016 <dhcp_reboot+0x112>
    dhcp->tries++;
 801700a:	69bb      	ldr	r3, [r7, #24]
 801700c:	799b      	ldrb	r3, [r3, #6]
 801700e:	3301      	adds	r3, #1
 8017010:	b2da      	uxtb	r2, r3
 8017012:	69bb      	ldr	r3, [r7, #24]
 8017014:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017016:	69bb      	ldr	r3, [r7, #24]
 8017018:	799b      	ldrb	r3, [r3, #6]
 801701a:	2b09      	cmp	r3, #9
 801701c:	d80a      	bhi.n	8017034 <dhcp_reboot+0x130>
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	799b      	ldrb	r3, [r3, #6]
 8017022:	b29b      	uxth	r3, r3
 8017024:	461a      	mov	r2, r3
 8017026:	0152      	lsls	r2, r2, #5
 8017028:	1ad2      	subs	r2, r2, r3
 801702a:	0092      	lsls	r2, r2, #2
 801702c:	4413      	add	r3, r2
 801702e:	00db      	lsls	r3, r3, #3
 8017030:	b29b      	uxth	r3, r3
 8017032:	e001      	b.n	8017038 <dhcp_reboot+0x134>
 8017034:	f242 7310 	movw	r3, #10000	; 0x2710
 8017038:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801703a:	89fb      	ldrh	r3, [r7, #14]
 801703c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017040:	4a0a      	ldr	r2, [pc, #40]	; (801706c <dhcp_reboot+0x168>)
 8017042:	fb82 1203 	smull	r1, r2, r2, r3
 8017046:	1152      	asrs	r2, r2, #5
 8017048:	17db      	asrs	r3, r3, #31
 801704a:	1ad3      	subs	r3, r2, r3
 801704c:	b29a      	uxth	r2, r3
 801704e:	69bb      	ldr	r3, [r7, #24]
 8017050:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017052:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017056:	4618      	mov	r0, r3
 8017058:	3720      	adds	r7, #32
 801705a:	46bd      	mov	sp, r7
 801705c:	bdb0      	pop	{r4, r5, r7, pc}
 801705e:	bf00      	nop
 8017060:	200000a8 	.word	0x200000a8
 8017064:	2000c9d4 	.word	0x2000c9d4
 8017068:	0801f938 	.word	0x0801f938
 801706c:	10624dd3 	.word	0x10624dd3

08017070 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017070:	b5b0      	push	{r4, r5, r7, lr}
 8017072:	b08a      	sub	sp, #40	; 0x28
 8017074:	af02      	add	r7, sp, #8
 8017076:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801707c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801707e:	69fb      	ldr	r3, [r7, #28]
 8017080:	2b00      	cmp	r3, #0
 8017082:	f000 8084 	beq.w	801718e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8017086:	69fb      	ldr	r3, [r7, #28]
 8017088:	795b      	ldrb	r3, [r3, #5]
 801708a:	2b00      	cmp	r3, #0
 801708c:	f000 8081 	beq.w	8017192 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017090:	69fb      	ldr	r3, [r7, #28]
 8017092:	699b      	ldr	r3, [r3, #24]
 8017094:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017096:	69fb      	ldr	r3, [r7, #28]
 8017098:	2200      	movs	r2, #0
 801709a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801709c:	69fb      	ldr	r3, [r7, #28]
 801709e:	2200      	movs	r2, #0
 80170a0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	2200      	movs	r2, #0
 80170a6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80170a8:	69fb      	ldr	r3, [r7, #28]
 80170aa:	2200      	movs	r2, #0
 80170ac:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80170ae:	69fb      	ldr	r3, [r7, #28]
 80170b0:	2200      	movs	r2, #0
 80170b2:	631a      	str	r2, [r3, #48]	; 0x30
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80170b8:	69fb      	ldr	r3, [r7, #28]
 80170ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80170bc:	69fb      	ldr	r3, [r7, #28]
 80170be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80170c4:	69fb      	ldr	r3, [r7, #28]
 80170c6:	2200      	movs	r2, #0
 80170c8:	829a      	strh	r2, [r3, #20]
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	8a9a      	ldrh	r2, [r3, #20]
 80170ce:	69fb      	ldr	r3, [r7, #28]
 80170d0:	825a      	strh	r2, [r3, #18]
 80170d2:	69fb      	ldr	r3, [r7, #28]
 80170d4:	8a5a      	ldrh	r2, [r3, #18]
 80170d6:	69fb      	ldr	r3, [r7, #28]
 80170d8:	821a      	strh	r2, [r3, #16]
 80170da:	69fb      	ldr	r3, [r7, #28]
 80170dc:	8a1a      	ldrh	r2, [r3, #16]
 80170de:	69fb      	ldr	r3, [r7, #28]
 80170e0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	f000 fdee 	bl	8017cc4 <dhcp_supplied_address>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d03b      	beq.n	8017166 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80170ee:	f107 030e 	add.w	r3, r7, #14
 80170f2:	2207      	movs	r2, #7
 80170f4:	69f9      	ldr	r1, [r7, #28]
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	f000 fce0 	bl	8017abc <dhcp_create_msg>
 80170fc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80170fe:	69bb      	ldr	r3, [r7, #24]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d030      	beq.n	8017166 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017104:	69bb      	ldr	r3, [r7, #24]
 8017106:	685b      	ldr	r3, [r3, #4]
 8017108:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801710a:	89f8      	ldrh	r0, [r7, #14]
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017112:	2304      	movs	r3, #4
 8017114:	2236      	movs	r2, #54	; 0x36
 8017116:	f000 f85f 	bl	80171d8 <dhcp_option>
 801711a:	4603      	mov	r3, r0
 801711c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801711e:	89fc      	ldrh	r4, [r7, #14]
 8017120:	697b      	ldr	r3, [r7, #20]
 8017122:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017126:	693b      	ldr	r3, [r7, #16]
 8017128:	4618      	mov	r0, r3
 801712a:	f7f6 f975 	bl	800d418 <lwip_htonl>
 801712e:	4603      	mov	r3, r0
 8017130:	461a      	mov	r2, r3
 8017132:	4629      	mov	r1, r5
 8017134:	4620      	mov	r0, r4
 8017136:	f000 f8db 	bl	80172f0 <dhcp_option_long>
 801713a:	4603      	mov	r3, r0
 801713c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801713e:	89f8      	ldrh	r0, [r7, #14]
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	33f0      	adds	r3, #240	; 0xf0
 8017144:	69ba      	ldr	r2, [r7, #24]
 8017146:	4619      	mov	r1, r3
 8017148:	f000 fd8e 	bl	8017c68 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801714c:	4b13      	ldr	r3, [pc, #76]	; (801719c <dhcp_release_and_stop+0x12c>)
 801714e:	6818      	ldr	r0, [r3, #0]
 8017150:	f107 0210 	add.w	r2, r7, #16
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	9300      	str	r3, [sp, #0]
 8017158:	2343      	movs	r3, #67	; 0x43
 801715a:	69b9      	ldr	r1, [r7, #24]
 801715c:	f7fe fc8a 	bl	8015a74 <udp_sendto_if>
      pbuf_free(p_out);
 8017160:	69b8      	ldr	r0, [r7, #24]
 8017162:	f7f7 fda9 	bl	800ecb8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017166:	4b0e      	ldr	r3, [pc, #56]	; (80171a0 <dhcp_release_and_stop+0x130>)
 8017168:	4a0d      	ldr	r2, [pc, #52]	; (80171a0 <dhcp_release_and_stop+0x130>)
 801716a:	490d      	ldr	r1, [pc, #52]	; (80171a0 <dhcp_release_and_stop+0x130>)
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	f7f7 f903 	bl	800e378 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017172:	2100      	movs	r1, #0
 8017174:	69f8      	ldr	r0, [r7, #28]
 8017176:	f000 f815 	bl	80171a4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	791b      	ldrb	r3, [r3, #4]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d008      	beq.n	8017194 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017182:	f7fe ffc1 	bl	8016108 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8017186:	69fb      	ldr	r3, [r7, #28]
 8017188:	2200      	movs	r2, #0
 801718a:	711a      	strb	r2, [r3, #4]
 801718c:	e002      	b.n	8017194 <dhcp_release_and_stop+0x124>
    return;
 801718e:	bf00      	nop
 8017190:	e000      	b.n	8017194 <dhcp_release_and_stop+0x124>
    return;
 8017192:	bf00      	nop
  }
}
 8017194:	3720      	adds	r7, #32
 8017196:	46bd      	mov	sp, r7
 8017198:	bdb0      	pop	{r4, r5, r7, pc}
 801719a:	bf00      	nop
 801719c:	2000c9d4 	.word	0x2000c9d4
 80171a0:	0801f934 	.word	0x0801f934

080171a4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80171a4:	b480      	push	{r7}
 80171a6:	b083      	sub	sp, #12
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	460b      	mov	r3, r1
 80171ae:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	795b      	ldrb	r3, [r3, #5]
 80171b4:	78fa      	ldrb	r2, [r7, #3]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d008      	beq.n	80171cc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	78fa      	ldrb	r2, [r7, #3]
 80171be:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2200      	movs	r2, #0
 80171c4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2200      	movs	r2, #0
 80171ca:	811a      	strh	r2, [r3, #8]
  }
}
 80171cc:	bf00      	nop
 80171ce:	370c      	adds	r7, #12
 80171d0:	46bd      	mov	sp, r7
 80171d2:	bc80      	pop	{r7}
 80171d4:	4770      	bx	lr
	...

080171d8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6039      	str	r1, [r7, #0]
 80171e0:	4611      	mov	r1, r2
 80171e2:	461a      	mov	r2, r3
 80171e4:	4603      	mov	r3, r0
 80171e6:	80fb      	strh	r3, [r7, #6]
 80171e8:	460b      	mov	r3, r1
 80171ea:	717b      	strb	r3, [r7, #5]
 80171ec:	4613      	mov	r3, r2
 80171ee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80171f0:	88fa      	ldrh	r2, [r7, #6]
 80171f2:	793b      	ldrb	r3, [r7, #4]
 80171f4:	4413      	add	r3, r2
 80171f6:	3302      	adds	r3, #2
 80171f8:	2b44      	cmp	r3, #68	; 0x44
 80171fa:	d906      	bls.n	801720a <dhcp_option+0x32>
 80171fc:	4b0d      	ldr	r3, [pc, #52]	; (8017234 <dhcp_option+0x5c>)
 80171fe:	f240 529a 	movw	r2, #1434	; 0x59a
 8017202:	490d      	ldr	r1, [pc, #52]	; (8017238 <dhcp_option+0x60>)
 8017204:	480d      	ldr	r0, [pc, #52]	; (801723c <dhcp_option+0x64>)
 8017206:	f004 f9b9 	bl	801b57c <iprintf>
  options[options_out_len++] = option_type;
 801720a:	88fb      	ldrh	r3, [r7, #6]
 801720c:	1c5a      	adds	r2, r3, #1
 801720e:	80fa      	strh	r2, [r7, #6]
 8017210:	461a      	mov	r2, r3
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	4413      	add	r3, r2
 8017216:	797a      	ldrb	r2, [r7, #5]
 8017218:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801721a:	88fb      	ldrh	r3, [r7, #6]
 801721c:	1c5a      	adds	r2, r3, #1
 801721e:	80fa      	strh	r2, [r7, #6]
 8017220:	461a      	mov	r2, r3
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	4413      	add	r3, r2
 8017226:	793a      	ldrb	r2, [r7, #4]
 8017228:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801722a:	88fb      	ldrh	r3, [r7, #6]
}
 801722c:	4618      	mov	r0, r3
 801722e:	3708      	adds	r7, #8
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}
 8017234:	0801ed14 	.word	0x0801ed14
 8017238:	0801eea8 	.word	0x0801eea8
 801723c:	0801ed74 	.word	0x0801ed74

08017240 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	4603      	mov	r3, r0
 8017248:	6039      	str	r1, [r7, #0]
 801724a:	80fb      	strh	r3, [r7, #6]
 801724c:	4613      	mov	r3, r2
 801724e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017250:	88fb      	ldrh	r3, [r7, #6]
 8017252:	2b43      	cmp	r3, #67	; 0x43
 8017254:	d906      	bls.n	8017264 <dhcp_option_byte+0x24>
 8017256:	4b0a      	ldr	r3, [pc, #40]	; (8017280 <dhcp_option_byte+0x40>)
 8017258:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801725c:	4909      	ldr	r1, [pc, #36]	; (8017284 <dhcp_option_byte+0x44>)
 801725e:	480a      	ldr	r0, [pc, #40]	; (8017288 <dhcp_option_byte+0x48>)
 8017260:	f004 f98c 	bl	801b57c <iprintf>
  options[options_out_len++] = value;
 8017264:	88fb      	ldrh	r3, [r7, #6]
 8017266:	1c5a      	adds	r2, r3, #1
 8017268:	80fa      	strh	r2, [r7, #6]
 801726a:	461a      	mov	r2, r3
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	4413      	add	r3, r2
 8017270:	797a      	ldrb	r2, [r7, #5]
 8017272:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017274:	88fb      	ldrh	r3, [r7, #6]
}
 8017276:	4618      	mov	r0, r3
 8017278:	3708      	adds	r7, #8
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}
 801727e:	bf00      	nop
 8017280:	0801ed14 	.word	0x0801ed14
 8017284:	0801eeec 	.word	0x0801eeec
 8017288:	0801ed74 	.word	0x0801ed74

0801728c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	4603      	mov	r3, r0
 8017294:	6039      	str	r1, [r7, #0]
 8017296:	80fb      	strh	r3, [r7, #6]
 8017298:	4613      	mov	r3, r2
 801729a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801729c:	88fb      	ldrh	r3, [r7, #6]
 801729e:	3302      	adds	r3, #2
 80172a0:	2b44      	cmp	r3, #68	; 0x44
 80172a2:	d906      	bls.n	80172b2 <dhcp_option_short+0x26>
 80172a4:	4b0f      	ldr	r3, [pc, #60]	; (80172e4 <dhcp_option_short+0x58>)
 80172a6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80172aa:	490f      	ldr	r1, [pc, #60]	; (80172e8 <dhcp_option_short+0x5c>)
 80172ac:	480f      	ldr	r0, [pc, #60]	; (80172ec <dhcp_option_short+0x60>)
 80172ae:	f004 f965 	bl	801b57c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80172b2:	88bb      	ldrh	r3, [r7, #4]
 80172b4:	0a1b      	lsrs	r3, r3, #8
 80172b6:	b29a      	uxth	r2, r3
 80172b8:	88fb      	ldrh	r3, [r7, #6]
 80172ba:	1c59      	adds	r1, r3, #1
 80172bc:	80f9      	strh	r1, [r7, #6]
 80172be:	4619      	mov	r1, r3
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	440b      	add	r3, r1
 80172c4:	b2d2      	uxtb	r2, r2
 80172c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80172c8:	88fb      	ldrh	r3, [r7, #6]
 80172ca:	1c5a      	adds	r2, r3, #1
 80172cc:	80fa      	strh	r2, [r7, #6]
 80172ce:	461a      	mov	r2, r3
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	4413      	add	r3, r2
 80172d4:	88ba      	ldrh	r2, [r7, #4]
 80172d6:	b2d2      	uxtb	r2, r2
 80172d8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80172da:	88fb      	ldrh	r3, [r7, #6]
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3708      	adds	r7, #8
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}
 80172e4:	0801ed14 	.word	0x0801ed14
 80172e8:	0801ef24 	.word	0x0801ef24
 80172ec:	0801ed74 	.word	0x0801ed74

080172f0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	4603      	mov	r3, r0
 80172f8:	60b9      	str	r1, [r7, #8]
 80172fa:	607a      	str	r2, [r7, #4]
 80172fc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80172fe:	89fb      	ldrh	r3, [r7, #14]
 8017300:	3304      	adds	r3, #4
 8017302:	2b44      	cmp	r3, #68	; 0x44
 8017304:	d906      	bls.n	8017314 <dhcp_option_long+0x24>
 8017306:	4b19      	ldr	r3, [pc, #100]	; (801736c <dhcp_option_long+0x7c>)
 8017308:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801730c:	4918      	ldr	r1, [pc, #96]	; (8017370 <dhcp_option_long+0x80>)
 801730e:	4819      	ldr	r0, [pc, #100]	; (8017374 <dhcp_option_long+0x84>)
 8017310:	f004 f934 	bl	801b57c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	0e1a      	lsrs	r2, r3, #24
 8017318:	89fb      	ldrh	r3, [r7, #14]
 801731a:	1c59      	adds	r1, r3, #1
 801731c:	81f9      	strh	r1, [r7, #14]
 801731e:	4619      	mov	r1, r3
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	440b      	add	r3, r1
 8017324:	b2d2      	uxtb	r2, r2
 8017326:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	0c1a      	lsrs	r2, r3, #16
 801732c:	89fb      	ldrh	r3, [r7, #14]
 801732e:	1c59      	adds	r1, r3, #1
 8017330:	81f9      	strh	r1, [r7, #14]
 8017332:	4619      	mov	r1, r3
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	440b      	add	r3, r1
 8017338:	b2d2      	uxtb	r2, r2
 801733a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	0a1a      	lsrs	r2, r3, #8
 8017340:	89fb      	ldrh	r3, [r7, #14]
 8017342:	1c59      	adds	r1, r3, #1
 8017344:	81f9      	strh	r1, [r7, #14]
 8017346:	4619      	mov	r1, r3
 8017348:	68bb      	ldr	r3, [r7, #8]
 801734a:	440b      	add	r3, r1
 801734c:	b2d2      	uxtb	r2, r2
 801734e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017350:	89fb      	ldrh	r3, [r7, #14]
 8017352:	1c5a      	adds	r2, r3, #1
 8017354:	81fa      	strh	r2, [r7, #14]
 8017356:	461a      	mov	r2, r3
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	4413      	add	r3, r2
 801735c:	687a      	ldr	r2, [r7, #4]
 801735e:	b2d2      	uxtb	r2, r2
 8017360:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017362:	89fb      	ldrh	r3, [r7, #14]
}
 8017364:	4618      	mov	r0, r3
 8017366:	3710      	adds	r7, #16
 8017368:	46bd      	mov	sp, r7
 801736a:	bd80      	pop	{r7, pc}
 801736c:	0801ed14 	.word	0x0801ed14
 8017370:	0801ef60 	.word	0x0801ef60
 8017374:	0801ed74 	.word	0x0801ed74

08017378 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b090      	sub	sp, #64	; 0x40
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017382:	2300      	movs	r3, #0
 8017384:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8017386:	2300      	movs	r3, #0
 8017388:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801738a:	2208      	movs	r2, #8
 801738c:	2100      	movs	r1, #0
 801738e:	48b5      	ldr	r0, [pc, #724]	; (8017664 <dhcp_parse_reply+0x2ec>)
 8017390:	f004 f80e 	bl	801b3b0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	895b      	ldrh	r3, [r3, #10]
 8017398:	2b2b      	cmp	r3, #43	; 0x2b
 801739a:	d802      	bhi.n	80173a2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801739c:	f06f 0301 	mvn.w	r3, #1
 80173a0:	e2a7      	b.n	80178f2 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80173a8:	23f0      	movs	r3, #240	; 0xf0
 80173aa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	891b      	ldrh	r3, [r3, #8]
 80173b0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80173b6:	e00c      	b.n	80173d2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80173b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ba:	895b      	ldrh	r3, [r3, #10]
 80173bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80173be:	1ad3      	subs	r3, r2, r3
 80173c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80173c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c4:	895b      	ldrh	r3, [r3, #10]
 80173c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80173c8:	1ad3      	subs	r3, r2, r3
 80173ca:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80173cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80173d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d004      	beq.n	80173e2 <dhcp_parse_reply+0x6a>
 80173d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173da:	895b      	ldrh	r3, [r3, #10]
 80173dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80173de:	429a      	cmp	r2, r3
 80173e0:	d2ea      	bcs.n	80173b8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80173e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d102      	bne.n	80173ee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80173e8:	f06f 0301 	mvn.w	r3, #1
 80173ec:	e281      	b.n	80178f2 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80173ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80173f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80173f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80173f4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80173f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80173fc:	e239      	b.n	8017872 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80173fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017402:	4413      	add	r3, r2
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8017408:	2300      	movs	r3, #0
 801740a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801740e:	f04f 33ff 	mov.w	r3, #4294967295
 8017412:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8017414:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017416:	3302      	adds	r3, #2
 8017418:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801741a:	8bfa      	ldrh	r2, [r7, #30]
 801741c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801741e:	429a      	cmp	r2, r3
 8017420:	d202      	bcs.n	8017428 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8017422:	f06f 0301 	mvn.w	r3, #1
 8017426:	e264      	b.n	80178f2 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801742a:	3301      	adds	r3, #1
 801742c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801742e:	8952      	ldrh	r2, [r2, #10]
 8017430:	4293      	cmp	r3, r2
 8017432:	da07      	bge.n	8017444 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8017434:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017436:	3301      	adds	r3, #1
 8017438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801743a:	4413      	add	r3, r2
 801743c:	781b      	ldrb	r3, [r3, #0]
 801743e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017442:	e00b      	b.n	801745c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d004      	beq.n	8017456 <dhcp_parse_reply+0xde>
 801744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	685b      	ldr	r3, [r3, #4]
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	e000      	b.n	8017458 <dhcp_parse_reply+0xe0>
 8017456:	2300      	movs	r3, #0
 8017458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801745c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8017464:	7dfb      	ldrb	r3, [r7, #23]
 8017466:	2b3b      	cmp	r3, #59	; 0x3b
 8017468:	f200 812c 	bhi.w	80176c4 <dhcp_parse_reply+0x34c>
 801746c:	a201      	add	r2, pc, #4	; (adr r2, 8017474 <dhcp_parse_reply+0xfc>)
 801746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017472:	bf00      	nop
 8017474:	08017565 	.word	0x08017565
 8017478:	08017575 	.word	0x08017575
 801747c:	080176c5 	.word	0x080176c5
 8017480:	08017597 	.word	0x08017597
 8017484:	080176c5 	.word	0x080176c5
 8017488:	080176c5 	.word	0x080176c5
 801748c:	080176c5 	.word	0x080176c5
 8017490:	080176c5 	.word	0x080176c5
 8017494:	080176c5 	.word	0x080176c5
 8017498:	080176c5 	.word	0x080176c5
 801749c:	080176c5 	.word	0x080176c5
 80174a0:	080176c5 	.word	0x080176c5
 80174a4:	080176c5 	.word	0x080176c5
 80174a8:	080176c5 	.word	0x080176c5
 80174ac:	080176c5 	.word	0x080176c5
 80174b0:	080176c5 	.word	0x080176c5
 80174b4:	080176c5 	.word	0x080176c5
 80174b8:	080176c5 	.word	0x080176c5
 80174bc:	080176c5 	.word	0x080176c5
 80174c0:	080176c5 	.word	0x080176c5
 80174c4:	080176c5 	.word	0x080176c5
 80174c8:	080176c5 	.word	0x080176c5
 80174cc:	080176c5 	.word	0x080176c5
 80174d0:	080176c5 	.word	0x080176c5
 80174d4:	080176c5 	.word	0x080176c5
 80174d8:	080176c5 	.word	0x080176c5
 80174dc:	080176c5 	.word	0x080176c5
 80174e0:	080176c5 	.word	0x080176c5
 80174e4:	080176c5 	.word	0x080176c5
 80174e8:	080176c5 	.word	0x080176c5
 80174ec:	080176c5 	.word	0x080176c5
 80174f0:	080176c5 	.word	0x080176c5
 80174f4:	080176c5 	.word	0x080176c5
 80174f8:	080176c5 	.word	0x080176c5
 80174fc:	080176c5 	.word	0x080176c5
 8017500:	080176c5 	.word	0x080176c5
 8017504:	080176c5 	.word	0x080176c5
 8017508:	080176c5 	.word	0x080176c5
 801750c:	080176c5 	.word	0x080176c5
 8017510:	080176c5 	.word	0x080176c5
 8017514:	080176c5 	.word	0x080176c5
 8017518:	080176c5 	.word	0x080176c5
 801751c:	080176c5 	.word	0x080176c5
 8017520:	080176c5 	.word	0x080176c5
 8017524:	080176c5 	.word	0x080176c5
 8017528:	080176c5 	.word	0x080176c5
 801752c:	080176c5 	.word	0x080176c5
 8017530:	080176c5 	.word	0x080176c5
 8017534:	080176c5 	.word	0x080176c5
 8017538:	080176c5 	.word	0x080176c5
 801753c:	080176c5 	.word	0x080176c5
 8017540:	080175c3 	.word	0x080175c3
 8017544:	080175e5 	.word	0x080175e5
 8017548:	08017621 	.word	0x08017621
 801754c:	08017643 	.word	0x08017643
 8017550:	080176c5 	.word	0x080176c5
 8017554:	080176c5 	.word	0x080176c5
 8017558:	080176c5 	.word	0x080176c5
 801755c:	08017681 	.word	0x08017681
 8017560:	080176a3 	.word	0x080176a3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017564:	2300      	movs	r3, #0
 8017566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801756a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801756e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8017572:	e0ab      	b.n	80176cc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017578:	2b04      	cmp	r3, #4
 801757a:	d009      	beq.n	8017590 <dhcp_parse_reply+0x218>
 801757c:	4b3a      	ldr	r3, [pc, #232]	; (8017668 <dhcp_parse_reply+0x2f0>)
 801757e:	f240 622e 	movw	r2, #1582	; 0x62e
 8017582:	493a      	ldr	r1, [pc, #232]	; (801766c <dhcp_parse_reply+0x2f4>)
 8017584:	483a      	ldr	r0, [pc, #232]	; (8017670 <dhcp_parse_reply+0x2f8>)
 8017586:	f003 fff9 	bl	801b57c <iprintf>
 801758a:	f06f 0305 	mvn.w	r3, #5
 801758e:	e1b0      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017590:	2306      	movs	r3, #6
 8017592:	623b      	str	r3, [r7, #32]
        break;
 8017594:	e09a      	b.n	80176cc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017596:	2304      	movs	r3, #4
 8017598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801759c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80175a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d209      	bcs.n	80175bc <dhcp_parse_reply+0x244>
 80175a8:	4b2f      	ldr	r3, [pc, #188]	; (8017668 <dhcp_parse_reply+0x2f0>)
 80175aa:	f240 6233 	movw	r2, #1587	; 0x633
 80175ae:	4931      	ldr	r1, [pc, #196]	; (8017674 <dhcp_parse_reply+0x2fc>)
 80175b0:	482f      	ldr	r0, [pc, #188]	; (8017670 <dhcp_parse_reply+0x2f8>)
 80175b2:	f003 ffe3 	bl	801b57c <iprintf>
 80175b6:	f06f 0305 	mvn.w	r3, #5
 80175ba:	e19a      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80175bc:	2307      	movs	r3, #7
 80175be:	623b      	str	r3, [r7, #32]
        break;
 80175c0:	e084      	b.n	80176cc <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80175c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175c6:	2b04      	cmp	r3, #4
 80175c8:	d009      	beq.n	80175de <dhcp_parse_reply+0x266>
 80175ca:	4b27      	ldr	r3, [pc, #156]	; (8017668 <dhcp_parse_reply+0x2f0>)
 80175cc:	f240 6241 	movw	r2, #1601	; 0x641
 80175d0:	4926      	ldr	r1, [pc, #152]	; (801766c <dhcp_parse_reply+0x2f4>)
 80175d2:	4827      	ldr	r0, [pc, #156]	; (8017670 <dhcp_parse_reply+0x2f8>)
 80175d4:	f003 ffd2 	bl	801b57c <iprintf>
 80175d8:	f06f 0305 	mvn.w	r3, #5
 80175dc:	e189      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80175de:	2303      	movs	r3, #3
 80175e0:	623b      	str	r3, [r7, #32]
        break;
 80175e2:	e073      	b.n	80176cc <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80175e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175e8:	2b01      	cmp	r3, #1
 80175ea:	d009      	beq.n	8017600 <dhcp_parse_reply+0x288>
 80175ec:	4b1e      	ldr	r3, [pc, #120]	; (8017668 <dhcp_parse_reply+0x2f0>)
 80175ee:	f240 624f 	movw	r2, #1615	; 0x64f
 80175f2:	4921      	ldr	r1, [pc, #132]	; (8017678 <dhcp_parse_reply+0x300>)
 80175f4:	481e      	ldr	r0, [pc, #120]	; (8017670 <dhcp_parse_reply+0x2f8>)
 80175f6:	f003 ffc1 	bl	801b57c <iprintf>
 80175fa:	f06f 0305 	mvn.w	r3, #5
 80175fe:	e178      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017602:	2bf0      	cmp	r3, #240	; 0xf0
 8017604:	d009      	beq.n	801761a <dhcp_parse_reply+0x2a2>
 8017606:	4b18      	ldr	r3, [pc, #96]	; (8017668 <dhcp_parse_reply+0x2f0>)
 8017608:	f240 6251 	movw	r2, #1617	; 0x651
 801760c:	491b      	ldr	r1, [pc, #108]	; (801767c <dhcp_parse_reply+0x304>)
 801760e:	4818      	ldr	r0, [pc, #96]	; (8017670 <dhcp_parse_reply+0x2f8>)
 8017610:	f003 ffb4 	bl	801b57c <iprintf>
 8017614:	f06f 0305 	mvn.w	r3, #5
 8017618:	e16b      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801761a:	2300      	movs	r3, #0
 801761c:	623b      	str	r3, [r7, #32]
        break;
 801761e:	e055      	b.n	80176cc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017624:	2b01      	cmp	r3, #1
 8017626:	d009      	beq.n	801763c <dhcp_parse_reply+0x2c4>
 8017628:	4b0f      	ldr	r3, [pc, #60]	; (8017668 <dhcp_parse_reply+0x2f0>)
 801762a:	f240 6255 	movw	r2, #1621	; 0x655
 801762e:	4912      	ldr	r1, [pc, #72]	; (8017678 <dhcp_parse_reply+0x300>)
 8017630:	480f      	ldr	r0, [pc, #60]	; (8017670 <dhcp_parse_reply+0x2f8>)
 8017632:	f003 ffa3 	bl	801b57c <iprintf>
 8017636:	f06f 0305 	mvn.w	r3, #5
 801763a:	e15a      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801763c:	2301      	movs	r3, #1
 801763e:	623b      	str	r3, [r7, #32]
        break;
 8017640:	e044      	b.n	80176cc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017646:	2b04      	cmp	r3, #4
 8017648:	d009      	beq.n	801765e <dhcp_parse_reply+0x2e6>
 801764a:	4b07      	ldr	r3, [pc, #28]	; (8017668 <dhcp_parse_reply+0x2f0>)
 801764c:	f240 6259 	movw	r2, #1625	; 0x659
 8017650:	4906      	ldr	r1, [pc, #24]	; (801766c <dhcp_parse_reply+0x2f4>)
 8017652:	4807      	ldr	r0, [pc, #28]	; (8017670 <dhcp_parse_reply+0x2f8>)
 8017654:	f003 ff92 	bl	801b57c <iprintf>
 8017658:	f06f 0305 	mvn.w	r3, #5
 801765c:	e149      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801765e:	2302      	movs	r3, #2
 8017660:	623b      	str	r3, [r7, #32]
        break;
 8017662:	e033      	b.n	80176cc <dhcp_parse_reply+0x354>
 8017664:	2000c9cc 	.word	0x2000c9cc
 8017668:	0801ed14 	.word	0x0801ed14
 801766c:	0801ef9c 	.word	0x0801ef9c
 8017670:	0801ed74 	.word	0x0801ed74
 8017674:	0801efa8 	.word	0x0801efa8
 8017678:	0801efbc 	.word	0x0801efbc
 801767c:	0801efc8 	.word	0x0801efc8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017684:	2b04      	cmp	r3, #4
 8017686:	d009      	beq.n	801769c <dhcp_parse_reply+0x324>
 8017688:	4b9c      	ldr	r3, [pc, #624]	; (80178fc <dhcp_parse_reply+0x584>)
 801768a:	f240 625d 	movw	r2, #1629	; 0x65d
 801768e:	499c      	ldr	r1, [pc, #624]	; (8017900 <dhcp_parse_reply+0x588>)
 8017690:	489c      	ldr	r0, [pc, #624]	; (8017904 <dhcp_parse_reply+0x58c>)
 8017692:	f003 ff73 	bl	801b57c <iprintf>
 8017696:	f06f 0305 	mvn.w	r3, #5
 801769a:	e12a      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801769c:	2304      	movs	r3, #4
 801769e:	623b      	str	r3, [r7, #32]
        break;
 80176a0:	e014      	b.n	80176cc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80176a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176a6:	2b04      	cmp	r3, #4
 80176a8:	d009      	beq.n	80176be <dhcp_parse_reply+0x346>
 80176aa:	4b94      	ldr	r3, [pc, #592]	; (80178fc <dhcp_parse_reply+0x584>)
 80176ac:	f240 6261 	movw	r2, #1633	; 0x661
 80176b0:	4993      	ldr	r1, [pc, #588]	; (8017900 <dhcp_parse_reply+0x588>)
 80176b2:	4894      	ldr	r0, [pc, #592]	; (8017904 <dhcp_parse_reply+0x58c>)
 80176b4:	f003 ff62 	bl	801b57c <iprintf>
 80176b8:	f06f 0305 	mvn.w	r3, #5
 80176bc:	e119      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80176be:	2305      	movs	r3, #5
 80176c0:	623b      	str	r3, [r7, #32]
        break;
 80176c2:	e003      	b.n	80176cc <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80176c4:	2300      	movs	r3, #0
 80176c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80176ca:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80176cc:	7dfb      	ldrb	r3, [r7, #23]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d103      	bne.n	80176da <dhcp_parse_reply+0x362>
      offset++;
 80176d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80176d4:	3301      	adds	r3, #1
 80176d6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80176d8:	e0a1      	b.n	801781e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80176da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80176dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176e0:	4413      	add	r3, r2
 80176e2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80176e6:	4293      	cmp	r3, r2
 80176e8:	dd02      	ble.n	80176f0 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80176ea:	f06f 0301 	mvn.w	r3, #1
 80176ee:	e100      	b.n	80178f2 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80176f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176f4:	b29a      	uxth	r2, r3
 80176f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80176f8:	4413      	add	r3, r2
 80176fa:	b29b      	uxth	r3, r3
 80176fc:	3302      	adds	r3, #2
 80176fe:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8017700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017704:	2b00      	cmp	r3, #0
 8017706:	f000 808a 	beq.w	801781e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801770a:	2300      	movs	r3, #0
 801770c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801770e:	6a3b      	ldr	r3, [r7, #32]
 8017710:	2b00      	cmp	r3, #0
 8017712:	db02      	blt.n	801771a <dhcp_parse_reply+0x3a2>
 8017714:	6a3b      	ldr	r3, [r7, #32]
 8017716:	2b07      	cmp	r3, #7
 8017718:	dd06      	ble.n	8017728 <dhcp_parse_reply+0x3b0>
 801771a:	4b78      	ldr	r3, [pc, #480]	; (80178fc <dhcp_parse_reply+0x584>)
 801771c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017720:	4979      	ldr	r1, [pc, #484]	; (8017908 <dhcp_parse_reply+0x590>)
 8017722:	4878      	ldr	r0, [pc, #480]	; (8017904 <dhcp_parse_reply+0x58c>)
 8017724:	f003 ff2a 	bl	801b57c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017728:	4a78      	ldr	r2, [pc, #480]	; (801790c <dhcp_parse_reply+0x594>)
 801772a:	6a3b      	ldr	r3, [r7, #32]
 801772c:	4413      	add	r3, r2
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d174      	bne.n	801781e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8017734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017738:	2b04      	cmp	r3, #4
 801773a:	bf28      	it	cs
 801773c:	2304      	movcs	r3, #4
 801773e:	b2db      	uxtb	r3, r3
 8017740:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017742:	8bfb      	ldrh	r3, [r7, #30]
 8017744:	8aba      	ldrh	r2, [r7, #20]
 8017746:	f107 0108 	add.w	r1, r7, #8
 801774a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801774c:	f7f7 fcb8 	bl	800f0c0 <pbuf_copy_partial>
 8017750:	4603      	mov	r3, r0
 8017752:	461a      	mov	r2, r3
 8017754:	8abb      	ldrh	r3, [r7, #20]
 8017756:	4293      	cmp	r3, r2
 8017758:	d002      	beq.n	8017760 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801775a:	f06f 0301 	mvn.w	r3, #1
 801775e:	e0c8      	b.n	80178f2 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8017760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017764:	2b04      	cmp	r3, #4
 8017766:	d933      	bls.n	80177d0 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017768:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801776c:	f003 0303 	and.w	r3, r3, #3
 8017770:	b2db      	uxtb	r3, r3
 8017772:	2b00      	cmp	r3, #0
 8017774:	d009      	beq.n	801778a <dhcp_parse_reply+0x412>
 8017776:	4b61      	ldr	r3, [pc, #388]	; (80178fc <dhcp_parse_reply+0x584>)
 8017778:	f240 6281 	movw	r2, #1665	; 0x681
 801777c:	4964      	ldr	r1, [pc, #400]	; (8017910 <dhcp_parse_reply+0x598>)
 801777e:	4861      	ldr	r0, [pc, #388]	; (8017904 <dhcp_parse_reply+0x58c>)
 8017780:	f003 fefc 	bl	801b57c <iprintf>
 8017784:	f06f 0305 	mvn.w	r3, #5
 8017788:	e0b3      	b.n	80178f2 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801778a:	4a60      	ldr	r2, [pc, #384]	; (801790c <dhcp_parse_reply+0x594>)
 801778c:	6a3b      	ldr	r3, [r7, #32]
 801778e:	4413      	add	r3, r2
 8017790:	2201      	movs	r2, #1
 8017792:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	4618      	mov	r0, r3
 8017798:	f7f5 fe3e 	bl	800d418 <lwip_htonl>
 801779c:	4602      	mov	r2, r0
 801779e:	495d      	ldr	r1, [pc, #372]	; (8017914 <dhcp_parse_reply+0x59c>)
 80177a0:	6a3b      	ldr	r3, [r7, #32]
 80177a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80177a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80177aa:	3b04      	subs	r3, #4
 80177ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80177b0:	8bfb      	ldrh	r3, [r7, #30]
 80177b2:	3304      	adds	r3, #4
 80177b4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80177b6:	8a7a      	ldrh	r2, [r7, #18]
 80177b8:	8bfb      	ldrh	r3, [r7, #30]
 80177ba:	429a      	cmp	r2, r3
 80177bc:	d202      	bcs.n	80177c4 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80177be:	f06f 0301 	mvn.w	r3, #1
 80177c2:	e096      	b.n	80178f2 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80177c4:	8a7b      	ldrh	r3, [r7, #18]
 80177c6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80177c8:	6a3b      	ldr	r3, [r7, #32]
 80177ca:	3301      	adds	r3, #1
 80177cc:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80177ce:	e79e      	b.n	801770e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80177d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80177d4:	2b04      	cmp	r3, #4
 80177d6:	d106      	bne.n	80177e6 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	4618      	mov	r0, r3
 80177dc:	f7f5 fe1c 	bl	800d418 <lwip_htonl>
 80177e0:	4603      	mov	r3, r0
 80177e2:	60bb      	str	r3, [r7, #8]
 80177e4:	e011      	b.n	801780a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80177e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80177ea:	2b01      	cmp	r3, #1
 80177ec:	d009      	beq.n	8017802 <dhcp_parse_reply+0x48a>
 80177ee:	4b43      	ldr	r3, [pc, #268]	; (80178fc <dhcp_parse_reply+0x584>)
 80177f0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80177f4:	4948      	ldr	r1, [pc, #288]	; (8017918 <dhcp_parse_reply+0x5a0>)
 80177f6:	4843      	ldr	r0, [pc, #268]	; (8017904 <dhcp_parse_reply+0x58c>)
 80177f8:	f003 fec0 	bl	801b57c <iprintf>
 80177fc:	f06f 0305 	mvn.w	r3, #5
 8017800:	e077      	b.n	80178f2 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8017802:	f107 0308 	add.w	r3, r7, #8
 8017806:	781b      	ldrb	r3, [r3, #0]
 8017808:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801780a:	4a40      	ldr	r2, [pc, #256]	; (801790c <dhcp_parse_reply+0x594>)
 801780c:	6a3b      	ldr	r3, [r7, #32]
 801780e:	4413      	add	r3, r2
 8017810:	2201      	movs	r2, #1
 8017812:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017814:	68ba      	ldr	r2, [r7, #8]
 8017816:	493f      	ldr	r1, [pc, #252]	; (8017914 <dhcp_parse_reply+0x59c>)
 8017818:	6a3b      	ldr	r3, [r7, #32]
 801781a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017820:	895b      	ldrh	r3, [r3, #10]
 8017822:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017824:	429a      	cmp	r2, r3
 8017826:	d324      	bcc.n	8017872 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8017828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782a:	895b      	ldrh	r3, [r3, #10]
 801782c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017834:	895b      	ldrh	r3, [r3, #10]
 8017836:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017838:	1ad3      	subs	r3, r2, r3
 801783a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801783c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801783e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017840:	429a      	cmp	r2, r3
 8017842:	d213      	bcs.n	801786c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8017844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784c:	2b00      	cmp	r3, #0
 801784e:	d109      	bne.n	8017864 <dhcp_parse_reply+0x4ec>
 8017850:	4b2a      	ldr	r3, [pc, #168]	; (80178fc <dhcp_parse_reply+0x584>)
 8017852:	f240 629d 	movw	r2, #1693	; 0x69d
 8017856:	4931      	ldr	r1, [pc, #196]	; (801791c <dhcp_parse_reply+0x5a4>)
 8017858:	482a      	ldr	r0, [pc, #168]	; (8017904 <dhcp_parse_reply+0x58c>)
 801785a:	f003 fe8f 	bl	801b57c <iprintf>
 801785e:	f06f 0305 	mvn.w	r3, #5
 8017862:	e046      	b.n	80178f2 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8017864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017866:	685b      	ldr	r3, [r3, #4]
 8017868:	63fb      	str	r3, [r7, #60]	; 0x3c
 801786a:	e002      	b.n	8017872 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801786c:	f06f 0301 	mvn.w	r3, #1
 8017870:	e03f      	b.n	80178f2 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017874:	2b00      	cmp	r3, #0
 8017876:	d00a      	beq.n	801788e <dhcp_parse_reply+0x516>
 8017878:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801787a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801787c:	429a      	cmp	r2, r3
 801787e:	d206      	bcs.n	801788e <dhcp_parse_reply+0x516>
 8017880:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017884:	4413      	add	r3, r2
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	2bff      	cmp	r3, #255	; 0xff
 801788a:	f47f adb8 	bne.w	80173fe <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801788e:	4b1f      	ldr	r3, [pc, #124]	; (801790c <dhcp_parse_reply+0x594>)
 8017890:	781b      	ldrb	r3, [r3, #0]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d018      	beq.n	80178c8 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017896:	4b1f      	ldr	r3, [pc, #124]	; (8017914 <dhcp_parse_reply+0x59c>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801789c:	4b1b      	ldr	r3, [pc, #108]	; (801790c <dhcp_parse_reply+0x594>)
 801789e:	2200      	movs	r2, #0
 80178a0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	d102      	bne.n	80178ae <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80178a8:	2301      	movs	r3, #1
 80178aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80178ac:	e00c      	b.n	80178c8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	2b02      	cmp	r3, #2
 80178b2:	d102      	bne.n	80178ba <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80178b4:	2301      	movs	r3, #1
 80178b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80178b8:	e006      	b.n	80178c8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	2b03      	cmp	r3, #3
 80178be:	d103      	bne.n	80178c8 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80178c0:	2301      	movs	r3, #1
 80178c2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80178c4:	2301      	movs	r3, #1
 80178c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80178c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d006      	beq.n	80178dc <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80178ce:	2300      	movs	r3, #0
 80178d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80178d2:	236c      	movs	r3, #108	; 0x6c
 80178d4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80178d6:	23ec      	movs	r3, #236	; 0xec
 80178d8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80178da:	e56a      	b.n	80173b2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80178dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d006      	beq.n	80178f0 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80178e2:	2300      	movs	r3, #0
 80178e4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80178e6:	232c      	movs	r3, #44	; 0x2c
 80178e8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80178ea:	236c      	movs	r3, #108	; 0x6c
 80178ec:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80178ee:	e560      	b.n	80173b2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80178f0:	2300      	movs	r3, #0
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3740      	adds	r7, #64	; 0x40
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}
 80178fa:	bf00      	nop
 80178fc:	0801ed14 	.word	0x0801ed14
 8017900:	0801ef9c 	.word	0x0801ef9c
 8017904:	0801ed74 	.word	0x0801ed74
 8017908:	0801efe0 	.word	0x0801efe0
 801790c:	2000c9cc 	.word	0x2000c9cc
 8017910:	0801eff4 	.word	0x0801eff4
 8017914:	2000c9ac 	.word	0x2000c9ac
 8017918:	0801f00c 	.word	0x0801f00c
 801791c:	0801f020 	.word	0x0801f020

08017920 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b08a      	sub	sp, #40	; 0x28
 8017924:	af00      	add	r7, sp, #0
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	607a      	str	r2, [r7, #4]
 801792c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801792e:	4b60      	ldr	r3, [pc, #384]	; (8017ab0 <dhcp_recv+0x190>)
 8017930:	685b      	ldr	r3, [r3, #4]
 8017932:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017934:	6a3b      	ldr	r3, [r7, #32]
 8017936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017938:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017940:	69fb      	ldr	r3, [r7, #28]
 8017942:	2b00      	cmp	r3, #0
 8017944:	f000 809d 	beq.w	8017a82 <dhcp_recv+0x162>
 8017948:	69fb      	ldr	r3, [r7, #28]
 801794a:	791b      	ldrb	r3, [r3, #4]
 801794c:	2b00      	cmp	r3, #0
 801794e:	f000 8098 	beq.w	8017a82 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	895b      	ldrh	r3, [r3, #10]
 8017956:	2b2b      	cmp	r3, #43	; 0x2b
 8017958:	f240 8095 	bls.w	8017a86 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801795c:	69bb      	ldr	r3, [r7, #24]
 801795e:	781b      	ldrb	r3, [r3, #0]
 8017960:	2b02      	cmp	r3, #2
 8017962:	f040 8092 	bne.w	8017a8a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017966:	2300      	movs	r3, #0
 8017968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801796c:	e012      	b.n	8017994 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801796e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017972:	6a3a      	ldr	r2, [r7, #32]
 8017974:	4413      	add	r3, r2
 8017976:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801797a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801797e:	69b9      	ldr	r1, [r7, #24]
 8017980:	440b      	add	r3, r1
 8017982:	7f1b      	ldrb	r3, [r3, #28]
 8017984:	429a      	cmp	r2, r3
 8017986:	f040 8082 	bne.w	8017a8e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801798a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801798e:	3301      	adds	r3, #1
 8017990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017994:	6a3b      	ldr	r3, [r7, #32]
 8017996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801799a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801799e:	429a      	cmp	r2, r3
 80179a0:	d203      	bcs.n	80179aa <dhcp_recv+0x8a>
 80179a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179a6:	2b05      	cmp	r3, #5
 80179a8:	d9e1      	bls.n	801796e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80179aa:	69bb      	ldr	r3, [r7, #24]
 80179ac:	685b      	ldr	r3, [r3, #4]
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7f5 fd32 	bl	800d418 <lwip_htonl>
 80179b4:	4602      	mov	r2, r0
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d169      	bne.n	8017a92 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80179be:	69f9      	ldr	r1, [r7, #28]
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f7ff fcd9 	bl	8017378 <dhcp_parse_reply>
 80179c6:	4603      	mov	r3, r0
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d164      	bne.n	8017a96 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80179cc:	4b39      	ldr	r3, [pc, #228]	; (8017ab4 <dhcp_recv+0x194>)
 80179ce:	785b      	ldrb	r3, [r3, #1]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d062      	beq.n	8017a9a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	685b      	ldr	r3, [r3, #4]
 80179d8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80179da:	4b37      	ldr	r3, [pc, #220]	; (8017ab8 <dhcp_recv+0x198>)
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80179e0:	7cfb      	ldrb	r3, [r7, #19]
 80179e2:	2b05      	cmp	r3, #5
 80179e4:	d12a      	bne.n	8017a3c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80179e6:	69fb      	ldr	r3, [r7, #28]
 80179e8:	795b      	ldrb	r3, [r3, #5]
 80179ea:	2b01      	cmp	r3, #1
 80179ec:	d112      	bne.n	8017a14 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80179ee:	6979      	ldr	r1, [r7, #20]
 80179f0:	6a38      	ldr	r0, [r7, #32]
 80179f2:	f7fe fe53 	bl	801669c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80179f6:	6a3b      	ldr	r3, [r7, #32]
 80179f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179fc:	f003 0308 	and.w	r3, r3, #8
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d003      	beq.n	8017a0c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017a04:	6a38      	ldr	r0, [r7, #32]
 8017a06:	f7fe fbc3 	bl	8016190 <dhcp_check>
 8017a0a:	e049      	b.n	8017aa0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017a0c:	6a38      	ldr	r0, [r7, #32]
 8017a0e:	f7ff f867 	bl	8016ae0 <dhcp_bind>
 8017a12:	e045      	b.n	8017aa0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017a14:	69fb      	ldr	r3, [r7, #28]
 8017a16:	795b      	ldrb	r3, [r3, #5]
 8017a18:	2b03      	cmp	r3, #3
 8017a1a:	d007      	beq.n	8017a2c <dhcp_recv+0x10c>
 8017a1c:	69fb      	ldr	r3, [r7, #28]
 8017a1e:	795b      	ldrb	r3, [r3, #5]
 8017a20:	2b04      	cmp	r3, #4
 8017a22:	d003      	beq.n	8017a2c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017a24:	69fb      	ldr	r3, [r7, #28]
 8017a26:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017a28:	2b05      	cmp	r3, #5
 8017a2a:	d139      	bne.n	8017aa0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8017a2c:	6979      	ldr	r1, [r7, #20]
 8017a2e:	6a38      	ldr	r0, [r7, #32]
 8017a30:	f7fe fe34 	bl	801669c <dhcp_handle_ack>
      dhcp_bind(netif);
 8017a34:	6a38      	ldr	r0, [r7, #32]
 8017a36:	f7ff f853 	bl	8016ae0 <dhcp_bind>
 8017a3a:	e031      	b.n	8017aa0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017a3c:	7cfb      	ldrb	r3, [r7, #19]
 8017a3e:	2b06      	cmp	r3, #6
 8017a40:	d113      	bne.n	8017a6a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017a42:	69fb      	ldr	r3, [r7, #28]
 8017a44:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017a46:	2b03      	cmp	r3, #3
 8017a48:	d00b      	beq.n	8017a62 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017a4a:	69fb      	ldr	r3, [r7, #28]
 8017a4c:	795b      	ldrb	r3, [r3, #5]
 8017a4e:	2b01      	cmp	r3, #1
 8017a50:	d007      	beq.n	8017a62 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017a52:	69fb      	ldr	r3, [r7, #28]
 8017a54:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017a56:	2b04      	cmp	r3, #4
 8017a58:	d003      	beq.n	8017a62 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017a5a:	69fb      	ldr	r3, [r7, #28]
 8017a5c:	795b      	ldrb	r3, [r3, #5]
 8017a5e:	2b05      	cmp	r3, #5
 8017a60:	d103      	bne.n	8017a6a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017a62:	6a38      	ldr	r0, [r7, #32]
 8017a64:	f7fe fb7a 	bl	801615c <dhcp_handle_nak>
 8017a68:	e01a      	b.n	8017aa0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017a6a:	7cfb      	ldrb	r3, [r7, #19]
 8017a6c:	2b02      	cmp	r3, #2
 8017a6e:	d116      	bne.n	8017a9e <dhcp_recv+0x17e>
 8017a70:	69fb      	ldr	r3, [r7, #28]
 8017a72:	795b      	ldrb	r3, [r3, #5]
 8017a74:	2b06      	cmp	r3, #6
 8017a76:	d112      	bne.n	8017a9e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017a78:	6979      	ldr	r1, [r7, #20]
 8017a7a:	6a38      	ldr	r0, [r7, #32]
 8017a7c:	f7fe fbbc 	bl	80161f8 <dhcp_handle_offer>
 8017a80:	e00e      	b.n	8017aa0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017a82:	bf00      	nop
 8017a84:	e00c      	b.n	8017aa0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017a86:	bf00      	nop
 8017a88:	e00a      	b.n	8017aa0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017a8a:	bf00      	nop
 8017a8c:	e008      	b.n	8017aa0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8017a8e:	bf00      	nop
 8017a90:	e006      	b.n	8017aa0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017a92:	bf00      	nop
 8017a94:	e004      	b.n	8017aa0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017a96:	bf00      	nop
 8017a98:	e002      	b.n	8017aa0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8017a9a:	bf00      	nop
 8017a9c:	e000      	b.n	8017aa0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8017a9e:	bf00      	nop
  pbuf_free(p);
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	f7f7 f909 	bl	800ecb8 <pbuf_free>
}
 8017aa6:	bf00      	nop
 8017aa8:	3728      	adds	r7, #40	; 0x28
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	2000982c 	.word	0x2000982c
 8017ab4:	2000c9cc 	.word	0x2000c9cc
 8017ab8:	2000c9ac 	.word	0x2000c9ac

08017abc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b088      	sub	sp, #32
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	60f8      	str	r0, [r7, #12]
 8017ac4:	60b9      	str	r1, [r7, #8]
 8017ac6:	603b      	str	r3, [r7, #0]
 8017ac8:	4613      	mov	r3, r2
 8017aca:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d108      	bne.n	8017ae4 <dhcp_create_msg+0x28>
 8017ad2:	4b5f      	ldr	r3, [pc, #380]	; (8017c50 <dhcp_create_msg+0x194>)
 8017ad4:	f240 7269 	movw	r2, #1897	; 0x769
 8017ad8:	495e      	ldr	r1, [pc, #376]	; (8017c54 <dhcp_create_msg+0x198>)
 8017ada:	485f      	ldr	r0, [pc, #380]	; (8017c58 <dhcp_create_msg+0x19c>)
 8017adc:	f003 fd4e 	bl	801b57c <iprintf>
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	e0b1      	b.n	8017c48 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d108      	bne.n	8017afc <dhcp_create_msg+0x40>
 8017aea:	4b59      	ldr	r3, [pc, #356]	; (8017c50 <dhcp_create_msg+0x194>)
 8017aec:	f240 726a 	movw	r2, #1898	; 0x76a
 8017af0:	495a      	ldr	r1, [pc, #360]	; (8017c5c <dhcp_create_msg+0x1a0>)
 8017af2:	4859      	ldr	r0, [pc, #356]	; (8017c58 <dhcp_create_msg+0x19c>)
 8017af4:	f003 fd42 	bl	801b57c <iprintf>
 8017af8:	2300      	movs	r3, #0
 8017afa:	e0a5      	b.n	8017c48 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017afc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b00:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017b04:	2036      	movs	r0, #54	; 0x36
 8017b06:	f7f6 fdf3 	bl	800e6f0 <pbuf_alloc>
 8017b0a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017b0c:	69bb      	ldr	r3, [r7, #24]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d101      	bne.n	8017b16 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017b12:	2300      	movs	r3, #0
 8017b14:	e098      	b.n	8017c48 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017b16:	69bb      	ldr	r3, [r7, #24]
 8017b18:	895b      	ldrh	r3, [r3, #10]
 8017b1a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017b1e:	d206      	bcs.n	8017b2e <dhcp_create_msg+0x72>
 8017b20:	4b4b      	ldr	r3, [pc, #300]	; (8017c50 <dhcp_create_msg+0x194>)
 8017b22:	f240 7271 	movw	r2, #1905	; 0x771
 8017b26:	494e      	ldr	r1, [pc, #312]	; (8017c60 <dhcp_create_msg+0x1a4>)
 8017b28:	484b      	ldr	r0, [pc, #300]	; (8017c58 <dhcp_create_msg+0x19c>)
 8017b2a:	f003 fd27 	bl	801b57c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017b2e:	79fb      	ldrb	r3, [r7, #7]
 8017b30:	2b03      	cmp	r3, #3
 8017b32:	d103      	bne.n	8017b3c <dhcp_create_msg+0x80>
 8017b34:	68bb      	ldr	r3, [r7, #8]
 8017b36:	795b      	ldrb	r3, [r3, #5]
 8017b38:	2b03      	cmp	r3, #3
 8017b3a:	d10d      	bne.n	8017b58 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017b3c:	68bb      	ldr	r3, [r7, #8]
 8017b3e:	799b      	ldrb	r3, [r3, #6]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d105      	bne.n	8017b50 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017b44:	f003 fd32 	bl	801b5ac <rand>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	461a      	mov	r2, r3
 8017b4c:	4b45      	ldr	r3, [pc, #276]	; (8017c64 <dhcp_create_msg+0x1a8>)
 8017b4e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017b50:	4b44      	ldr	r3, [pc, #272]	; (8017c64 <dhcp_create_msg+0x1a8>)
 8017b52:	681a      	ldr	r2, [r3, #0]
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017b58:	69bb      	ldr	r3, [r7, #24]
 8017b5a:	685b      	ldr	r3, [r3, #4]
 8017b5c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017b5e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017b62:	2100      	movs	r1, #0
 8017b64:	6978      	ldr	r0, [r7, #20]
 8017b66:	f003 fc23 	bl	801b3b0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	2201      	movs	r2, #1
 8017b6e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	2201      	movs	r2, #1
 8017b74:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	4618      	mov	r0, r3
 8017b86:	f7f5 fc47 	bl	800d418 <lwip_htonl>
 8017b8a:	4602      	mov	r2, r0
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017b90:	79fb      	ldrb	r3, [r7, #7]
 8017b92:	2b08      	cmp	r3, #8
 8017b94:	d010      	beq.n	8017bb8 <dhcp_create_msg+0xfc>
 8017b96:	79fb      	ldrb	r3, [r7, #7]
 8017b98:	2b04      	cmp	r3, #4
 8017b9a:	d00d      	beq.n	8017bb8 <dhcp_create_msg+0xfc>
 8017b9c:	79fb      	ldrb	r3, [r7, #7]
 8017b9e:	2b07      	cmp	r3, #7
 8017ba0:	d00a      	beq.n	8017bb8 <dhcp_create_msg+0xfc>
 8017ba2:	79fb      	ldrb	r3, [r7, #7]
 8017ba4:	2b03      	cmp	r3, #3
 8017ba6:	d10c      	bne.n	8017bc2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017ba8:	68bb      	ldr	r3, [r7, #8]
 8017baa:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017bac:	2b05      	cmp	r3, #5
 8017bae:	d003      	beq.n	8017bb8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	795b      	ldrb	r3, [r3, #5]
 8017bb4:	2b04      	cmp	r3, #4
 8017bb6:	d104      	bne.n	8017bc2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	3304      	adds	r3, #4
 8017bbc:	681a      	ldr	r2, [r3, #0]
 8017bbe:	697b      	ldr	r3, [r7, #20]
 8017bc0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	83fb      	strh	r3, [r7, #30]
 8017bc6:	e00c      	b.n	8017be2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017bc8:	8bfa      	ldrh	r2, [r7, #30]
 8017bca:	8bfb      	ldrh	r3, [r7, #30]
 8017bcc:	68f9      	ldr	r1, [r7, #12]
 8017bce:	440a      	add	r2, r1
 8017bd0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8017bd4:	697a      	ldr	r2, [r7, #20]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	460a      	mov	r2, r1
 8017bda:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017bdc:	8bfb      	ldrh	r3, [r7, #30]
 8017bde:	3301      	adds	r3, #1
 8017be0:	83fb      	strh	r3, [r7, #30]
 8017be2:	8bfb      	ldrh	r3, [r7, #30]
 8017be4:	2b05      	cmp	r3, #5
 8017be6:	d9ef      	bls.n	8017bc8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017be8:	697b      	ldr	r3, [r7, #20]
 8017bea:	2200      	movs	r2, #0
 8017bec:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017bf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8017bfa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8017bfe:	2200      	movs	r2, #0
 8017c00:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8017c04:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8017c08:	2200      	movs	r2, #0
 8017c0a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017c0e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017c12:	697b      	ldr	r3, [r7, #20]
 8017c14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c18:	2301      	movs	r3, #1
 8017c1a:	2235      	movs	r2, #53	; 0x35
 8017c1c:	2000      	movs	r0, #0
 8017c1e:	f7ff fadb 	bl	80171d8 <dhcp_option>
 8017c22:	4603      	mov	r3, r0
 8017c24:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8017c26:	697b      	ldr	r3, [r7, #20]
 8017c28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017c2c:	79fa      	ldrb	r2, [r7, #7]
 8017c2e:	8a7b      	ldrh	r3, [r7, #18]
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7ff fb05 	bl	8017240 <dhcp_option_byte>
 8017c36:	4603      	mov	r3, r0
 8017c38:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8017c3a:	683b      	ldr	r3, [r7, #0]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d002      	beq.n	8017c46 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017c40:	683b      	ldr	r3, [r7, #0]
 8017c42:	8a7a      	ldrh	r2, [r7, #18]
 8017c44:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8017c46:	69bb      	ldr	r3, [r7, #24]
}
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3720      	adds	r7, #32
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	0801ed14 	.word	0x0801ed14
 8017c54:	0801f034 	.word	0x0801f034
 8017c58:	0801ed74 	.word	0x0801ed74
 8017c5c:	0801f054 	.word	0x0801f054
 8017c60:	0801f074 	.word	0x0801f074
 8017c64:	2000c9dc 	.word	0x2000c9dc

08017c68 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b084      	sub	sp, #16
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	4603      	mov	r3, r0
 8017c70:	60b9      	str	r1, [r7, #8]
 8017c72:	607a      	str	r2, [r7, #4]
 8017c74:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8017c76:	89fb      	ldrh	r3, [r7, #14]
 8017c78:	1c5a      	adds	r2, r3, #1
 8017c7a:	81fa      	strh	r2, [r7, #14]
 8017c7c:	461a      	mov	r2, r3
 8017c7e:	68bb      	ldr	r3, [r7, #8]
 8017c80:	4413      	add	r3, r2
 8017c82:	22ff      	movs	r2, #255	; 0xff
 8017c84:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017c86:	e007      	b.n	8017c98 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017c88:	89fb      	ldrh	r3, [r7, #14]
 8017c8a:	1c5a      	adds	r2, r3, #1
 8017c8c:	81fa      	strh	r2, [r7, #14]
 8017c8e:	461a      	mov	r2, r3
 8017c90:	68bb      	ldr	r3, [r7, #8]
 8017c92:	4413      	add	r3, r2
 8017c94:	2200      	movs	r2, #0
 8017c96:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017c98:	89fb      	ldrh	r3, [r7, #14]
 8017c9a:	2b43      	cmp	r3, #67	; 0x43
 8017c9c:	d904      	bls.n	8017ca8 <dhcp_option_trailer+0x40>
 8017c9e:	89fb      	ldrh	r3, [r7, #14]
 8017ca0:	f003 0303 	and.w	r3, r3, #3
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d002      	beq.n	8017cae <dhcp_option_trailer+0x46>
 8017ca8:	89fb      	ldrh	r3, [r7, #14]
 8017caa:	2b43      	cmp	r3, #67	; 0x43
 8017cac:	d9ec      	bls.n	8017c88 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017cae:	89fb      	ldrh	r3, [r7, #14]
 8017cb0:	33f0      	adds	r3, #240	; 0xf0
 8017cb2:	b29b      	uxth	r3, r3
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f7f6 fe78 	bl	800e9ac <pbuf_realloc>
}
 8017cbc:	bf00      	nop
 8017cbe:	3710      	adds	r7, #16
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}

08017cc4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017cc4:	b480      	push	{r7}
 8017cc6:	b085      	sub	sp, #20
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d017      	beq.n	8017d02 <dhcp_supplied_address+0x3e>
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d013      	beq.n	8017d02 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cde:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	795b      	ldrb	r3, [r3, #5]
 8017ce4:	2b0a      	cmp	r3, #10
 8017ce6:	d007      	beq.n	8017cf8 <dhcp_supplied_address+0x34>
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	795b      	ldrb	r3, [r3, #5]
 8017cec:	2b05      	cmp	r3, #5
 8017cee:	d003      	beq.n	8017cf8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017cf4:	2b04      	cmp	r3, #4
 8017cf6:	d101      	bne.n	8017cfc <dhcp_supplied_address+0x38>
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	e000      	b.n	8017cfe <dhcp_supplied_address+0x3a>
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	e000      	b.n	8017d04 <dhcp_supplied_address+0x40>
  }
  return 0;
 8017d02:	2300      	movs	r3, #0
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	3714      	adds	r7, #20
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	bc80      	pop	{r7}
 8017d0c:	4770      	bx	lr
	...

08017d10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b082      	sub	sp, #8
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017d18:	4915      	ldr	r1, [pc, #84]	; (8017d70 <etharp_free_entry+0x60>)
 8017d1a:	687a      	ldr	r2, [r7, #4]
 8017d1c:	4613      	mov	r3, r2
 8017d1e:	005b      	lsls	r3, r3, #1
 8017d20:	4413      	add	r3, r2
 8017d22:	00db      	lsls	r3, r3, #3
 8017d24:	440b      	add	r3, r1
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d013      	beq.n	8017d54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017d2c:	4910      	ldr	r1, [pc, #64]	; (8017d70 <etharp_free_entry+0x60>)
 8017d2e:	687a      	ldr	r2, [r7, #4]
 8017d30:	4613      	mov	r3, r2
 8017d32:	005b      	lsls	r3, r3, #1
 8017d34:	4413      	add	r3, r2
 8017d36:	00db      	lsls	r3, r3, #3
 8017d38:	440b      	add	r3, r1
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7f6 ffbb 	bl	800ecb8 <pbuf_free>
    arp_table[i].q = NULL;
 8017d42:	490b      	ldr	r1, [pc, #44]	; (8017d70 <etharp_free_entry+0x60>)
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	4613      	mov	r3, r2
 8017d48:	005b      	lsls	r3, r3, #1
 8017d4a:	4413      	add	r3, r2
 8017d4c:	00db      	lsls	r3, r3, #3
 8017d4e:	440b      	add	r3, r1
 8017d50:	2200      	movs	r2, #0
 8017d52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017d54:	4906      	ldr	r1, [pc, #24]	; (8017d70 <etharp_free_entry+0x60>)
 8017d56:	687a      	ldr	r2, [r7, #4]
 8017d58:	4613      	mov	r3, r2
 8017d5a:	005b      	lsls	r3, r3, #1
 8017d5c:	4413      	add	r3, r2
 8017d5e:	00db      	lsls	r3, r3, #3
 8017d60:	440b      	add	r3, r1
 8017d62:	3314      	adds	r3, #20
 8017d64:	2200      	movs	r2, #0
 8017d66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017d68:	bf00      	nop
 8017d6a:	3708      	adds	r7, #8
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}
 8017d70:	2000c9e0 	.word	0x2000c9e0

08017d74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b082      	sub	sp, #8
 8017d78:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	607b      	str	r3, [r7, #4]
 8017d7e:	e096      	b.n	8017eae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017d80:	494f      	ldr	r1, [pc, #316]	; (8017ec0 <etharp_tmr+0x14c>)
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	4613      	mov	r3, r2
 8017d86:	005b      	lsls	r3, r3, #1
 8017d88:	4413      	add	r3, r2
 8017d8a:	00db      	lsls	r3, r3, #3
 8017d8c:	440b      	add	r3, r1
 8017d8e:	3314      	adds	r3, #20
 8017d90:	781b      	ldrb	r3, [r3, #0]
 8017d92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017d94:	78fb      	ldrb	r3, [r7, #3]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	f000 8086 	beq.w	8017ea8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017d9c:	4948      	ldr	r1, [pc, #288]	; (8017ec0 <etharp_tmr+0x14c>)
 8017d9e:	687a      	ldr	r2, [r7, #4]
 8017da0:	4613      	mov	r3, r2
 8017da2:	005b      	lsls	r3, r3, #1
 8017da4:	4413      	add	r3, r2
 8017da6:	00db      	lsls	r3, r3, #3
 8017da8:	440b      	add	r3, r1
 8017daa:	3312      	adds	r3, #18
 8017dac:	881b      	ldrh	r3, [r3, #0]
 8017dae:	3301      	adds	r3, #1
 8017db0:	b298      	uxth	r0, r3
 8017db2:	4943      	ldr	r1, [pc, #268]	; (8017ec0 <etharp_tmr+0x14c>)
 8017db4:	687a      	ldr	r2, [r7, #4]
 8017db6:	4613      	mov	r3, r2
 8017db8:	005b      	lsls	r3, r3, #1
 8017dba:	4413      	add	r3, r2
 8017dbc:	00db      	lsls	r3, r3, #3
 8017dbe:	440b      	add	r3, r1
 8017dc0:	3312      	adds	r3, #18
 8017dc2:	4602      	mov	r2, r0
 8017dc4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017dc6:	493e      	ldr	r1, [pc, #248]	; (8017ec0 <etharp_tmr+0x14c>)
 8017dc8:	687a      	ldr	r2, [r7, #4]
 8017dca:	4613      	mov	r3, r2
 8017dcc:	005b      	lsls	r3, r3, #1
 8017dce:	4413      	add	r3, r2
 8017dd0:	00db      	lsls	r3, r3, #3
 8017dd2:	440b      	add	r3, r1
 8017dd4:	3312      	adds	r3, #18
 8017dd6:	881b      	ldrh	r3, [r3, #0]
 8017dd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017ddc:	d215      	bcs.n	8017e0a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017dde:	4938      	ldr	r1, [pc, #224]	; (8017ec0 <etharp_tmr+0x14c>)
 8017de0:	687a      	ldr	r2, [r7, #4]
 8017de2:	4613      	mov	r3, r2
 8017de4:	005b      	lsls	r3, r3, #1
 8017de6:	4413      	add	r3, r2
 8017de8:	00db      	lsls	r3, r3, #3
 8017dea:	440b      	add	r3, r1
 8017dec:	3314      	adds	r3, #20
 8017dee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017df0:	2b01      	cmp	r3, #1
 8017df2:	d10e      	bne.n	8017e12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017df4:	4932      	ldr	r1, [pc, #200]	; (8017ec0 <etharp_tmr+0x14c>)
 8017df6:	687a      	ldr	r2, [r7, #4]
 8017df8:	4613      	mov	r3, r2
 8017dfa:	005b      	lsls	r3, r3, #1
 8017dfc:	4413      	add	r3, r2
 8017dfe:	00db      	lsls	r3, r3, #3
 8017e00:	440b      	add	r3, r1
 8017e02:	3312      	adds	r3, #18
 8017e04:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017e06:	2b04      	cmp	r3, #4
 8017e08:	d903      	bls.n	8017e12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f7ff ff80 	bl	8017d10 <etharp_free_entry>
 8017e10:	e04a      	b.n	8017ea8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017e12:	492b      	ldr	r1, [pc, #172]	; (8017ec0 <etharp_tmr+0x14c>)
 8017e14:	687a      	ldr	r2, [r7, #4]
 8017e16:	4613      	mov	r3, r2
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	4413      	add	r3, r2
 8017e1c:	00db      	lsls	r3, r3, #3
 8017e1e:	440b      	add	r3, r1
 8017e20:	3314      	adds	r3, #20
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	2b03      	cmp	r3, #3
 8017e26:	d10a      	bne.n	8017e3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017e28:	4925      	ldr	r1, [pc, #148]	; (8017ec0 <etharp_tmr+0x14c>)
 8017e2a:	687a      	ldr	r2, [r7, #4]
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	005b      	lsls	r3, r3, #1
 8017e30:	4413      	add	r3, r2
 8017e32:	00db      	lsls	r3, r3, #3
 8017e34:	440b      	add	r3, r1
 8017e36:	3314      	adds	r3, #20
 8017e38:	2204      	movs	r2, #4
 8017e3a:	701a      	strb	r2, [r3, #0]
 8017e3c:	e034      	b.n	8017ea8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017e3e:	4920      	ldr	r1, [pc, #128]	; (8017ec0 <etharp_tmr+0x14c>)
 8017e40:	687a      	ldr	r2, [r7, #4]
 8017e42:	4613      	mov	r3, r2
 8017e44:	005b      	lsls	r3, r3, #1
 8017e46:	4413      	add	r3, r2
 8017e48:	00db      	lsls	r3, r3, #3
 8017e4a:	440b      	add	r3, r1
 8017e4c:	3314      	adds	r3, #20
 8017e4e:	781b      	ldrb	r3, [r3, #0]
 8017e50:	2b04      	cmp	r3, #4
 8017e52:	d10a      	bne.n	8017e6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017e54:	491a      	ldr	r1, [pc, #104]	; (8017ec0 <etharp_tmr+0x14c>)
 8017e56:	687a      	ldr	r2, [r7, #4]
 8017e58:	4613      	mov	r3, r2
 8017e5a:	005b      	lsls	r3, r3, #1
 8017e5c:	4413      	add	r3, r2
 8017e5e:	00db      	lsls	r3, r3, #3
 8017e60:	440b      	add	r3, r1
 8017e62:	3314      	adds	r3, #20
 8017e64:	2202      	movs	r2, #2
 8017e66:	701a      	strb	r2, [r3, #0]
 8017e68:	e01e      	b.n	8017ea8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017e6a:	4915      	ldr	r1, [pc, #84]	; (8017ec0 <etharp_tmr+0x14c>)
 8017e6c:	687a      	ldr	r2, [r7, #4]
 8017e6e:	4613      	mov	r3, r2
 8017e70:	005b      	lsls	r3, r3, #1
 8017e72:	4413      	add	r3, r2
 8017e74:	00db      	lsls	r3, r3, #3
 8017e76:	440b      	add	r3, r1
 8017e78:	3314      	adds	r3, #20
 8017e7a:	781b      	ldrb	r3, [r3, #0]
 8017e7c:	2b01      	cmp	r3, #1
 8017e7e:	d113      	bne.n	8017ea8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017e80:	490f      	ldr	r1, [pc, #60]	; (8017ec0 <etharp_tmr+0x14c>)
 8017e82:	687a      	ldr	r2, [r7, #4]
 8017e84:	4613      	mov	r3, r2
 8017e86:	005b      	lsls	r3, r3, #1
 8017e88:	4413      	add	r3, r2
 8017e8a:	00db      	lsls	r3, r3, #3
 8017e8c:	440b      	add	r3, r1
 8017e8e:	3308      	adds	r3, #8
 8017e90:	6818      	ldr	r0, [r3, #0]
 8017e92:	687a      	ldr	r2, [r7, #4]
 8017e94:	4613      	mov	r3, r2
 8017e96:	005b      	lsls	r3, r3, #1
 8017e98:	4413      	add	r3, r2
 8017e9a:	00db      	lsls	r3, r3, #3
 8017e9c:	4a08      	ldr	r2, [pc, #32]	; (8017ec0 <etharp_tmr+0x14c>)
 8017e9e:	4413      	add	r3, r2
 8017ea0:	3304      	adds	r3, #4
 8017ea2:	4619      	mov	r1, r3
 8017ea4:	f000 fe72 	bl	8018b8c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	3301      	adds	r3, #1
 8017eac:	607b      	str	r3, [r7, #4]
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2b09      	cmp	r3, #9
 8017eb2:	f77f af65 	ble.w	8017d80 <etharp_tmr+0xc>
      }
    }
  }
}
 8017eb6:	bf00      	nop
 8017eb8:	bf00      	nop
 8017eba:	3708      	adds	r7, #8
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	bd80      	pop	{r7, pc}
 8017ec0:	2000c9e0 	.word	0x2000c9e0

08017ec4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017ec4:	b580      	push	{r7, lr}
 8017ec6:	b08a      	sub	sp, #40	; 0x28
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	60f8      	str	r0, [r7, #12]
 8017ecc:	460b      	mov	r3, r1
 8017ece:	607a      	str	r2, [r7, #4]
 8017ed0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017ed2:	230a      	movs	r3, #10
 8017ed4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017ed6:	230a      	movs	r3, #10
 8017ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017eda:	230a      	movs	r3, #10
 8017edc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017ede:	2300      	movs	r3, #0
 8017ee0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017ee2:	230a      	movs	r3, #10
 8017ee4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	83bb      	strh	r3, [r7, #28]
 8017eea:	2300      	movs	r3, #0
 8017eec:	837b      	strh	r3, [r7, #26]
 8017eee:	2300      	movs	r3, #0
 8017ef0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	843b      	strh	r3, [r7, #32]
 8017ef6:	e0ae      	b.n	8018056 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017ef8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017efc:	49a6      	ldr	r1, [pc, #664]	; (8018198 <etharp_find_entry+0x2d4>)
 8017efe:	4613      	mov	r3, r2
 8017f00:	005b      	lsls	r3, r3, #1
 8017f02:	4413      	add	r3, r2
 8017f04:	00db      	lsls	r3, r3, #3
 8017f06:	440b      	add	r3, r1
 8017f08:	3314      	adds	r3, #20
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017f0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017f12:	2b0a      	cmp	r3, #10
 8017f14:	d105      	bne.n	8017f22 <etharp_find_entry+0x5e>
 8017f16:	7dfb      	ldrb	r3, [r7, #23]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d102      	bne.n	8017f22 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017f1c:	8c3b      	ldrh	r3, [r7, #32]
 8017f1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017f20:	e095      	b.n	801804e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017f22:	7dfb      	ldrb	r3, [r7, #23]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	f000 8092 	beq.w	801804e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017f2a:	7dfb      	ldrb	r3, [r7, #23]
 8017f2c:	2b01      	cmp	r3, #1
 8017f2e:	d009      	beq.n	8017f44 <etharp_find_entry+0x80>
 8017f30:	7dfb      	ldrb	r3, [r7, #23]
 8017f32:	2b01      	cmp	r3, #1
 8017f34:	d806      	bhi.n	8017f44 <etharp_find_entry+0x80>
 8017f36:	4b99      	ldr	r3, [pc, #612]	; (801819c <etharp_find_entry+0x2d8>)
 8017f38:	f240 1223 	movw	r2, #291	; 0x123
 8017f3c:	4998      	ldr	r1, [pc, #608]	; (80181a0 <etharp_find_entry+0x2dc>)
 8017f3e:	4899      	ldr	r0, [pc, #612]	; (80181a4 <etharp_find_entry+0x2e0>)
 8017f40:	f003 fb1c 	bl	801b57c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d020      	beq.n	8017f8c <etharp_find_entry+0xc8>
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	6819      	ldr	r1, [r3, #0]
 8017f4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f52:	4891      	ldr	r0, [pc, #580]	; (8018198 <etharp_find_entry+0x2d4>)
 8017f54:	4613      	mov	r3, r2
 8017f56:	005b      	lsls	r3, r3, #1
 8017f58:	4413      	add	r3, r2
 8017f5a:	00db      	lsls	r3, r3, #3
 8017f5c:	4403      	add	r3, r0
 8017f5e:	3304      	adds	r3, #4
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	4299      	cmp	r1, r3
 8017f64:	d112      	bne.n	8017f8c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d00c      	beq.n	8017f86 <etharp_find_entry+0xc2>
 8017f6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f70:	4989      	ldr	r1, [pc, #548]	; (8018198 <etharp_find_entry+0x2d4>)
 8017f72:	4613      	mov	r3, r2
 8017f74:	005b      	lsls	r3, r3, #1
 8017f76:	4413      	add	r3, r2
 8017f78:	00db      	lsls	r3, r3, #3
 8017f7a:	440b      	add	r3, r1
 8017f7c:	3308      	adds	r3, #8
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	687a      	ldr	r2, [r7, #4]
 8017f82:	429a      	cmp	r2, r3
 8017f84:	d102      	bne.n	8017f8c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017f86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017f8a:	e100      	b.n	801818e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017f8c:	7dfb      	ldrb	r3, [r7, #23]
 8017f8e:	2b01      	cmp	r3, #1
 8017f90:	d140      	bne.n	8018014 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017f92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f96:	4980      	ldr	r1, [pc, #512]	; (8018198 <etharp_find_entry+0x2d4>)
 8017f98:	4613      	mov	r3, r2
 8017f9a:	005b      	lsls	r3, r3, #1
 8017f9c:	4413      	add	r3, r2
 8017f9e:	00db      	lsls	r3, r3, #3
 8017fa0:	440b      	add	r3, r1
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d01a      	beq.n	8017fde <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017fa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fac:	497a      	ldr	r1, [pc, #488]	; (8018198 <etharp_find_entry+0x2d4>)
 8017fae:	4613      	mov	r3, r2
 8017fb0:	005b      	lsls	r3, r3, #1
 8017fb2:	4413      	add	r3, r2
 8017fb4:	00db      	lsls	r3, r3, #3
 8017fb6:	440b      	add	r3, r1
 8017fb8:	3312      	adds	r3, #18
 8017fba:	881b      	ldrh	r3, [r3, #0]
 8017fbc:	8bba      	ldrh	r2, [r7, #28]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d845      	bhi.n	801804e <etharp_find_entry+0x18a>
            old_queue = i;
 8017fc2:	8c3b      	ldrh	r3, [r7, #32]
 8017fc4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017fc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fca:	4973      	ldr	r1, [pc, #460]	; (8018198 <etharp_find_entry+0x2d4>)
 8017fcc:	4613      	mov	r3, r2
 8017fce:	005b      	lsls	r3, r3, #1
 8017fd0:	4413      	add	r3, r2
 8017fd2:	00db      	lsls	r3, r3, #3
 8017fd4:	440b      	add	r3, r1
 8017fd6:	3312      	adds	r3, #18
 8017fd8:	881b      	ldrh	r3, [r3, #0]
 8017fda:	83bb      	strh	r3, [r7, #28]
 8017fdc:	e037      	b.n	801804e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017fde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fe2:	496d      	ldr	r1, [pc, #436]	; (8018198 <etharp_find_entry+0x2d4>)
 8017fe4:	4613      	mov	r3, r2
 8017fe6:	005b      	lsls	r3, r3, #1
 8017fe8:	4413      	add	r3, r2
 8017fea:	00db      	lsls	r3, r3, #3
 8017fec:	440b      	add	r3, r1
 8017fee:	3312      	adds	r3, #18
 8017ff0:	881b      	ldrh	r3, [r3, #0]
 8017ff2:	8b7a      	ldrh	r2, [r7, #26]
 8017ff4:	429a      	cmp	r2, r3
 8017ff6:	d82a      	bhi.n	801804e <etharp_find_entry+0x18a>
            old_pending = i;
 8017ff8:	8c3b      	ldrh	r3, [r7, #32]
 8017ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017ffc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018000:	4965      	ldr	r1, [pc, #404]	; (8018198 <etharp_find_entry+0x2d4>)
 8018002:	4613      	mov	r3, r2
 8018004:	005b      	lsls	r3, r3, #1
 8018006:	4413      	add	r3, r2
 8018008:	00db      	lsls	r3, r3, #3
 801800a:	440b      	add	r3, r1
 801800c:	3312      	adds	r3, #18
 801800e:	881b      	ldrh	r3, [r3, #0]
 8018010:	837b      	strh	r3, [r7, #26]
 8018012:	e01c      	b.n	801804e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018014:	7dfb      	ldrb	r3, [r7, #23]
 8018016:	2b01      	cmp	r3, #1
 8018018:	d919      	bls.n	801804e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801801a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801801e:	495e      	ldr	r1, [pc, #376]	; (8018198 <etharp_find_entry+0x2d4>)
 8018020:	4613      	mov	r3, r2
 8018022:	005b      	lsls	r3, r3, #1
 8018024:	4413      	add	r3, r2
 8018026:	00db      	lsls	r3, r3, #3
 8018028:	440b      	add	r3, r1
 801802a:	3312      	adds	r3, #18
 801802c:	881b      	ldrh	r3, [r3, #0]
 801802e:	8b3a      	ldrh	r2, [r7, #24]
 8018030:	429a      	cmp	r2, r3
 8018032:	d80c      	bhi.n	801804e <etharp_find_entry+0x18a>
            old_stable = i;
 8018034:	8c3b      	ldrh	r3, [r7, #32]
 8018036:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018038:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801803c:	4956      	ldr	r1, [pc, #344]	; (8018198 <etharp_find_entry+0x2d4>)
 801803e:	4613      	mov	r3, r2
 8018040:	005b      	lsls	r3, r3, #1
 8018042:	4413      	add	r3, r2
 8018044:	00db      	lsls	r3, r3, #3
 8018046:	440b      	add	r3, r1
 8018048:	3312      	adds	r3, #18
 801804a:	881b      	ldrh	r3, [r3, #0]
 801804c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801804e:	8c3b      	ldrh	r3, [r7, #32]
 8018050:	3301      	adds	r3, #1
 8018052:	b29b      	uxth	r3, r3
 8018054:	843b      	strh	r3, [r7, #32]
 8018056:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801805a:	2b09      	cmp	r3, #9
 801805c:	f77f af4c 	ble.w	8017ef8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018060:	7afb      	ldrb	r3, [r7, #11]
 8018062:	f003 0302 	and.w	r3, r3, #2
 8018066:	2b00      	cmp	r3, #0
 8018068:	d108      	bne.n	801807c <etharp_find_entry+0x1b8>
 801806a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801806e:	2b0a      	cmp	r3, #10
 8018070:	d107      	bne.n	8018082 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018072:	7afb      	ldrb	r3, [r7, #11]
 8018074:	f003 0301 	and.w	r3, r3, #1
 8018078:	2b00      	cmp	r3, #0
 801807a:	d102      	bne.n	8018082 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801807c:	f04f 33ff 	mov.w	r3, #4294967295
 8018080:	e085      	b.n	801818e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018082:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018086:	2b09      	cmp	r3, #9
 8018088:	dc02      	bgt.n	8018090 <etharp_find_entry+0x1cc>
    i = empty;
 801808a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801808c:	843b      	strh	r3, [r7, #32]
 801808e:	e039      	b.n	8018104 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018090:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018094:	2b09      	cmp	r3, #9
 8018096:	dc14      	bgt.n	80180c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801809a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801809c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80180a0:	493d      	ldr	r1, [pc, #244]	; (8018198 <etharp_find_entry+0x2d4>)
 80180a2:	4613      	mov	r3, r2
 80180a4:	005b      	lsls	r3, r3, #1
 80180a6:	4413      	add	r3, r2
 80180a8:	00db      	lsls	r3, r3, #3
 80180aa:	440b      	add	r3, r1
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d018      	beq.n	80180e4 <etharp_find_entry+0x220>
 80180b2:	4b3a      	ldr	r3, [pc, #232]	; (801819c <etharp_find_entry+0x2d8>)
 80180b4:	f240 126d 	movw	r2, #365	; 0x16d
 80180b8:	493b      	ldr	r1, [pc, #236]	; (80181a8 <etharp_find_entry+0x2e4>)
 80180ba:	483a      	ldr	r0, [pc, #232]	; (80181a4 <etharp_find_entry+0x2e0>)
 80180bc:	f003 fa5e 	bl	801b57c <iprintf>
 80180c0:	e010      	b.n	80180e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80180c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80180c6:	2b09      	cmp	r3, #9
 80180c8:	dc02      	bgt.n	80180d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80180ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80180cc:	843b      	strh	r3, [r7, #32]
 80180ce:	e009      	b.n	80180e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80180d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80180d4:	2b09      	cmp	r3, #9
 80180d6:	dc02      	bgt.n	80180de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80180d8:	8bfb      	ldrh	r3, [r7, #30]
 80180da:	843b      	strh	r3, [r7, #32]
 80180dc:	e002      	b.n	80180e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80180de:	f04f 33ff 	mov.w	r3, #4294967295
 80180e2:	e054      	b.n	801818e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80180e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80180e8:	2b09      	cmp	r3, #9
 80180ea:	dd06      	ble.n	80180fa <etharp_find_entry+0x236>
 80180ec:	4b2b      	ldr	r3, [pc, #172]	; (801819c <etharp_find_entry+0x2d8>)
 80180ee:	f240 127f 	movw	r2, #383	; 0x17f
 80180f2:	492e      	ldr	r1, [pc, #184]	; (80181ac <etharp_find_entry+0x2e8>)
 80180f4:	482b      	ldr	r0, [pc, #172]	; (80181a4 <etharp_find_entry+0x2e0>)
 80180f6:	f003 fa41 	bl	801b57c <iprintf>
    etharp_free_entry(i);
 80180fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80180fe:	4618      	mov	r0, r3
 8018100:	f7ff fe06 	bl	8017d10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018104:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018108:	2b09      	cmp	r3, #9
 801810a:	dd06      	ble.n	801811a <etharp_find_entry+0x256>
 801810c:	4b23      	ldr	r3, [pc, #140]	; (801819c <etharp_find_entry+0x2d8>)
 801810e:	f240 1283 	movw	r2, #387	; 0x183
 8018112:	4926      	ldr	r1, [pc, #152]	; (80181ac <etharp_find_entry+0x2e8>)
 8018114:	4823      	ldr	r0, [pc, #140]	; (80181a4 <etharp_find_entry+0x2e0>)
 8018116:	f003 fa31 	bl	801b57c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801811a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801811e:	491e      	ldr	r1, [pc, #120]	; (8018198 <etharp_find_entry+0x2d4>)
 8018120:	4613      	mov	r3, r2
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	4413      	add	r3, r2
 8018126:	00db      	lsls	r3, r3, #3
 8018128:	440b      	add	r3, r1
 801812a:	3314      	adds	r3, #20
 801812c:	781b      	ldrb	r3, [r3, #0]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d006      	beq.n	8018140 <etharp_find_entry+0x27c>
 8018132:	4b1a      	ldr	r3, [pc, #104]	; (801819c <etharp_find_entry+0x2d8>)
 8018134:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018138:	491d      	ldr	r1, [pc, #116]	; (80181b0 <etharp_find_entry+0x2ec>)
 801813a:	481a      	ldr	r0, [pc, #104]	; (80181a4 <etharp_find_entry+0x2e0>)
 801813c:	f003 fa1e 	bl	801b57c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d00b      	beq.n	801815e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018146:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	6819      	ldr	r1, [r3, #0]
 801814e:	4812      	ldr	r0, [pc, #72]	; (8018198 <etharp_find_entry+0x2d4>)
 8018150:	4613      	mov	r3, r2
 8018152:	005b      	lsls	r3, r3, #1
 8018154:	4413      	add	r3, r2
 8018156:	00db      	lsls	r3, r3, #3
 8018158:	4403      	add	r3, r0
 801815a:	3304      	adds	r3, #4
 801815c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801815e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018162:	490d      	ldr	r1, [pc, #52]	; (8018198 <etharp_find_entry+0x2d4>)
 8018164:	4613      	mov	r3, r2
 8018166:	005b      	lsls	r3, r3, #1
 8018168:	4413      	add	r3, r2
 801816a:	00db      	lsls	r3, r3, #3
 801816c:	440b      	add	r3, r1
 801816e:	3312      	adds	r3, #18
 8018170:	2200      	movs	r2, #0
 8018172:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018178:	4907      	ldr	r1, [pc, #28]	; (8018198 <etharp_find_entry+0x2d4>)
 801817a:	4613      	mov	r3, r2
 801817c:	005b      	lsls	r3, r3, #1
 801817e:	4413      	add	r3, r2
 8018180:	00db      	lsls	r3, r3, #3
 8018182:	440b      	add	r3, r1
 8018184:	3308      	adds	r3, #8
 8018186:	687a      	ldr	r2, [r7, #4]
 8018188:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801818a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801818e:	4618      	mov	r0, r3
 8018190:	3728      	adds	r7, #40	; 0x28
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	2000c9e0 	.word	0x2000c9e0
 801819c:	0801f0b4 	.word	0x0801f0b4
 80181a0:	0801f0ec 	.word	0x0801f0ec
 80181a4:	0801f12c 	.word	0x0801f12c
 80181a8:	0801f154 	.word	0x0801f154
 80181ac:	0801f16c 	.word	0x0801f16c
 80181b0:	0801f180 	.word	0x0801f180

080181b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b088      	sub	sp, #32
 80181b8:	af02      	add	r7, sp, #8
 80181ba:	60f8      	str	r0, [r7, #12]
 80181bc:	60b9      	str	r1, [r7, #8]
 80181be:	607a      	str	r2, [r7, #4]
 80181c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80181c8:	2b06      	cmp	r3, #6
 80181ca:	d006      	beq.n	80181da <etharp_update_arp_entry+0x26>
 80181cc:	4b48      	ldr	r3, [pc, #288]	; (80182f0 <etharp_update_arp_entry+0x13c>)
 80181ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80181d2:	4948      	ldr	r1, [pc, #288]	; (80182f4 <etharp_update_arp_entry+0x140>)
 80181d4:	4848      	ldr	r0, [pc, #288]	; (80182f8 <etharp_update_arp_entry+0x144>)
 80181d6:	f003 f9d1 	bl	801b57c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d012      	beq.n	8018206 <etharp_update_arp_entry+0x52>
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d00e      	beq.n	8018206 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	68f9      	ldr	r1, [r7, #12]
 80181ee:	4618      	mov	r0, r3
 80181f0:	f001 f944 	bl	801947c <ip4_addr_isbroadcast_u32>
 80181f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d105      	bne.n	8018206 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80181fa:	68bb      	ldr	r3, [r7, #8]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018202:	2be0      	cmp	r3, #224	; 0xe0
 8018204:	d102      	bne.n	801820c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018206:	f06f 030f 	mvn.w	r3, #15
 801820a:	e06c      	b.n	80182e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801820c:	78fb      	ldrb	r3, [r7, #3]
 801820e:	68fa      	ldr	r2, [r7, #12]
 8018210:	4619      	mov	r1, r3
 8018212:	68b8      	ldr	r0, [r7, #8]
 8018214:	f7ff fe56 	bl	8017ec4 <etharp_find_entry>
 8018218:	4603      	mov	r3, r0
 801821a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801821c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018220:	2b00      	cmp	r3, #0
 8018222:	da02      	bge.n	801822a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018224:	8afb      	ldrh	r3, [r7, #22]
 8018226:	b25b      	sxtb	r3, r3
 8018228:	e05d      	b.n	80182e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801822a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801822e:	4933      	ldr	r1, [pc, #204]	; (80182fc <etharp_update_arp_entry+0x148>)
 8018230:	4613      	mov	r3, r2
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	4413      	add	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	440b      	add	r3, r1
 801823a:	3314      	adds	r3, #20
 801823c:	2202      	movs	r2, #2
 801823e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018240:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018244:	492d      	ldr	r1, [pc, #180]	; (80182fc <etharp_update_arp_entry+0x148>)
 8018246:	4613      	mov	r3, r2
 8018248:	005b      	lsls	r3, r3, #1
 801824a:	4413      	add	r3, r2
 801824c:	00db      	lsls	r3, r3, #3
 801824e:	440b      	add	r3, r1
 8018250:	3308      	adds	r3, #8
 8018252:	68fa      	ldr	r2, [r7, #12]
 8018254:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018256:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801825a:	4613      	mov	r3, r2
 801825c:	005b      	lsls	r3, r3, #1
 801825e:	4413      	add	r3, r2
 8018260:	00db      	lsls	r3, r3, #3
 8018262:	3308      	adds	r3, #8
 8018264:	4a25      	ldr	r2, [pc, #148]	; (80182fc <etharp_update_arp_entry+0x148>)
 8018266:	4413      	add	r3, r2
 8018268:	3304      	adds	r3, #4
 801826a:	2206      	movs	r2, #6
 801826c:	6879      	ldr	r1, [r7, #4]
 801826e:	4618      	mov	r0, r3
 8018270:	f003 f890 	bl	801b394 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018274:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018278:	4920      	ldr	r1, [pc, #128]	; (80182fc <etharp_update_arp_entry+0x148>)
 801827a:	4613      	mov	r3, r2
 801827c:	005b      	lsls	r3, r3, #1
 801827e:	4413      	add	r3, r2
 8018280:	00db      	lsls	r3, r3, #3
 8018282:	440b      	add	r3, r1
 8018284:	3312      	adds	r3, #18
 8018286:	2200      	movs	r2, #0
 8018288:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801828a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801828e:	491b      	ldr	r1, [pc, #108]	; (80182fc <etharp_update_arp_entry+0x148>)
 8018290:	4613      	mov	r3, r2
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	4413      	add	r3, r2
 8018296:	00db      	lsls	r3, r3, #3
 8018298:	440b      	add	r3, r1
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d021      	beq.n	80182e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80182a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182a4:	4915      	ldr	r1, [pc, #84]	; (80182fc <etharp_update_arp_entry+0x148>)
 80182a6:	4613      	mov	r3, r2
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	4413      	add	r3, r2
 80182ac:	00db      	lsls	r3, r3, #3
 80182ae:	440b      	add	r3, r1
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80182b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182b8:	4910      	ldr	r1, [pc, #64]	; (80182fc <etharp_update_arp_entry+0x148>)
 80182ba:	4613      	mov	r3, r2
 80182bc:	005b      	lsls	r3, r3, #1
 80182be:	4413      	add	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	440b      	add	r3, r1
 80182c4:	2200      	movs	r2, #0
 80182c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80182ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80182d2:	9300      	str	r3, [sp, #0]
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	6939      	ldr	r1, [r7, #16]
 80182d8:	68f8      	ldr	r0, [r7, #12]
 80182da:	f001 ffdb 	bl	801a294 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80182de:	6938      	ldr	r0, [r7, #16]
 80182e0:	f7f6 fcea 	bl	800ecb8 <pbuf_free>
  }
  return ERR_OK;
 80182e4:	2300      	movs	r3, #0
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3718      	adds	r7, #24
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}
 80182ee:	bf00      	nop
 80182f0:	0801f0b4 	.word	0x0801f0b4
 80182f4:	0801f1ac 	.word	0x0801f1ac
 80182f8:	0801f12c 	.word	0x0801f12c
 80182fc:	2000c9e0 	.word	0x2000c9e0

08018300 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b084      	sub	sp, #16
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018308:	2300      	movs	r3, #0
 801830a:	60fb      	str	r3, [r7, #12]
 801830c:	e01e      	b.n	801834c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801830e:	4913      	ldr	r1, [pc, #76]	; (801835c <etharp_cleanup_netif+0x5c>)
 8018310:	68fa      	ldr	r2, [r7, #12]
 8018312:	4613      	mov	r3, r2
 8018314:	005b      	lsls	r3, r3, #1
 8018316:	4413      	add	r3, r2
 8018318:	00db      	lsls	r3, r3, #3
 801831a:	440b      	add	r3, r1
 801831c:	3314      	adds	r3, #20
 801831e:	781b      	ldrb	r3, [r3, #0]
 8018320:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018322:	7afb      	ldrb	r3, [r7, #11]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d00e      	beq.n	8018346 <etharp_cleanup_netif+0x46>
 8018328:	490c      	ldr	r1, [pc, #48]	; (801835c <etharp_cleanup_netif+0x5c>)
 801832a:	68fa      	ldr	r2, [r7, #12]
 801832c:	4613      	mov	r3, r2
 801832e:	005b      	lsls	r3, r3, #1
 8018330:	4413      	add	r3, r2
 8018332:	00db      	lsls	r3, r3, #3
 8018334:	440b      	add	r3, r1
 8018336:	3308      	adds	r3, #8
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	687a      	ldr	r2, [r7, #4]
 801833c:	429a      	cmp	r2, r3
 801833e:	d102      	bne.n	8018346 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018340:	68f8      	ldr	r0, [r7, #12]
 8018342:	f7ff fce5 	bl	8017d10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	3301      	adds	r3, #1
 801834a:	60fb      	str	r3, [r7, #12]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	2b09      	cmp	r3, #9
 8018350:	dddd      	ble.n	801830e <etharp_cleanup_netif+0xe>
    }
  }
}
 8018352:	bf00      	nop
 8018354:	bf00      	nop
 8018356:	3710      	adds	r7, #16
 8018358:	46bd      	mov	sp, r7
 801835a:	bd80      	pop	{r7, pc}
 801835c:	2000c9e0 	.word	0x2000c9e0

08018360 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018360:	b5b0      	push	{r4, r5, r7, lr}
 8018362:	b08a      	sub	sp, #40	; 0x28
 8018364:	af04      	add	r7, sp, #16
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d107      	bne.n	8018380 <etharp_input+0x20>
 8018370:	4b3f      	ldr	r3, [pc, #252]	; (8018470 <etharp_input+0x110>)
 8018372:	f240 228a 	movw	r2, #650	; 0x28a
 8018376:	493f      	ldr	r1, [pc, #252]	; (8018474 <etharp_input+0x114>)
 8018378:	483f      	ldr	r0, [pc, #252]	; (8018478 <etharp_input+0x118>)
 801837a:	f003 f8ff 	bl	801b57c <iprintf>
 801837e:	e074      	b.n	801846a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	685b      	ldr	r3, [r3, #4]
 8018384:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018386:	693b      	ldr	r3, [r7, #16]
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	b29b      	uxth	r3, r3
 801838c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018390:	d10c      	bne.n	80183ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018392:	693b      	ldr	r3, [r7, #16]
 8018394:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018396:	2b06      	cmp	r3, #6
 8018398:	d108      	bne.n	80183ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801839a:	693b      	ldr	r3, [r7, #16]
 801839c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801839e:	2b04      	cmp	r3, #4
 80183a0:	d104      	bne.n	80183ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80183a2:	693b      	ldr	r3, [r7, #16]
 80183a4:	885b      	ldrh	r3, [r3, #2]
 80183a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80183a8:	2b08      	cmp	r3, #8
 80183aa:	d003      	beq.n	80183b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80183ac:	6878      	ldr	r0, [r7, #4]
 80183ae:	f7f6 fc83 	bl	800ecb8 <pbuf_free>
    return;
 80183b2:	e05a      	b.n	801846a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80183b4:	693b      	ldr	r3, [r7, #16]
 80183b6:	330e      	adds	r3, #14
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80183bc:	693b      	ldr	r3, [r7, #16]
 80183be:	3318      	adds	r3, #24
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80183c4:	683b      	ldr	r3, [r7, #0]
 80183c6:	3304      	adds	r3, #4
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d102      	bne.n	80183d4 <etharp_input+0x74>
    for_us = 0;
 80183ce:	2300      	movs	r3, #0
 80183d0:	75fb      	strb	r3, [r7, #23]
 80183d2:	e009      	b.n	80183e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80183d4:	68ba      	ldr	r2, [r7, #8]
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	3304      	adds	r3, #4
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	429a      	cmp	r2, r3
 80183de:	bf0c      	ite	eq
 80183e0:	2301      	moveq	r3, #1
 80183e2:	2300      	movne	r3, #0
 80183e4:	b2db      	uxtb	r3, r3
 80183e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80183e8:	693b      	ldr	r3, [r7, #16]
 80183ea:	f103 0208 	add.w	r2, r3, #8
 80183ee:	7dfb      	ldrb	r3, [r7, #23]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d001      	beq.n	80183f8 <etharp_input+0x98>
 80183f4:	2301      	movs	r3, #1
 80183f6:	e000      	b.n	80183fa <etharp_input+0x9a>
 80183f8:	2302      	movs	r3, #2
 80183fa:	f107 010c 	add.w	r1, r7, #12
 80183fe:	6838      	ldr	r0, [r7, #0]
 8018400:	f7ff fed8 	bl	80181b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018404:	693b      	ldr	r3, [r7, #16]
 8018406:	88db      	ldrh	r3, [r3, #6]
 8018408:	b29b      	uxth	r3, r3
 801840a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801840e:	d003      	beq.n	8018418 <etharp_input+0xb8>
 8018410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018414:	d01e      	beq.n	8018454 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018416:	e025      	b.n	8018464 <etharp_input+0x104>
      if (for_us) {
 8018418:	7dfb      	ldrb	r3, [r7, #23]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d021      	beq.n	8018462 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801841e:	683b      	ldr	r3, [r7, #0]
 8018420:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018424:	693b      	ldr	r3, [r7, #16]
 8018426:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801842a:	683b      	ldr	r3, [r7, #0]
 801842c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8018430:	683b      	ldr	r3, [r7, #0]
 8018432:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018434:	693a      	ldr	r2, [r7, #16]
 8018436:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018438:	2102      	movs	r1, #2
 801843a:	9103      	str	r1, [sp, #12]
 801843c:	f107 010c 	add.w	r1, r7, #12
 8018440:	9102      	str	r1, [sp, #8]
 8018442:	9201      	str	r2, [sp, #4]
 8018444:	9300      	str	r3, [sp, #0]
 8018446:	462b      	mov	r3, r5
 8018448:	4622      	mov	r2, r4
 801844a:	4601      	mov	r1, r0
 801844c:	6838      	ldr	r0, [r7, #0]
 801844e:	f000 faef 	bl	8018a30 <etharp_raw>
      break;
 8018452:	e006      	b.n	8018462 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8018454:	f107 030c 	add.w	r3, r7, #12
 8018458:	4619      	mov	r1, r3
 801845a:	6838      	ldr	r0, [r7, #0]
 801845c:	f7fe f9fc 	bl	8016858 <dhcp_arp_reply>
      break;
 8018460:	e000      	b.n	8018464 <etharp_input+0x104>
      break;
 8018462:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018464:	6878      	ldr	r0, [r7, #4]
 8018466:	f7f6 fc27 	bl	800ecb8 <pbuf_free>
}
 801846a:	3718      	adds	r7, #24
 801846c:	46bd      	mov	sp, r7
 801846e:	bdb0      	pop	{r4, r5, r7, pc}
 8018470:	0801f0b4 	.word	0x0801f0b4
 8018474:	0801f204 	.word	0x0801f204
 8018478:	0801f12c 	.word	0x0801f12c

0801847c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b086      	sub	sp, #24
 8018480:	af02      	add	r7, sp, #8
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	4613      	mov	r3, r2
 8018488:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801848a:	79fa      	ldrb	r2, [r7, #7]
 801848c:	4944      	ldr	r1, [pc, #272]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 801848e:	4613      	mov	r3, r2
 8018490:	005b      	lsls	r3, r3, #1
 8018492:	4413      	add	r3, r2
 8018494:	00db      	lsls	r3, r3, #3
 8018496:	440b      	add	r3, r1
 8018498:	3314      	adds	r3, #20
 801849a:	781b      	ldrb	r3, [r3, #0]
 801849c:	2b01      	cmp	r3, #1
 801849e:	d806      	bhi.n	80184ae <etharp_output_to_arp_index+0x32>
 80184a0:	4b40      	ldr	r3, [pc, #256]	; (80185a4 <etharp_output_to_arp_index+0x128>)
 80184a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80184a6:	4940      	ldr	r1, [pc, #256]	; (80185a8 <etharp_output_to_arp_index+0x12c>)
 80184a8:	4840      	ldr	r0, [pc, #256]	; (80185ac <etharp_output_to_arp_index+0x130>)
 80184aa:	f003 f867 	bl	801b57c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80184ae:	79fa      	ldrb	r2, [r7, #7]
 80184b0:	493b      	ldr	r1, [pc, #236]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 80184b2:	4613      	mov	r3, r2
 80184b4:	005b      	lsls	r3, r3, #1
 80184b6:	4413      	add	r3, r2
 80184b8:	00db      	lsls	r3, r3, #3
 80184ba:	440b      	add	r3, r1
 80184bc:	3314      	adds	r3, #20
 80184be:	781b      	ldrb	r3, [r3, #0]
 80184c0:	2b02      	cmp	r3, #2
 80184c2:	d153      	bne.n	801856c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80184c4:	79fa      	ldrb	r2, [r7, #7]
 80184c6:	4936      	ldr	r1, [pc, #216]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 80184c8:	4613      	mov	r3, r2
 80184ca:	005b      	lsls	r3, r3, #1
 80184cc:	4413      	add	r3, r2
 80184ce:	00db      	lsls	r3, r3, #3
 80184d0:	440b      	add	r3, r1
 80184d2:	3312      	adds	r3, #18
 80184d4:	881b      	ldrh	r3, [r3, #0]
 80184d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80184da:	d919      	bls.n	8018510 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80184dc:	79fa      	ldrb	r2, [r7, #7]
 80184de:	4613      	mov	r3, r2
 80184e0:	005b      	lsls	r3, r3, #1
 80184e2:	4413      	add	r3, r2
 80184e4:	00db      	lsls	r3, r3, #3
 80184e6:	4a2e      	ldr	r2, [pc, #184]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 80184e8:	4413      	add	r3, r2
 80184ea:	3304      	adds	r3, #4
 80184ec:	4619      	mov	r1, r3
 80184ee:	68f8      	ldr	r0, [r7, #12]
 80184f0:	f000 fb4c 	bl	8018b8c <etharp_request>
 80184f4:	4603      	mov	r3, r0
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d138      	bne.n	801856c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80184fa:	79fa      	ldrb	r2, [r7, #7]
 80184fc:	4928      	ldr	r1, [pc, #160]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 80184fe:	4613      	mov	r3, r2
 8018500:	005b      	lsls	r3, r3, #1
 8018502:	4413      	add	r3, r2
 8018504:	00db      	lsls	r3, r3, #3
 8018506:	440b      	add	r3, r1
 8018508:	3314      	adds	r3, #20
 801850a:	2203      	movs	r2, #3
 801850c:	701a      	strb	r2, [r3, #0]
 801850e:	e02d      	b.n	801856c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018510:	79fa      	ldrb	r2, [r7, #7]
 8018512:	4923      	ldr	r1, [pc, #140]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 8018514:	4613      	mov	r3, r2
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	4413      	add	r3, r2
 801851a:	00db      	lsls	r3, r3, #3
 801851c:	440b      	add	r3, r1
 801851e:	3312      	adds	r3, #18
 8018520:	881b      	ldrh	r3, [r3, #0]
 8018522:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018526:	d321      	bcc.n	801856c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018528:	79fa      	ldrb	r2, [r7, #7]
 801852a:	4613      	mov	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	4413      	add	r3, r2
 8018530:	00db      	lsls	r3, r3, #3
 8018532:	4a1b      	ldr	r2, [pc, #108]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 8018534:	4413      	add	r3, r2
 8018536:	1d19      	adds	r1, r3, #4
 8018538:	79fa      	ldrb	r2, [r7, #7]
 801853a:	4613      	mov	r3, r2
 801853c:	005b      	lsls	r3, r3, #1
 801853e:	4413      	add	r3, r2
 8018540:	00db      	lsls	r3, r3, #3
 8018542:	3308      	adds	r3, #8
 8018544:	4a16      	ldr	r2, [pc, #88]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 8018546:	4413      	add	r3, r2
 8018548:	3304      	adds	r3, #4
 801854a:	461a      	mov	r2, r3
 801854c:	68f8      	ldr	r0, [r7, #12]
 801854e:	f000 fafb 	bl	8018b48 <etharp_request_dst>
 8018552:	4603      	mov	r3, r0
 8018554:	2b00      	cmp	r3, #0
 8018556:	d109      	bne.n	801856c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018558:	79fa      	ldrb	r2, [r7, #7]
 801855a:	4911      	ldr	r1, [pc, #68]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 801855c:	4613      	mov	r3, r2
 801855e:	005b      	lsls	r3, r3, #1
 8018560:	4413      	add	r3, r2
 8018562:	00db      	lsls	r3, r3, #3
 8018564:	440b      	add	r3, r1
 8018566:	3314      	adds	r3, #20
 8018568:	2203      	movs	r2, #3
 801856a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018572:	79fa      	ldrb	r2, [r7, #7]
 8018574:	4613      	mov	r3, r2
 8018576:	005b      	lsls	r3, r3, #1
 8018578:	4413      	add	r3, r2
 801857a:	00db      	lsls	r3, r3, #3
 801857c:	3308      	adds	r3, #8
 801857e:	4a08      	ldr	r2, [pc, #32]	; (80185a0 <etharp_output_to_arp_index+0x124>)
 8018580:	4413      	add	r3, r2
 8018582:	3304      	adds	r3, #4
 8018584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018588:	9200      	str	r2, [sp, #0]
 801858a:	460a      	mov	r2, r1
 801858c:	68b9      	ldr	r1, [r7, #8]
 801858e:	68f8      	ldr	r0, [r7, #12]
 8018590:	f001 fe80 	bl	801a294 <ethernet_output>
 8018594:	4603      	mov	r3, r0
}
 8018596:	4618      	mov	r0, r3
 8018598:	3710      	adds	r7, #16
 801859a:	46bd      	mov	sp, r7
 801859c:	bd80      	pop	{r7, pc}
 801859e:	bf00      	nop
 80185a0:	2000c9e0 	.word	0x2000c9e0
 80185a4:	0801f0b4 	.word	0x0801f0b4
 80185a8:	0801f224 	.word	0x0801f224
 80185ac:	0801f12c 	.word	0x0801f12c

080185b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b08a      	sub	sp, #40	; 0x28
 80185b4:	af02      	add	r7, sp, #8
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d106      	bne.n	80185d4 <etharp_output+0x24>
 80185c6:	4b73      	ldr	r3, [pc, #460]	; (8018794 <etharp_output+0x1e4>)
 80185c8:	f240 321e 	movw	r2, #798	; 0x31e
 80185cc:	4972      	ldr	r1, [pc, #456]	; (8018798 <etharp_output+0x1e8>)
 80185ce:	4873      	ldr	r0, [pc, #460]	; (801879c <etharp_output+0x1ec>)
 80185d0:	f002 ffd4 	bl	801b57c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d106      	bne.n	80185e8 <etharp_output+0x38>
 80185da:	4b6e      	ldr	r3, [pc, #440]	; (8018794 <etharp_output+0x1e4>)
 80185dc:	f240 321f 	movw	r2, #799	; 0x31f
 80185e0:	496f      	ldr	r1, [pc, #444]	; (80187a0 <etharp_output+0x1f0>)
 80185e2:	486e      	ldr	r0, [pc, #440]	; (801879c <etharp_output+0x1ec>)
 80185e4:	f002 ffca 	bl	801b57c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d106      	bne.n	80185fc <etharp_output+0x4c>
 80185ee:	4b69      	ldr	r3, [pc, #420]	; (8018794 <etharp_output+0x1e4>)
 80185f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80185f4:	496b      	ldr	r1, [pc, #428]	; (80187a4 <etharp_output+0x1f4>)
 80185f6:	4869      	ldr	r0, [pc, #420]	; (801879c <etharp_output+0x1ec>)
 80185f8:	f002 ffc0 	bl	801b57c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	68f9      	ldr	r1, [r7, #12]
 8018602:	4618      	mov	r0, r3
 8018604:	f000 ff3a 	bl	801947c <ip4_addr_isbroadcast_u32>
 8018608:	4603      	mov	r3, r0
 801860a:	2b00      	cmp	r3, #0
 801860c:	d002      	beq.n	8018614 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801860e:	4b66      	ldr	r3, [pc, #408]	; (80187a8 <etharp_output+0x1f8>)
 8018610:	61fb      	str	r3, [r7, #28]
 8018612:	e0af      	b.n	8018774 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801861c:	2be0      	cmp	r3, #224	; 0xe0
 801861e:	d118      	bne.n	8018652 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018620:	2301      	movs	r3, #1
 8018622:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018624:	2300      	movs	r3, #0
 8018626:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018628:	235e      	movs	r3, #94	; 0x5e
 801862a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	3301      	adds	r3, #1
 8018630:	781b      	ldrb	r3, [r3, #0]
 8018632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018636:	b2db      	uxtb	r3, r3
 8018638:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	3302      	adds	r3, #2
 801863e:	781b      	ldrb	r3, [r3, #0]
 8018640:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	3303      	adds	r3, #3
 8018646:	781b      	ldrb	r3, [r3, #0]
 8018648:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801864a:	f107 0310 	add.w	r3, r7, #16
 801864e:	61fb      	str	r3, [r7, #28]
 8018650:	e090      	b.n	8018774 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681a      	ldr	r2, [r3, #0]
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	3304      	adds	r3, #4
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	405a      	eors	r2, r3
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	3308      	adds	r3, #8
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	4013      	ands	r3, r2
 8018666:	2b00      	cmp	r3, #0
 8018668:	d012      	beq.n	8018690 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018670:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018674:	4293      	cmp	r3, r2
 8018676:	d00b      	beq.n	8018690 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	330c      	adds	r3, #12
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d003      	beq.n	801868a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	330c      	adds	r3, #12
 8018686:	61bb      	str	r3, [r7, #24]
 8018688:	e002      	b.n	8018690 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801868a:	f06f 0303 	mvn.w	r3, #3
 801868e:	e07d      	b.n	801878c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018690:	4b46      	ldr	r3, [pc, #280]	; (80187ac <etharp_output+0x1fc>)
 8018692:	781b      	ldrb	r3, [r3, #0]
 8018694:	4619      	mov	r1, r3
 8018696:	4a46      	ldr	r2, [pc, #280]	; (80187b0 <etharp_output+0x200>)
 8018698:	460b      	mov	r3, r1
 801869a:	005b      	lsls	r3, r3, #1
 801869c:	440b      	add	r3, r1
 801869e:	00db      	lsls	r3, r3, #3
 80186a0:	4413      	add	r3, r2
 80186a2:	3314      	adds	r3, #20
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	2b01      	cmp	r3, #1
 80186a8:	d925      	bls.n	80186f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80186aa:	4b40      	ldr	r3, [pc, #256]	; (80187ac <etharp_output+0x1fc>)
 80186ac:	781b      	ldrb	r3, [r3, #0]
 80186ae:	4619      	mov	r1, r3
 80186b0:	4a3f      	ldr	r2, [pc, #252]	; (80187b0 <etharp_output+0x200>)
 80186b2:	460b      	mov	r3, r1
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	440b      	add	r3, r1
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	4413      	add	r3, r2
 80186bc:	3308      	adds	r3, #8
 80186be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80186c0:	68fa      	ldr	r2, [r7, #12]
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d117      	bne.n	80186f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80186c6:	69bb      	ldr	r3, [r7, #24]
 80186c8:	681a      	ldr	r2, [r3, #0]
 80186ca:	4b38      	ldr	r3, [pc, #224]	; (80187ac <etharp_output+0x1fc>)
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	4618      	mov	r0, r3
 80186d0:	4937      	ldr	r1, [pc, #220]	; (80187b0 <etharp_output+0x200>)
 80186d2:	4603      	mov	r3, r0
 80186d4:	005b      	lsls	r3, r3, #1
 80186d6:	4403      	add	r3, r0
 80186d8:	00db      	lsls	r3, r3, #3
 80186da:	440b      	add	r3, r1
 80186dc:	3304      	adds	r3, #4
 80186de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d108      	bne.n	80186f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80186e4:	4b31      	ldr	r3, [pc, #196]	; (80187ac <etharp_output+0x1fc>)
 80186e6:	781b      	ldrb	r3, [r3, #0]
 80186e8:	461a      	mov	r2, r3
 80186ea:	68b9      	ldr	r1, [r7, #8]
 80186ec:	68f8      	ldr	r0, [r7, #12]
 80186ee:	f7ff fec5 	bl	801847c <etharp_output_to_arp_index>
 80186f2:	4603      	mov	r3, r0
 80186f4:	e04a      	b.n	801878c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80186f6:	2300      	movs	r3, #0
 80186f8:	75fb      	strb	r3, [r7, #23]
 80186fa:	e031      	b.n	8018760 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80186fc:	7dfa      	ldrb	r2, [r7, #23]
 80186fe:	492c      	ldr	r1, [pc, #176]	; (80187b0 <etharp_output+0x200>)
 8018700:	4613      	mov	r3, r2
 8018702:	005b      	lsls	r3, r3, #1
 8018704:	4413      	add	r3, r2
 8018706:	00db      	lsls	r3, r3, #3
 8018708:	440b      	add	r3, r1
 801870a:	3314      	adds	r3, #20
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	2b01      	cmp	r3, #1
 8018710:	d923      	bls.n	801875a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018712:	7dfa      	ldrb	r2, [r7, #23]
 8018714:	4926      	ldr	r1, [pc, #152]	; (80187b0 <etharp_output+0x200>)
 8018716:	4613      	mov	r3, r2
 8018718:	005b      	lsls	r3, r3, #1
 801871a:	4413      	add	r3, r2
 801871c:	00db      	lsls	r3, r3, #3
 801871e:	440b      	add	r3, r1
 8018720:	3308      	adds	r3, #8
 8018722:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018724:	68fa      	ldr	r2, [r7, #12]
 8018726:	429a      	cmp	r2, r3
 8018728:	d117      	bne.n	801875a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801872a:	69bb      	ldr	r3, [r7, #24]
 801872c:	6819      	ldr	r1, [r3, #0]
 801872e:	7dfa      	ldrb	r2, [r7, #23]
 8018730:	481f      	ldr	r0, [pc, #124]	; (80187b0 <etharp_output+0x200>)
 8018732:	4613      	mov	r3, r2
 8018734:	005b      	lsls	r3, r3, #1
 8018736:	4413      	add	r3, r2
 8018738:	00db      	lsls	r3, r3, #3
 801873a:	4403      	add	r3, r0
 801873c:	3304      	adds	r3, #4
 801873e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018740:	4299      	cmp	r1, r3
 8018742:	d10a      	bne.n	801875a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018744:	4a19      	ldr	r2, [pc, #100]	; (80187ac <etharp_output+0x1fc>)
 8018746:	7dfb      	ldrb	r3, [r7, #23]
 8018748:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801874a:	7dfb      	ldrb	r3, [r7, #23]
 801874c:	461a      	mov	r2, r3
 801874e:	68b9      	ldr	r1, [r7, #8]
 8018750:	68f8      	ldr	r0, [r7, #12]
 8018752:	f7ff fe93 	bl	801847c <etharp_output_to_arp_index>
 8018756:	4603      	mov	r3, r0
 8018758:	e018      	b.n	801878c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801875a:	7dfb      	ldrb	r3, [r7, #23]
 801875c:	3301      	adds	r3, #1
 801875e:	75fb      	strb	r3, [r7, #23]
 8018760:	7dfb      	ldrb	r3, [r7, #23]
 8018762:	2b09      	cmp	r3, #9
 8018764:	d9ca      	bls.n	80186fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018766:	68ba      	ldr	r2, [r7, #8]
 8018768:	69b9      	ldr	r1, [r7, #24]
 801876a:	68f8      	ldr	r0, [r7, #12]
 801876c:	f000 f822 	bl	80187b4 <etharp_query>
 8018770:	4603      	mov	r3, r0
 8018772:	e00b      	b.n	801878c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801877a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801877e:	9300      	str	r3, [sp, #0]
 8018780:	69fb      	ldr	r3, [r7, #28]
 8018782:	68b9      	ldr	r1, [r7, #8]
 8018784:	68f8      	ldr	r0, [r7, #12]
 8018786:	f001 fd85 	bl	801a294 <ethernet_output>
 801878a:	4603      	mov	r3, r0
}
 801878c:	4618      	mov	r0, r3
 801878e:	3720      	adds	r7, #32
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	0801f0b4 	.word	0x0801f0b4
 8018798:	0801f204 	.word	0x0801f204
 801879c:	0801f12c 	.word	0x0801f12c
 80187a0:	0801f254 	.word	0x0801f254
 80187a4:	0801f1f4 	.word	0x0801f1f4
 80187a8:	0801f93c 	.word	0x0801f93c
 80187ac:	2000cad0 	.word	0x2000cad0
 80187b0:	2000c9e0 	.word	0x2000c9e0

080187b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b08c      	sub	sp, #48	; 0x30
 80187b8:	af02      	add	r7, sp, #8
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	332a      	adds	r3, #42	; 0x2a
 80187c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80187c6:	23ff      	movs	r3, #255	; 0xff
 80187c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80187cc:	2300      	movs	r3, #0
 80187ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80187d0:	68bb      	ldr	r3, [r7, #8]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	68f9      	ldr	r1, [r7, #12]
 80187d6:	4618      	mov	r0, r3
 80187d8:	f000 fe50 	bl	801947c <ip4_addr_isbroadcast_u32>
 80187dc:	4603      	mov	r3, r0
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d10c      	bne.n	80187fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80187ea:	2be0      	cmp	r3, #224	; 0xe0
 80187ec:	d006      	beq.n	80187fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80187ee:	68bb      	ldr	r3, [r7, #8]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d003      	beq.n	80187fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80187f4:	68bb      	ldr	r3, [r7, #8]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d102      	bne.n	8018802 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80187fc:	f06f 030f 	mvn.w	r3, #15
 8018800:	e101      	b.n	8018a06 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018802:	68fa      	ldr	r2, [r7, #12]
 8018804:	2101      	movs	r1, #1
 8018806:	68b8      	ldr	r0, [r7, #8]
 8018808:	f7ff fb5c 	bl	8017ec4 <etharp_find_entry>
 801880c:	4603      	mov	r3, r0
 801880e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018810:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018814:	2b00      	cmp	r3, #0
 8018816:	da02      	bge.n	801881e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018818:	8a7b      	ldrh	r3, [r7, #18]
 801881a:	b25b      	sxtb	r3, r3
 801881c:	e0f3      	b.n	8018a06 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801881e:	8a7b      	ldrh	r3, [r7, #18]
 8018820:	2b7e      	cmp	r3, #126	; 0x7e
 8018822:	d906      	bls.n	8018832 <etharp_query+0x7e>
 8018824:	4b7a      	ldr	r3, [pc, #488]	; (8018a10 <etharp_query+0x25c>)
 8018826:	f240 32c1 	movw	r2, #961	; 0x3c1
 801882a:	497a      	ldr	r1, [pc, #488]	; (8018a14 <etharp_query+0x260>)
 801882c:	487a      	ldr	r0, [pc, #488]	; (8018a18 <etharp_query+0x264>)
 801882e:	f002 fea5 	bl	801b57c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018832:	8a7b      	ldrh	r3, [r7, #18]
 8018834:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018836:	7c7a      	ldrb	r2, [r7, #17]
 8018838:	4978      	ldr	r1, [pc, #480]	; (8018a1c <etharp_query+0x268>)
 801883a:	4613      	mov	r3, r2
 801883c:	005b      	lsls	r3, r3, #1
 801883e:	4413      	add	r3, r2
 8018840:	00db      	lsls	r3, r3, #3
 8018842:	440b      	add	r3, r1
 8018844:	3314      	adds	r3, #20
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d115      	bne.n	8018878 <etharp_query+0xc4>
    is_new_entry = 1;
 801884c:	2301      	movs	r3, #1
 801884e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018850:	7c7a      	ldrb	r2, [r7, #17]
 8018852:	4972      	ldr	r1, [pc, #456]	; (8018a1c <etharp_query+0x268>)
 8018854:	4613      	mov	r3, r2
 8018856:	005b      	lsls	r3, r3, #1
 8018858:	4413      	add	r3, r2
 801885a:	00db      	lsls	r3, r3, #3
 801885c:	440b      	add	r3, r1
 801885e:	3314      	adds	r3, #20
 8018860:	2201      	movs	r2, #1
 8018862:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018864:	7c7a      	ldrb	r2, [r7, #17]
 8018866:	496d      	ldr	r1, [pc, #436]	; (8018a1c <etharp_query+0x268>)
 8018868:	4613      	mov	r3, r2
 801886a:	005b      	lsls	r3, r3, #1
 801886c:	4413      	add	r3, r2
 801886e:	00db      	lsls	r3, r3, #3
 8018870:	440b      	add	r3, r1
 8018872:	3308      	adds	r3, #8
 8018874:	68fa      	ldr	r2, [r7, #12]
 8018876:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018878:	7c7a      	ldrb	r2, [r7, #17]
 801887a:	4968      	ldr	r1, [pc, #416]	; (8018a1c <etharp_query+0x268>)
 801887c:	4613      	mov	r3, r2
 801887e:	005b      	lsls	r3, r3, #1
 8018880:	4413      	add	r3, r2
 8018882:	00db      	lsls	r3, r3, #3
 8018884:	440b      	add	r3, r1
 8018886:	3314      	adds	r3, #20
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	2b01      	cmp	r3, #1
 801888c:	d011      	beq.n	80188b2 <etharp_query+0xfe>
 801888e:	7c7a      	ldrb	r2, [r7, #17]
 8018890:	4962      	ldr	r1, [pc, #392]	; (8018a1c <etharp_query+0x268>)
 8018892:	4613      	mov	r3, r2
 8018894:	005b      	lsls	r3, r3, #1
 8018896:	4413      	add	r3, r2
 8018898:	00db      	lsls	r3, r3, #3
 801889a:	440b      	add	r3, r1
 801889c:	3314      	adds	r3, #20
 801889e:	781b      	ldrb	r3, [r3, #0]
 80188a0:	2b01      	cmp	r3, #1
 80188a2:	d806      	bhi.n	80188b2 <etharp_query+0xfe>
 80188a4:	4b5a      	ldr	r3, [pc, #360]	; (8018a10 <etharp_query+0x25c>)
 80188a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80188aa:	495d      	ldr	r1, [pc, #372]	; (8018a20 <etharp_query+0x26c>)
 80188ac:	485a      	ldr	r0, [pc, #360]	; (8018a18 <etharp_query+0x264>)
 80188ae:	f002 fe65 	bl	801b57c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80188b2:	6a3b      	ldr	r3, [r7, #32]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d102      	bne.n	80188be <etharp_query+0x10a>
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d10c      	bne.n	80188d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80188be:	68b9      	ldr	r1, [r7, #8]
 80188c0:	68f8      	ldr	r0, [r7, #12]
 80188c2:	f000 f963 	bl	8018b8c <etharp_request>
 80188c6:	4603      	mov	r3, r0
 80188c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d102      	bne.n	80188d8 <etharp_query+0x124>
      return result;
 80188d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80188d6:	e096      	b.n	8018a06 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d106      	bne.n	80188ec <etharp_query+0x138>
 80188de:	4b4c      	ldr	r3, [pc, #304]	; (8018a10 <etharp_query+0x25c>)
 80188e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80188e4:	494f      	ldr	r1, [pc, #316]	; (8018a24 <etharp_query+0x270>)
 80188e6:	484c      	ldr	r0, [pc, #304]	; (8018a18 <etharp_query+0x264>)
 80188e8:	f002 fe48 	bl	801b57c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80188ec:	7c7a      	ldrb	r2, [r7, #17]
 80188ee:	494b      	ldr	r1, [pc, #300]	; (8018a1c <etharp_query+0x268>)
 80188f0:	4613      	mov	r3, r2
 80188f2:	005b      	lsls	r3, r3, #1
 80188f4:	4413      	add	r3, r2
 80188f6:	00db      	lsls	r3, r3, #3
 80188f8:	440b      	add	r3, r1
 80188fa:	3314      	adds	r3, #20
 80188fc:	781b      	ldrb	r3, [r3, #0]
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d917      	bls.n	8018932 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018902:	4a49      	ldr	r2, [pc, #292]	; (8018a28 <etharp_query+0x274>)
 8018904:	7c7b      	ldrb	r3, [r7, #17]
 8018906:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018908:	7c7a      	ldrb	r2, [r7, #17]
 801890a:	4613      	mov	r3, r2
 801890c:	005b      	lsls	r3, r3, #1
 801890e:	4413      	add	r3, r2
 8018910:	00db      	lsls	r3, r3, #3
 8018912:	3308      	adds	r3, #8
 8018914:	4a41      	ldr	r2, [pc, #260]	; (8018a1c <etharp_query+0x268>)
 8018916:	4413      	add	r3, r2
 8018918:	3304      	adds	r3, #4
 801891a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801891e:	9200      	str	r2, [sp, #0]
 8018920:	697a      	ldr	r2, [r7, #20]
 8018922:	6879      	ldr	r1, [r7, #4]
 8018924:	68f8      	ldr	r0, [r7, #12]
 8018926:	f001 fcb5 	bl	801a294 <ethernet_output>
 801892a:	4603      	mov	r3, r0
 801892c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018930:	e067      	b.n	8018a02 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018932:	7c7a      	ldrb	r2, [r7, #17]
 8018934:	4939      	ldr	r1, [pc, #228]	; (8018a1c <etharp_query+0x268>)
 8018936:	4613      	mov	r3, r2
 8018938:	005b      	lsls	r3, r3, #1
 801893a:	4413      	add	r3, r2
 801893c:	00db      	lsls	r3, r3, #3
 801893e:	440b      	add	r3, r1
 8018940:	3314      	adds	r3, #20
 8018942:	781b      	ldrb	r3, [r3, #0]
 8018944:	2b01      	cmp	r3, #1
 8018946:	d15c      	bne.n	8018a02 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018948:	2300      	movs	r3, #0
 801894a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018950:	e01c      	b.n	801898c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018952:	69fb      	ldr	r3, [r7, #28]
 8018954:	895a      	ldrh	r2, [r3, #10]
 8018956:	69fb      	ldr	r3, [r7, #28]
 8018958:	891b      	ldrh	r3, [r3, #8]
 801895a:	429a      	cmp	r2, r3
 801895c:	d10a      	bne.n	8018974 <etharp_query+0x1c0>
 801895e:	69fb      	ldr	r3, [r7, #28]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d006      	beq.n	8018974 <etharp_query+0x1c0>
 8018966:	4b2a      	ldr	r3, [pc, #168]	; (8018a10 <etharp_query+0x25c>)
 8018968:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801896c:	492f      	ldr	r1, [pc, #188]	; (8018a2c <etharp_query+0x278>)
 801896e:	482a      	ldr	r0, [pc, #168]	; (8018a18 <etharp_query+0x264>)
 8018970:	f002 fe04 	bl	801b57c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018974:	69fb      	ldr	r3, [r7, #28]
 8018976:	7b1b      	ldrb	r3, [r3, #12]
 8018978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801897c:	2b00      	cmp	r3, #0
 801897e:	d002      	beq.n	8018986 <etharp_query+0x1d2>
        copy_needed = 1;
 8018980:	2301      	movs	r3, #1
 8018982:	61bb      	str	r3, [r7, #24]
        break;
 8018984:	e005      	b.n	8018992 <etharp_query+0x1de>
      }
      p = p->next;
 8018986:	69fb      	ldr	r3, [r7, #28]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801898c:	69fb      	ldr	r3, [r7, #28]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d1df      	bne.n	8018952 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018992:	69bb      	ldr	r3, [r7, #24]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d007      	beq.n	80189a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018998:	687a      	ldr	r2, [r7, #4]
 801899a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801899e:	200e      	movs	r0, #14
 80189a0:	f7f6 fc28 	bl	800f1f4 <pbuf_clone>
 80189a4:	61f8      	str	r0, [r7, #28]
 80189a6:	e004      	b.n	80189b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80189ac:	69f8      	ldr	r0, [r7, #28]
 80189ae:	f7f6 fa27 	bl	800ee00 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80189b2:	69fb      	ldr	r3, [r7, #28]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d021      	beq.n	80189fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80189b8:	7c7a      	ldrb	r2, [r7, #17]
 80189ba:	4918      	ldr	r1, [pc, #96]	; (8018a1c <etharp_query+0x268>)
 80189bc:	4613      	mov	r3, r2
 80189be:	005b      	lsls	r3, r3, #1
 80189c0:	4413      	add	r3, r2
 80189c2:	00db      	lsls	r3, r3, #3
 80189c4:	440b      	add	r3, r1
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d00a      	beq.n	80189e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80189cc:	7c7a      	ldrb	r2, [r7, #17]
 80189ce:	4913      	ldr	r1, [pc, #76]	; (8018a1c <etharp_query+0x268>)
 80189d0:	4613      	mov	r3, r2
 80189d2:	005b      	lsls	r3, r3, #1
 80189d4:	4413      	add	r3, r2
 80189d6:	00db      	lsls	r3, r3, #3
 80189d8:	440b      	add	r3, r1
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	4618      	mov	r0, r3
 80189de:	f7f6 f96b 	bl	800ecb8 <pbuf_free>
      }
      arp_table[i].q = p;
 80189e2:	7c7a      	ldrb	r2, [r7, #17]
 80189e4:	490d      	ldr	r1, [pc, #52]	; (8018a1c <etharp_query+0x268>)
 80189e6:	4613      	mov	r3, r2
 80189e8:	005b      	lsls	r3, r3, #1
 80189ea:	4413      	add	r3, r2
 80189ec:	00db      	lsls	r3, r3, #3
 80189ee:	440b      	add	r3, r1
 80189f0:	69fa      	ldr	r2, [r7, #28]
 80189f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80189f4:	2300      	movs	r3, #0
 80189f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80189fa:	e002      	b.n	8018a02 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80189fc:	23ff      	movs	r3, #255	; 0xff
 80189fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018a02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3728      	adds	r7, #40	; 0x28
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
 8018a0e:	bf00      	nop
 8018a10:	0801f0b4 	.word	0x0801f0b4
 8018a14:	0801f260 	.word	0x0801f260
 8018a18:	0801f12c 	.word	0x0801f12c
 8018a1c:	2000c9e0 	.word	0x2000c9e0
 8018a20:	0801f270 	.word	0x0801f270
 8018a24:	0801f254 	.word	0x0801f254
 8018a28:	2000cad0 	.word	0x2000cad0
 8018a2c:	0801f298 	.word	0x0801f298

08018a30 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b08a      	sub	sp, #40	; 0x28
 8018a34:	af02      	add	r7, sp, #8
 8018a36:	60f8      	str	r0, [r7, #12]
 8018a38:	60b9      	str	r1, [r7, #8]
 8018a3a:	607a      	str	r2, [r7, #4]
 8018a3c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018a3e:	2300      	movs	r3, #0
 8018a40:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d106      	bne.n	8018a56 <etharp_raw+0x26>
 8018a48:	4b3a      	ldr	r3, [pc, #232]	; (8018b34 <etharp_raw+0x104>)
 8018a4a:	f240 4257 	movw	r2, #1111	; 0x457
 8018a4e:	493a      	ldr	r1, [pc, #232]	; (8018b38 <etharp_raw+0x108>)
 8018a50:	483a      	ldr	r0, [pc, #232]	; (8018b3c <etharp_raw+0x10c>)
 8018a52:	f002 fd93 	bl	801b57c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018a56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a5a:	211c      	movs	r1, #28
 8018a5c:	200e      	movs	r0, #14
 8018a5e:	f7f5 fe47 	bl	800e6f0 <pbuf_alloc>
 8018a62:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018a64:	69bb      	ldr	r3, [r7, #24]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d102      	bne.n	8018a70 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8018a6e:	e05d      	b.n	8018b2c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018a70:	69bb      	ldr	r3, [r7, #24]
 8018a72:	895b      	ldrh	r3, [r3, #10]
 8018a74:	2b1b      	cmp	r3, #27
 8018a76:	d806      	bhi.n	8018a86 <etharp_raw+0x56>
 8018a78:	4b2e      	ldr	r3, [pc, #184]	; (8018b34 <etharp_raw+0x104>)
 8018a7a:	f240 4262 	movw	r2, #1122	; 0x462
 8018a7e:	4930      	ldr	r1, [pc, #192]	; (8018b40 <etharp_raw+0x110>)
 8018a80:	482e      	ldr	r0, [pc, #184]	; (8018b3c <etharp_raw+0x10c>)
 8018a82:	f002 fd7b 	bl	801b57c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018a86:	69bb      	ldr	r3, [r7, #24]
 8018a88:	685b      	ldr	r3, [r3, #4]
 8018a8a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018a8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7f4 fcae 	bl	800d3f0 <lwip_htons>
 8018a94:	4603      	mov	r3, r0
 8018a96:	461a      	mov	r2, r3
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018aa2:	2b06      	cmp	r3, #6
 8018aa4:	d006      	beq.n	8018ab4 <etharp_raw+0x84>
 8018aa6:	4b23      	ldr	r3, [pc, #140]	; (8018b34 <etharp_raw+0x104>)
 8018aa8:	f240 4269 	movw	r2, #1129	; 0x469
 8018aac:	4925      	ldr	r1, [pc, #148]	; (8018b44 <etharp_raw+0x114>)
 8018aae:	4823      	ldr	r0, [pc, #140]	; (8018b3c <etharp_raw+0x10c>)
 8018ab0:	f002 fd64 	bl	801b57c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018ab4:	697b      	ldr	r3, [r7, #20]
 8018ab6:	3308      	adds	r3, #8
 8018ab8:	2206      	movs	r2, #6
 8018aba:	6839      	ldr	r1, [r7, #0]
 8018abc:	4618      	mov	r0, r3
 8018abe:	f002 fc69 	bl	801b394 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018ac2:	697b      	ldr	r3, [r7, #20]
 8018ac4:	3312      	adds	r3, #18
 8018ac6:	2206      	movs	r2, #6
 8018ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018aca:	4618      	mov	r0, r3
 8018acc:	f002 fc62 	bl	801b394 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018ad0:	697b      	ldr	r3, [r7, #20]
 8018ad2:	330e      	adds	r3, #14
 8018ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018ad6:	6812      	ldr	r2, [r2, #0]
 8018ad8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018ada:	697b      	ldr	r3, [r7, #20]
 8018adc:	3318      	adds	r3, #24
 8018ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ae0:	6812      	ldr	r2, [r2, #0]
 8018ae2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	701a      	strb	r2, [r3, #0]
 8018aea:	2200      	movs	r2, #0
 8018aec:	f042 0201 	orr.w	r2, r2, #1
 8018af0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018af2:	697b      	ldr	r3, [r7, #20]
 8018af4:	2200      	movs	r2, #0
 8018af6:	f042 0208 	orr.w	r2, r2, #8
 8018afa:	709a      	strb	r2, [r3, #2]
 8018afc:	2200      	movs	r2, #0
 8018afe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	2206      	movs	r2, #6
 8018b04:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	2204      	movs	r2, #4
 8018b0a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018b0c:	f640 0306 	movw	r3, #2054	; 0x806
 8018b10:	9300      	str	r3, [sp, #0]
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	68ba      	ldr	r2, [r7, #8]
 8018b16:	69b9      	ldr	r1, [r7, #24]
 8018b18:	68f8      	ldr	r0, [r7, #12]
 8018b1a:	f001 fbbb 	bl	801a294 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018b1e:	69b8      	ldr	r0, [r7, #24]
 8018b20:	f7f6 f8ca 	bl	800ecb8 <pbuf_free>
  p = NULL;
 8018b24:	2300      	movs	r3, #0
 8018b26:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018b28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	3720      	adds	r7, #32
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	0801f0b4 	.word	0x0801f0b4
 8018b38:	0801f204 	.word	0x0801f204
 8018b3c:	0801f12c 	.word	0x0801f12c
 8018b40:	0801f2b4 	.word	0x0801f2b4
 8018b44:	0801f2e8 	.word	0x0801f2e8

08018b48 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b088      	sub	sp, #32
 8018b4c:	af04      	add	r7, sp, #16
 8018b4e:	60f8      	str	r0, [r7, #12]
 8018b50:	60b9      	str	r1, [r7, #8]
 8018b52:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018b64:	2201      	movs	r2, #1
 8018b66:	9203      	str	r2, [sp, #12]
 8018b68:	68ba      	ldr	r2, [r7, #8]
 8018b6a:	9202      	str	r2, [sp, #8]
 8018b6c:	4a06      	ldr	r2, [pc, #24]	; (8018b88 <etharp_request_dst+0x40>)
 8018b6e:	9201      	str	r2, [sp, #4]
 8018b70:	9300      	str	r3, [sp, #0]
 8018b72:	4603      	mov	r3, r0
 8018b74:	687a      	ldr	r2, [r7, #4]
 8018b76:	68f8      	ldr	r0, [r7, #12]
 8018b78:	f7ff ff5a 	bl	8018a30 <etharp_raw>
 8018b7c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	3710      	adds	r7, #16
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	0801f944 	.word	0x0801f944

08018b8c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018b96:	4a05      	ldr	r2, [pc, #20]	; (8018bac <etharp_request+0x20>)
 8018b98:	6839      	ldr	r1, [r7, #0]
 8018b9a:	6878      	ldr	r0, [r7, #4]
 8018b9c:	f7ff ffd4 	bl	8018b48 <etharp_request_dst>
 8018ba0:	4603      	mov	r3, r0
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3708      	adds	r7, #8
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	0801f93c 	.word	0x0801f93c

08018bb0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b08e      	sub	sp, #56	; 0x38
 8018bb4:	af04      	add	r7, sp, #16
 8018bb6:	6078      	str	r0, [r7, #4]
 8018bb8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018bba:	4b87      	ldr	r3, [pc, #540]	; (8018dd8 <icmp_input+0x228>)
 8018bbc:	689b      	ldr	r3, [r3, #8]
 8018bbe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bc2:	781b      	ldrb	r3, [r3, #0]
 8018bc4:	f003 030f 	and.w	r3, r3, #15
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	009b      	lsls	r3, r3, #2
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018bd2:	2b13      	cmp	r3, #19
 8018bd4:	f240 80e8 	bls.w	8018da8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	895b      	ldrh	r3, [r3, #10]
 8018bdc:	2b03      	cmp	r3, #3
 8018bde:	f240 80e5 	bls.w	8018dac <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	685b      	ldr	r3, [r3, #4]
 8018be6:	781b      	ldrb	r3, [r3, #0]
 8018be8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018bec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	f000 80d2 	beq.w	8018d9a <icmp_input+0x1ea>
 8018bf6:	2b08      	cmp	r3, #8
 8018bf8:	f040 80d2 	bne.w	8018da0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018bfc:	4b77      	ldr	r3, [pc, #476]	; (8018ddc <icmp_input+0x22c>)
 8018bfe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018c00:	4b75      	ldr	r3, [pc, #468]	; (8018dd8 <icmp_input+0x228>)
 8018c02:	695b      	ldr	r3, [r3, #20]
 8018c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c08:	2be0      	cmp	r3, #224	; 0xe0
 8018c0a:	f000 80d6 	beq.w	8018dba <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018c0e:	4b72      	ldr	r3, [pc, #456]	; (8018dd8 <icmp_input+0x228>)
 8018c10:	695b      	ldr	r3, [r3, #20]
 8018c12:	4a71      	ldr	r2, [pc, #452]	; (8018dd8 <icmp_input+0x228>)
 8018c14:	6812      	ldr	r2, [r2, #0]
 8018c16:	4611      	mov	r1, r2
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f000 fc2f 	bl	801947c <ip4_addr_isbroadcast_u32>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	f040 80cc 	bne.w	8018dbe <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	891b      	ldrh	r3, [r3, #8]
 8018c2a:	2b07      	cmp	r3, #7
 8018c2c:	f240 80c0 	bls.w	8018db0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	f7f4 fc77 	bl	800d524 <inet_chksum_pbuf>
 8018c36:	4603      	mov	r3, r0
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d003      	beq.n	8018c44 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7f6 f83b 	bl	800ecb8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018c42:	e0c5      	b.n	8018dd0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018c44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c46:	330e      	adds	r3, #14
 8018c48:	4619      	mov	r1, r3
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f7f5 ff9e 	bl	800eb8c <pbuf_add_header>
 8018c50:	4603      	mov	r3, r0
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d04b      	beq.n	8018cee <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	891a      	ldrh	r2, [r3, #8]
 8018c5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c5c:	4413      	add	r3, r2
 8018c5e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	891b      	ldrh	r3, [r3, #8]
 8018c64:	8b7a      	ldrh	r2, [r7, #26]
 8018c66:	429a      	cmp	r2, r3
 8018c68:	f0c0 80ab 	bcc.w	8018dc2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018c6c:	8b7b      	ldrh	r3, [r7, #26]
 8018c6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c72:	4619      	mov	r1, r3
 8018c74:	200e      	movs	r0, #14
 8018c76:	f7f5 fd3b 	bl	800e6f0 <pbuf_alloc>
 8018c7a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	f000 80a1 	beq.w	8018dc6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018c84:	697b      	ldr	r3, [r7, #20]
 8018c86:	895b      	ldrh	r3, [r3, #10]
 8018c88:	461a      	mov	r2, r3
 8018c8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c8c:	3308      	adds	r3, #8
 8018c8e:	429a      	cmp	r2, r3
 8018c90:	d203      	bcs.n	8018c9a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018c92:	6978      	ldr	r0, [r7, #20]
 8018c94:	f7f6 f810 	bl	800ecb8 <pbuf_free>
          goto icmperr;
 8018c98:	e096      	b.n	8018dc8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f002 fb76 	bl	801b394 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018ca8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018caa:	4619      	mov	r1, r3
 8018cac:	6978      	ldr	r0, [r7, #20]
 8018cae:	f7f5 ff7d 	bl	800ebac <pbuf_remove_header>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d009      	beq.n	8018ccc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018cb8:	4b49      	ldr	r3, [pc, #292]	; (8018de0 <icmp_input+0x230>)
 8018cba:	22b6      	movs	r2, #182	; 0xb6
 8018cbc:	4949      	ldr	r1, [pc, #292]	; (8018de4 <icmp_input+0x234>)
 8018cbe:	484a      	ldr	r0, [pc, #296]	; (8018de8 <icmp_input+0x238>)
 8018cc0:	f002 fc5c 	bl	801b57c <iprintf>
          pbuf_free(r);
 8018cc4:	6978      	ldr	r0, [r7, #20]
 8018cc6:	f7f5 fff7 	bl	800ecb8 <pbuf_free>
          goto icmperr;
 8018cca:	e07d      	b.n	8018dc8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018ccc:	6879      	ldr	r1, [r7, #4]
 8018cce:	6978      	ldr	r0, [r7, #20]
 8018cd0:	f7f6 f924 	bl	800ef1c <pbuf_copy>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d003      	beq.n	8018ce2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018cda:	6978      	ldr	r0, [r7, #20]
 8018cdc:	f7f5 ffec 	bl	800ecb8 <pbuf_free>
          goto icmperr;
 8018ce0:	e072      	b.n	8018dc8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8018ce2:	6878      	ldr	r0, [r7, #4]
 8018ce4:	f7f5 ffe8 	bl	800ecb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	607b      	str	r3, [r7, #4]
 8018cec:	e00f      	b.n	8018d0e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cf0:	330e      	adds	r3, #14
 8018cf2:	4619      	mov	r1, r3
 8018cf4:	6878      	ldr	r0, [r7, #4]
 8018cf6:	f7f5 ff59 	bl	800ebac <pbuf_remove_header>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d006      	beq.n	8018d0e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018d00:	4b37      	ldr	r3, [pc, #220]	; (8018de0 <icmp_input+0x230>)
 8018d02:	22c7      	movs	r2, #199	; 0xc7
 8018d04:	4939      	ldr	r1, [pc, #228]	; (8018dec <icmp_input+0x23c>)
 8018d06:	4838      	ldr	r0, [pc, #224]	; (8018de8 <icmp_input+0x238>)
 8018d08:	f002 fc38 	bl	801b57c <iprintf>
          goto icmperr;
 8018d0c:	e05c      	b.n	8018dc8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	685b      	ldr	r3, [r3, #4]
 8018d12:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018d14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d16:	4619      	mov	r1, r3
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f7f5 ff37 	bl	800eb8c <pbuf_add_header>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d13c      	bne.n	8018d9e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018d2a:	69fb      	ldr	r3, [r7, #28]
 8018d2c:	681a      	ldr	r2, [r3, #0]
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018d32:	4b29      	ldr	r3, [pc, #164]	; (8018dd8 <icmp_input+0x228>)
 8018d34:	691a      	ldr	r2, [r3, #16]
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018d3a:	693b      	ldr	r3, [r7, #16]
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8018d40:	693b      	ldr	r3, [r7, #16]
 8018d42:	885b      	ldrh	r3, [r3, #2]
 8018d44:	b29b      	uxth	r3, r3
 8018d46:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018d4a:	4293      	cmp	r3, r2
 8018d4c:	d907      	bls.n	8018d5e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	885b      	ldrh	r3, [r3, #2]
 8018d52:	b29b      	uxth	r3, r3
 8018d54:	3309      	adds	r3, #9
 8018d56:	b29a      	uxth	r2, r3
 8018d58:	693b      	ldr	r3, [r7, #16]
 8018d5a:	805a      	strh	r2, [r3, #2]
 8018d5c:	e006      	b.n	8018d6c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8018d5e:	693b      	ldr	r3, [r7, #16]
 8018d60:	885b      	ldrh	r3, [r3, #2]
 8018d62:	b29b      	uxth	r3, r3
 8018d64:	3308      	adds	r3, #8
 8018d66:	b29a      	uxth	r2, r3
 8018d68:	693b      	ldr	r3, [r7, #16]
 8018d6a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	22ff      	movs	r2, #255	; 0xff
 8018d70:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	2200      	movs	r2, #0
 8018d76:	729a      	strb	r2, [r3, #10]
 8018d78:	2200      	movs	r2, #0
 8018d7a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	9302      	str	r3, [sp, #8]
 8018d80:	2301      	movs	r3, #1
 8018d82:	9301      	str	r3, [sp, #4]
 8018d84:	2300      	movs	r3, #0
 8018d86:	9300      	str	r3, [sp, #0]
 8018d88:	23ff      	movs	r3, #255	; 0xff
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	69f9      	ldr	r1, [r7, #28]
 8018d8e:	6878      	ldr	r0, [r7, #4]
 8018d90:	f000 fa9c 	bl	80192cc <ip4_output_if>
 8018d94:	4603      	mov	r3, r0
 8018d96:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018d98:	e001      	b.n	8018d9e <icmp_input+0x1ee>
      break;
 8018d9a:	bf00      	nop
 8018d9c:	e000      	b.n	8018da0 <icmp_input+0x1f0>
      break;
 8018d9e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018da0:	6878      	ldr	r0, [r7, #4]
 8018da2:	f7f5 ff89 	bl	800ecb8 <pbuf_free>
  return;
 8018da6:	e013      	b.n	8018dd0 <icmp_input+0x220>
    goto lenerr;
 8018da8:	bf00      	nop
 8018daa:	e002      	b.n	8018db2 <icmp_input+0x202>
    goto lenerr;
 8018dac:	bf00      	nop
 8018dae:	e000      	b.n	8018db2 <icmp_input+0x202>
        goto lenerr;
 8018db0:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f7f5 ff80 	bl	800ecb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018db8:	e00a      	b.n	8018dd0 <icmp_input+0x220>
        goto icmperr;
 8018dba:	bf00      	nop
 8018dbc:	e004      	b.n	8018dc8 <icmp_input+0x218>
        goto icmperr;
 8018dbe:	bf00      	nop
 8018dc0:	e002      	b.n	8018dc8 <icmp_input+0x218>
          goto icmperr;
 8018dc2:	bf00      	nop
 8018dc4:	e000      	b.n	8018dc8 <icmp_input+0x218>
          goto icmperr;
 8018dc6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7f5 ff75 	bl	800ecb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018dce:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018dd0:	3728      	adds	r7, #40	; 0x28
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bd80      	pop	{r7, pc}
 8018dd6:	bf00      	nop
 8018dd8:	2000982c 	.word	0x2000982c
 8018ddc:	20009840 	.word	0x20009840
 8018de0:	0801f32c 	.word	0x0801f32c
 8018de4:	0801f364 	.word	0x0801f364
 8018de8:	0801f39c 	.word	0x0801f39c
 8018dec:	0801f3c4 	.word	0x0801f3c4

08018df0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	460b      	mov	r3, r1
 8018dfa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018dfc:	78fb      	ldrb	r3, [r7, #3]
 8018dfe:	461a      	mov	r2, r3
 8018e00:	2103      	movs	r1, #3
 8018e02:	6878      	ldr	r0, [r7, #4]
 8018e04:	f000 f814 	bl	8018e30 <icmp_send_response>
}
 8018e08:	bf00      	nop
 8018e0a:	3708      	adds	r7, #8
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}

08018e10 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b082      	sub	sp, #8
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	460b      	mov	r3, r1
 8018e1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018e1c:	78fb      	ldrb	r3, [r7, #3]
 8018e1e:	461a      	mov	r2, r3
 8018e20:	210b      	movs	r1, #11
 8018e22:	6878      	ldr	r0, [r7, #4]
 8018e24:	f000 f804 	bl	8018e30 <icmp_send_response>
}
 8018e28:	bf00      	nop
 8018e2a:	3708      	adds	r7, #8
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b08c      	sub	sp, #48	; 0x30
 8018e34:	af04      	add	r7, sp, #16
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	460b      	mov	r3, r1
 8018e3a:	70fb      	strb	r3, [r7, #3]
 8018e3c:	4613      	mov	r3, r2
 8018e3e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018e40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e44:	2124      	movs	r1, #36	; 0x24
 8018e46:	2022      	movs	r0, #34	; 0x22
 8018e48:	f7f5 fc52 	bl	800e6f0 <pbuf_alloc>
 8018e4c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018e4e:	69fb      	ldr	r3, [r7, #28]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d056      	beq.n	8018f02 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018e54:	69fb      	ldr	r3, [r7, #28]
 8018e56:	895b      	ldrh	r3, [r3, #10]
 8018e58:	2b23      	cmp	r3, #35	; 0x23
 8018e5a:	d806      	bhi.n	8018e6a <icmp_send_response+0x3a>
 8018e5c:	4b2b      	ldr	r3, [pc, #172]	; (8018f0c <icmp_send_response+0xdc>)
 8018e5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018e62:	492b      	ldr	r1, [pc, #172]	; (8018f10 <icmp_send_response+0xe0>)
 8018e64:	482b      	ldr	r0, [pc, #172]	; (8018f14 <icmp_send_response+0xe4>)
 8018e66:	f002 fb89 	bl	801b57c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	685b      	ldr	r3, [r3, #4]
 8018e6e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018e70:	69fb      	ldr	r3, [r7, #28]
 8018e72:	685b      	ldr	r3, [r3, #4]
 8018e74:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018e76:	697b      	ldr	r3, [r7, #20]
 8018e78:	78fa      	ldrb	r2, [r7, #3]
 8018e7a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	78ba      	ldrb	r2, [r7, #2]
 8018e80:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018e82:	697b      	ldr	r3, [r7, #20]
 8018e84:	2200      	movs	r2, #0
 8018e86:	711a      	strb	r2, [r3, #4]
 8018e88:	2200      	movs	r2, #0
 8018e8a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	719a      	strb	r2, [r3, #6]
 8018e92:	2200      	movs	r2, #0
 8018e94:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018e96:	69fb      	ldr	r3, [r7, #28]
 8018e98:	685b      	ldr	r3, [r3, #4]
 8018e9a:	f103 0008 	add.w	r0, r3, #8
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	685b      	ldr	r3, [r3, #4]
 8018ea2:	221c      	movs	r2, #28
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	f002 fa75 	bl	801b394 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018eaa:	69bb      	ldr	r3, [r7, #24]
 8018eac:	68db      	ldr	r3, [r3, #12]
 8018eae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018eb0:	f107 030c 	add.w	r3, r7, #12
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	f000 f82f 	bl	8018f18 <ip4_route>
 8018eba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018ebc:	693b      	ldr	r3, [r7, #16]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d01b      	beq.n	8018efa <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018ec2:	697b      	ldr	r3, [r7, #20]
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	709a      	strb	r2, [r3, #2]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8018ecc:	69fb      	ldr	r3, [r7, #28]
 8018ece:	895b      	ldrh	r3, [r3, #10]
 8018ed0:	4619      	mov	r1, r3
 8018ed2:	6978      	ldr	r0, [r7, #20]
 8018ed4:	f7f4 fb14 	bl	800d500 <inet_chksum>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	461a      	mov	r2, r3
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018ee0:	f107 020c 	add.w	r2, r7, #12
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	9302      	str	r3, [sp, #8]
 8018ee8:	2301      	movs	r3, #1
 8018eea:	9301      	str	r3, [sp, #4]
 8018eec:	2300      	movs	r3, #0
 8018eee:	9300      	str	r3, [sp, #0]
 8018ef0:	23ff      	movs	r3, #255	; 0xff
 8018ef2:	2100      	movs	r1, #0
 8018ef4:	69f8      	ldr	r0, [r7, #28]
 8018ef6:	f000 f9e9 	bl	80192cc <ip4_output_if>
  }
  pbuf_free(q);
 8018efa:	69f8      	ldr	r0, [r7, #28]
 8018efc:	f7f5 fedc 	bl	800ecb8 <pbuf_free>
 8018f00:	e000      	b.n	8018f04 <icmp_send_response+0xd4>
    return;
 8018f02:	bf00      	nop
}
 8018f04:	3720      	adds	r7, #32
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}
 8018f0a:	bf00      	nop
 8018f0c:	0801f32c 	.word	0x0801f32c
 8018f10:	0801f3f8 	.word	0x0801f3f8
 8018f14:	0801f39c 	.word	0x0801f39c

08018f18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018f18:	b480      	push	{r7}
 8018f1a:	b085      	sub	sp, #20
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018f20:	4b32      	ldr	r3, [pc, #200]	; (8018fec <ip4_route+0xd4>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	60fb      	str	r3, [r7, #12]
 8018f26:	e036      	b.n	8018f96 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f2e:	f003 0301 	and.w	r3, r3, #1
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d02b      	beq.n	8018f90 <ip4_route+0x78>
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f3e:	089b      	lsrs	r3, r3, #2
 8018f40:	f003 0301 	and.w	r3, r3, #1
 8018f44:	b2db      	uxtb	r3, r3
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d022      	beq.n	8018f90 <ip4_route+0x78>
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	3304      	adds	r3, #4
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d01d      	beq.n	8018f90 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681a      	ldr	r2, [r3, #0]
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	3304      	adds	r3, #4
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	405a      	eors	r2, r3
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	3308      	adds	r3, #8
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	4013      	ands	r3, r2
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d101      	bne.n	8018f70 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	e038      	b.n	8018fe2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f76:	f003 0302 	and.w	r3, r3, #2
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d108      	bne.n	8018f90 <ip4_route+0x78>
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	681a      	ldr	r2, [r3, #0]
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	330c      	adds	r3, #12
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	429a      	cmp	r2, r3
 8018f8a:	d101      	bne.n	8018f90 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	e028      	b.n	8018fe2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	60fb      	str	r3, [r7, #12]
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d1c5      	bne.n	8018f28 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018f9c:	4b14      	ldr	r3, [pc, #80]	; (8018ff0 <ip4_route+0xd8>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d01a      	beq.n	8018fda <ip4_route+0xc2>
 8018fa4:	4b12      	ldr	r3, [pc, #72]	; (8018ff0 <ip4_route+0xd8>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018fac:	f003 0301 	and.w	r3, r3, #1
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d012      	beq.n	8018fda <ip4_route+0xc2>
 8018fb4:	4b0e      	ldr	r3, [pc, #56]	; (8018ff0 <ip4_route+0xd8>)
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018fbc:	f003 0304 	and.w	r3, r3, #4
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d00a      	beq.n	8018fda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018fc4:	4b0a      	ldr	r3, [pc, #40]	; (8018ff0 <ip4_route+0xd8>)
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	3304      	adds	r3, #4
 8018fca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d004      	beq.n	8018fda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	b2db      	uxtb	r3, r3
 8018fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8018fd8:	d101      	bne.n	8018fde <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	e001      	b.n	8018fe2 <ip4_route+0xca>
  }

  return netif_default;
 8018fde:	4b04      	ldr	r3, [pc, #16]	; (8018ff0 <ip4_route+0xd8>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
}
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	3714      	adds	r7, #20
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bc80      	pop	{r7}
 8018fea:	4770      	bx	lr
 8018fec:	2000c940 	.word	0x2000c940
 8018ff0:	2000c944 	.word	0x2000c944

08018ff4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019002:	f003 0301 	and.w	r3, r3, #1
 8019006:	b2db      	uxtb	r3, r3
 8019008:	2b00      	cmp	r3, #0
 801900a:	d016      	beq.n	801903a <ip4_input_accept+0x46>
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	3304      	adds	r3, #4
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d011      	beq.n	801903a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019016:	4b0b      	ldr	r3, [pc, #44]	; (8019044 <ip4_input_accept+0x50>)
 8019018:	695a      	ldr	r2, [r3, #20]
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	3304      	adds	r3, #4
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	429a      	cmp	r2, r3
 8019022:	d008      	beq.n	8019036 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019024:	4b07      	ldr	r3, [pc, #28]	; (8019044 <ip4_input_accept+0x50>)
 8019026:	695b      	ldr	r3, [r3, #20]
 8019028:	6879      	ldr	r1, [r7, #4]
 801902a:	4618      	mov	r0, r3
 801902c:	f000 fa26 	bl	801947c <ip4_addr_isbroadcast_u32>
 8019030:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019032:	2b00      	cmp	r3, #0
 8019034:	d001      	beq.n	801903a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019036:	2301      	movs	r3, #1
 8019038:	e000      	b.n	801903c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801903a:	2300      	movs	r3, #0
}
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	2000982c 	.word	0x2000982c

08019048 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b088      	sub	sp, #32
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019052:	2301      	movs	r3, #1
 8019054:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	685b      	ldr	r3, [r3, #4]
 801905a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801905c:	69fb      	ldr	r3, [r7, #28]
 801905e:	781b      	ldrb	r3, [r3, #0]
 8019060:	091b      	lsrs	r3, r3, #4
 8019062:	b2db      	uxtb	r3, r3
 8019064:	2b04      	cmp	r3, #4
 8019066:	d004      	beq.n	8019072 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f7f5 fe25 	bl	800ecb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801906e:	2300      	movs	r3, #0
 8019070:	e123      	b.n	80192ba <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019072:	69fb      	ldr	r3, [r7, #28]
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	f003 030f 	and.w	r3, r3, #15
 801907a:	b2db      	uxtb	r3, r3
 801907c:	009b      	lsls	r3, r3, #2
 801907e:	b2db      	uxtb	r3, r3
 8019080:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019082:	69fb      	ldr	r3, [r7, #28]
 8019084:	885b      	ldrh	r3, [r3, #2]
 8019086:	b29b      	uxth	r3, r3
 8019088:	4618      	mov	r0, r3
 801908a:	f7f4 f9b1 	bl	800d3f0 <lwip_htons>
 801908e:	4603      	mov	r3, r0
 8019090:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	891b      	ldrh	r3, [r3, #8]
 8019096:	8a3a      	ldrh	r2, [r7, #16]
 8019098:	429a      	cmp	r2, r3
 801909a:	d204      	bcs.n	80190a6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801909c:	8a3b      	ldrh	r3, [r7, #16]
 801909e:	4619      	mov	r1, r3
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	f7f5 fc83 	bl	800e9ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	895b      	ldrh	r3, [r3, #10]
 80190aa:	8a7a      	ldrh	r2, [r7, #18]
 80190ac:	429a      	cmp	r2, r3
 80190ae:	d807      	bhi.n	80190c0 <ip4_input+0x78>
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	891b      	ldrh	r3, [r3, #8]
 80190b4:	8a3a      	ldrh	r2, [r7, #16]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d802      	bhi.n	80190c0 <ip4_input+0x78>
 80190ba:	8a7b      	ldrh	r3, [r7, #18]
 80190bc:	2b13      	cmp	r3, #19
 80190be:	d804      	bhi.n	80190ca <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80190c0:	6878      	ldr	r0, [r7, #4]
 80190c2:	f7f5 fdf9 	bl	800ecb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80190c6:	2300      	movs	r3, #0
 80190c8:	e0f7      	b.n	80192ba <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80190ca:	69fb      	ldr	r3, [r7, #28]
 80190cc:	691b      	ldr	r3, [r3, #16]
 80190ce:	4a7d      	ldr	r2, [pc, #500]	; (80192c4 <ip4_input+0x27c>)
 80190d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80190d2:	69fb      	ldr	r3, [r7, #28]
 80190d4:	68db      	ldr	r3, [r3, #12]
 80190d6:	4a7b      	ldr	r2, [pc, #492]	; (80192c4 <ip4_input+0x27c>)
 80190d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80190da:	4b7a      	ldr	r3, [pc, #488]	; (80192c4 <ip4_input+0x27c>)
 80190dc:	695b      	ldr	r3, [r3, #20]
 80190de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80190e2:	2be0      	cmp	r3, #224	; 0xe0
 80190e4:	d112      	bne.n	801910c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80190e6:	683b      	ldr	r3, [r7, #0]
 80190e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80190ec:	f003 0301 	and.w	r3, r3, #1
 80190f0:	b2db      	uxtb	r3, r3
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d007      	beq.n	8019106 <ip4_input+0xbe>
 80190f6:	683b      	ldr	r3, [r7, #0]
 80190f8:	3304      	adds	r3, #4
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d002      	beq.n	8019106 <ip4_input+0xbe>
      netif = inp;
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	61bb      	str	r3, [r7, #24]
 8019104:	e02a      	b.n	801915c <ip4_input+0x114>
    } else {
      netif = NULL;
 8019106:	2300      	movs	r3, #0
 8019108:	61bb      	str	r3, [r7, #24]
 801910a:	e027      	b.n	801915c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801910c:	6838      	ldr	r0, [r7, #0]
 801910e:	f7ff ff71 	bl	8018ff4 <ip4_input_accept>
 8019112:	4603      	mov	r3, r0
 8019114:	2b00      	cmp	r3, #0
 8019116:	d002      	beq.n	801911e <ip4_input+0xd6>
      netif = inp;
 8019118:	683b      	ldr	r3, [r7, #0]
 801911a:	61bb      	str	r3, [r7, #24]
 801911c:	e01e      	b.n	801915c <ip4_input+0x114>
    } else {
      netif = NULL;
 801911e:	2300      	movs	r3, #0
 8019120:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019122:	4b68      	ldr	r3, [pc, #416]	; (80192c4 <ip4_input+0x27c>)
 8019124:	695b      	ldr	r3, [r3, #20]
 8019126:	b2db      	uxtb	r3, r3
 8019128:	2b7f      	cmp	r3, #127	; 0x7f
 801912a:	d017      	beq.n	801915c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801912c:	4b66      	ldr	r3, [pc, #408]	; (80192c8 <ip4_input+0x280>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	61bb      	str	r3, [r7, #24]
 8019132:	e00e      	b.n	8019152 <ip4_input+0x10a>
          if (netif == inp) {
 8019134:	69ba      	ldr	r2, [r7, #24]
 8019136:	683b      	ldr	r3, [r7, #0]
 8019138:	429a      	cmp	r2, r3
 801913a:	d006      	beq.n	801914a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801913c:	69b8      	ldr	r0, [r7, #24]
 801913e:	f7ff ff59 	bl	8018ff4 <ip4_input_accept>
 8019142:	4603      	mov	r3, r0
 8019144:	2b00      	cmp	r3, #0
 8019146:	d108      	bne.n	801915a <ip4_input+0x112>
 8019148:	e000      	b.n	801914c <ip4_input+0x104>
            continue;
 801914a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801914c:	69bb      	ldr	r3, [r7, #24]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	61bb      	str	r3, [r7, #24]
 8019152:	69bb      	ldr	r3, [r7, #24]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d1ed      	bne.n	8019134 <ip4_input+0xec>
 8019158:	e000      	b.n	801915c <ip4_input+0x114>
            break;
 801915a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801915c:	69bb      	ldr	r3, [r7, #24]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d111      	bne.n	8019186 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8019162:	69fb      	ldr	r3, [r7, #28]
 8019164:	7a5b      	ldrb	r3, [r3, #9]
 8019166:	2b11      	cmp	r3, #17
 8019168:	d10d      	bne.n	8019186 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801916a:	8a7b      	ldrh	r3, [r7, #18]
 801916c:	69fa      	ldr	r2, [r7, #28]
 801916e:	4413      	add	r3, r2
 8019170:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	885b      	ldrh	r3, [r3, #2]
 8019176:	b29b      	uxth	r3, r3
 8019178:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801917c:	d103      	bne.n	8019186 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801917e:	683b      	ldr	r3, [r7, #0]
 8019180:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8019182:	2300      	movs	r3, #0
 8019184:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d017      	beq.n	80191bc <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801918c:	4b4d      	ldr	r3, [pc, #308]	; (80192c4 <ip4_input+0x27c>)
 801918e:	691b      	ldr	r3, [r3, #16]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d013      	beq.n	80191bc <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019194:	4b4b      	ldr	r3, [pc, #300]	; (80192c4 <ip4_input+0x27c>)
 8019196:	691b      	ldr	r3, [r3, #16]
 8019198:	6839      	ldr	r1, [r7, #0]
 801919a:	4618      	mov	r0, r3
 801919c:	f000 f96e 	bl	801947c <ip4_addr_isbroadcast_u32>
 80191a0:	4603      	mov	r3, r0
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d105      	bne.n	80191b2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80191a6:	4b47      	ldr	r3, [pc, #284]	; (80192c4 <ip4_input+0x27c>)
 80191a8:	691b      	ldr	r3, [r3, #16]
 80191aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80191ae:	2be0      	cmp	r3, #224	; 0xe0
 80191b0:	d104      	bne.n	80191bc <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	f7f5 fd80 	bl	800ecb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80191b8:	2300      	movs	r3, #0
 80191ba:	e07e      	b.n	80192ba <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80191bc:	69bb      	ldr	r3, [r7, #24]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d104      	bne.n	80191cc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f7f5 fd78 	bl	800ecb8 <pbuf_free>
    return ERR_OK;
 80191c8:	2300      	movs	r3, #0
 80191ca:	e076      	b.n	80192ba <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80191cc:	69fb      	ldr	r3, [r7, #28]
 80191ce:	88db      	ldrh	r3, [r3, #6]
 80191d0:	b29b      	uxth	r3, r3
 80191d2:	461a      	mov	r2, r3
 80191d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80191d8:	4013      	ands	r3, r2
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d00b      	beq.n	80191f6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80191de:	6878      	ldr	r0, [r7, #4]
 80191e0:	f000 fc90 	bl	8019b04 <ip4_reass>
 80191e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d101      	bne.n	80191f0 <ip4_input+0x1a8>
      return ERR_OK;
 80191ec:	2300      	movs	r3, #0
 80191ee:	e064      	b.n	80192ba <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	685b      	ldr	r3, [r3, #4]
 80191f4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80191f6:	4a33      	ldr	r2, [pc, #204]	; (80192c4 <ip4_input+0x27c>)
 80191f8:	69bb      	ldr	r3, [r7, #24]
 80191fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80191fc:	4a31      	ldr	r2, [pc, #196]	; (80192c4 <ip4_input+0x27c>)
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019202:	4a30      	ldr	r2, [pc, #192]	; (80192c4 <ip4_input+0x27c>)
 8019204:	69fb      	ldr	r3, [r7, #28]
 8019206:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019208:	69fb      	ldr	r3, [r7, #28]
 801920a:	781b      	ldrb	r3, [r3, #0]
 801920c:	f003 030f 	and.w	r3, r3, #15
 8019210:	b2db      	uxtb	r3, r3
 8019212:	009b      	lsls	r3, r3, #2
 8019214:	b2db      	uxtb	r3, r3
 8019216:	b29a      	uxth	r2, r3
 8019218:	4b2a      	ldr	r3, [pc, #168]	; (80192c4 <ip4_input+0x27c>)
 801921a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801921c:	8a7b      	ldrh	r3, [r7, #18]
 801921e:	4619      	mov	r1, r3
 8019220:	6878      	ldr	r0, [r7, #4]
 8019222:	f7f5 fcc3 	bl	800ebac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019226:	69fb      	ldr	r3, [r7, #28]
 8019228:	7a5b      	ldrb	r3, [r3, #9]
 801922a:	2b11      	cmp	r3, #17
 801922c:	d006      	beq.n	801923c <ip4_input+0x1f4>
 801922e:	2b11      	cmp	r3, #17
 8019230:	dc13      	bgt.n	801925a <ip4_input+0x212>
 8019232:	2b01      	cmp	r3, #1
 8019234:	d00c      	beq.n	8019250 <ip4_input+0x208>
 8019236:	2b06      	cmp	r3, #6
 8019238:	d005      	beq.n	8019246 <ip4_input+0x1fe>
 801923a:	e00e      	b.n	801925a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801923c:	6839      	ldr	r1, [r7, #0]
 801923e:	6878      	ldr	r0, [r7, #4]
 8019240:	f7fc fb04 	bl	801584c <udp_input>
        break;
 8019244:	e026      	b.n	8019294 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019246:	6839      	ldr	r1, [r7, #0]
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f7f7 fe83 	bl	8010f54 <tcp_input>
        break;
 801924e:	e021      	b.n	8019294 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019250:	6839      	ldr	r1, [r7, #0]
 8019252:	6878      	ldr	r0, [r7, #4]
 8019254:	f7ff fcac 	bl	8018bb0 <icmp_input>
        break;
 8019258:	e01c      	b.n	8019294 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801925a:	4b1a      	ldr	r3, [pc, #104]	; (80192c4 <ip4_input+0x27c>)
 801925c:	695b      	ldr	r3, [r3, #20]
 801925e:	69b9      	ldr	r1, [r7, #24]
 8019260:	4618      	mov	r0, r3
 8019262:	f000 f90b 	bl	801947c <ip4_addr_isbroadcast_u32>
 8019266:	4603      	mov	r3, r0
 8019268:	2b00      	cmp	r3, #0
 801926a:	d10f      	bne.n	801928c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801926c:	4b15      	ldr	r3, [pc, #84]	; (80192c4 <ip4_input+0x27c>)
 801926e:	695b      	ldr	r3, [r3, #20]
 8019270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019274:	2be0      	cmp	r3, #224	; 0xe0
 8019276:	d009      	beq.n	801928c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019278:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801927c:	4619      	mov	r1, r3
 801927e:	6878      	ldr	r0, [r7, #4]
 8019280:	f7f5 fd07 	bl	800ec92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019284:	2102      	movs	r1, #2
 8019286:	6878      	ldr	r0, [r7, #4]
 8019288:	f7ff fdb2 	bl	8018df0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801928c:	6878      	ldr	r0, [r7, #4]
 801928e:	f7f5 fd13 	bl	800ecb8 <pbuf_free>
        break;
 8019292:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019294:	4b0b      	ldr	r3, [pc, #44]	; (80192c4 <ip4_input+0x27c>)
 8019296:	2200      	movs	r2, #0
 8019298:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801929a:	4b0a      	ldr	r3, [pc, #40]	; (80192c4 <ip4_input+0x27c>)
 801929c:	2200      	movs	r2, #0
 801929e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80192a0:	4b08      	ldr	r3, [pc, #32]	; (80192c4 <ip4_input+0x27c>)
 80192a2:	2200      	movs	r2, #0
 80192a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80192a6:	4b07      	ldr	r3, [pc, #28]	; (80192c4 <ip4_input+0x27c>)
 80192a8:	2200      	movs	r2, #0
 80192aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80192ac:	4b05      	ldr	r3, [pc, #20]	; (80192c4 <ip4_input+0x27c>)
 80192ae:	2200      	movs	r2, #0
 80192b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80192b2:	4b04      	ldr	r3, [pc, #16]	; (80192c4 <ip4_input+0x27c>)
 80192b4:	2200      	movs	r2, #0
 80192b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80192b8:	2300      	movs	r3, #0
}
 80192ba:	4618      	mov	r0, r3
 80192bc:	3720      	adds	r7, #32
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd80      	pop	{r7, pc}
 80192c2:	bf00      	nop
 80192c4:	2000982c 	.word	0x2000982c
 80192c8:	2000c940 	.word	0x2000c940

080192cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b08a      	sub	sp, #40	; 0x28
 80192d0:	af04      	add	r7, sp, #16
 80192d2:	60f8      	str	r0, [r7, #12]
 80192d4:	60b9      	str	r1, [r7, #8]
 80192d6:	607a      	str	r2, [r7, #4]
 80192d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d009      	beq.n	80192f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80192e4:	68bb      	ldr	r3, [r7, #8]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d003      	beq.n	80192f2 <ip4_output_if+0x26>
 80192ea:	68bb      	ldr	r3, [r7, #8]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d102      	bne.n	80192f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80192f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f4:	3304      	adds	r3, #4
 80192f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80192f8:	78fa      	ldrb	r2, [r7, #3]
 80192fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192fc:	9302      	str	r3, [sp, #8]
 80192fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019302:	9301      	str	r3, [sp, #4]
 8019304:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019308:	9300      	str	r3, [sp, #0]
 801930a:	4613      	mov	r3, r2
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	6979      	ldr	r1, [r7, #20]
 8019310:	68f8      	ldr	r0, [r7, #12]
 8019312:	f000 f805 	bl	8019320 <ip4_output_if_src>
 8019316:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019318:	4618      	mov	r0, r3
 801931a:	3718      	adds	r7, #24
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}

08019320 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b088      	sub	sp, #32
 8019324:	af00      	add	r7, sp, #0
 8019326:	60f8      	str	r0, [r7, #12]
 8019328:	60b9      	str	r1, [r7, #8]
 801932a:	607a      	str	r2, [r7, #4]
 801932c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	7b9b      	ldrb	r3, [r3, #14]
 8019332:	2b01      	cmp	r3, #1
 8019334:	d006      	beq.n	8019344 <ip4_output_if_src+0x24>
 8019336:	4b4b      	ldr	r3, [pc, #300]	; (8019464 <ip4_output_if_src+0x144>)
 8019338:	f44f 7255 	mov.w	r2, #852	; 0x354
 801933c:	494a      	ldr	r1, [pc, #296]	; (8019468 <ip4_output_if_src+0x148>)
 801933e:	484b      	ldr	r0, [pc, #300]	; (801946c <ip4_output_if_src+0x14c>)
 8019340:	f002 f91c 	bl	801b57c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d060      	beq.n	801940c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801934a:	2314      	movs	r3, #20
 801934c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801934e:	2114      	movs	r1, #20
 8019350:	68f8      	ldr	r0, [r7, #12]
 8019352:	f7f5 fc1b 	bl	800eb8c <pbuf_add_header>
 8019356:	4603      	mov	r3, r0
 8019358:	2b00      	cmp	r3, #0
 801935a:	d002      	beq.n	8019362 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801935c:	f06f 0301 	mvn.w	r3, #1
 8019360:	e07c      	b.n	801945c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	895b      	ldrh	r3, [r3, #10]
 801936c:	2b13      	cmp	r3, #19
 801936e:	d806      	bhi.n	801937e <ip4_output_if_src+0x5e>
 8019370:	4b3c      	ldr	r3, [pc, #240]	; (8019464 <ip4_output_if_src+0x144>)
 8019372:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019376:	493e      	ldr	r1, [pc, #248]	; (8019470 <ip4_output_if_src+0x150>)
 8019378:	483c      	ldr	r0, [pc, #240]	; (801946c <ip4_output_if_src+0x14c>)
 801937a:	f002 f8ff 	bl	801b57c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801937e:	69fb      	ldr	r3, [r7, #28]
 8019380:	78fa      	ldrb	r2, [r7, #3]
 8019382:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019384:	69fb      	ldr	r3, [r7, #28]
 8019386:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801938a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681a      	ldr	r2, [r3, #0]
 8019390:	69fb      	ldr	r3, [r7, #28]
 8019392:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019394:	8b7b      	ldrh	r3, [r7, #26]
 8019396:	089b      	lsrs	r3, r3, #2
 8019398:	b29b      	uxth	r3, r3
 801939a:	b2db      	uxtb	r3, r3
 801939c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193a0:	b2da      	uxtb	r2, r3
 80193a2:	69fb      	ldr	r3, [r7, #28]
 80193a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80193a6:	69fb      	ldr	r3, [r7, #28]
 80193a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80193ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	891b      	ldrh	r3, [r3, #8]
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7f4 f81c 	bl	800d3f0 <lwip_htons>
 80193b8:	4603      	mov	r3, r0
 80193ba:	461a      	mov	r2, r3
 80193bc:	69fb      	ldr	r3, [r7, #28]
 80193be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80193c0:	69fb      	ldr	r3, [r7, #28]
 80193c2:	2200      	movs	r2, #0
 80193c4:	719a      	strb	r2, [r3, #6]
 80193c6:	2200      	movs	r2, #0
 80193c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80193ca:	4b2a      	ldr	r3, [pc, #168]	; (8019474 <ip4_output_if_src+0x154>)
 80193cc:	881b      	ldrh	r3, [r3, #0]
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7f4 f80e 	bl	800d3f0 <lwip_htons>
 80193d4:	4603      	mov	r3, r0
 80193d6:	461a      	mov	r2, r3
 80193d8:	69fb      	ldr	r3, [r7, #28]
 80193da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80193dc:	4b25      	ldr	r3, [pc, #148]	; (8019474 <ip4_output_if_src+0x154>)
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	3301      	adds	r3, #1
 80193e2:	b29a      	uxth	r2, r3
 80193e4:	4b23      	ldr	r3, [pc, #140]	; (8019474 <ip4_output_if_src+0x154>)
 80193e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80193e8:	68bb      	ldr	r3, [r7, #8]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d104      	bne.n	80193f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80193ee:	4b22      	ldr	r3, [pc, #136]	; (8019478 <ip4_output_if_src+0x158>)
 80193f0:	681a      	ldr	r2, [r3, #0]
 80193f2:	69fb      	ldr	r3, [r7, #28]
 80193f4:	60da      	str	r2, [r3, #12]
 80193f6:	e003      	b.n	8019400 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80193f8:	68bb      	ldr	r3, [r7, #8]
 80193fa:	681a      	ldr	r2, [r3, #0]
 80193fc:	69fb      	ldr	r3, [r7, #28]
 80193fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019400:	69fb      	ldr	r3, [r7, #28]
 8019402:	2200      	movs	r2, #0
 8019404:	729a      	strb	r2, [r3, #10]
 8019406:	2200      	movs	r2, #0
 8019408:	72da      	strb	r2, [r3, #11]
 801940a:	e00f      	b.n	801942c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	895b      	ldrh	r3, [r3, #10]
 8019410:	2b13      	cmp	r3, #19
 8019412:	d802      	bhi.n	801941a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019414:	f06f 0301 	mvn.w	r3, #1
 8019418:	e020      	b.n	801945c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	685b      	ldr	r3, [r3, #4]
 801941e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019420:	69fb      	ldr	r3, [r7, #28]
 8019422:	691b      	ldr	r3, [r3, #16]
 8019424:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019426:	f107 0314 	add.w	r3, r7, #20
 801942a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801942e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019430:	2b00      	cmp	r3, #0
 8019432:	d00c      	beq.n	801944e <ip4_output_if_src+0x12e>
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	891a      	ldrh	r2, [r3, #8]
 8019438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801943a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801943c:	429a      	cmp	r2, r3
 801943e:	d906      	bls.n	801944e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019440:	687a      	ldr	r2, [r7, #4]
 8019442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019444:	68f8      	ldr	r0, [r7, #12]
 8019446:	f000 fd51 	bl	8019eec <ip4_frag>
 801944a:	4603      	mov	r3, r0
 801944c:	e006      	b.n	801945c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019450:	695b      	ldr	r3, [r3, #20]
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	68f9      	ldr	r1, [r7, #12]
 8019456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019458:	4798      	blx	r3
 801945a:	4603      	mov	r3, r0
}
 801945c:	4618      	mov	r0, r3
 801945e:	3720      	adds	r7, #32
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}
 8019464:	0801f424 	.word	0x0801f424
 8019468:	0801f458 	.word	0x0801f458
 801946c:	0801f464 	.word	0x0801f464
 8019470:	0801f48c 	.word	0x0801f48c
 8019474:	2000cad2 	.word	0x2000cad2
 8019478:	0801f934 	.word	0x0801f934

0801947c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801947c:	b480      	push	{r7}
 801947e:	b085      	sub	sp, #20
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019490:	d002      	beq.n	8019498 <ip4_addr_isbroadcast_u32+0x1c>
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d101      	bne.n	801949c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019498:	2301      	movs	r3, #1
 801949a:	e02a      	b.n	80194f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80194a2:	f003 0302 	and.w	r3, r3, #2
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d101      	bne.n	80194ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80194aa:	2300      	movs	r3, #0
 80194ac:	e021      	b.n	80194f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80194ae:	683b      	ldr	r3, [r7, #0]
 80194b0:	3304      	adds	r3, #4
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	687a      	ldr	r2, [r7, #4]
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d101      	bne.n	80194be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80194ba:	2300      	movs	r3, #0
 80194bc:	e019      	b.n	80194f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80194be:	68fa      	ldr	r2, [r7, #12]
 80194c0:	683b      	ldr	r3, [r7, #0]
 80194c2:	3304      	adds	r3, #4
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	405a      	eors	r2, r3
 80194c8:	683b      	ldr	r3, [r7, #0]
 80194ca:	3308      	adds	r3, #8
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	4013      	ands	r3, r2
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d10d      	bne.n	80194f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	3308      	adds	r3, #8
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	43da      	mvns	r2, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	3308      	adds	r3, #8
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80194e8:	429a      	cmp	r2, r3
 80194ea:	d101      	bne.n	80194f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80194ec:	2301      	movs	r3, #1
 80194ee:	e000      	b.n	80194f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80194f0:	2300      	movs	r3, #0
  }
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	3714      	adds	r7, #20
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bc80      	pop	{r7}
 80194fa:	4770      	bx	lr

080194fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b084      	sub	sp, #16
 8019500:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019502:	2300      	movs	r3, #0
 8019504:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019506:	4b12      	ldr	r3, [pc, #72]	; (8019550 <ip_reass_tmr+0x54>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801950c:	e018      	b.n	8019540 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	7fdb      	ldrb	r3, [r3, #31]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d00b      	beq.n	801952e <ip_reass_tmr+0x32>
      r->timer--;
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	7fdb      	ldrb	r3, [r3, #31]
 801951a:	3b01      	subs	r3, #1
 801951c:	b2da      	uxtb	r2, r3
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	60fb      	str	r3, [r7, #12]
 801952c:	e008      	b.n	8019540 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019538:	68b9      	ldr	r1, [r7, #8]
 801953a:	6878      	ldr	r0, [r7, #4]
 801953c:	f000 f80a 	bl	8019554 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d1e3      	bne.n	801950e <ip_reass_tmr+0x12>
    }
  }
}
 8019546:	bf00      	nop
 8019548:	bf00      	nop
 801954a:	3710      	adds	r7, #16
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}
 8019550:	2000cad4 	.word	0x2000cad4

08019554 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b088      	sub	sp, #32
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
 801955c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801955e:	2300      	movs	r3, #0
 8019560:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019562:	683a      	ldr	r2, [r7, #0]
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	429a      	cmp	r2, r3
 8019568:	d105      	bne.n	8019576 <ip_reass_free_complete_datagram+0x22>
 801956a:	4b45      	ldr	r3, [pc, #276]	; (8019680 <ip_reass_free_complete_datagram+0x12c>)
 801956c:	22ab      	movs	r2, #171	; 0xab
 801956e:	4945      	ldr	r1, [pc, #276]	; (8019684 <ip_reass_free_complete_datagram+0x130>)
 8019570:	4845      	ldr	r0, [pc, #276]	; (8019688 <ip_reass_free_complete_datagram+0x134>)
 8019572:	f002 f803 	bl	801b57c <iprintf>
  if (prev != NULL) {
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d00a      	beq.n	8019592 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	429a      	cmp	r2, r3
 8019584:	d005      	beq.n	8019592 <ip_reass_free_complete_datagram+0x3e>
 8019586:	4b3e      	ldr	r3, [pc, #248]	; (8019680 <ip_reass_free_complete_datagram+0x12c>)
 8019588:	22ad      	movs	r2, #173	; 0xad
 801958a:	4940      	ldr	r1, [pc, #256]	; (801968c <ip_reass_free_complete_datagram+0x138>)
 801958c:	483e      	ldr	r0, [pc, #248]	; (8019688 <ip_reass_free_complete_datagram+0x134>)
 801958e:	f001 fff5 	bl	801b57c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	685b      	ldr	r3, [r3, #4]
 8019596:	685b      	ldr	r3, [r3, #4]
 8019598:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801959a:	697b      	ldr	r3, [r7, #20]
 801959c:	889b      	ldrh	r3, [r3, #4]
 801959e:	b29b      	uxth	r3, r3
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d12a      	bne.n	80195fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	685b      	ldr	r3, [r3, #4]
 80195a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80195aa:	697b      	ldr	r3, [r7, #20]
 80195ac:	681a      	ldr	r2, [r3, #0]
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80195b2:	69bb      	ldr	r3, [r7, #24]
 80195b4:	6858      	ldr	r0, [r3, #4]
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	3308      	adds	r3, #8
 80195ba:	2214      	movs	r2, #20
 80195bc:	4619      	mov	r1, r3
 80195be:	f001 fee9 	bl	801b394 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80195c2:	2101      	movs	r1, #1
 80195c4:	69b8      	ldr	r0, [r7, #24]
 80195c6:	f7ff fc23 	bl	8018e10 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80195ca:	69b8      	ldr	r0, [r7, #24]
 80195cc:	f7f5 fc02 	bl	800edd4 <pbuf_clen>
 80195d0:	4603      	mov	r3, r0
 80195d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80195d4:	8bfa      	ldrh	r2, [r7, #30]
 80195d6:	8a7b      	ldrh	r3, [r7, #18]
 80195d8:	4413      	add	r3, r2
 80195da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80195de:	db05      	blt.n	80195ec <ip_reass_free_complete_datagram+0x98>
 80195e0:	4b27      	ldr	r3, [pc, #156]	; (8019680 <ip_reass_free_complete_datagram+0x12c>)
 80195e2:	22bc      	movs	r2, #188	; 0xbc
 80195e4:	492a      	ldr	r1, [pc, #168]	; (8019690 <ip_reass_free_complete_datagram+0x13c>)
 80195e6:	4828      	ldr	r0, [pc, #160]	; (8019688 <ip_reass_free_complete_datagram+0x134>)
 80195e8:	f001 ffc8 	bl	801b57c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80195ec:	8bfa      	ldrh	r2, [r7, #30]
 80195ee:	8a7b      	ldrh	r3, [r7, #18]
 80195f0:	4413      	add	r3, r2
 80195f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80195f4:	69b8      	ldr	r0, [r7, #24]
 80195f6:	f7f5 fb5f 	bl	800ecb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019600:	e01f      	b.n	8019642 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019602:	69bb      	ldr	r3, [r7, #24]
 8019604:	685b      	ldr	r3, [r3, #4]
 8019606:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019608:	69bb      	ldr	r3, [r7, #24]
 801960a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801960c:	697b      	ldr	r3, [r7, #20]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019612:	68f8      	ldr	r0, [r7, #12]
 8019614:	f7f5 fbde 	bl	800edd4 <pbuf_clen>
 8019618:	4603      	mov	r3, r0
 801961a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801961c:	8bfa      	ldrh	r2, [r7, #30]
 801961e:	8a7b      	ldrh	r3, [r7, #18]
 8019620:	4413      	add	r3, r2
 8019622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019626:	db05      	blt.n	8019634 <ip_reass_free_complete_datagram+0xe0>
 8019628:	4b15      	ldr	r3, [pc, #84]	; (8019680 <ip_reass_free_complete_datagram+0x12c>)
 801962a:	22cc      	movs	r2, #204	; 0xcc
 801962c:	4918      	ldr	r1, [pc, #96]	; (8019690 <ip_reass_free_complete_datagram+0x13c>)
 801962e:	4816      	ldr	r0, [pc, #88]	; (8019688 <ip_reass_free_complete_datagram+0x134>)
 8019630:	f001 ffa4 	bl	801b57c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019634:	8bfa      	ldrh	r2, [r7, #30]
 8019636:	8a7b      	ldrh	r3, [r7, #18]
 8019638:	4413      	add	r3, r2
 801963a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801963c:	68f8      	ldr	r0, [r7, #12]
 801963e:	f7f5 fb3b 	bl	800ecb8 <pbuf_free>
  while (p != NULL) {
 8019642:	69bb      	ldr	r3, [r7, #24]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d1dc      	bne.n	8019602 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019648:	6839      	ldr	r1, [r7, #0]
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f000 f8c2 	bl	80197d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019650:	4b10      	ldr	r3, [pc, #64]	; (8019694 <ip_reass_free_complete_datagram+0x140>)
 8019652:	881b      	ldrh	r3, [r3, #0]
 8019654:	8bfa      	ldrh	r2, [r7, #30]
 8019656:	429a      	cmp	r2, r3
 8019658:	d905      	bls.n	8019666 <ip_reass_free_complete_datagram+0x112>
 801965a:	4b09      	ldr	r3, [pc, #36]	; (8019680 <ip_reass_free_complete_datagram+0x12c>)
 801965c:	22d2      	movs	r2, #210	; 0xd2
 801965e:	490e      	ldr	r1, [pc, #56]	; (8019698 <ip_reass_free_complete_datagram+0x144>)
 8019660:	4809      	ldr	r0, [pc, #36]	; (8019688 <ip_reass_free_complete_datagram+0x134>)
 8019662:	f001 ff8b 	bl	801b57c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019666:	4b0b      	ldr	r3, [pc, #44]	; (8019694 <ip_reass_free_complete_datagram+0x140>)
 8019668:	881a      	ldrh	r2, [r3, #0]
 801966a:	8bfb      	ldrh	r3, [r7, #30]
 801966c:	1ad3      	subs	r3, r2, r3
 801966e:	b29a      	uxth	r2, r3
 8019670:	4b08      	ldr	r3, [pc, #32]	; (8019694 <ip_reass_free_complete_datagram+0x140>)
 8019672:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019674:	8bfb      	ldrh	r3, [r7, #30]
}
 8019676:	4618      	mov	r0, r3
 8019678:	3720      	adds	r7, #32
 801967a:	46bd      	mov	sp, r7
 801967c:	bd80      	pop	{r7, pc}
 801967e:	bf00      	nop
 8019680:	0801f4bc 	.word	0x0801f4bc
 8019684:	0801f4f8 	.word	0x0801f4f8
 8019688:	0801f504 	.word	0x0801f504
 801968c:	0801f52c 	.word	0x0801f52c
 8019690:	0801f540 	.word	0x0801f540
 8019694:	2000cad8 	.word	0x2000cad8
 8019698:	0801f560 	.word	0x0801f560

0801969c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b08a      	sub	sp, #40	; 0x28
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	6078      	str	r0, [r7, #4]
 80196a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80196a6:	2300      	movs	r3, #0
 80196a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80196aa:	2300      	movs	r3, #0
 80196ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80196ae:	2300      	movs	r3, #0
 80196b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80196b2:	2300      	movs	r3, #0
 80196b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80196b6:	2300      	movs	r3, #0
 80196b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80196ba:	4b28      	ldr	r3, [pc, #160]	; (801975c <ip_reass_remove_oldest_datagram+0xc0>)
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80196c0:	e030      	b.n	8019724 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80196c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c4:	695a      	ldr	r2, [r3, #20]
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	68db      	ldr	r3, [r3, #12]
 80196ca:	429a      	cmp	r2, r3
 80196cc:	d10c      	bne.n	80196e8 <ip_reass_remove_oldest_datagram+0x4c>
 80196ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196d0:	699a      	ldr	r2, [r3, #24]
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	691b      	ldr	r3, [r3, #16]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d106      	bne.n	80196e8 <ip_reass_remove_oldest_datagram+0x4c>
 80196da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196dc:	899a      	ldrh	r2, [r3, #12]
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	889b      	ldrh	r3, [r3, #4]
 80196e2:	b29b      	uxth	r3, r3
 80196e4:	429a      	cmp	r2, r3
 80196e6:	d014      	beq.n	8019712 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	3301      	adds	r3, #1
 80196ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80196ee:	6a3b      	ldr	r3, [r7, #32]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d104      	bne.n	80196fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80196f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80196f8:	69fb      	ldr	r3, [r7, #28]
 80196fa:	61bb      	str	r3, [r7, #24]
 80196fc:	e009      	b.n	8019712 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80196fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019700:	7fda      	ldrb	r2, [r3, #31]
 8019702:	6a3b      	ldr	r3, [r7, #32]
 8019704:	7fdb      	ldrb	r3, [r3, #31]
 8019706:	429a      	cmp	r2, r3
 8019708:	d803      	bhi.n	8019712 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801970c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801970e:	69fb      	ldr	r3, [r7, #28]
 8019710:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d001      	beq.n	801971e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801971c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019726:	2b00      	cmp	r3, #0
 8019728:	d1cb      	bne.n	80196c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801972a:	6a3b      	ldr	r3, [r7, #32]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d008      	beq.n	8019742 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019730:	69b9      	ldr	r1, [r7, #24]
 8019732:	6a38      	ldr	r0, [r7, #32]
 8019734:	f7ff ff0e 	bl	8019554 <ip_reass_free_complete_datagram>
 8019738:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801973a:	697a      	ldr	r2, [r7, #20]
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	4413      	add	r3, r2
 8019740:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019742:	697a      	ldr	r2, [r7, #20]
 8019744:	683b      	ldr	r3, [r7, #0]
 8019746:	429a      	cmp	r2, r3
 8019748:	da02      	bge.n	8019750 <ip_reass_remove_oldest_datagram+0xb4>
 801974a:	693b      	ldr	r3, [r7, #16]
 801974c:	2b01      	cmp	r3, #1
 801974e:	dcac      	bgt.n	80196aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019750:	697b      	ldr	r3, [r7, #20]
}
 8019752:	4618      	mov	r0, r3
 8019754:	3728      	adds	r7, #40	; 0x28
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
 801975a:	bf00      	nop
 801975c:	2000cad4 	.word	0x2000cad4

08019760 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
 8019768:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801976a:	2004      	movs	r0, #4
 801976c:	f7f4 fbf0 	bl	800df50 <memp_malloc>
 8019770:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d110      	bne.n	801979a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019778:	6839      	ldr	r1, [r7, #0]
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f7ff ff8e 	bl	801969c <ip_reass_remove_oldest_datagram>
 8019780:	4602      	mov	r2, r0
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	4293      	cmp	r3, r2
 8019786:	dc03      	bgt.n	8019790 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019788:	2004      	movs	r0, #4
 801978a:	f7f4 fbe1 	bl	800df50 <memp_malloc>
 801978e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d101      	bne.n	801979a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019796:	2300      	movs	r3, #0
 8019798:	e016      	b.n	80197c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801979a:	2220      	movs	r2, #32
 801979c:	2100      	movs	r1, #0
 801979e:	68f8      	ldr	r0, [r7, #12]
 80197a0:	f001 fe06 	bl	801b3b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	220f      	movs	r2, #15
 80197a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80197aa:	4b09      	ldr	r3, [pc, #36]	; (80197d0 <ip_reass_enqueue_new_datagram+0x70>)
 80197ac:	681a      	ldr	r2, [r3, #0]
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80197b2:	4a07      	ldr	r2, [pc, #28]	; (80197d0 <ip_reass_enqueue_new_datagram+0x70>)
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	3308      	adds	r3, #8
 80197bc:	2214      	movs	r2, #20
 80197be:	6879      	ldr	r1, [r7, #4]
 80197c0:	4618      	mov	r0, r3
 80197c2:	f001 fde7 	bl	801b394 <memcpy>
  return ipr;
 80197c6:	68fb      	ldr	r3, [r7, #12]
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3710      	adds	r7, #16
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	2000cad4 	.word	0x2000cad4

080197d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b082      	sub	sp, #8
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
 80197dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80197de:	4b10      	ldr	r3, [pc, #64]	; (8019820 <ip_reass_dequeue_datagram+0x4c>)
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	687a      	ldr	r2, [r7, #4]
 80197e4:	429a      	cmp	r2, r3
 80197e6:	d104      	bne.n	80197f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	4a0c      	ldr	r2, [pc, #48]	; (8019820 <ip_reass_dequeue_datagram+0x4c>)
 80197ee:	6013      	str	r3, [r2, #0]
 80197f0:	e00d      	b.n	801980e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80197f2:	683b      	ldr	r3, [r7, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d106      	bne.n	8019806 <ip_reass_dequeue_datagram+0x32>
 80197f8:	4b0a      	ldr	r3, [pc, #40]	; (8019824 <ip_reass_dequeue_datagram+0x50>)
 80197fa:	f240 1245 	movw	r2, #325	; 0x145
 80197fe:	490a      	ldr	r1, [pc, #40]	; (8019828 <ip_reass_dequeue_datagram+0x54>)
 8019800:	480a      	ldr	r0, [pc, #40]	; (801982c <ip_reass_dequeue_datagram+0x58>)
 8019802:	f001 febb 	bl	801b57c <iprintf>
    prev->next = ipr->next;
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681a      	ldr	r2, [r3, #0]
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801980e:	6879      	ldr	r1, [r7, #4]
 8019810:	2004      	movs	r0, #4
 8019812:	f7f4 fc13 	bl	800e03c <memp_free>
}
 8019816:	bf00      	nop
 8019818:	3708      	adds	r7, #8
 801981a:	46bd      	mov	sp, r7
 801981c:	bd80      	pop	{r7, pc}
 801981e:	bf00      	nop
 8019820:	2000cad4 	.word	0x2000cad4
 8019824:	0801f4bc 	.word	0x0801f4bc
 8019828:	0801f584 	.word	0x0801f584
 801982c:	0801f504 	.word	0x0801f504

08019830 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b08c      	sub	sp, #48	; 0x30
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801983c:	2300      	movs	r3, #0
 801983e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019840:	2301      	movs	r3, #1
 8019842:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019844:	68bb      	ldr	r3, [r7, #8]
 8019846:	685b      	ldr	r3, [r3, #4]
 8019848:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801984a:	69fb      	ldr	r3, [r7, #28]
 801984c:	885b      	ldrh	r3, [r3, #2]
 801984e:	b29b      	uxth	r3, r3
 8019850:	4618      	mov	r0, r3
 8019852:	f7f3 fdcd 	bl	800d3f0 <lwip_htons>
 8019856:	4603      	mov	r3, r0
 8019858:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801985a:	69fb      	ldr	r3, [r7, #28]
 801985c:	781b      	ldrb	r3, [r3, #0]
 801985e:	f003 030f 	and.w	r3, r3, #15
 8019862:	b2db      	uxtb	r3, r3
 8019864:	009b      	lsls	r3, r3, #2
 8019866:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019868:	7e7b      	ldrb	r3, [r7, #25]
 801986a:	b29b      	uxth	r3, r3
 801986c:	8b7a      	ldrh	r2, [r7, #26]
 801986e:	429a      	cmp	r2, r3
 8019870:	d202      	bcs.n	8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019872:	f04f 33ff 	mov.w	r3, #4294967295
 8019876:	e135      	b.n	8019ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019878:	7e7b      	ldrb	r3, [r7, #25]
 801987a:	b29b      	uxth	r3, r3
 801987c:	8b7a      	ldrh	r2, [r7, #26]
 801987e:	1ad3      	subs	r3, r2, r3
 8019880:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019882:	69fb      	ldr	r3, [r7, #28]
 8019884:	88db      	ldrh	r3, [r3, #6]
 8019886:	b29b      	uxth	r3, r3
 8019888:	4618      	mov	r0, r3
 801988a:	f7f3 fdb1 	bl	800d3f0 <lwip_htons>
 801988e:	4603      	mov	r3, r0
 8019890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019894:	b29b      	uxth	r3, r3
 8019896:	00db      	lsls	r3, r3, #3
 8019898:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801989a:	68bb      	ldr	r3, [r7, #8]
 801989c:	685b      	ldr	r3, [r3, #4]
 801989e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80198a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198a2:	2200      	movs	r2, #0
 80198a4:	701a      	strb	r2, [r3, #0]
 80198a6:	2200      	movs	r2, #0
 80198a8:	705a      	strb	r2, [r3, #1]
 80198aa:	2200      	movs	r2, #0
 80198ac:	709a      	strb	r2, [r3, #2]
 80198ae:	2200      	movs	r2, #0
 80198b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80198b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b4:	8afa      	ldrh	r2, [r7, #22]
 80198b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80198b8:	8afa      	ldrh	r2, [r7, #22]
 80198ba:	8b7b      	ldrh	r3, [r7, #26]
 80198bc:	4413      	add	r3, r2
 80198be:	b29a      	uxth	r2, r3
 80198c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80198c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198c6:	88db      	ldrh	r3, [r3, #6]
 80198c8:	b29b      	uxth	r3, r3
 80198ca:	8afa      	ldrh	r2, [r7, #22]
 80198cc:	429a      	cmp	r2, r3
 80198ce:	d902      	bls.n	80198d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80198d0:	f04f 33ff 	mov.w	r3, #4294967295
 80198d4:	e106      	b.n	8019ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	685b      	ldr	r3, [r3, #4]
 80198da:	627b      	str	r3, [r7, #36]	; 0x24
 80198dc:	e068      	b.n	80199b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80198de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e0:	685b      	ldr	r3, [r3, #4]
 80198e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80198e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198e6:	889b      	ldrh	r3, [r3, #4]
 80198e8:	b29a      	uxth	r2, r3
 80198ea:	693b      	ldr	r3, [r7, #16]
 80198ec:	889b      	ldrh	r3, [r3, #4]
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d235      	bcs.n	8019960 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80198f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80198fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d020      	beq.n	8019942 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019902:	889b      	ldrh	r3, [r3, #4]
 8019904:	b29a      	uxth	r2, r3
 8019906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019908:	88db      	ldrh	r3, [r3, #6]
 801990a:	b29b      	uxth	r3, r3
 801990c:	429a      	cmp	r2, r3
 801990e:	d307      	bcc.n	8019920 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019912:	88db      	ldrh	r3, [r3, #6]
 8019914:	b29a      	uxth	r2, r3
 8019916:	693b      	ldr	r3, [r7, #16]
 8019918:	889b      	ldrh	r3, [r3, #4]
 801991a:	b29b      	uxth	r3, r3
 801991c:	429a      	cmp	r2, r3
 801991e:	d902      	bls.n	8019926 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019920:	f04f 33ff 	mov.w	r3, #4294967295
 8019924:	e0de      	b.n	8019ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019928:	68ba      	ldr	r2, [r7, #8]
 801992a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801992e:	88db      	ldrh	r3, [r3, #6]
 8019930:	b29a      	uxth	r2, r3
 8019932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019934:	889b      	ldrh	r3, [r3, #4]
 8019936:	b29b      	uxth	r3, r3
 8019938:	429a      	cmp	r2, r3
 801993a:	d03d      	beq.n	80199b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801993c:	2300      	movs	r3, #0
 801993e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019940:	e03a      	b.n	80199b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019944:	88db      	ldrh	r3, [r3, #6]
 8019946:	b29a      	uxth	r2, r3
 8019948:	693b      	ldr	r3, [r7, #16]
 801994a:	889b      	ldrh	r3, [r3, #4]
 801994c:	b29b      	uxth	r3, r3
 801994e:	429a      	cmp	r2, r3
 8019950:	d902      	bls.n	8019958 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019952:	f04f 33ff 	mov.w	r3, #4294967295
 8019956:	e0c5      	b.n	8019ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	68ba      	ldr	r2, [r7, #8]
 801995c:	605a      	str	r2, [r3, #4]
      break;
 801995e:	e02b      	b.n	80199b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019962:	889b      	ldrh	r3, [r3, #4]
 8019964:	b29a      	uxth	r2, r3
 8019966:	693b      	ldr	r3, [r7, #16]
 8019968:	889b      	ldrh	r3, [r3, #4]
 801996a:	b29b      	uxth	r3, r3
 801996c:	429a      	cmp	r2, r3
 801996e:	d102      	bne.n	8019976 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019970:	f04f 33ff 	mov.w	r3, #4294967295
 8019974:	e0b6      	b.n	8019ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019978:	889b      	ldrh	r3, [r3, #4]
 801997a:	b29a      	uxth	r2, r3
 801997c:	693b      	ldr	r3, [r7, #16]
 801997e:	88db      	ldrh	r3, [r3, #6]
 8019980:	b29b      	uxth	r3, r3
 8019982:	429a      	cmp	r2, r3
 8019984:	d202      	bcs.n	801998c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019986:	f04f 33ff 	mov.w	r3, #4294967295
 801998a:	e0ab      	b.n	8019ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801998e:	2b00      	cmp	r3, #0
 8019990:	d009      	beq.n	80199a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019994:	88db      	ldrh	r3, [r3, #6]
 8019996:	b29a      	uxth	r2, r3
 8019998:	693b      	ldr	r3, [r7, #16]
 801999a:	889b      	ldrh	r3, [r3, #4]
 801999c:	b29b      	uxth	r3, r3
 801999e:	429a      	cmp	r2, r3
 80199a0:	d001      	beq.n	80199a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80199a2:	2300      	movs	r3, #0
 80199a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80199ac:	693b      	ldr	r3, [r7, #16]
 80199ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80199b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d193      	bne.n	80198de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80199b6:	e000      	b.n	80199ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80199b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80199ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d12d      	bne.n	8019a1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80199c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d01c      	beq.n	8019a00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80199c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c8:	88db      	ldrh	r3, [r3, #6]
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ce:	889b      	ldrh	r3, [r3, #4]
 80199d0:	b29b      	uxth	r3, r3
 80199d2:	429a      	cmp	r2, r3
 80199d4:	d906      	bls.n	80199e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80199d6:	4b45      	ldr	r3, [pc, #276]	; (8019aec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80199d8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80199dc:	4944      	ldr	r1, [pc, #272]	; (8019af0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80199de:	4845      	ldr	r0, [pc, #276]	; (8019af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80199e0:	f001 fdcc 	bl	801b57c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80199e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199e6:	68ba      	ldr	r2, [r7, #8]
 80199e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80199ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ec:	88db      	ldrh	r3, [r3, #6]
 80199ee:	b29a      	uxth	r2, r3
 80199f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199f2:	889b      	ldrh	r3, [r3, #4]
 80199f4:	b29b      	uxth	r3, r3
 80199f6:	429a      	cmp	r2, r3
 80199f8:	d010      	beq.n	8019a1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80199fa:	2300      	movs	r3, #0
 80199fc:	623b      	str	r3, [r7, #32]
 80199fe:	e00d      	b.n	8019a1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	685b      	ldr	r3, [r3, #4]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d006      	beq.n	8019a16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019a08:	4b38      	ldr	r3, [pc, #224]	; (8019aec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019a0a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019a0e:	493a      	ldr	r1, [pc, #232]	; (8019af8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019a10:	4838      	ldr	r0, [pc, #224]	; (8019af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019a12:	f001 fdb3 	bl	801b57c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	68ba      	ldr	r2, [r7, #8]
 8019a1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d105      	bne.n	8019a2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	7f9b      	ldrb	r3, [r3, #30]
 8019a26:	f003 0301 	and.w	r3, r3, #1
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d059      	beq.n	8019ae2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019a2e:	6a3b      	ldr	r3, [r7, #32]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d04f      	beq.n	8019ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	685b      	ldr	r3, [r3, #4]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d006      	beq.n	8019a4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	685b      	ldr	r3, [r3, #4]
 8019a42:	889b      	ldrh	r3, [r3, #4]
 8019a44:	b29b      	uxth	r3, r3
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d002      	beq.n	8019a50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	623b      	str	r3, [r7, #32]
 8019a4e:	e041      	b.n	8019ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a52:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019a5a:	e012      	b.n	8019a82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a64:	88db      	ldrh	r3, [r3, #6]
 8019a66:	b29a      	uxth	r2, r3
 8019a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a6a:	889b      	ldrh	r3, [r3, #4]
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	429a      	cmp	r2, r3
 8019a70:	d002      	beq.n	8019a78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019a72:	2300      	movs	r3, #0
 8019a74:	623b      	str	r3, [r7, #32]
            break;
 8019a76:	e007      	b.n	8019a88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a7a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d1e9      	bne.n	8019a5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019a88:	6a3b      	ldr	r3, [r7, #32]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d022      	beq.n	8019ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	685b      	ldr	r3, [r3, #4]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d106      	bne.n	8019aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019a96:	4b15      	ldr	r3, [pc, #84]	; (8019aec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019a98:	f240 12df 	movw	r2, #479	; 0x1df
 8019a9c:	4917      	ldr	r1, [pc, #92]	; (8019afc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019a9e:	4815      	ldr	r0, [pc, #84]	; (8019af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019aa0:	f001 fd6c 	bl	801b57c <iprintf>
          LWIP_ASSERT("sanity check",
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	685b      	ldr	r3, [r3, #4]
 8019aa8:	685b      	ldr	r3, [r3, #4]
 8019aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019aac:	429a      	cmp	r2, r3
 8019aae:	d106      	bne.n	8019abe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019ab0:	4b0e      	ldr	r3, [pc, #56]	; (8019aec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ab2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019ab6:	4911      	ldr	r1, [pc, #68]	; (8019afc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019ab8:	480e      	ldr	r0, [pc, #56]	; (8019af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019aba:	f001 fd5f 	bl	801b57c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d006      	beq.n	8019ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019ac6:	4b09      	ldr	r3, [pc, #36]	; (8019aec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ac8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019acc:	490c      	ldr	r1, [pc, #48]	; (8019b00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019ace:	4809      	ldr	r0, [pc, #36]	; (8019af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ad0:	f001 fd54 	bl	801b57c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019ad4:	6a3b      	ldr	r3, [r7, #32]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	bf14      	ite	ne
 8019ada:	2301      	movne	r3, #1
 8019adc:	2300      	moveq	r3, #0
 8019ade:	b2db      	uxtb	r3, r3
 8019ae0:	e000      	b.n	8019ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019ae2:	2300      	movs	r3, #0
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3730      	adds	r7, #48	; 0x30
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}
 8019aec:	0801f4bc 	.word	0x0801f4bc
 8019af0:	0801f5a0 	.word	0x0801f5a0
 8019af4:	0801f504 	.word	0x0801f504
 8019af8:	0801f5c0 	.word	0x0801f5c0
 8019afc:	0801f5f8 	.word	0x0801f5f8
 8019b00:	0801f608 	.word	0x0801f608

08019b04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b08e      	sub	sp, #56	; 0x38
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	685b      	ldr	r3, [r3, #4]
 8019b10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b14:	781b      	ldrb	r3, [r3, #0]
 8019b16:	f003 030f 	and.w	r3, r3, #15
 8019b1a:	b2db      	uxtb	r3, r3
 8019b1c:	009b      	lsls	r3, r3, #2
 8019b1e:	b2db      	uxtb	r3, r3
 8019b20:	2b14      	cmp	r3, #20
 8019b22:	f040 8171 	bne.w	8019e08 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b28:	88db      	ldrh	r3, [r3, #6]
 8019b2a:	b29b      	uxth	r3, r3
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	f7f3 fc5f 	bl	800d3f0 <lwip_htons>
 8019b32:	4603      	mov	r3, r0
 8019b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019b38:	b29b      	uxth	r3, r3
 8019b3a:	00db      	lsls	r3, r3, #3
 8019b3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b40:	885b      	ldrh	r3, [r3, #2]
 8019b42:	b29b      	uxth	r3, r3
 8019b44:	4618      	mov	r0, r3
 8019b46:	f7f3 fc53 	bl	800d3f0 <lwip_htons>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b50:	781b      	ldrb	r3, [r3, #0]
 8019b52:	f003 030f 	and.w	r3, r3, #15
 8019b56:	b2db      	uxtb	r3, r3
 8019b58:	009b      	lsls	r3, r3, #2
 8019b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b62:	b29b      	uxth	r3, r3
 8019b64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019b66:	429a      	cmp	r2, r3
 8019b68:	f0c0 8150 	bcc.w	8019e0c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b70:	b29b      	uxth	r3, r3
 8019b72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019b74:	1ad3      	subs	r3, r2, r3
 8019b76:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019b78:	6878      	ldr	r0, [r7, #4]
 8019b7a:	f7f5 f92b 	bl	800edd4 <pbuf_clen>
 8019b7e:	4603      	mov	r3, r0
 8019b80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019b82:	4b8c      	ldr	r3, [pc, #560]	; (8019db4 <ip4_reass+0x2b0>)
 8019b84:	881b      	ldrh	r3, [r3, #0]
 8019b86:	461a      	mov	r2, r3
 8019b88:	8c3b      	ldrh	r3, [r7, #32]
 8019b8a:	4413      	add	r3, r2
 8019b8c:	2b0a      	cmp	r3, #10
 8019b8e:	dd10      	ble.n	8019bb2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019b90:	8c3b      	ldrh	r3, [r7, #32]
 8019b92:	4619      	mov	r1, r3
 8019b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019b96:	f7ff fd81 	bl	801969c <ip_reass_remove_oldest_datagram>
 8019b9a:	4603      	mov	r3, r0
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	f000 8137 	beq.w	8019e10 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019ba2:	4b84      	ldr	r3, [pc, #528]	; (8019db4 <ip4_reass+0x2b0>)
 8019ba4:	881b      	ldrh	r3, [r3, #0]
 8019ba6:	461a      	mov	r2, r3
 8019ba8:	8c3b      	ldrh	r3, [r7, #32]
 8019baa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019bac:	2b0a      	cmp	r3, #10
 8019bae:	f300 812f 	bgt.w	8019e10 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019bb2:	4b81      	ldr	r3, [pc, #516]	; (8019db8 <ip4_reass+0x2b4>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8019bb8:	e015      	b.n	8019be6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bbc:	695a      	ldr	r2, [r3, #20]
 8019bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bc0:	68db      	ldr	r3, [r3, #12]
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d10c      	bne.n	8019be0 <ip4_reass+0xdc>
 8019bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bc8:	699a      	ldr	r2, [r3, #24]
 8019bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bcc:	691b      	ldr	r3, [r3, #16]
 8019bce:	429a      	cmp	r2, r3
 8019bd0:	d106      	bne.n	8019be0 <ip4_reass+0xdc>
 8019bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bd4:	899a      	ldrh	r2, [r3, #12]
 8019bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bd8:	889b      	ldrh	r3, [r3, #4]
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	429a      	cmp	r2, r3
 8019bde:	d006      	beq.n	8019bee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	633b      	str	r3, [r7, #48]	; 0x30
 8019be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d1e6      	bne.n	8019bba <ip4_reass+0xb6>
 8019bec:	e000      	b.n	8019bf0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019bee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d109      	bne.n	8019c0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019bf6:	8c3b      	ldrh	r3, [r7, #32]
 8019bf8:	4619      	mov	r1, r3
 8019bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bfc:	f7ff fdb0 	bl	8019760 <ip_reass_enqueue_new_datagram>
 8019c00:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d11c      	bne.n	8019c42 <ip4_reass+0x13e>
      goto nullreturn;
 8019c08:	e105      	b.n	8019e16 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0c:	88db      	ldrh	r3, [r3, #6]
 8019c0e:	b29b      	uxth	r3, r3
 8019c10:	4618      	mov	r0, r3
 8019c12:	f7f3 fbed 	bl	800d3f0 <lwip_htons>
 8019c16:	4603      	mov	r3, r0
 8019c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d110      	bne.n	8019c42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c22:	89db      	ldrh	r3, [r3, #14]
 8019c24:	4618      	mov	r0, r3
 8019c26:	f7f3 fbe3 	bl	800d3f0 <lwip_htons>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d006      	beq.n	8019c42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c36:	3308      	adds	r3, #8
 8019c38:	2214      	movs	r2, #20
 8019c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	f001 fba9 	bl	801b394 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c44:	88db      	ldrh	r3, [r3, #6]
 8019c46:	b29b      	uxth	r3, r3
 8019c48:	f003 0320 	and.w	r3, r3, #32
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	bf0c      	ite	eq
 8019c50:	2301      	moveq	r3, #1
 8019c52:	2300      	movne	r3, #0
 8019c54:	b2db      	uxtb	r3, r3
 8019c56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019c58:	69fb      	ldr	r3, [r7, #28]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d00e      	beq.n	8019c7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019c5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019c62:	4413      	add	r3, r2
 8019c64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019c66:	8b7a      	ldrh	r2, [r7, #26]
 8019c68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	f0c0 80a0 	bcc.w	8019db0 <ip4_reass+0x2ac>
 8019c70:	8b7b      	ldrh	r3, [r7, #26]
 8019c72:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019c76:	4293      	cmp	r3, r2
 8019c78:	f200 809a 	bhi.w	8019db0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019c7c:	69fa      	ldr	r2, [r7, #28]
 8019c7e:	6879      	ldr	r1, [r7, #4]
 8019c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c82:	f7ff fdd5 	bl	8019830 <ip_reass_chain_frag_into_datagram_and_validate>
 8019c86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019c88:	697b      	ldr	r3, [r7, #20]
 8019c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c8e:	f000 809b 	beq.w	8019dc8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019c92:	4b48      	ldr	r3, [pc, #288]	; (8019db4 <ip4_reass+0x2b0>)
 8019c94:	881a      	ldrh	r2, [r3, #0]
 8019c96:	8c3b      	ldrh	r3, [r7, #32]
 8019c98:	4413      	add	r3, r2
 8019c9a:	b29a      	uxth	r2, r3
 8019c9c:	4b45      	ldr	r3, [pc, #276]	; (8019db4 <ip4_reass+0x2b0>)
 8019c9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019ca0:	69fb      	ldr	r3, [r7, #28]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d00d      	beq.n	8019cc2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019ca6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019caa:	4413      	add	r3, r2
 8019cac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cb0:	8a7a      	ldrh	r2, [r7, #18]
 8019cb2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cb6:	7f9b      	ldrb	r3, [r3, #30]
 8019cb8:	f043 0301 	orr.w	r3, r3, #1
 8019cbc:	b2da      	uxtb	r2, r3
 8019cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cc0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	2b01      	cmp	r3, #1
 8019cc6:	d171      	bne.n	8019dac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cca:	8b9b      	ldrh	r3, [r3, #28]
 8019ccc:	3314      	adds	r3, #20
 8019cce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cd2:	685b      	ldr	r3, [r3, #4]
 8019cd4:	685b      	ldr	r3, [r3, #4]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cdc:	685b      	ldr	r3, [r3, #4]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ce4:	3308      	adds	r3, #8
 8019ce6:	2214      	movs	r2, #20
 8019ce8:	4619      	mov	r1, r3
 8019cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cec:	f001 fb52 	bl	801b394 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019cf0:	8a3b      	ldrh	r3, [r7, #16]
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7f3 fb7c 	bl	800d3f0 <lwip_htons>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	461a      	mov	r2, r3
 8019cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cfe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d02:	2200      	movs	r2, #0
 8019d04:	719a      	strb	r2, [r3, #6]
 8019d06:	2200      	movs	r2, #0
 8019d08:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	729a      	strb	r2, [r3, #10]
 8019d10:	2200      	movs	r2, #0
 8019d12:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d16:	685b      	ldr	r3, [r3, #4]
 8019d18:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019d1a:	e00d      	b.n	8019d38 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d1e:	685b      	ldr	r3, [r3, #4]
 8019d20:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019d22:	2114      	movs	r1, #20
 8019d24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019d26:	f7f4 ff41 	bl	800ebac <pbuf_remove_header>
      pbuf_cat(p, r);
 8019d2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019d2c:	6878      	ldr	r0, [r7, #4]
 8019d2e:	f7f5 f88f 	bl	800ee50 <pbuf_cat>
      r = iprh->next_pbuf;
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d1ee      	bne.n	8019d1c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019d3e:	4b1e      	ldr	r3, [pc, #120]	; (8019db8 <ip4_reass+0x2b4>)
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d102      	bne.n	8019d4e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d4c:	e010      	b.n	8019d70 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019d4e:	4b1a      	ldr	r3, [pc, #104]	; (8019db8 <ip4_reass+0x2b4>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d54:	e007      	b.n	8019d66 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d5c:	429a      	cmp	r2, r3
 8019d5e:	d006      	beq.n	8019d6e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d1f4      	bne.n	8019d56 <ip4_reass+0x252>
 8019d6c:	e000      	b.n	8019d70 <ip4_reass+0x26c>
          break;
 8019d6e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d74:	f7ff fd2e 	bl	80197d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019d78:	6878      	ldr	r0, [r7, #4]
 8019d7a:	f7f5 f82b 	bl	800edd4 <pbuf_clen>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019d82:	4b0c      	ldr	r3, [pc, #48]	; (8019db4 <ip4_reass+0x2b0>)
 8019d84:	881b      	ldrh	r3, [r3, #0]
 8019d86:	8c3a      	ldrh	r2, [r7, #32]
 8019d88:	429a      	cmp	r2, r3
 8019d8a:	d906      	bls.n	8019d9a <ip4_reass+0x296>
 8019d8c:	4b0b      	ldr	r3, [pc, #44]	; (8019dbc <ip4_reass+0x2b8>)
 8019d8e:	f240 229b 	movw	r2, #667	; 0x29b
 8019d92:	490b      	ldr	r1, [pc, #44]	; (8019dc0 <ip4_reass+0x2bc>)
 8019d94:	480b      	ldr	r0, [pc, #44]	; (8019dc4 <ip4_reass+0x2c0>)
 8019d96:	f001 fbf1 	bl	801b57c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019d9a:	4b06      	ldr	r3, [pc, #24]	; (8019db4 <ip4_reass+0x2b0>)
 8019d9c:	881a      	ldrh	r2, [r3, #0]
 8019d9e:	8c3b      	ldrh	r3, [r7, #32]
 8019da0:	1ad3      	subs	r3, r2, r3
 8019da2:	b29a      	uxth	r2, r3
 8019da4:	4b03      	ldr	r3, [pc, #12]	; (8019db4 <ip4_reass+0x2b0>)
 8019da6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	e038      	b.n	8019e1e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019dac:	2300      	movs	r3, #0
 8019dae:	e036      	b.n	8019e1e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019db0:	bf00      	nop
 8019db2:	e00a      	b.n	8019dca <ip4_reass+0x2c6>
 8019db4:	2000cad8 	.word	0x2000cad8
 8019db8:	2000cad4 	.word	0x2000cad4
 8019dbc:	0801f4bc 	.word	0x0801f4bc
 8019dc0:	0801f62c 	.word	0x0801f62c
 8019dc4:	0801f504 	.word	0x0801f504
    goto nullreturn_ipr;
 8019dc8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d106      	bne.n	8019dde <ip4_reass+0x2da>
 8019dd0:	4b15      	ldr	r3, [pc, #84]	; (8019e28 <ip4_reass+0x324>)
 8019dd2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019dd6:	4915      	ldr	r1, [pc, #84]	; (8019e2c <ip4_reass+0x328>)
 8019dd8:	4815      	ldr	r0, [pc, #84]	; (8019e30 <ip4_reass+0x32c>)
 8019dda:	f001 fbcf 	bl	801b57c <iprintf>
  if (ipr->p == NULL) {
 8019dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019de0:	685b      	ldr	r3, [r3, #4]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d116      	bne.n	8019e14 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019de6:	4b13      	ldr	r3, [pc, #76]	; (8019e34 <ip4_reass+0x330>)
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d006      	beq.n	8019dfe <ip4_reass+0x2fa>
 8019df0:	4b0d      	ldr	r3, [pc, #52]	; (8019e28 <ip4_reass+0x324>)
 8019df2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019df6:	4910      	ldr	r1, [pc, #64]	; (8019e38 <ip4_reass+0x334>)
 8019df8:	480d      	ldr	r0, [pc, #52]	; (8019e30 <ip4_reass+0x32c>)
 8019dfa:	f001 fbbf 	bl	801b57c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019dfe:	2100      	movs	r1, #0
 8019e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019e02:	f7ff fce7 	bl	80197d4 <ip_reass_dequeue_datagram>
 8019e06:	e006      	b.n	8019e16 <ip4_reass+0x312>
    goto nullreturn;
 8019e08:	bf00      	nop
 8019e0a:	e004      	b.n	8019e16 <ip4_reass+0x312>
    goto nullreturn;
 8019e0c:	bf00      	nop
 8019e0e:	e002      	b.n	8019e16 <ip4_reass+0x312>
      goto nullreturn;
 8019e10:	bf00      	nop
 8019e12:	e000      	b.n	8019e16 <ip4_reass+0x312>
  }

nullreturn:
 8019e14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019e16:	6878      	ldr	r0, [r7, #4]
 8019e18:	f7f4 ff4e 	bl	800ecb8 <pbuf_free>
  return NULL;
 8019e1c:	2300      	movs	r3, #0
}
 8019e1e:	4618      	mov	r0, r3
 8019e20:	3738      	adds	r7, #56	; 0x38
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bd80      	pop	{r7, pc}
 8019e26:	bf00      	nop
 8019e28:	0801f4bc 	.word	0x0801f4bc
 8019e2c:	0801f648 	.word	0x0801f648
 8019e30:	0801f504 	.word	0x0801f504
 8019e34:	2000cad4 	.word	0x2000cad4
 8019e38:	0801f654 	.word	0x0801f654

08019e3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019e40:	2005      	movs	r0, #5
 8019e42:	f7f4 f885 	bl	800df50 <memp_malloc>
 8019e46:	4603      	mov	r3, r0
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	bd80      	pop	{r7, pc}

08019e4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b082      	sub	sp, #8
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d106      	bne.n	8019e68 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019e5a:	4b07      	ldr	r3, [pc, #28]	; (8019e78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019e5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019e60:	4906      	ldr	r1, [pc, #24]	; (8019e7c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019e62:	4807      	ldr	r0, [pc, #28]	; (8019e80 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019e64:	f001 fb8a 	bl	801b57c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019e68:	6879      	ldr	r1, [r7, #4]
 8019e6a:	2005      	movs	r0, #5
 8019e6c:	f7f4 f8e6 	bl	800e03c <memp_free>
}
 8019e70:	bf00      	nop
 8019e72:	3708      	adds	r7, #8
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd80      	pop	{r7, pc}
 8019e78:	0801f4bc 	.word	0x0801f4bc
 8019e7c:	0801f674 	.word	0x0801f674
 8019e80:	0801f504 	.word	0x0801f504

08019e84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d106      	bne.n	8019ea4 <ipfrag_free_pbuf_custom+0x20>
 8019e96:	4b11      	ldr	r3, [pc, #68]	; (8019edc <ipfrag_free_pbuf_custom+0x58>)
 8019e98:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019e9c:	4910      	ldr	r1, [pc, #64]	; (8019ee0 <ipfrag_free_pbuf_custom+0x5c>)
 8019e9e:	4811      	ldr	r0, [pc, #68]	; (8019ee4 <ipfrag_free_pbuf_custom+0x60>)
 8019ea0:	f001 fb6c 	bl	801b57c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019ea4:	68fa      	ldr	r2, [r7, #12]
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	d006      	beq.n	8019eba <ipfrag_free_pbuf_custom+0x36>
 8019eac:	4b0b      	ldr	r3, [pc, #44]	; (8019edc <ipfrag_free_pbuf_custom+0x58>)
 8019eae:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019eb2:	490d      	ldr	r1, [pc, #52]	; (8019ee8 <ipfrag_free_pbuf_custom+0x64>)
 8019eb4:	480b      	ldr	r0, [pc, #44]	; (8019ee4 <ipfrag_free_pbuf_custom+0x60>)
 8019eb6:	f001 fb61 	bl	801b57c <iprintf>
  if (pcr->original != NULL) {
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	695b      	ldr	r3, [r3, #20]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d004      	beq.n	8019ecc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	695b      	ldr	r3, [r3, #20]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7f4 fef6 	bl	800ecb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019ecc:	68f8      	ldr	r0, [r7, #12]
 8019ece:	f7ff ffbd 	bl	8019e4c <ip_frag_free_pbuf_custom_ref>
}
 8019ed2:	bf00      	nop
 8019ed4:	3710      	adds	r7, #16
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}
 8019eda:	bf00      	nop
 8019edc:	0801f4bc 	.word	0x0801f4bc
 8019ee0:	0801f680 	.word	0x0801f680
 8019ee4:	0801f504 	.word	0x0801f504
 8019ee8:	0801f68c 	.word	0x0801f68c

08019eec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b094      	sub	sp, #80	; 0x50
 8019ef0:	af02      	add	r7, sp, #8
 8019ef2:	60f8      	str	r0, [r7, #12]
 8019ef4:	60b9      	str	r1, [r7, #8]
 8019ef6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019ef8:	2300      	movs	r3, #0
 8019efa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019f02:	3b14      	subs	r3, #20
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	da00      	bge.n	8019f0a <ip4_frag+0x1e>
 8019f08:	3307      	adds	r3, #7
 8019f0a:	10db      	asrs	r3, r3, #3
 8019f0c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019f0e:	2314      	movs	r3, #20
 8019f10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	685b      	ldr	r3, [r3, #4]
 8019f16:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f1e:	781b      	ldrb	r3, [r3, #0]
 8019f20:	f003 030f 	and.w	r3, r3, #15
 8019f24:	b2db      	uxtb	r3, r3
 8019f26:	009b      	lsls	r3, r3, #2
 8019f28:	b2db      	uxtb	r3, r3
 8019f2a:	2b14      	cmp	r3, #20
 8019f2c:	d002      	beq.n	8019f34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019f2e:	f06f 0305 	mvn.w	r3, #5
 8019f32:	e110      	b.n	801a156 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	895b      	ldrh	r3, [r3, #10]
 8019f38:	2b13      	cmp	r3, #19
 8019f3a:	d809      	bhi.n	8019f50 <ip4_frag+0x64>
 8019f3c:	4b88      	ldr	r3, [pc, #544]	; (801a160 <ip4_frag+0x274>)
 8019f3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019f42:	4988      	ldr	r1, [pc, #544]	; (801a164 <ip4_frag+0x278>)
 8019f44:	4888      	ldr	r0, [pc, #544]	; (801a168 <ip4_frag+0x27c>)
 8019f46:	f001 fb19 	bl	801b57c <iprintf>
 8019f4a:	f06f 0305 	mvn.w	r3, #5
 8019f4e:	e102      	b.n	801a156 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f52:	88db      	ldrh	r3, [r3, #6]
 8019f54:	b29b      	uxth	r3, r3
 8019f56:	4618      	mov	r0, r3
 8019f58:	f7f3 fa4a 	bl	800d3f0 <lwip_htons>
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019f60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019f66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019f6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019f70:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	891b      	ldrh	r3, [r3, #8]
 8019f76:	3b14      	subs	r3, #20
 8019f78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019f7c:	e0e1      	b.n	801a142 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019f7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019f80:	00db      	lsls	r3, r3, #3
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019f88:	4293      	cmp	r3, r2
 8019f8a:	bf28      	it	cs
 8019f8c:	4613      	movcs	r3, r2
 8019f8e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019f90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f94:	2114      	movs	r1, #20
 8019f96:	200e      	movs	r0, #14
 8019f98:	f7f4 fbaa 	bl	800e6f0 <pbuf_alloc>
 8019f9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	f000 80d5 	beq.w	801a150 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa8:	895b      	ldrh	r3, [r3, #10]
 8019faa:	2b13      	cmp	r3, #19
 8019fac:	d806      	bhi.n	8019fbc <ip4_frag+0xd0>
 8019fae:	4b6c      	ldr	r3, [pc, #432]	; (801a160 <ip4_frag+0x274>)
 8019fb0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019fb4:	496d      	ldr	r1, [pc, #436]	; (801a16c <ip4_frag+0x280>)
 8019fb6:	486c      	ldr	r0, [pc, #432]	; (801a168 <ip4_frag+0x27c>)
 8019fb8:	f001 fae0 	bl	801b57c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fbe:	685b      	ldr	r3, [r3, #4]
 8019fc0:	2214      	movs	r2, #20
 8019fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f001 f9e5 	bl	801b394 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fcc:	685b      	ldr	r3, [r3, #4]
 8019fce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019fd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019fd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019fd6:	e064      	b.n	801a0a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	895a      	ldrh	r2, [r3, #10]
 8019fdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019fde:	1ad3      	subs	r3, r2, r3
 8019fe0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	895b      	ldrh	r3, [r3, #10]
 8019fe6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d906      	bls.n	8019ffa <ip4_frag+0x10e>
 8019fec:	4b5c      	ldr	r3, [pc, #368]	; (801a160 <ip4_frag+0x274>)
 8019fee:	f240 322d 	movw	r2, #813	; 0x32d
 8019ff2:	495f      	ldr	r1, [pc, #380]	; (801a170 <ip4_frag+0x284>)
 8019ff4:	485c      	ldr	r0, [pc, #368]	; (801a168 <ip4_frag+0x27c>)
 8019ff6:	f001 fac1 	bl	801b57c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019ffa:	8bfa      	ldrh	r2, [r7, #30]
 8019ffc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a000:	4293      	cmp	r3, r2
 801a002:	bf28      	it	cs
 801a004:	4613      	movcs	r3, r2
 801a006:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a00a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d105      	bne.n	801a01e <ip4_frag+0x132>
        poff = 0;
 801a012:	2300      	movs	r3, #0
 801a014:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	60fb      	str	r3, [r7, #12]
        continue;
 801a01c:	e041      	b.n	801a0a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a01e:	f7ff ff0d 	bl	8019e3c <ip_frag_alloc_pbuf_custom_ref>
 801a022:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a024:	69bb      	ldr	r3, [r7, #24]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d103      	bne.n	801a032 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a02a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a02c:	f7f4 fe44 	bl	800ecb8 <pbuf_free>
        goto memerr;
 801a030:	e08f      	b.n	801a152 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a032:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a038:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a03a:	4413      	add	r3, r2
 801a03c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a040:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a044:	9201      	str	r2, [sp, #4]
 801a046:	9300      	str	r3, [sp, #0]
 801a048:	4603      	mov	r3, r0
 801a04a:	2241      	movs	r2, #65	; 0x41
 801a04c:	2000      	movs	r0, #0
 801a04e:	f7f4 fc79 	bl	800e944 <pbuf_alloced_custom>
 801a052:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d106      	bne.n	801a068 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a05a:	69b8      	ldr	r0, [r7, #24]
 801a05c:	f7ff fef6 	bl	8019e4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a062:	f7f4 fe29 	bl	800ecb8 <pbuf_free>
        goto memerr;
 801a066:	e074      	b.n	801a152 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a068:	68f8      	ldr	r0, [r7, #12]
 801a06a:	f7f4 fec9 	bl	800ee00 <pbuf_ref>
      pcr->original = p;
 801a06e:	69bb      	ldr	r3, [r7, #24]
 801a070:	68fa      	ldr	r2, [r7, #12]
 801a072:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a074:	69bb      	ldr	r3, [r7, #24]
 801a076:	4a3f      	ldr	r2, [pc, #252]	; (801a174 <ip4_frag+0x288>)
 801a078:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a07a:	6979      	ldr	r1, [r7, #20]
 801a07c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a07e:	f7f4 fee7 	bl	800ee50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a082:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a086:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a08a:	1ad3      	subs	r3, r2, r3
 801a08c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a090:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a094:	2b00      	cmp	r3, #0
 801a096:	d004      	beq.n	801a0a2 <ip4_frag+0x1b6>
        poff = 0;
 801a098:	2300      	movs	r3, #0
 801a09a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a0a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d196      	bne.n	8019fd8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a0aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a0ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a0b0:	4413      	add	r3, r2
 801a0b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a0b4:	68bb      	ldr	r3, [r7, #8]
 801a0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a0b8:	f1a3 0213 	sub.w	r2, r3, #19
 801a0bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a0c0:	429a      	cmp	r2, r3
 801a0c2:	bfcc      	ite	gt
 801a0c4:	2301      	movgt	r3, #1
 801a0c6:	2300      	movle	r3, #0
 801a0c8:	b2db      	uxtb	r3, r3
 801a0ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a0cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a0d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a0d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a0d6:	6a3b      	ldr	r3, [r7, #32]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d002      	beq.n	801a0e2 <ip4_frag+0x1f6>
 801a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d003      	beq.n	801a0ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a0e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a0e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a0e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a0ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7f3 f97f 	bl	800d3f0 <lwip_htons>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	461a      	mov	r2, r3
 801a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a0fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a0fc:	3314      	adds	r3, #20
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	4618      	mov	r0, r3
 801a102:	f7f3 f975 	bl	800d3f0 <lwip_htons>
 801a106:	4603      	mov	r3, r0
 801a108:	461a      	mov	r2, r3
 801a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a10c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a110:	2200      	movs	r2, #0
 801a112:	729a      	strb	r2, [r3, #10]
 801a114:	2200      	movs	r2, #0
 801a116:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a118:	68bb      	ldr	r3, [r7, #8]
 801a11a:	695b      	ldr	r3, [r3, #20]
 801a11c:	687a      	ldr	r2, [r7, #4]
 801a11e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a120:	68b8      	ldr	r0, [r7, #8]
 801a122:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a126:	f7f4 fdc7 	bl	800ecb8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a12a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a12e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a130:	1ad3      	subs	r3, r2, r3
 801a132:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a136:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a13a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a13c:	4413      	add	r3, r2
 801a13e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a142:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a146:	2b00      	cmp	r3, #0
 801a148:	f47f af19 	bne.w	8019f7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a14c:	2300      	movs	r3, #0
 801a14e:	e002      	b.n	801a156 <ip4_frag+0x26a>
      goto memerr;
 801a150:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a152:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a156:	4618      	mov	r0, r3
 801a158:	3748      	adds	r7, #72	; 0x48
 801a15a:	46bd      	mov	sp, r7
 801a15c:	bd80      	pop	{r7, pc}
 801a15e:	bf00      	nop
 801a160:	0801f4bc 	.word	0x0801f4bc
 801a164:	0801f698 	.word	0x0801f698
 801a168:	0801f504 	.word	0x0801f504
 801a16c:	0801f6b4 	.word	0x0801f6b4
 801a170:	0801f6d4 	.word	0x0801f6d4
 801a174:	08019e85 	.word	0x08019e85

0801a178 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b086      	sub	sp, #24
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
 801a180:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a182:	230e      	movs	r3, #14
 801a184:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	895b      	ldrh	r3, [r3, #10]
 801a18a:	2b0e      	cmp	r3, #14
 801a18c:	d96e      	bls.n	801a26c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	7bdb      	ldrb	r3, [r3, #15]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d106      	bne.n	801a1a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a19c:	3301      	adds	r3, #1
 801a19e:	b2da      	uxtb	r2, r3
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	685b      	ldr	r3, [r3, #4]
 801a1a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a1aa:	693b      	ldr	r3, [r7, #16]
 801a1ac:	7b1a      	ldrb	r2, [r3, #12]
 801a1ae:	7b5b      	ldrb	r3, [r3, #13]
 801a1b0:	021b      	lsls	r3, r3, #8
 801a1b2:	4313      	orrs	r3, r2
 801a1b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a1b6:	693b      	ldr	r3, [r7, #16]
 801a1b8:	781b      	ldrb	r3, [r3, #0]
 801a1ba:	f003 0301 	and.w	r3, r3, #1
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d023      	beq.n	801a20a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a1c2:	693b      	ldr	r3, [r7, #16]
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	2b01      	cmp	r3, #1
 801a1c8:	d10f      	bne.n	801a1ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a1ca:	693b      	ldr	r3, [r7, #16]
 801a1cc:	785b      	ldrb	r3, [r3, #1]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d11b      	bne.n	801a20a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a1d2:	693b      	ldr	r3, [r7, #16]
 801a1d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a1d6:	2b5e      	cmp	r3, #94	; 0x5e
 801a1d8:	d117      	bne.n	801a20a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	7b5b      	ldrb	r3, [r3, #13]
 801a1de:	f043 0310 	orr.w	r3, r3, #16
 801a1e2:	b2da      	uxtb	r2, r3
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	735a      	strb	r2, [r3, #13]
 801a1e8:	e00f      	b.n	801a20a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a1ea:	693b      	ldr	r3, [r7, #16]
 801a1ec:	2206      	movs	r2, #6
 801a1ee:	4928      	ldr	r1, [pc, #160]	; (801a290 <ethernet_input+0x118>)
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f001 f8bf 	bl	801b374 <memcmp>
 801a1f6:	4603      	mov	r3, r0
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d106      	bne.n	801a20a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	7b5b      	ldrb	r3, [r3, #13]
 801a200:	f043 0308 	orr.w	r3, r3, #8
 801a204:	b2da      	uxtb	r2, r3
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a20a:	89fb      	ldrh	r3, [r7, #14]
 801a20c:	2b08      	cmp	r3, #8
 801a20e:	d003      	beq.n	801a218 <ethernet_input+0xa0>
 801a210:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a214:	d014      	beq.n	801a240 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a216:	e032      	b.n	801a27e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a21e:	f003 0308 	and.w	r3, r3, #8
 801a222:	2b00      	cmp	r3, #0
 801a224:	d024      	beq.n	801a270 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a226:	8afb      	ldrh	r3, [r7, #22]
 801a228:	4619      	mov	r1, r3
 801a22a:	6878      	ldr	r0, [r7, #4]
 801a22c:	f7f4 fcbe 	bl	800ebac <pbuf_remove_header>
 801a230:	4603      	mov	r3, r0
 801a232:	2b00      	cmp	r3, #0
 801a234:	d11e      	bne.n	801a274 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a236:	6839      	ldr	r1, [r7, #0]
 801a238:	6878      	ldr	r0, [r7, #4]
 801a23a:	f7fe ff05 	bl	8019048 <ip4_input>
      break;
 801a23e:	e013      	b.n	801a268 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a246:	f003 0308 	and.w	r3, r3, #8
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d014      	beq.n	801a278 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a24e:	8afb      	ldrh	r3, [r7, #22]
 801a250:	4619      	mov	r1, r3
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	f7f4 fcaa 	bl	800ebac <pbuf_remove_header>
 801a258:	4603      	mov	r3, r0
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d10e      	bne.n	801a27c <ethernet_input+0x104>
        etharp_input(p, netif);
 801a25e:	6839      	ldr	r1, [r7, #0]
 801a260:	6878      	ldr	r0, [r7, #4]
 801a262:	f7fe f87d 	bl	8018360 <etharp_input>
      break;
 801a266:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a268:	2300      	movs	r3, #0
 801a26a:	e00c      	b.n	801a286 <ethernet_input+0x10e>
    goto free_and_return;
 801a26c:	bf00      	nop
 801a26e:	e006      	b.n	801a27e <ethernet_input+0x106>
        goto free_and_return;
 801a270:	bf00      	nop
 801a272:	e004      	b.n	801a27e <ethernet_input+0x106>
        goto free_and_return;
 801a274:	bf00      	nop
 801a276:	e002      	b.n	801a27e <ethernet_input+0x106>
        goto free_and_return;
 801a278:	bf00      	nop
 801a27a:	e000      	b.n	801a27e <ethernet_input+0x106>
        goto free_and_return;
 801a27c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a27e:	6878      	ldr	r0, [r7, #4]
 801a280:	f7f4 fd1a 	bl	800ecb8 <pbuf_free>
  return ERR_OK;
 801a284:	2300      	movs	r3, #0
}
 801a286:	4618      	mov	r0, r3
 801a288:	3718      	adds	r7, #24
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bd80      	pop	{r7, pc}
 801a28e:	bf00      	nop
 801a290:	0801f93c 	.word	0x0801f93c

0801a294 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a294:	b580      	push	{r7, lr}
 801a296:	b086      	sub	sp, #24
 801a298:	af00      	add	r7, sp, #0
 801a29a:	60f8      	str	r0, [r7, #12]
 801a29c:	60b9      	str	r1, [r7, #8]
 801a29e:	607a      	str	r2, [r7, #4]
 801a2a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a2a2:	8c3b      	ldrh	r3, [r7, #32]
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	f7f3 f8a3 	bl	800d3f0 <lwip_htons>
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a2ae:	210e      	movs	r1, #14
 801a2b0:	68b8      	ldr	r0, [r7, #8]
 801a2b2:	f7f4 fc6b 	bl	800eb8c <pbuf_add_header>
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d125      	bne.n	801a308 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a2bc:	68bb      	ldr	r3, [r7, #8]
 801a2be:	685b      	ldr	r3, [r3, #4]
 801a2c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a2c2:	693b      	ldr	r3, [r7, #16]
 801a2c4:	8afa      	ldrh	r2, [r7, #22]
 801a2c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a2c8:	693b      	ldr	r3, [r7, #16]
 801a2ca:	2206      	movs	r2, #6
 801a2cc:	6839      	ldr	r1, [r7, #0]
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	f001 f860 	bl	801b394 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a2d4:	693b      	ldr	r3, [r7, #16]
 801a2d6:	3306      	adds	r3, #6
 801a2d8:	2206      	movs	r2, #6
 801a2da:	6879      	ldr	r1, [r7, #4]
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f001 f859 	bl	801b394 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a2e8:	2b06      	cmp	r3, #6
 801a2ea:	d006      	beq.n	801a2fa <ethernet_output+0x66>
 801a2ec:	4b0a      	ldr	r3, [pc, #40]	; (801a318 <ethernet_output+0x84>)
 801a2ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a2f2:	490a      	ldr	r1, [pc, #40]	; (801a31c <ethernet_output+0x88>)
 801a2f4:	480a      	ldr	r0, [pc, #40]	; (801a320 <ethernet_output+0x8c>)
 801a2f6:	f001 f941 	bl	801b57c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	699b      	ldr	r3, [r3, #24]
 801a2fe:	68b9      	ldr	r1, [r7, #8]
 801a300:	68f8      	ldr	r0, [r7, #12]
 801a302:	4798      	blx	r3
 801a304:	4603      	mov	r3, r0
 801a306:	e002      	b.n	801a30e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a308:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a30a:	f06f 0301 	mvn.w	r3, #1
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3718      	adds	r7, #24
 801a312:	46bd      	mov	sp, r7
 801a314:	bd80      	pop	{r7, pc}
 801a316:	bf00      	nop
 801a318:	0801f6e4 	.word	0x0801f6e4
 801a31c:	0801f71c 	.word	0x0801f71c
 801a320:	0801f750 	.word	0x0801f750

0801a324 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b082      	sub	sp, #8
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
 801a32c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801a32e:	683b      	ldr	r3, [r7, #0]
 801a330:	2200      	movs	r2, #0
 801a332:	2104      	movs	r1, #4
 801a334:	4618      	mov	r0, r3
 801a336:	f7ee f9dd 	bl	80086f4 <osMessageQueueNew>
 801a33a:	4602      	mov	r2, r0
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d102      	bne.n	801a34e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801a348:	f04f 33ff 	mov.w	r3, #4294967295
 801a34c:	e000      	b.n	801a350 <sys_mbox_new+0x2c>

  return ERR_OK;
 801a34e:	2300      	movs	r3, #0
}
 801a350:	4618      	mov	r0, r3
 801a352:	3708      	adds	r7, #8
 801a354:	46bd      	mov	sp, r7
 801a356:	bd80      	pop	{r7, pc}

0801a358 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b084      	sub	sp, #16
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
 801a360:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	6818      	ldr	r0, [r3, #0]
 801a366:	4639      	mov	r1, r7
 801a368:	2300      	movs	r3, #0
 801a36a:	2200      	movs	r2, #0
 801a36c:	f7ee fa36 	bl	80087dc <osMessageQueuePut>
 801a370:	4603      	mov	r3, r0
 801a372:	2b00      	cmp	r3, #0
 801a374:	d102      	bne.n	801a37c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a376:	2300      	movs	r3, #0
 801a378:	73fb      	strb	r3, [r7, #15]
 801a37a:	e001      	b.n	801a380 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a37c:	23ff      	movs	r3, #255	; 0xff
 801a37e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a384:	4618      	mov	r0, r3
 801a386:	3710      	adds	r7, #16
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}

0801a38c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b086      	sub	sp, #24
 801a390:	af00      	add	r7, sp, #0
 801a392:	60f8      	str	r0, [r7, #12]
 801a394:	60b9      	str	r1, [r7, #8]
 801a396:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a398:	f7ed febc 	bl	8008114 <osKernelGetTickCount>
 801a39c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d013      	beq.n	801a3cc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	6818      	ldr	r0, [r3, #0]
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	68b9      	ldr	r1, [r7, #8]
 801a3ae:	f7ee fa75 	bl	800889c <osMessageQueueGet>
 801a3b2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a3b4:	693b      	ldr	r3, [r7, #16]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d105      	bne.n	801a3c6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a3ba:	f7ed feab 	bl	8008114 <osKernelGetTickCount>
 801a3be:	4602      	mov	r2, r0
 801a3c0:	697b      	ldr	r3, [r7, #20]
 801a3c2:	1ad3      	subs	r3, r2, r3
 801a3c4:	e00f      	b.n	801a3e6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a3c6:	f04f 33ff 	mov.w	r3, #4294967295
 801a3ca:	e00c      	b.n	801a3e6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	6818      	ldr	r0, [r3, #0]
 801a3d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	68b9      	ldr	r1, [r7, #8]
 801a3d8:	f7ee fa60 	bl	800889c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a3dc:	f7ed fe9a 	bl	8008114 <osKernelGetTickCount>
 801a3e0:	4602      	mov	r2, r0
 801a3e2:	697b      	ldr	r3, [r7, #20]
 801a3e4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	3718      	adds	r7, #24
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}

0801a3ee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a3ee:	b480      	push	{r7}
 801a3f0:	b083      	sub	sp, #12
 801a3f2:	af00      	add	r7, sp, #0
 801a3f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d101      	bne.n	801a402 <sys_mbox_valid+0x14>
    return 0;
 801a3fe:	2300      	movs	r3, #0
 801a400:	e000      	b.n	801a404 <sys_mbox_valid+0x16>
  else
    return 1;
 801a402:	2301      	movs	r3, #1
}
 801a404:	4618      	mov	r0, r3
 801a406:	370c      	adds	r7, #12
 801a408:	46bd      	mov	sp, r7
 801a40a:	bc80      	pop	{r7}
 801a40c:	4770      	bx	lr
	...

0801a410 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801a414:	2000      	movs	r0, #0
 801a416:	f7ed ff3f 	bl	8008298 <osMutexNew>
 801a41a:	4603      	mov	r3, r0
 801a41c:	4a01      	ldr	r2, [pc, #4]	; (801a424 <sys_init+0x14>)
 801a41e:	6013      	str	r3, [r2, #0]
#endif
}
 801a420:	bf00      	nop
 801a422:	bd80      	pop	{r7, pc}
 801a424:	2000cadc 	.word	0x2000cadc

0801a428 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a428:	b580      	push	{r7, lr}
 801a42a:	b082      	sub	sp, #8
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801a430:	2000      	movs	r0, #0
 801a432:	f7ed ff31 	bl	8008298 <osMutexNew>
 801a436:	4602      	mov	r2, r0
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d102      	bne.n	801a44a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a444:	f04f 33ff 	mov.w	r3, #4294967295
 801a448:	e000      	b.n	801a44c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a44a:	2300      	movs	r3, #0
}
 801a44c:	4618      	mov	r0, r3
 801a44e:	3708      	adds	r7, #8
 801a450:	46bd      	mov	sp, r7
 801a452:	bd80      	pop	{r7, pc}

0801a454 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a454:	b580      	push	{r7, lr}
 801a456:	b082      	sub	sp, #8
 801a458:	af00      	add	r7, sp, #0
 801a45a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	f04f 31ff 	mov.w	r1, #4294967295
 801a464:	4618      	mov	r0, r3
 801a466:	f7ed ff9d 	bl	80083a4 <osMutexAcquire>
#endif
}
 801a46a:	bf00      	nop
 801a46c:	3708      	adds	r7, #8
 801a46e:	46bd      	mov	sp, r7
 801a470:	bd80      	pop	{r7, pc}

0801a472 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a472:	b580      	push	{r7, lr}
 801a474:	b082      	sub	sp, #8
 801a476:	af00      	add	r7, sp, #0
 801a478:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	4618      	mov	r0, r3
 801a480:	f7ed ffdb 	bl	800843a <osMutexRelease>
}
 801a484:	bf00      	nop
 801a486:	3708      	adds	r7, #8
 801a488:	46bd      	mov	sp, r7
 801a48a:	bd80      	pop	{r7, pc}

0801a48c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b08e      	sub	sp, #56	; 0x38
 801a490:	af00      	add	r7, sp, #0
 801a492:	60f8      	str	r0, [r7, #12]
 801a494:	60b9      	str	r1, [r7, #8]
 801a496:	607a      	str	r2, [r7, #4]
 801a498:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801a49a:	f107 0314 	add.w	r3, r7, #20
 801a49e:	2224      	movs	r2, #36	; 0x24
 801a4a0:	2100      	movs	r1, #0
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f000 ff84 	bl	801b3b0 <memset>
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	617b      	str	r3, [r7, #20]
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
 801a4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801a4b4:	f107 0314 	add.w	r3, r7, #20
 801a4b8:	461a      	mov	r2, r3
 801a4ba:	6879      	ldr	r1, [r7, #4]
 801a4bc:	68b8      	ldr	r0, [r7, #8]
 801a4be:	f7ed fe3e 	bl	800813e <osThreadNew>
 801a4c2:	4603      	mov	r3, r0
#endif
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	3738      	adds	r7, #56	; 0x38
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}

0801a4cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801a4d0:	4b04      	ldr	r3, [pc, #16]	; (801a4e4 <sys_arch_protect+0x18>)
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	f04f 31ff 	mov.w	r1, #4294967295
 801a4d8:	4618      	mov	r0, r3
 801a4da:	f7ed ff63 	bl	80083a4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801a4de:	2301      	movs	r3, #1
}
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	2000cadc 	.word	0x2000cadc

0801a4e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b082      	sub	sp, #8
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a4f0:	4b04      	ldr	r3, [pc, #16]	; (801a504 <sys_arch_unprotect+0x1c>)
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f7ed ffa0 	bl	800843a <osMutexRelease>
}
 801a4fa:	bf00      	nop
 801a4fc:	3708      	adds	r7, #8
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}
 801a502:	bf00      	nop
 801a504:	2000cadc 	.word	0x2000cadc

0801a508 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a50c:	2200      	movs	r2, #0
 801a50e:	4912      	ldr	r1, [pc, #72]	; (801a558 <MX_USB_DEVICE_Init+0x50>)
 801a510:	4812      	ldr	r0, [pc, #72]	; (801a55c <MX_USB_DEVICE_Init+0x54>)
 801a512:	f7ec fa89 	bl	8006a28 <USBD_Init>
 801a516:	4603      	mov	r3, r0
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d001      	beq.n	801a520 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a51c:	f7e6 f95e 	bl	80007dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a520:	490f      	ldr	r1, [pc, #60]	; (801a560 <MX_USB_DEVICE_Init+0x58>)
 801a522:	480e      	ldr	r0, [pc, #56]	; (801a55c <MX_USB_DEVICE_Init+0x54>)
 801a524:	f7ec fab0 	bl	8006a88 <USBD_RegisterClass>
 801a528:	4603      	mov	r3, r0
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d001      	beq.n	801a532 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a52e:	f7e6 f955 	bl	80007dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a532:	490c      	ldr	r1, [pc, #48]	; (801a564 <MX_USB_DEVICE_Init+0x5c>)
 801a534:	4809      	ldr	r0, [pc, #36]	; (801a55c <MX_USB_DEVICE_Init+0x54>)
 801a536:	f7ec f9eb 	bl	8006910 <USBD_CDC_RegisterInterface>
 801a53a:	4603      	mov	r3, r0
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d001      	beq.n	801a544 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a540:	f7e6 f94c 	bl	80007dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a544:	4805      	ldr	r0, [pc, #20]	; (801a55c <MX_USB_DEVICE_Init+0x54>)
 801a546:	f7ec fad5 	bl	8006af4 <USBD_Start>
 801a54a:	4603      	mov	r3, r0
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d001      	beq.n	801a554 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a550:	f7e6 f944 	bl	80007dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a554:	bf00      	nop
 801a556:	bd80      	pop	{r7, pc}
 801a558:	200000c0 	.word	0x200000c0
 801a55c:	2000cae0 	.word	0x2000cae0
 801a560:	20000018 	.word	0x20000018
 801a564:	200000ac 	.word	0x200000ac

0801a568 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a56c:	2200      	movs	r2, #0
 801a56e:	4905      	ldr	r1, [pc, #20]	; (801a584 <CDC_Init_FS+0x1c>)
 801a570:	4805      	ldr	r0, [pc, #20]	; (801a588 <CDC_Init_FS+0x20>)
 801a572:	f7ec f9e6 	bl	8006942 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a576:	4905      	ldr	r1, [pc, #20]	; (801a58c <CDC_Init_FS+0x24>)
 801a578:	4803      	ldr	r0, [pc, #12]	; (801a588 <CDC_Init_FS+0x20>)
 801a57a:	f7ec fa03 	bl	8006984 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a57e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a580:	4618      	mov	r0, r3
 801a582:	bd80      	pop	{r7, pc}
 801a584:	2000d5bc 	.word	0x2000d5bc
 801a588:	2000cae0 	.word	0x2000cae0
 801a58c:	2000cdbc 	.word	0x2000cdbc

0801a590 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a590:	b480      	push	{r7}
 801a592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a594:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a596:	4618      	mov	r0, r3
 801a598:	46bd      	mov	sp, r7
 801a59a:	bc80      	pop	{r7}
 801a59c:	4770      	bx	lr
	...

0801a5a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	b083      	sub	sp, #12
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	6039      	str	r1, [r7, #0]
 801a5aa:	71fb      	strb	r3, [r7, #7]
 801a5ac:	4613      	mov	r3, r2
 801a5ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a5b0:	79fb      	ldrb	r3, [r7, #7]
 801a5b2:	2b23      	cmp	r3, #35	; 0x23
 801a5b4:	d84a      	bhi.n	801a64c <CDC_Control_FS+0xac>
 801a5b6:	a201      	add	r2, pc, #4	; (adr r2, 801a5bc <CDC_Control_FS+0x1c>)
 801a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5bc:	0801a64d 	.word	0x0801a64d
 801a5c0:	0801a64d 	.word	0x0801a64d
 801a5c4:	0801a64d 	.word	0x0801a64d
 801a5c8:	0801a64d 	.word	0x0801a64d
 801a5cc:	0801a64d 	.word	0x0801a64d
 801a5d0:	0801a64d 	.word	0x0801a64d
 801a5d4:	0801a64d 	.word	0x0801a64d
 801a5d8:	0801a64d 	.word	0x0801a64d
 801a5dc:	0801a64d 	.word	0x0801a64d
 801a5e0:	0801a64d 	.word	0x0801a64d
 801a5e4:	0801a64d 	.word	0x0801a64d
 801a5e8:	0801a64d 	.word	0x0801a64d
 801a5ec:	0801a64d 	.word	0x0801a64d
 801a5f0:	0801a64d 	.word	0x0801a64d
 801a5f4:	0801a64d 	.word	0x0801a64d
 801a5f8:	0801a64d 	.word	0x0801a64d
 801a5fc:	0801a64d 	.word	0x0801a64d
 801a600:	0801a64d 	.word	0x0801a64d
 801a604:	0801a64d 	.word	0x0801a64d
 801a608:	0801a64d 	.word	0x0801a64d
 801a60c:	0801a64d 	.word	0x0801a64d
 801a610:	0801a64d 	.word	0x0801a64d
 801a614:	0801a64d 	.word	0x0801a64d
 801a618:	0801a64d 	.word	0x0801a64d
 801a61c:	0801a64d 	.word	0x0801a64d
 801a620:	0801a64d 	.word	0x0801a64d
 801a624:	0801a64d 	.word	0x0801a64d
 801a628:	0801a64d 	.word	0x0801a64d
 801a62c:	0801a64d 	.word	0x0801a64d
 801a630:	0801a64d 	.word	0x0801a64d
 801a634:	0801a64d 	.word	0x0801a64d
 801a638:	0801a64d 	.word	0x0801a64d
 801a63c:	0801a64d 	.word	0x0801a64d
 801a640:	0801a64d 	.word	0x0801a64d
 801a644:	0801a64d 	.word	0x0801a64d
 801a648:	0801a64d 	.word	0x0801a64d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a64c:	bf00      	nop
  }

  return (USBD_OK);
 801a64e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a650:	4618      	mov	r0, r3
 801a652:	370c      	adds	r7, #12
 801a654:	46bd      	mov	sp, r7
 801a656:	bc80      	pop	{r7}
 801a658:	4770      	bx	lr
 801a65a:	bf00      	nop

0801a65c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b082      	sub	sp, #8
 801a660:	af00      	add	r7, sp, #0
 801a662:	6078      	str	r0, [r7, #4]
 801a664:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a666:	6879      	ldr	r1, [r7, #4]
 801a668:	4805      	ldr	r0, [pc, #20]	; (801a680 <CDC_Receive_FS+0x24>)
 801a66a:	f7ec f98b 	bl	8006984 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a66e:	4804      	ldr	r0, [pc, #16]	; (801a680 <CDC_Receive_FS+0x24>)
 801a670:	f7ec f9a4 	bl	80069bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a674:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a676:	4618      	mov	r0, r3
 801a678:	3708      	adds	r7, #8
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bd80      	pop	{r7, pc}
 801a67e:	bf00      	nop
 801a680:	2000cae0 	.word	0x2000cae0

0801a684 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a684:	b480      	push	{r7}
 801a686:	b087      	sub	sp, #28
 801a688:	af00      	add	r7, sp, #0
 801a68a:	60f8      	str	r0, [r7, #12]
 801a68c:	60b9      	str	r1, [r7, #8]
 801a68e:	4613      	mov	r3, r2
 801a690:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a692:	2300      	movs	r3, #0
 801a694:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801a696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a69a:	4618      	mov	r0, r3
 801a69c:	371c      	adds	r7, #28
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	bc80      	pop	{r7}
 801a6a2:	4770      	bx	lr

0801a6a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6a4:	b480      	push	{r7}
 801a6a6:	b083      	sub	sp, #12
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	6039      	str	r1, [r7, #0]
 801a6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a6b0:	683b      	ldr	r3, [r7, #0]
 801a6b2:	2212      	movs	r2, #18
 801a6b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a6b6:	4b03      	ldr	r3, [pc, #12]	; (801a6c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	370c      	adds	r7, #12
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bc80      	pop	{r7}
 801a6c0:	4770      	bx	lr
 801a6c2:	bf00      	nop
 801a6c4:	200000dc 	.word	0x200000dc

0801a6c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6c8:	b480      	push	{r7}
 801a6ca:	b083      	sub	sp, #12
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	6039      	str	r1, [r7, #0]
 801a6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	2204      	movs	r2, #4
 801a6d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a6da:	4b03      	ldr	r3, [pc, #12]	; (801a6e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	370c      	adds	r7, #12
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bc80      	pop	{r7}
 801a6e4:	4770      	bx	lr
 801a6e6:	bf00      	nop
 801a6e8:	200000f0 	.word	0x200000f0

0801a6ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	6039      	str	r1, [r7, #0]
 801a6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a6f8:	79fb      	ldrb	r3, [r7, #7]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d105      	bne.n	801a70a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a6fe:	683a      	ldr	r2, [r7, #0]
 801a700:	4907      	ldr	r1, [pc, #28]	; (801a720 <USBD_FS_ProductStrDescriptor+0x34>)
 801a702:	4808      	ldr	r0, [pc, #32]	; (801a724 <USBD_FS_ProductStrDescriptor+0x38>)
 801a704:	f7ed fb9a 	bl	8007e3c <USBD_GetString>
 801a708:	e004      	b.n	801a714 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a70a:	683a      	ldr	r2, [r7, #0]
 801a70c:	4904      	ldr	r1, [pc, #16]	; (801a720 <USBD_FS_ProductStrDescriptor+0x34>)
 801a70e:	4805      	ldr	r0, [pc, #20]	; (801a724 <USBD_FS_ProductStrDescriptor+0x38>)
 801a710:	f7ed fb94 	bl	8007e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a714:	4b02      	ldr	r3, [pc, #8]	; (801a720 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a716:	4618      	mov	r0, r3
 801a718:	3708      	adds	r7, #8
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}
 801a71e:	bf00      	nop
 801a720:	2000ddbc 	.word	0x2000ddbc
 801a724:	0801f778 	.word	0x0801f778

0801a728 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b082      	sub	sp, #8
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	4603      	mov	r3, r0
 801a730:	6039      	str	r1, [r7, #0]
 801a732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a734:	683a      	ldr	r2, [r7, #0]
 801a736:	4904      	ldr	r1, [pc, #16]	; (801a748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a738:	4804      	ldr	r0, [pc, #16]	; (801a74c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a73a:	f7ed fb7f 	bl	8007e3c <USBD_GetString>
  return USBD_StrDesc;
 801a73e:	4b02      	ldr	r3, [pc, #8]	; (801a748 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a740:	4618      	mov	r0, r3
 801a742:	3708      	adds	r7, #8
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	2000ddbc 	.word	0x2000ddbc
 801a74c:	0801f790 	.word	0x0801f790

0801a750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b082      	sub	sp, #8
 801a754:	af00      	add	r7, sp, #0
 801a756:	4603      	mov	r3, r0
 801a758:	6039      	str	r1, [r7, #0]
 801a75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a75c:	683b      	ldr	r3, [r7, #0]
 801a75e:	221a      	movs	r2, #26
 801a760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a762:	f000 f843 	bl	801a7ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a766:	4b02      	ldr	r3, [pc, #8]	; (801a770 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3708      	adds	r7, #8
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	200000f4 	.word	0x200000f4

0801a774 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b082      	sub	sp, #8
 801a778:	af00      	add	r7, sp, #0
 801a77a:	4603      	mov	r3, r0
 801a77c:	6039      	str	r1, [r7, #0]
 801a77e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a780:	79fb      	ldrb	r3, [r7, #7]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d105      	bne.n	801a792 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a786:	683a      	ldr	r2, [r7, #0]
 801a788:	4907      	ldr	r1, [pc, #28]	; (801a7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a78a:	4808      	ldr	r0, [pc, #32]	; (801a7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801a78c:	f7ed fb56 	bl	8007e3c <USBD_GetString>
 801a790:	e004      	b.n	801a79c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a792:	683a      	ldr	r2, [r7, #0]
 801a794:	4904      	ldr	r1, [pc, #16]	; (801a7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a796:	4805      	ldr	r0, [pc, #20]	; (801a7ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801a798:	f7ed fb50 	bl	8007e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a79c:	4b02      	ldr	r3, [pc, #8]	; (801a7a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	3708      	adds	r7, #8
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd80      	pop	{r7, pc}
 801a7a6:	bf00      	nop
 801a7a8:	2000ddbc 	.word	0x2000ddbc
 801a7ac:	0801f7a4 	.word	0x0801f7a4

0801a7b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b082      	sub	sp, #8
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	6039      	str	r1, [r7, #0]
 801a7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a7bc:	79fb      	ldrb	r3, [r7, #7]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d105      	bne.n	801a7ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a7c2:	683a      	ldr	r2, [r7, #0]
 801a7c4:	4907      	ldr	r1, [pc, #28]	; (801a7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a7c6:	4808      	ldr	r0, [pc, #32]	; (801a7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a7c8:	f7ed fb38 	bl	8007e3c <USBD_GetString>
 801a7cc:	e004      	b.n	801a7d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a7ce:	683a      	ldr	r2, [r7, #0]
 801a7d0:	4904      	ldr	r1, [pc, #16]	; (801a7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a7d2:	4805      	ldr	r0, [pc, #20]	; (801a7e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a7d4:	f7ed fb32 	bl	8007e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a7d8:	4b02      	ldr	r3, [pc, #8]	; (801a7e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a7da:	4618      	mov	r0, r3
 801a7dc:	3708      	adds	r7, #8
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	bd80      	pop	{r7, pc}
 801a7e2:	bf00      	nop
 801a7e4:	2000ddbc 	.word	0x2000ddbc
 801a7e8:	0801f7b0 	.word	0x0801f7b0

0801a7ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b084      	sub	sp, #16
 801a7f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a7f2:	4b0f      	ldr	r3, [pc, #60]	; (801a830 <Get_SerialNum+0x44>)
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a7f8:	4b0e      	ldr	r3, [pc, #56]	; (801a834 <Get_SerialNum+0x48>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a7fe:	4b0e      	ldr	r3, [pc, #56]	; (801a838 <Get_SerialNum+0x4c>)
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a804:	68fa      	ldr	r2, [r7, #12]
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	4413      	add	r3, r2
 801a80a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d009      	beq.n	801a826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a812:	2208      	movs	r2, #8
 801a814:	4909      	ldr	r1, [pc, #36]	; (801a83c <Get_SerialNum+0x50>)
 801a816:	68f8      	ldr	r0, [r7, #12]
 801a818:	f000 f814 	bl	801a844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a81c:	2204      	movs	r2, #4
 801a81e:	4908      	ldr	r1, [pc, #32]	; (801a840 <Get_SerialNum+0x54>)
 801a820:	68b8      	ldr	r0, [r7, #8]
 801a822:	f000 f80f 	bl	801a844 <IntToUnicode>
  }
}
 801a826:	bf00      	nop
 801a828:	3710      	adds	r7, #16
 801a82a:	46bd      	mov	sp, r7
 801a82c:	bd80      	pop	{r7, pc}
 801a82e:	bf00      	nop
 801a830:	1fff7a10 	.word	0x1fff7a10
 801a834:	1fff7a14 	.word	0x1fff7a14
 801a838:	1fff7a18 	.word	0x1fff7a18
 801a83c:	200000f6 	.word	0x200000f6
 801a840:	20000106 	.word	0x20000106

0801a844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a844:	b480      	push	{r7}
 801a846:	b087      	sub	sp, #28
 801a848:	af00      	add	r7, sp, #0
 801a84a:	60f8      	str	r0, [r7, #12]
 801a84c:	60b9      	str	r1, [r7, #8]
 801a84e:	4613      	mov	r3, r2
 801a850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a852:	2300      	movs	r3, #0
 801a854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a856:	2300      	movs	r3, #0
 801a858:	75fb      	strb	r3, [r7, #23]
 801a85a:	e027      	b.n	801a8ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	0f1b      	lsrs	r3, r3, #28
 801a860:	2b09      	cmp	r3, #9
 801a862:	d80b      	bhi.n	801a87c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	0f1b      	lsrs	r3, r3, #28
 801a868:	b2da      	uxtb	r2, r3
 801a86a:	7dfb      	ldrb	r3, [r7, #23]
 801a86c:	005b      	lsls	r3, r3, #1
 801a86e:	4619      	mov	r1, r3
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	440b      	add	r3, r1
 801a874:	3230      	adds	r2, #48	; 0x30
 801a876:	b2d2      	uxtb	r2, r2
 801a878:	701a      	strb	r2, [r3, #0]
 801a87a:	e00a      	b.n	801a892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	0f1b      	lsrs	r3, r3, #28
 801a880:	b2da      	uxtb	r2, r3
 801a882:	7dfb      	ldrb	r3, [r7, #23]
 801a884:	005b      	lsls	r3, r3, #1
 801a886:	4619      	mov	r1, r3
 801a888:	68bb      	ldr	r3, [r7, #8]
 801a88a:	440b      	add	r3, r1
 801a88c:	3237      	adds	r2, #55	; 0x37
 801a88e:	b2d2      	uxtb	r2, r2
 801a890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	011b      	lsls	r3, r3, #4
 801a896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a898:	7dfb      	ldrb	r3, [r7, #23]
 801a89a:	005b      	lsls	r3, r3, #1
 801a89c:	3301      	adds	r3, #1
 801a89e:	68ba      	ldr	r2, [r7, #8]
 801a8a0:	4413      	add	r3, r2
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a8a6:	7dfb      	ldrb	r3, [r7, #23]
 801a8a8:	3301      	adds	r3, #1
 801a8aa:	75fb      	strb	r3, [r7, #23]
 801a8ac:	7dfa      	ldrb	r2, [r7, #23]
 801a8ae:	79fb      	ldrb	r3, [r7, #7]
 801a8b0:	429a      	cmp	r2, r3
 801a8b2:	d3d3      	bcc.n	801a85c <IntToUnicode+0x18>
  }
}
 801a8b4:	bf00      	nop
 801a8b6:	bf00      	nop
 801a8b8:	371c      	adds	r7, #28
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bc80      	pop	{r7}
 801a8be:	4770      	bx	lr

0801a8c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b08a      	sub	sp, #40	; 0x28
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a8c8:	f107 0314 	add.w	r3, r7, #20
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	601a      	str	r2, [r3, #0]
 801a8d0:	605a      	str	r2, [r3, #4]
 801a8d2:	609a      	str	r2, [r3, #8]
 801a8d4:	60da      	str	r2, [r3, #12]
 801a8d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8e0:	d13a      	bne.n	801a958 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	613b      	str	r3, [r7, #16]
 801a8e6:	4b1e      	ldr	r3, [pc, #120]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8ea:	4a1d      	ldr	r2, [pc, #116]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a8ec:	f043 0301 	orr.w	r3, r3, #1
 801a8f0:	6313      	str	r3, [r2, #48]	; 0x30
 801a8f2:	4b1b      	ldr	r3, [pc, #108]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8f6:	f003 0301 	and.w	r3, r3, #1
 801a8fa:	613b      	str	r3, [r7, #16]
 801a8fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a8fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a904:	2302      	movs	r3, #2
 801a906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a908:	2300      	movs	r3, #0
 801a90a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a90c:	2303      	movs	r3, #3
 801a90e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a910:	230a      	movs	r3, #10
 801a912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a914:	f107 0314 	add.w	r3, r7, #20
 801a918:	4619      	mov	r1, r3
 801a91a:	4812      	ldr	r0, [pc, #72]	; (801a964 <HAL_PCD_MspInit+0xa4>)
 801a91c:	f7e7 f950 	bl	8001bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a920:	4b0f      	ldr	r3, [pc, #60]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a924:	4a0e      	ldr	r2, [pc, #56]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a92a:	6353      	str	r3, [r2, #52]	; 0x34
 801a92c:	2300      	movs	r3, #0
 801a92e:	60fb      	str	r3, [r7, #12]
 801a930:	4b0b      	ldr	r3, [pc, #44]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a934:	4a0a      	ldr	r2, [pc, #40]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a93a:	6453      	str	r3, [r2, #68]	; 0x44
 801a93c:	4b08      	ldr	r3, [pc, #32]	; (801a960 <HAL_PCD_MspInit+0xa0>)
 801a93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a944:	60fb      	str	r3, [r7, #12]
 801a946:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801a948:	2200      	movs	r2, #0
 801a94a:	2105      	movs	r1, #5
 801a94c:	2043      	movs	r0, #67	; 0x43
 801a94e:	f7e6 fad0 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a952:	2043      	movs	r0, #67	; 0x43
 801a954:	f7e6 fae9 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a958:	bf00      	nop
 801a95a:	3728      	adds	r7, #40	; 0x28
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	40023800 	.word	0x40023800
 801a964:	40020000 	.word	0x40020000

0801a968 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a97c:	4619      	mov	r1, r3
 801a97e:	4610      	mov	r0, r2
 801a980:	f7ec f904 	bl	8006b8c <USBD_LL_SetupStage>
}
 801a984:	bf00      	nop
 801a986:	3708      	adds	r7, #8
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd80      	pop	{r7, pc}

0801a98c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b082      	sub	sp, #8
 801a990:	af00      	add	r7, sp, #0
 801a992:	6078      	str	r0, [r7, #4]
 801a994:	460b      	mov	r3, r1
 801a996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a99e:	78fa      	ldrb	r2, [r7, #3]
 801a9a0:	6879      	ldr	r1, [r7, #4]
 801a9a2:	4613      	mov	r3, r2
 801a9a4:	00db      	lsls	r3, r3, #3
 801a9a6:	4413      	add	r3, r2
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	440b      	add	r3, r1
 801a9ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801a9b0:	681a      	ldr	r2, [r3, #0]
 801a9b2:	78fb      	ldrb	r3, [r7, #3]
 801a9b4:	4619      	mov	r1, r3
 801a9b6:	f7ec f93e 	bl	8006c36 <USBD_LL_DataOutStage>
}
 801a9ba:	bf00      	nop
 801a9bc:	3708      	adds	r7, #8
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}

0801a9c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9c2:	b580      	push	{r7, lr}
 801a9c4:	b082      	sub	sp, #8
 801a9c6:	af00      	add	r7, sp, #0
 801a9c8:	6078      	str	r0, [r7, #4]
 801a9ca:	460b      	mov	r3, r1
 801a9cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a9d4:	78fa      	ldrb	r2, [r7, #3]
 801a9d6:	6879      	ldr	r1, [r7, #4]
 801a9d8:	4613      	mov	r3, r2
 801a9da:	00db      	lsls	r3, r3, #3
 801a9dc:	4413      	add	r3, r2
 801a9de:	009b      	lsls	r3, r3, #2
 801a9e0:	440b      	add	r3, r1
 801a9e2:	334c      	adds	r3, #76	; 0x4c
 801a9e4:	681a      	ldr	r2, [r3, #0]
 801a9e6:	78fb      	ldrb	r3, [r7, #3]
 801a9e8:	4619      	mov	r1, r3
 801a9ea:	f7ec f9d7 	bl	8006d9c <USBD_LL_DataInStage>
}
 801a9ee:	bf00      	nop
 801a9f0:	3708      	adds	r7, #8
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	bd80      	pop	{r7, pc}

0801a9f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9f6:	b580      	push	{r7, lr}
 801a9f8:	b082      	sub	sp, #8
 801a9fa:	af00      	add	r7, sp, #0
 801a9fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7ec fb08 	bl	800701a <USBD_LL_SOF>
}
 801aa0a:	bf00      	nop
 801aa0c:	3708      	adds	r7, #8
 801aa0e:	46bd      	mov	sp, r7
 801aa10:	bd80      	pop	{r7, pc}

0801aa12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa12:	b580      	push	{r7, lr}
 801aa14:	b084      	sub	sp, #16
 801aa16:	af00      	add	r7, sp, #0
 801aa18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801aa1a:	2301      	movs	r3, #1
 801aa1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	68db      	ldr	r3, [r3, #12]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d102      	bne.n	801aa2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801aa26:	2300      	movs	r3, #0
 801aa28:	73fb      	strb	r3, [r7, #15]
 801aa2a:	e008      	b.n	801aa3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	68db      	ldr	r3, [r3, #12]
 801aa30:	2b02      	cmp	r3, #2
 801aa32:	d102      	bne.n	801aa3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801aa34:	2301      	movs	r3, #1
 801aa36:	73fb      	strb	r3, [r7, #15]
 801aa38:	e001      	b.n	801aa3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801aa3a:	f7e5 fecf 	bl	80007dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa44:	7bfa      	ldrb	r2, [r7, #15]
 801aa46:	4611      	mov	r1, r2
 801aa48:	4618      	mov	r0, r3
 801aa4a:	f7ec faab 	bl	8006fa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7ec fa53 	bl	8006f00 <USBD_LL_Reset>
}
 801aa5a:	bf00      	nop
 801aa5c:	3710      	adds	r7, #16
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	bd80      	pop	{r7, pc}
	...

0801aa64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b082      	sub	sp, #8
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7ec faa5 	bl	8006fc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	687a      	ldr	r2, [r7, #4]
 801aa84:	6812      	ldr	r2, [r2, #0]
 801aa86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801aa8a:	f043 0301 	orr.w	r3, r3, #1
 801aa8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	6a1b      	ldr	r3, [r3, #32]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d005      	beq.n	801aaa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801aa98:	4b04      	ldr	r3, [pc, #16]	; (801aaac <HAL_PCD_SuspendCallback+0x48>)
 801aa9a:	691b      	ldr	r3, [r3, #16]
 801aa9c:	4a03      	ldr	r2, [pc, #12]	; (801aaac <HAL_PCD_SuspendCallback+0x48>)
 801aa9e:	f043 0306 	orr.w	r3, r3, #6
 801aaa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aaa4:	bf00      	nop
 801aaa6:	3708      	adds	r7, #8
 801aaa8:	46bd      	mov	sp, r7
 801aaaa:	bd80      	pop	{r7, pc}
 801aaac:	e000ed00 	.word	0xe000ed00

0801aab0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b082      	sub	sp, #8
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aabe:	4618      	mov	r0, r3
 801aac0:	f7ec fa94 	bl	8006fec <USBD_LL_Resume>
}
 801aac4:	bf00      	nop
 801aac6:	3708      	adds	r7, #8
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd80      	pop	{r7, pc}

0801aacc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
 801aad4:	460b      	mov	r3, r1
 801aad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aade:	78fa      	ldrb	r2, [r7, #3]
 801aae0:	4611      	mov	r1, r2
 801aae2:	4618      	mov	r0, r3
 801aae4:	f7ec faeb 	bl	80070be <USBD_LL_IsoOUTIncomplete>
}
 801aae8:	bf00      	nop
 801aaea:	3708      	adds	r7, #8
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd80      	pop	{r7, pc}

0801aaf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
 801aaf8:	460b      	mov	r3, r1
 801aafa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab02:	78fa      	ldrb	r2, [r7, #3]
 801ab04:	4611      	mov	r1, r2
 801ab06:	4618      	mov	r0, r3
 801ab08:	f7ec faa7 	bl	800705a <USBD_LL_IsoINIncomplete>
}
 801ab0c:	bf00      	nop
 801ab0e:	3708      	adds	r7, #8
 801ab10:	46bd      	mov	sp, r7
 801ab12:	bd80      	pop	{r7, pc}

0801ab14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab14:	b580      	push	{r7, lr}
 801ab16:	b082      	sub	sp, #8
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab22:	4618      	mov	r0, r3
 801ab24:	f7ec fafd 	bl	8007122 <USBD_LL_DevConnected>
}
 801ab28:	bf00      	nop
 801ab2a:	3708      	adds	r7, #8
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	bd80      	pop	{r7, pc}

0801ab30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ab3e:	4618      	mov	r0, r3
 801ab40:	f7ec faf9 	bl	8007136 <USBD_LL_DevDisconnected>
}
 801ab44:	bf00      	nop
 801ab46:	3708      	adds	r7, #8
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}

0801ab4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	b082      	sub	sp, #8
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	781b      	ldrb	r3, [r3, #0]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d13c      	bne.n	801abd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801ab5c:	4a20      	ldr	r2, [pc, #128]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	4a1e      	ldr	r2, [pc, #120]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801ab6c:	4b1c      	ldr	r3, [pc, #112]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801ab72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801ab74:	4b1a      	ldr	r3, [pc, #104]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab76:	2204      	movs	r2, #4
 801ab78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801ab7a:	4b19      	ldr	r3, [pc, #100]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab7c:	2202      	movs	r2, #2
 801ab7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801ab80:	4b17      	ldr	r3, [pc, #92]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab82:	2200      	movs	r2, #0
 801ab84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ab86:	4b16      	ldr	r3, [pc, #88]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab88:	2202      	movs	r2, #2
 801ab8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ab8c:	4b14      	ldr	r3, [pc, #80]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab8e:	2200      	movs	r2, #0
 801ab90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ab92:	4b13      	ldr	r3, [pc, #76]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab94:	2200      	movs	r2, #0
 801ab96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ab98:	4b11      	ldr	r3, [pc, #68]	; (801abe0 <USBD_LL_Init+0x94>)
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ab9e:	4b10      	ldr	r3, [pc, #64]	; (801abe0 <USBD_LL_Init+0x94>)
 801aba0:	2200      	movs	r2, #0
 801aba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801aba4:	4b0e      	ldr	r3, [pc, #56]	; (801abe0 <USBD_LL_Init+0x94>)
 801aba6:	2200      	movs	r2, #0
 801aba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801abaa:	480d      	ldr	r0, [pc, #52]	; (801abe0 <USBD_LL_Init+0x94>)
 801abac:	f7e7 f9dc 	bl	8001f68 <HAL_PCD_Init>
 801abb0:	4603      	mov	r3, r0
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d001      	beq.n	801abba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801abb6:	f7e5 fe11 	bl	80007dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801abba:	2180      	movs	r1, #128	; 0x80
 801abbc:	4808      	ldr	r0, [pc, #32]	; (801abe0 <USBD_LL_Init+0x94>)
 801abbe:	f7e8 fc31 	bl	8003424 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801abc2:	2240      	movs	r2, #64	; 0x40
 801abc4:	2100      	movs	r1, #0
 801abc6:	4806      	ldr	r0, [pc, #24]	; (801abe0 <USBD_LL_Init+0x94>)
 801abc8:	f7e8 fbe6 	bl	8003398 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801abcc:	2280      	movs	r2, #128	; 0x80
 801abce:	2101      	movs	r1, #1
 801abd0:	4803      	ldr	r0, [pc, #12]	; (801abe0 <USBD_LL_Init+0x94>)
 801abd2:	f7e8 fbe1 	bl	8003398 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801abd6:	2300      	movs	r3, #0
}
 801abd8:	4618      	mov	r0, r3
 801abda:	3708      	adds	r7, #8
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}
 801abe0:	2000dfbc 	.word	0x2000dfbc

0801abe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b084      	sub	sp, #16
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abec:	2300      	movs	r3, #0
 801abee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abf0:	2300      	movs	r3, #0
 801abf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abfa:	4618      	mov	r0, r3
 801abfc:	f7e7 fad1 	bl	80021a2 <HAL_PCD_Start>
 801ac00:	4603      	mov	r3, r0
 801ac02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac04:	7bfb      	ldrb	r3, [r7, #15]
 801ac06:	4618      	mov	r0, r3
 801ac08:	f000 f940 	bl	801ae8c <USBD_Get_USB_Status>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac10:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac12:	4618      	mov	r0, r3
 801ac14:	3710      	adds	r7, #16
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bd80      	pop	{r7, pc}

0801ac1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ac1a:	b580      	push	{r7, lr}
 801ac1c:	b084      	sub	sp, #16
 801ac1e:	af00      	add	r7, sp, #0
 801ac20:	6078      	str	r0, [r7, #4]
 801ac22:	4608      	mov	r0, r1
 801ac24:	4611      	mov	r1, r2
 801ac26:	461a      	mov	r2, r3
 801ac28:	4603      	mov	r3, r0
 801ac2a:	70fb      	strb	r3, [r7, #3]
 801ac2c:	460b      	mov	r3, r1
 801ac2e:	70bb      	strb	r3, [r7, #2]
 801ac30:	4613      	mov	r3, r2
 801ac32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac34:	2300      	movs	r3, #0
 801ac36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac38:	2300      	movs	r3, #0
 801ac3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac42:	78bb      	ldrb	r3, [r7, #2]
 801ac44:	883a      	ldrh	r2, [r7, #0]
 801ac46:	78f9      	ldrb	r1, [r7, #3]
 801ac48:	f7e7 ffa2 	bl	8002b90 <HAL_PCD_EP_Open>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac50:	7bfb      	ldrb	r3, [r7, #15]
 801ac52:	4618      	mov	r0, r3
 801ac54:	f000 f91a 	bl	801ae8c <USBD_Get_USB_Status>
 801ac58:	4603      	mov	r3, r0
 801ac5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac5c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3710      	adds	r7, #16
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}

0801ac66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac66:	b580      	push	{r7, lr}
 801ac68:	b084      	sub	sp, #16
 801ac6a:	af00      	add	r7, sp, #0
 801ac6c:	6078      	str	r0, [r7, #4]
 801ac6e:	460b      	mov	r3, r1
 801ac70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac72:	2300      	movs	r3, #0
 801ac74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac76:	2300      	movs	r3, #0
 801ac78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac80:	78fa      	ldrb	r2, [r7, #3]
 801ac82:	4611      	mov	r1, r2
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7e7 ffeb 	bl	8002c60 <HAL_PCD_EP_Close>
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac8e:	7bfb      	ldrb	r3, [r7, #15]
 801ac90:	4618      	mov	r0, r3
 801ac92:	f000 f8fb 	bl	801ae8c <USBD_Get_USB_Status>
 801ac96:	4603      	mov	r3, r0
 801ac98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac9a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	3710      	adds	r7, #16
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd80      	pop	{r7, pc}

0801aca4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b084      	sub	sp, #16
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	6078      	str	r0, [r7, #4]
 801acac:	460b      	mov	r3, r1
 801acae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acb0:	2300      	movs	r3, #0
 801acb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801acb4:	2300      	movs	r3, #0
 801acb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acbe:	78fa      	ldrb	r2, [r7, #3]
 801acc0:	4611      	mov	r1, r2
 801acc2:	4618      	mov	r0, r3
 801acc4:	f7e8 f8c2 	bl	8002e4c <HAL_PCD_EP_SetStall>
 801acc8:	4603      	mov	r3, r0
 801acca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801accc:	7bfb      	ldrb	r3, [r7, #15]
 801acce:	4618      	mov	r0, r3
 801acd0:	f000 f8dc 	bl	801ae8c <USBD_Get_USB_Status>
 801acd4:	4603      	mov	r3, r0
 801acd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801acd8:	7bbb      	ldrb	r3, [r7, #14]
}
 801acda:	4618      	mov	r0, r3
 801acdc:	3710      	adds	r7, #16
 801acde:	46bd      	mov	sp, r7
 801ace0:	bd80      	pop	{r7, pc}

0801ace2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ace2:	b580      	push	{r7, lr}
 801ace4:	b084      	sub	sp, #16
 801ace6:	af00      	add	r7, sp, #0
 801ace8:	6078      	str	r0, [r7, #4]
 801acea:	460b      	mov	r3, r1
 801acec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acee:	2300      	movs	r3, #0
 801acf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801acf2:	2300      	movs	r3, #0
 801acf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acfc:	78fa      	ldrb	r2, [r7, #3]
 801acfe:	4611      	mov	r1, r2
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7e8 f907 	bl	8002f14 <HAL_PCD_EP_ClrStall>
 801ad06:	4603      	mov	r3, r0
 801ad08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad0a:	7bfb      	ldrb	r3, [r7, #15]
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	f000 f8bd 	bl	801ae8c <USBD_Get_USB_Status>
 801ad12:	4603      	mov	r3, r0
 801ad14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad16:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad18:	4618      	mov	r0, r3
 801ad1a:	3710      	adds	r7, #16
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	bd80      	pop	{r7, pc}

0801ad20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ad20:	b480      	push	{r7}
 801ad22:	b085      	sub	sp, #20
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
 801ad28:	460b      	mov	r3, r1
 801ad2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ad34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	da0b      	bge.n	801ad54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ad3c:	78fb      	ldrb	r3, [r7, #3]
 801ad3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad42:	68f9      	ldr	r1, [r7, #12]
 801ad44:	4613      	mov	r3, r2
 801ad46:	00db      	lsls	r3, r3, #3
 801ad48:	4413      	add	r3, r2
 801ad4a:	009b      	lsls	r3, r3, #2
 801ad4c:	440b      	add	r3, r1
 801ad4e:	333e      	adds	r3, #62	; 0x3e
 801ad50:	781b      	ldrb	r3, [r3, #0]
 801ad52:	e00b      	b.n	801ad6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ad54:	78fb      	ldrb	r3, [r7, #3]
 801ad56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ad5a:	68f9      	ldr	r1, [r7, #12]
 801ad5c:	4613      	mov	r3, r2
 801ad5e:	00db      	lsls	r3, r3, #3
 801ad60:	4413      	add	r3, r2
 801ad62:	009b      	lsls	r3, r3, #2
 801ad64:	440b      	add	r3, r1
 801ad66:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801ad6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	3714      	adds	r7, #20
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bc80      	pop	{r7}
 801ad74:	4770      	bx	lr

0801ad76 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ad76:	b580      	push	{r7, lr}
 801ad78:	b084      	sub	sp, #16
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
 801ad7e:	460b      	mov	r3, r1
 801ad80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad82:	2300      	movs	r3, #0
 801ad84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad86:	2300      	movs	r3, #0
 801ad88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad90:	78fa      	ldrb	r2, [r7, #3]
 801ad92:	4611      	mov	r1, r2
 801ad94:	4618      	mov	r0, r3
 801ad96:	f7e7 fed6 	bl	8002b46 <HAL_PCD_SetAddress>
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad9e:	7bfb      	ldrb	r3, [r7, #15]
 801ada0:	4618      	mov	r0, r3
 801ada2:	f000 f873 	bl	801ae8c <USBD_Get_USB_Status>
 801ada6:	4603      	mov	r3, r0
 801ada8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801adaa:	7bbb      	ldrb	r3, [r7, #14]
}
 801adac:	4618      	mov	r0, r3
 801adae:	3710      	adds	r7, #16
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}

0801adb4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b086      	sub	sp, #24
 801adb8:	af00      	add	r7, sp, #0
 801adba:	60f8      	str	r0, [r7, #12]
 801adbc:	607a      	str	r2, [r7, #4]
 801adbe:	603b      	str	r3, [r7, #0]
 801adc0:	460b      	mov	r3, r1
 801adc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801adc4:	2300      	movs	r3, #0
 801adc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801adc8:	2300      	movs	r3, #0
 801adca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801add2:	7af9      	ldrb	r1, [r7, #11]
 801add4:	683b      	ldr	r3, [r7, #0]
 801add6:	687a      	ldr	r2, [r7, #4]
 801add8:	f7e7 ffee 	bl	8002db8 <HAL_PCD_EP_Transmit>
 801addc:	4603      	mov	r3, r0
 801adde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ade0:	7dfb      	ldrb	r3, [r7, #23]
 801ade2:	4618      	mov	r0, r3
 801ade4:	f000 f852 	bl	801ae8c <USBD_Get_USB_Status>
 801ade8:	4603      	mov	r3, r0
 801adea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801adec:	7dbb      	ldrb	r3, [r7, #22]
}
 801adee:	4618      	mov	r0, r3
 801adf0:	3718      	adds	r7, #24
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}

0801adf6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801adf6:	b580      	push	{r7, lr}
 801adf8:	b086      	sub	sp, #24
 801adfa:	af00      	add	r7, sp, #0
 801adfc:	60f8      	str	r0, [r7, #12]
 801adfe:	607a      	str	r2, [r7, #4]
 801ae00:	603b      	str	r3, [r7, #0]
 801ae02:	460b      	mov	r3, r1
 801ae04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ae06:	2300      	movs	r3, #0
 801ae08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ae14:	7af9      	ldrb	r1, [r7, #11]
 801ae16:	683b      	ldr	r3, [r7, #0]
 801ae18:	687a      	ldr	r2, [r7, #4]
 801ae1a:	f7e7 ff6b 	bl	8002cf4 <HAL_PCD_EP_Receive>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ae22:	7dfb      	ldrb	r3, [r7, #23]
 801ae24:	4618      	mov	r0, r3
 801ae26:	f000 f831 	bl	801ae8c <USBD_Get_USB_Status>
 801ae2a:	4603      	mov	r3, r0
 801ae2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ae2e:	7dbb      	ldrb	r3, [r7, #22]
}
 801ae30:	4618      	mov	r0, r3
 801ae32:	3718      	adds	r7, #24
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}

0801ae38 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b082      	sub	sp, #8
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
 801ae40:	460b      	mov	r3, r1
 801ae42:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ae4a:	78fa      	ldrb	r2, [r7, #3]
 801ae4c:	4611      	mov	r1, r2
 801ae4e:	4618      	mov	r0, r3
 801ae50:	f7e7 ff9b 	bl	8002d8a <HAL_PCD_EP_GetRxCount>
 801ae54:	4603      	mov	r3, r0
}
 801ae56:	4618      	mov	r0, r3
 801ae58:	3708      	adds	r7, #8
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	bd80      	pop	{r7, pc}
	...

0801ae60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ae60:	b480      	push	{r7}
 801ae62:	b083      	sub	sp, #12
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ae68:	4b02      	ldr	r3, [pc, #8]	; (801ae74 <USBD_static_malloc+0x14>)
}
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	370c      	adds	r7, #12
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bc80      	pop	{r7}
 801ae72:	4770      	bx	lr
 801ae74:	2000e4c8 	.word	0x2000e4c8

0801ae78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ae78:	b480      	push	{r7}
 801ae7a:	b083      	sub	sp, #12
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]

}
 801ae80:	bf00      	nop
 801ae82:	370c      	adds	r7, #12
 801ae84:	46bd      	mov	sp, r7
 801ae86:	bc80      	pop	{r7}
 801ae88:	4770      	bx	lr
	...

0801ae8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae8c:	b480      	push	{r7}
 801ae8e:	b085      	sub	sp, #20
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	4603      	mov	r3, r0
 801ae94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae96:	2300      	movs	r3, #0
 801ae98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae9a:	79fb      	ldrb	r3, [r7, #7]
 801ae9c:	2b03      	cmp	r3, #3
 801ae9e:	d817      	bhi.n	801aed0 <USBD_Get_USB_Status+0x44>
 801aea0:	a201      	add	r2, pc, #4	; (adr r2, 801aea8 <USBD_Get_USB_Status+0x1c>)
 801aea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aea6:	bf00      	nop
 801aea8:	0801aeb9 	.word	0x0801aeb9
 801aeac:	0801aebf 	.word	0x0801aebf
 801aeb0:	0801aec5 	.word	0x0801aec5
 801aeb4:	0801aecb 	.word	0x0801aecb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801aeb8:	2300      	movs	r3, #0
 801aeba:	73fb      	strb	r3, [r7, #15]
    break;
 801aebc:	e00b      	b.n	801aed6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801aebe:	2303      	movs	r3, #3
 801aec0:	73fb      	strb	r3, [r7, #15]
    break;
 801aec2:	e008      	b.n	801aed6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801aec4:	2301      	movs	r3, #1
 801aec6:	73fb      	strb	r3, [r7, #15]
    break;
 801aec8:	e005      	b.n	801aed6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801aeca:	2303      	movs	r3, #3
 801aecc:	73fb      	strb	r3, [r7, #15]
    break;
 801aece:	e002      	b.n	801aed6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801aed0:	2303      	movs	r3, #3
 801aed2:	73fb      	strb	r3, [r7, #15]
    break;
 801aed4:	bf00      	nop
  }
  return usb_status;
 801aed6:	7bfb      	ldrb	r3, [r7, #15]
}
 801aed8:	4618      	mov	r0, r3
 801aeda:	3714      	adds	r7, #20
 801aedc:	46bd      	mov	sp, r7
 801aede:	bc80      	pop	{r7}
 801aee0:	4770      	bx	lr
 801aee2:	bf00      	nop

0801aee4 <__sflush_r>:
 801aee4:	898a      	ldrh	r2, [r1, #12]
 801aee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aee8:	4605      	mov	r5, r0
 801aeea:	0710      	lsls	r0, r2, #28
 801aeec:	460c      	mov	r4, r1
 801aeee:	d457      	bmi.n	801afa0 <__sflush_r+0xbc>
 801aef0:	684b      	ldr	r3, [r1, #4]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	dc04      	bgt.n	801af00 <__sflush_r+0x1c>
 801aef6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	dc01      	bgt.n	801af00 <__sflush_r+0x1c>
 801aefc:	2000      	movs	r0, #0
 801aefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af02:	2e00      	cmp	r6, #0
 801af04:	d0fa      	beq.n	801aefc <__sflush_r+0x18>
 801af06:	2300      	movs	r3, #0
 801af08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801af0c:	682f      	ldr	r7, [r5, #0]
 801af0e:	602b      	str	r3, [r5, #0]
 801af10:	d032      	beq.n	801af78 <__sflush_r+0x94>
 801af12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801af14:	89a3      	ldrh	r3, [r4, #12]
 801af16:	075a      	lsls	r2, r3, #29
 801af18:	d505      	bpl.n	801af26 <__sflush_r+0x42>
 801af1a:	6863      	ldr	r3, [r4, #4]
 801af1c:	1ac0      	subs	r0, r0, r3
 801af1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af20:	b10b      	cbz	r3, 801af26 <__sflush_r+0x42>
 801af22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801af24:	1ac0      	subs	r0, r0, r3
 801af26:	2300      	movs	r3, #0
 801af28:	4602      	mov	r2, r0
 801af2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af2c:	6a21      	ldr	r1, [r4, #32]
 801af2e:	4628      	mov	r0, r5
 801af30:	47b0      	blx	r6
 801af32:	1c43      	adds	r3, r0, #1
 801af34:	89a3      	ldrh	r3, [r4, #12]
 801af36:	d106      	bne.n	801af46 <__sflush_r+0x62>
 801af38:	6829      	ldr	r1, [r5, #0]
 801af3a:	291d      	cmp	r1, #29
 801af3c:	d82c      	bhi.n	801af98 <__sflush_r+0xb4>
 801af3e:	4a29      	ldr	r2, [pc, #164]	; (801afe4 <__sflush_r+0x100>)
 801af40:	40ca      	lsrs	r2, r1
 801af42:	07d6      	lsls	r6, r2, #31
 801af44:	d528      	bpl.n	801af98 <__sflush_r+0xb4>
 801af46:	2200      	movs	r2, #0
 801af48:	6062      	str	r2, [r4, #4]
 801af4a:	04d9      	lsls	r1, r3, #19
 801af4c:	6922      	ldr	r2, [r4, #16]
 801af4e:	6022      	str	r2, [r4, #0]
 801af50:	d504      	bpl.n	801af5c <__sflush_r+0x78>
 801af52:	1c42      	adds	r2, r0, #1
 801af54:	d101      	bne.n	801af5a <__sflush_r+0x76>
 801af56:	682b      	ldr	r3, [r5, #0]
 801af58:	b903      	cbnz	r3, 801af5c <__sflush_r+0x78>
 801af5a:	6560      	str	r0, [r4, #84]	; 0x54
 801af5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af5e:	602f      	str	r7, [r5, #0]
 801af60:	2900      	cmp	r1, #0
 801af62:	d0cb      	beq.n	801aefc <__sflush_r+0x18>
 801af64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af68:	4299      	cmp	r1, r3
 801af6a:	d002      	beq.n	801af72 <__sflush_r+0x8e>
 801af6c:	4628      	mov	r0, r5
 801af6e:	f000 fa27 	bl	801b3c0 <_free_r>
 801af72:	2000      	movs	r0, #0
 801af74:	6360      	str	r0, [r4, #52]	; 0x34
 801af76:	e7c2      	b.n	801aefe <__sflush_r+0x1a>
 801af78:	6a21      	ldr	r1, [r4, #32]
 801af7a:	2301      	movs	r3, #1
 801af7c:	4628      	mov	r0, r5
 801af7e:	47b0      	blx	r6
 801af80:	1c41      	adds	r1, r0, #1
 801af82:	d1c7      	bne.n	801af14 <__sflush_r+0x30>
 801af84:	682b      	ldr	r3, [r5, #0]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d0c4      	beq.n	801af14 <__sflush_r+0x30>
 801af8a:	2b1d      	cmp	r3, #29
 801af8c:	d001      	beq.n	801af92 <__sflush_r+0xae>
 801af8e:	2b16      	cmp	r3, #22
 801af90:	d101      	bne.n	801af96 <__sflush_r+0xb2>
 801af92:	602f      	str	r7, [r5, #0]
 801af94:	e7b2      	b.n	801aefc <__sflush_r+0x18>
 801af96:	89a3      	ldrh	r3, [r4, #12]
 801af98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af9c:	81a3      	strh	r3, [r4, #12]
 801af9e:	e7ae      	b.n	801aefe <__sflush_r+0x1a>
 801afa0:	690f      	ldr	r7, [r1, #16]
 801afa2:	2f00      	cmp	r7, #0
 801afa4:	d0aa      	beq.n	801aefc <__sflush_r+0x18>
 801afa6:	0793      	lsls	r3, r2, #30
 801afa8:	680e      	ldr	r6, [r1, #0]
 801afaa:	bf08      	it	eq
 801afac:	694b      	ldreq	r3, [r1, #20]
 801afae:	600f      	str	r7, [r1, #0]
 801afb0:	bf18      	it	ne
 801afb2:	2300      	movne	r3, #0
 801afb4:	1bf6      	subs	r6, r6, r7
 801afb6:	608b      	str	r3, [r1, #8]
 801afb8:	2e00      	cmp	r6, #0
 801afba:	dd9f      	ble.n	801aefc <__sflush_r+0x18>
 801afbc:	6a21      	ldr	r1, [r4, #32]
 801afbe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801afc2:	4633      	mov	r3, r6
 801afc4:	463a      	mov	r2, r7
 801afc6:	4628      	mov	r0, r5
 801afc8:	47e0      	blx	ip
 801afca:	2800      	cmp	r0, #0
 801afcc:	dc06      	bgt.n	801afdc <__sflush_r+0xf8>
 801afce:	89a3      	ldrh	r3, [r4, #12]
 801afd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afd4:	81a3      	strh	r3, [r4, #12]
 801afd6:	f04f 30ff 	mov.w	r0, #4294967295
 801afda:	e790      	b.n	801aefe <__sflush_r+0x1a>
 801afdc:	4407      	add	r7, r0
 801afde:	1a36      	subs	r6, r6, r0
 801afe0:	e7ea      	b.n	801afb8 <__sflush_r+0xd4>
 801afe2:	bf00      	nop
 801afe4:	20400001 	.word	0x20400001

0801afe8 <_fflush_r>:
 801afe8:	b538      	push	{r3, r4, r5, lr}
 801afea:	690b      	ldr	r3, [r1, #16]
 801afec:	4605      	mov	r5, r0
 801afee:	460c      	mov	r4, r1
 801aff0:	b913      	cbnz	r3, 801aff8 <_fflush_r+0x10>
 801aff2:	2500      	movs	r5, #0
 801aff4:	4628      	mov	r0, r5
 801aff6:	bd38      	pop	{r3, r4, r5, pc}
 801aff8:	b118      	cbz	r0, 801b002 <_fflush_r+0x1a>
 801affa:	6983      	ldr	r3, [r0, #24]
 801affc:	b90b      	cbnz	r3, 801b002 <_fflush_r+0x1a>
 801affe:	f000 f887 	bl	801b110 <__sinit>
 801b002:	4b14      	ldr	r3, [pc, #80]	; (801b054 <_fflush_r+0x6c>)
 801b004:	429c      	cmp	r4, r3
 801b006:	d11b      	bne.n	801b040 <_fflush_r+0x58>
 801b008:	686c      	ldr	r4, [r5, #4]
 801b00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d0ef      	beq.n	801aff2 <_fflush_r+0xa>
 801b012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b014:	07d0      	lsls	r0, r2, #31
 801b016:	d404      	bmi.n	801b022 <_fflush_r+0x3a>
 801b018:	0599      	lsls	r1, r3, #22
 801b01a:	d402      	bmi.n	801b022 <_fflush_r+0x3a>
 801b01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b01e:	f000 f93a 	bl	801b296 <__retarget_lock_acquire_recursive>
 801b022:	4628      	mov	r0, r5
 801b024:	4621      	mov	r1, r4
 801b026:	f7ff ff5d 	bl	801aee4 <__sflush_r>
 801b02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b02c:	07da      	lsls	r2, r3, #31
 801b02e:	4605      	mov	r5, r0
 801b030:	d4e0      	bmi.n	801aff4 <_fflush_r+0xc>
 801b032:	89a3      	ldrh	r3, [r4, #12]
 801b034:	059b      	lsls	r3, r3, #22
 801b036:	d4dd      	bmi.n	801aff4 <_fflush_r+0xc>
 801b038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b03a:	f000 f92d 	bl	801b298 <__retarget_lock_release_recursive>
 801b03e:	e7d9      	b.n	801aff4 <_fflush_r+0xc>
 801b040:	4b05      	ldr	r3, [pc, #20]	; (801b058 <_fflush_r+0x70>)
 801b042:	429c      	cmp	r4, r3
 801b044:	d101      	bne.n	801b04a <_fflush_r+0x62>
 801b046:	68ac      	ldr	r4, [r5, #8]
 801b048:	e7df      	b.n	801b00a <_fflush_r+0x22>
 801b04a:	4b04      	ldr	r3, [pc, #16]	; (801b05c <_fflush_r+0x74>)
 801b04c:	429c      	cmp	r4, r3
 801b04e:	bf08      	it	eq
 801b050:	68ec      	ldreq	r4, [r5, #12]
 801b052:	e7da      	b.n	801b00a <_fflush_r+0x22>
 801b054:	0801f96c 	.word	0x0801f96c
 801b058:	0801f98c 	.word	0x0801f98c
 801b05c:	0801f94c 	.word	0x0801f94c

0801b060 <std>:
 801b060:	2300      	movs	r3, #0
 801b062:	b510      	push	{r4, lr}
 801b064:	4604      	mov	r4, r0
 801b066:	e9c0 3300 	strd	r3, r3, [r0]
 801b06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b06e:	6083      	str	r3, [r0, #8]
 801b070:	8181      	strh	r1, [r0, #12]
 801b072:	6643      	str	r3, [r0, #100]	; 0x64
 801b074:	81c2      	strh	r2, [r0, #14]
 801b076:	6183      	str	r3, [r0, #24]
 801b078:	4619      	mov	r1, r3
 801b07a:	2208      	movs	r2, #8
 801b07c:	305c      	adds	r0, #92	; 0x5c
 801b07e:	f000 f997 	bl	801b3b0 <memset>
 801b082:	4b05      	ldr	r3, [pc, #20]	; (801b098 <std+0x38>)
 801b084:	6263      	str	r3, [r4, #36]	; 0x24
 801b086:	4b05      	ldr	r3, [pc, #20]	; (801b09c <std+0x3c>)
 801b088:	62a3      	str	r3, [r4, #40]	; 0x28
 801b08a:	4b05      	ldr	r3, [pc, #20]	; (801b0a0 <std+0x40>)
 801b08c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b08e:	4b05      	ldr	r3, [pc, #20]	; (801b0a4 <std+0x44>)
 801b090:	6224      	str	r4, [r4, #32]
 801b092:	6323      	str	r3, [r4, #48]	; 0x30
 801b094:	bd10      	pop	{r4, pc}
 801b096:	bf00      	nop
 801b098:	0801b71d 	.word	0x0801b71d
 801b09c:	0801b73f 	.word	0x0801b73f
 801b0a0:	0801b777 	.word	0x0801b777
 801b0a4:	0801b79b 	.word	0x0801b79b

0801b0a8 <_cleanup_r>:
 801b0a8:	4901      	ldr	r1, [pc, #4]	; (801b0b0 <_cleanup_r+0x8>)
 801b0aa:	f000 b8af 	b.w	801b20c <_fwalk_reent>
 801b0ae:	bf00      	nop
 801b0b0:	0801afe9 	.word	0x0801afe9

0801b0b4 <__sfmoreglue>:
 801b0b4:	b570      	push	{r4, r5, r6, lr}
 801b0b6:	2268      	movs	r2, #104	; 0x68
 801b0b8:	1e4d      	subs	r5, r1, #1
 801b0ba:	4355      	muls	r5, r2
 801b0bc:	460e      	mov	r6, r1
 801b0be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b0c2:	f000 f9e7 	bl	801b494 <_malloc_r>
 801b0c6:	4604      	mov	r4, r0
 801b0c8:	b140      	cbz	r0, 801b0dc <__sfmoreglue+0x28>
 801b0ca:	2100      	movs	r1, #0
 801b0cc:	e9c0 1600 	strd	r1, r6, [r0]
 801b0d0:	300c      	adds	r0, #12
 801b0d2:	60a0      	str	r0, [r4, #8]
 801b0d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b0d8:	f000 f96a 	bl	801b3b0 <memset>
 801b0dc:	4620      	mov	r0, r4
 801b0de:	bd70      	pop	{r4, r5, r6, pc}

0801b0e0 <__sfp_lock_acquire>:
 801b0e0:	4801      	ldr	r0, [pc, #4]	; (801b0e8 <__sfp_lock_acquire+0x8>)
 801b0e2:	f000 b8d8 	b.w	801b296 <__retarget_lock_acquire_recursive>
 801b0e6:	bf00      	nop
 801b0e8:	2000e6e9 	.word	0x2000e6e9

0801b0ec <__sfp_lock_release>:
 801b0ec:	4801      	ldr	r0, [pc, #4]	; (801b0f4 <__sfp_lock_release+0x8>)
 801b0ee:	f000 b8d3 	b.w	801b298 <__retarget_lock_release_recursive>
 801b0f2:	bf00      	nop
 801b0f4:	2000e6e9 	.word	0x2000e6e9

0801b0f8 <__sinit_lock_acquire>:
 801b0f8:	4801      	ldr	r0, [pc, #4]	; (801b100 <__sinit_lock_acquire+0x8>)
 801b0fa:	f000 b8cc 	b.w	801b296 <__retarget_lock_acquire_recursive>
 801b0fe:	bf00      	nop
 801b100:	2000e6ea 	.word	0x2000e6ea

0801b104 <__sinit_lock_release>:
 801b104:	4801      	ldr	r0, [pc, #4]	; (801b10c <__sinit_lock_release+0x8>)
 801b106:	f000 b8c7 	b.w	801b298 <__retarget_lock_release_recursive>
 801b10a:	bf00      	nop
 801b10c:	2000e6ea 	.word	0x2000e6ea

0801b110 <__sinit>:
 801b110:	b510      	push	{r4, lr}
 801b112:	4604      	mov	r4, r0
 801b114:	f7ff fff0 	bl	801b0f8 <__sinit_lock_acquire>
 801b118:	69a3      	ldr	r3, [r4, #24]
 801b11a:	b11b      	cbz	r3, 801b124 <__sinit+0x14>
 801b11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b120:	f7ff bff0 	b.w	801b104 <__sinit_lock_release>
 801b124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b128:	6523      	str	r3, [r4, #80]	; 0x50
 801b12a:	4b13      	ldr	r3, [pc, #76]	; (801b178 <__sinit+0x68>)
 801b12c:	4a13      	ldr	r2, [pc, #76]	; (801b17c <__sinit+0x6c>)
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	62a2      	str	r2, [r4, #40]	; 0x28
 801b132:	42a3      	cmp	r3, r4
 801b134:	bf04      	itt	eq
 801b136:	2301      	moveq	r3, #1
 801b138:	61a3      	streq	r3, [r4, #24]
 801b13a:	4620      	mov	r0, r4
 801b13c:	f000 f820 	bl	801b180 <__sfp>
 801b140:	6060      	str	r0, [r4, #4]
 801b142:	4620      	mov	r0, r4
 801b144:	f000 f81c 	bl	801b180 <__sfp>
 801b148:	60a0      	str	r0, [r4, #8]
 801b14a:	4620      	mov	r0, r4
 801b14c:	f000 f818 	bl	801b180 <__sfp>
 801b150:	2200      	movs	r2, #0
 801b152:	60e0      	str	r0, [r4, #12]
 801b154:	2104      	movs	r1, #4
 801b156:	6860      	ldr	r0, [r4, #4]
 801b158:	f7ff ff82 	bl	801b060 <std>
 801b15c:	68a0      	ldr	r0, [r4, #8]
 801b15e:	2201      	movs	r2, #1
 801b160:	2109      	movs	r1, #9
 801b162:	f7ff ff7d 	bl	801b060 <std>
 801b166:	68e0      	ldr	r0, [r4, #12]
 801b168:	2202      	movs	r2, #2
 801b16a:	2112      	movs	r1, #18
 801b16c:	f7ff ff78 	bl	801b060 <std>
 801b170:	2301      	movs	r3, #1
 801b172:	61a3      	str	r3, [r4, #24]
 801b174:	e7d2      	b.n	801b11c <__sinit+0xc>
 801b176:	bf00      	nop
 801b178:	0801f9ac 	.word	0x0801f9ac
 801b17c:	0801b0a9 	.word	0x0801b0a9

0801b180 <__sfp>:
 801b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b182:	4607      	mov	r7, r0
 801b184:	f7ff ffac 	bl	801b0e0 <__sfp_lock_acquire>
 801b188:	4b1e      	ldr	r3, [pc, #120]	; (801b204 <__sfp+0x84>)
 801b18a:	681e      	ldr	r6, [r3, #0]
 801b18c:	69b3      	ldr	r3, [r6, #24]
 801b18e:	b913      	cbnz	r3, 801b196 <__sfp+0x16>
 801b190:	4630      	mov	r0, r6
 801b192:	f7ff ffbd 	bl	801b110 <__sinit>
 801b196:	3648      	adds	r6, #72	; 0x48
 801b198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b19c:	3b01      	subs	r3, #1
 801b19e:	d503      	bpl.n	801b1a8 <__sfp+0x28>
 801b1a0:	6833      	ldr	r3, [r6, #0]
 801b1a2:	b30b      	cbz	r3, 801b1e8 <__sfp+0x68>
 801b1a4:	6836      	ldr	r6, [r6, #0]
 801b1a6:	e7f7      	b.n	801b198 <__sfp+0x18>
 801b1a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b1ac:	b9d5      	cbnz	r5, 801b1e4 <__sfp+0x64>
 801b1ae:	4b16      	ldr	r3, [pc, #88]	; (801b208 <__sfp+0x88>)
 801b1b0:	60e3      	str	r3, [r4, #12]
 801b1b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b1b6:	6665      	str	r5, [r4, #100]	; 0x64
 801b1b8:	f000 f86c 	bl	801b294 <__retarget_lock_init_recursive>
 801b1bc:	f7ff ff96 	bl	801b0ec <__sfp_lock_release>
 801b1c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b1c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b1c8:	6025      	str	r5, [r4, #0]
 801b1ca:	61a5      	str	r5, [r4, #24]
 801b1cc:	2208      	movs	r2, #8
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b1d4:	f000 f8ec 	bl	801b3b0 <memset>
 801b1d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b1dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1e4:	3468      	adds	r4, #104	; 0x68
 801b1e6:	e7d9      	b.n	801b19c <__sfp+0x1c>
 801b1e8:	2104      	movs	r1, #4
 801b1ea:	4638      	mov	r0, r7
 801b1ec:	f7ff ff62 	bl	801b0b4 <__sfmoreglue>
 801b1f0:	4604      	mov	r4, r0
 801b1f2:	6030      	str	r0, [r6, #0]
 801b1f4:	2800      	cmp	r0, #0
 801b1f6:	d1d5      	bne.n	801b1a4 <__sfp+0x24>
 801b1f8:	f7ff ff78 	bl	801b0ec <__sfp_lock_release>
 801b1fc:	230c      	movs	r3, #12
 801b1fe:	603b      	str	r3, [r7, #0]
 801b200:	e7ee      	b.n	801b1e0 <__sfp+0x60>
 801b202:	bf00      	nop
 801b204:	0801f9ac 	.word	0x0801f9ac
 801b208:	ffff0001 	.word	0xffff0001

0801b20c <_fwalk_reent>:
 801b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b210:	4606      	mov	r6, r0
 801b212:	4688      	mov	r8, r1
 801b214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b218:	2700      	movs	r7, #0
 801b21a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b21e:	f1b9 0901 	subs.w	r9, r9, #1
 801b222:	d505      	bpl.n	801b230 <_fwalk_reent+0x24>
 801b224:	6824      	ldr	r4, [r4, #0]
 801b226:	2c00      	cmp	r4, #0
 801b228:	d1f7      	bne.n	801b21a <_fwalk_reent+0xe>
 801b22a:	4638      	mov	r0, r7
 801b22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b230:	89ab      	ldrh	r3, [r5, #12]
 801b232:	2b01      	cmp	r3, #1
 801b234:	d907      	bls.n	801b246 <_fwalk_reent+0x3a>
 801b236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b23a:	3301      	adds	r3, #1
 801b23c:	d003      	beq.n	801b246 <_fwalk_reent+0x3a>
 801b23e:	4629      	mov	r1, r5
 801b240:	4630      	mov	r0, r6
 801b242:	47c0      	blx	r8
 801b244:	4307      	orrs	r7, r0
 801b246:	3568      	adds	r5, #104	; 0x68
 801b248:	e7e9      	b.n	801b21e <_fwalk_reent+0x12>
	...

0801b24c <__libc_init_array>:
 801b24c:	b570      	push	{r4, r5, r6, lr}
 801b24e:	4d0d      	ldr	r5, [pc, #52]	; (801b284 <__libc_init_array+0x38>)
 801b250:	4c0d      	ldr	r4, [pc, #52]	; (801b288 <__libc_init_array+0x3c>)
 801b252:	1b64      	subs	r4, r4, r5
 801b254:	10a4      	asrs	r4, r4, #2
 801b256:	2600      	movs	r6, #0
 801b258:	42a6      	cmp	r6, r4
 801b25a:	d109      	bne.n	801b270 <__libc_init_array+0x24>
 801b25c:	4d0b      	ldr	r5, [pc, #44]	; (801b28c <__libc_init_array+0x40>)
 801b25e:	4c0c      	ldr	r4, [pc, #48]	; (801b290 <__libc_init_array+0x44>)
 801b260:	f000 ff3c 	bl	801c0dc <_init>
 801b264:	1b64      	subs	r4, r4, r5
 801b266:	10a4      	asrs	r4, r4, #2
 801b268:	2600      	movs	r6, #0
 801b26a:	42a6      	cmp	r6, r4
 801b26c:	d105      	bne.n	801b27a <__libc_init_array+0x2e>
 801b26e:	bd70      	pop	{r4, r5, r6, pc}
 801b270:	f855 3b04 	ldr.w	r3, [r5], #4
 801b274:	4798      	blx	r3
 801b276:	3601      	adds	r6, #1
 801b278:	e7ee      	b.n	801b258 <__libc_init_array+0xc>
 801b27a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b27e:	4798      	blx	r3
 801b280:	3601      	adds	r6, #1
 801b282:	e7f2      	b.n	801b26a <__libc_init_array+0x1e>
 801b284:	0801fa9c 	.word	0x0801fa9c
 801b288:	0801fa9c 	.word	0x0801fa9c
 801b28c:	0801fa9c 	.word	0x0801fa9c
 801b290:	0801faa0 	.word	0x0801faa0

0801b294 <__retarget_lock_init_recursive>:
 801b294:	4770      	bx	lr

0801b296 <__retarget_lock_acquire_recursive>:
 801b296:	4770      	bx	lr

0801b298 <__retarget_lock_release_recursive>:
 801b298:	4770      	bx	lr

0801b29a <__swhatbuf_r>:
 801b29a:	b570      	push	{r4, r5, r6, lr}
 801b29c:	460e      	mov	r6, r1
 801b29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2a2:	2900      	cmp	r1, #0
 801b2a4:	b096      	sub	sp, #88	; 0x58
 801b2a6:	4614      	mov	r4, r2
 801b2a8:	461d      	mov	r5, r3
 801b2aa:	da08      	bge.n	801b2be <__swhatbuf_r+0x24>
 801b2ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	602a      	str	r2, [r5, #0]
 801b2b4:	061a      	lsls	r2, r3, #24
 801b2b6:	d410      	bmi.n	801b2da <__swhatbuf_r+0x40>
 801b2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b2bc:	e00e      	b.n	801b2dc <__swhatbuf_r+0x42>
 801b2be:	466a      	mov	r2, sp
 801b2c0:	f000 fb82 	bl	801b9c8 <_fstat_r>
 801b2c4:	2800      	cmp	r0, #0
 801b2c6:	dbf1      	blt.n	801b2ac <__swhatbuf_r+0x12>
 801b2c8:	9a01      	ldr	r2, [sp, #4]
 801b2ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b2ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b2d2:	425a      	negs	r2, r3
 801b2d4:	415a      	adcs	r2, r3
 801b2d6:	602a      	str	r2, [r5, #0]
 801b2d8:	e7ee      	b.n	801b2b8 <__swhatbuf_r+0x1e>
 801b2da:	2340      	movs	r3, #64	; 0x40
 801b2dc:	2000      	movs	r0, #0
 801b2de:	6023      	str	r3, [r4, #0]
 801b2e0:	b016      	add	sp, #88	; 0x58
 801b2e2:	bd70      	pop	{r4, r5, r6, pc}

0801b2e4 <__smakebuf_r>:
 801b2e4:	898b      	ldrh	r3, [r1, #12]
 801b2e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2e8:	079d      	lsls	r5, r3, #30
 801b2ea:	4606      	mov	r6, r0
 801b2ec:	460c      	mov	r4, r1
 801b2ee:	d507      	bpl.n	801b300 <__smakebuf_r+0x1c>
 801b2f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b2f4:	6023      	str	r3, [r4, #0]
 801b2f6:	6123      	str	r3, [r4, #16]
 801b2f8:	2301      	movs	r3, #1
 801b2fa:	6163      	str	r3, [r4, #20]
 801b2fc:	b002      	add	sp, #8
 801b2fe:	bd70      	pop	{r4, r5, r6, pc}
 801b300:	ab01      	add	r3, sp, #4
 801b302:	466a      	mov	r2, sp
 801b304:	f7ff ffc9 	bl	801b29a <__swhatbuf_r>
 801b308:	9900      	ldr	r1, [sp, #0]
 801b30a:	4605      	mov	r5, r0
 801b30c:	4630      	mov	r0, r6
 801b30e:	f000 f8c1 	bl	801b494 <_malloc_r>
 801b312:	b948      	cbnz	r0, 801b328 <__smakebuf_r+0x44>
 801b314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b318:	059a      	lsls	r2, r3, #22
 801b31a:	d4ef      	bmi.n	801b2fc <__smakebuf_r+0x18>
 801b31c:	f023 0303 	bic.w	r3, r3, #3
 801b320:	f043 0302 	orr.w	r3, r3, #2
 801b324:	81a3      	strh	r3, [r4, #12]
 801b326:	e7e3      	b.n	801b2f0 <__smakebuf_r+0xc>
 801b328:	4b0d      	ldr	r3, [pc, #52]	; (801b360 <__smakebuf_r+0x7c>)
 801b32a:	62b3      	str	r3, [r6, #40]	; 0x28
 801b32c:	89a3      	ldrh	r3, [r4, #12]
 801b32e:	6020      	str	r0, [r4, #0]
 801b330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b334:	81a3      	strh	r3, [r4, #12]
 801b336:	9b00      	ldr	r3, [sp, #0]
 801b338:	6163      	str	r3, [r4, #20]
 801b33a:	9b01      	ldr	r3, [sp, #4]
 801b33c:	6120      	str	r0, [r4, #16]
 801b33e:	b15b      	cbz	r3, 801b358 <__smakebuf_r+0x74>
 801b340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b344:	4630      	mov	r0, r6
 801b346:	f000 fb51 	bl	801b9ec <_isatty_r>
 801b34a:	b128      	cbz	r0, 801b358 <__smakebuf_r+0x74>
 801b34c:	89a3      	ldrh	r3, [r4, #12]
 801b34e:	f023 0303 	bic.w	r3, r3, #3
 801b352:	f043 0301 	orr.w	r3, r3, #1
 801b356:	81a3      	strh	r3, [r4, #12]
 801b358:	89a0      	ldrh	r0, [r4, #12]
 801b35a:	4305      	orrs	r5, r0
 801b35c:	81a5      	strh	r5, [r4, #12]
 801b35e:	e7cd      	b.n	801b2fc <__smakebuf_r+0x18>
 801b360:	0801b0a9 	.word	0x0801b0a9

0801b364 <malloc>:
 801b364:	4b02      	ldr	r3, [pc, #8]	; (801b370 <malloc+0xc>)
 801b366:	4601      	mov	r1, r0
 801b368:	6818      	ldr	r0, [r3, #0]
 801b36a:	f000 b893 	b.w	801b494 <_malloc_r>
 801b36e:	bf00      	nop
 801b370:	20000110 	.word	0x20000110

0801b374 <memcmp>:
 801b374:	b510      	push	{r4, lr}
 801b376:	3901      	subs	r1, #1
 801b378:	4402      	add	r2, r0
 801b37a:	4290      	cmp	r0, r2
 801b37c:	d101      	bne.n	801b382 <memcmp+0xe>
 801b37e:	2000      	movs	r0, #0
 801b380:	e005      	b.n	801b38e <memcmp+0x1a>
 801b382:	7803      	ldrb	r3, [r0, #0]
 801b384:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b388:	42a3      	cmp	r3, r4
 801b38a:	d001      	beq.n	801b390 <memcmp+0x1c>
 801b38c:	1b18      	subs	r0, r3, r4
 801b38e:	bd10      	pop	{r4, pc}
 801b390:	3001      	adds	r0, #1
 801b392:	e7f2      	b.n	801b37a <memcmp+0x6>

0801b394 <memcpy>:
 801b394:	440a      	add	r2, r1
 801b396:	4291      	cmp	r1, r2
 801b398:	f100 33ff 	add.w	r3, r0, #4294967295
 801b39c:	d100      	bne.n	801b3a0 <memcpy+0xc>
 801b39e:	4770      	bx	lr
 801b3a0:	b510      	push	{r4, lr}
 801b3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b3a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b3aa:	4291      	cmp	r1, r2
 801b3ac:	d1f9      	bne.n	801b3a2 <memcpy+0xe>
 801b3ae:	bd10      	pop	{r4, pc}

0801b3b0 <memset>:
 801b3b0:	4402      	add	r2, r0
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	4293      	cmp	r3, r2
 801b3b6:	d100      	bne.n	801b3ba <memset+0xa>
 801b3b8:	4770      	bx	lr
 801b3ba:	f803 1b01 	strb.w	r1, [r3], #1
 801b3be:	e7f9      	b.n	801b3b4 <memset+0x4>

0801b3c0 <_free_r>:
 801b3c0:	b538      	push	{r3, r4, r5, lr}
 801b3c2:	4605      	mov	r5, r0
 801b3c4:	2900      	cmp	r1, #0
 801b3c6:	d041      	beq.n	801b44c <_free_r+0x8c>
 801b3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b3cc:	1f0c      	subs	r4, r1, #4
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	bfb8      	it	lt
 801b3d2:	18e4      	addlt	r4, r4, r3
 801b3d4:	f000 fb2c 	bl	801ba30 <__malloc_lock>
 801b3d8:	4a1d      	ldr	r2, [pc, #116]	; (801b450 <_free_r+0x90>)
 801b3da:	6813      	ldr	r3, [r2, #0]
 801b3dc:	b933      	cbnz	r3, 801b3ec <_free_r+0x2c>
 801b3de:	6063      	str	r3, [r4, #4]
 801b3e0:	6014      	str	r4, [r2, #0]
 801b3e2:	4628      	mov	r0, r5
 801b3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3e8:	f000 bb28 	b.w	801ba3c <__malloc_unlock>
 801b3ec:	42a3      	cmp	r3, r4
 801b3ee:	d908      	bls.n	801b402 <_free_r+0x42>
 801b3f0:	6820      	ldr	r0, [r4, #0]
 801b3f2:	1821      	adds	r1, r4, r0
 801b3f4:	428b      	cmp	r3, r1
 801b3f6:	bf01      	itttt	eq
 801b3f8:	6819      	ldreq	r1, [r3, #0]
 801b3fa:	685b      	ldreq	r3, [r3, #4]
 801b3fc:	1809      	addeq	r1, r1, r0
 801b3fe:	6021      	streq	r1, [r4, #0]
 801b400:	e7ed      	b.n	801b3de <_free_r+0x1e>
 801b402:	461a      	mov	r2, r3
 801b404:	685b      	ldr	r3, [r3, #4]
 801b406:	b10b      	cbz	r3, 801b40c <_free_r+0x4c>
 801b408:	42a3      	cmp	r3, r4
 801b40a:	d9fa      	bls.n	801b402 <_free_r+0x42>
 801b40c:	6811      	ldr	r1, [r2, #0]
 801b40e:	1850      	adds	r0, r2, r1
 801b410:	42a0      	cmp	r0, r4
 801b412:	d10b      	bne.n	801b42c <_free_r+0x6c>
 801b414:	6820      	ldr	r0, [r4, #0]
 801b416:	4401      	add	r1, r0
 801b418:	1850      	adds	r0, r2, r1
 801b41a:	4283      	cmp	r3, r0
 801b41c:	6011      	str	r1, [r2, #0]
 801b41e:	d1e0      	bne.n	801b3e2 <_free_r+0x22>
 801b420:	6818      	ldr	r0, [r3, #0]
 801b422:	685b      	ldr	r3, [r3, #4]
 801b424:	6053      	str	r3, [r2, #4]
 801b426:	4401      	add	r1, r0
 801b428:	6011      	str	r1, [r2, #0]
 801b42a:	e7da      	b.n	801b3e2 <_free_r+0x22>
 801b42c:	d902      	bls.n	801b434 <_free_r+0x74>
 801b42e:	230c      	movs	r3, #12
 801b430:	602b      	str	r3, [r5, #0]
 801b432:	e7d6      	b.n	801b3e2 <_free_r+0x22>
 801b434:	6820      	ldr	r0, [r4, #0]
 801b436:	1821      	adds	r1, r4, r0
 801b438:	428b      	cmp	r3, r1
 801b43a:	bf04      	itt	eq
 801b43c:	6819      	ldreq	r1, [r3, #0]
 801b43e:	685b      	ldreq	r3, [r3, #4]
 801b440:	6063      	str	r3, [r4, #4]
 801b442:	bf04      	itt	eq
 801b444:	1809      	addeq	r1, r1, r0
 801b446:	6021      	streq	r1, [r4, #0]
 801b448:	6054      	str	r4, [r2, #4]
 801b44a:	e7ca      	b.n	801b3e2 <_free_r+0x22>
 801b44c:	bd38      	pop	{r3, r4, r5, pc}
 801b44e:	bf00      	nop
 801b450:	2000e6ec 	.word	0x2000e6ec

0801b454 <sbrk_aligned>:
 801b454:	b570      	push	{r4, r5, r6, lr}
 801b456:	4e0e      	ldr	r6, [pc, #56]	; (801b490 <sbrk_aligned+0x3c>)
 801b458:	460c      	mov	r4, r1
 801b45a:	6831      	ldr	r1, [r6, #0]
 801b45c:	4605      	mov	r5, r0
 801b45e:	b911      	cbnz	r1, 801b466 <sbrk_aligned+0x12>
 801b460:	f000 f94c 	bl	801b6fc <_sbrk_r>
 801b464:	6030      	str	r0, [r6, #0]
 801b466:	4621      	mov	r1, r4
 801b468:	4628      	mov	r0, r5
 801b46a:	f000 f947 	bl	801b6fc <_sbrk_r>
 801b46e:	1c43      	adds	r3, r0, #1
 801b470:	d00a      	beq.n	801b488 <sbrk_aligned+0x34>
 801b472:	1cc4      	adds	r4, r0, #3
 801b474:	f024 0403 	bic.w	r4, r4, #3
 801b478:	42a0      	cmp	r0, r4
 801b47a:	d007      	beq.n	801b48c <sbrk_aligned+0x38>
 801b47c:	1a21      	subs	r1, r4, r0
 801b47e:	4628      	mov	r0, r5
 801b480:	f000 f93c 	bl	801b6fc <_sbrk_r>
 801b484:	3001      	adds	r0, #1
 801b486:	d101      	bne.n	801b48c <sbrk_aligned+0x38>
 801b488:	f04f 34ff 	mov.w	r4, #4294967295
 801b48c:	4620      	mov	r0, r4
 801b48e:	bd70      	pop	{r4, r5, r6, pc}
 801b490:	2000e6f0 	.word	0x2000e6f0

0801b494 <_malloc_r>:
 801b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b498:	1ccd      	adds	r5, r1, #3
 801b49a:	f025 0503 	bic.w	r5, r5, #3
 801b49e:	3508      	adds	r5, #8
 801b4a0:	2d0c      	cmp	r5, #12
 801b4a2:	bf38      	it	cc
 801b4a4:	250c      	movcc	r5, #12
 801b4a6:	2d00      	cmp	r5, #0
 801b4a8:	4607      	mov	r7, r0
 801b4aa:	db01      	blt.n	801b4b0 <_malloc_r+0x1c>
 801b4ac:	42a9      	cmp	r1, r5
 801b4ae:	d905      	bls.n	801b4bc <_malloc_r+0x28>
 801b4b0:	230c      	movs	r3, #12
 801b4b2:	603b      	str	r3, [r7, #0]
 801b4b4:	2600      	movs	r6, #0
 801b4b6:	4630      	mov	r0, r6
 801b4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4bc:	4e2e      	ldr	r6, [pc, #184]	; (801b578 <_malloc_r+0xe4>)
 801b4be:	f000 fab7 	bl	801ba30 <__malloc_lock>
 801b4c2:	6833      	ldr	r3, [r6, #0]
 801b4c4:	461c      	mov	r4, r3
 801b4c6:	bb34      	cbnz	r4, 801b516 <_malloc_r+0x82>
 801b4c8:	4629      	mov	r1, r5
 801b4ca:	4638      	mov	r0, r7
 801b4cc:	f7ff ffc2 	bl	801b454 <sbrk_aligned>
 801b4d0:	1c43      	adds	r3, r0, #1
 801b4d2:	4604      	mov	r4, r0
 801b4d4:	d14d      	bne.n	801b572 <_malloc_r+0xde>
 801b4d6:	6834      	ldr	r4, [r6, #0]
 801b4d8:	4626      	mov	r6, r4
 801b4da:	2e00      	cmp	r6, #0
 801b4dc:	d140      	bne.n	801b560 <_malloc_r+0xcc>
 801b4de:	6823      	ldr	r3, [r4, #0]
 801b4e0:	4631      	mov	r1, r6
 801b4e2:	4638      	mov	r0, r7
 801b4e4:	eb04 0803 	add.w	r8, r4, r3
 801b4e8:	f000 f908 	bl	801b6fc <_sbrk_r>
 801b4ec:	4580      	cmp	r8, r0
 801b4ee:	d13a      	bne.n	801b566 <_malloc_r+0xd2>
 801b4f0:	6821      	ldr	r1, [r4, #0]
 801b4f2:	3503      	adds	r5, #3
 801b4f4:	1a6d      	subs	r5, r5, r1
 801b4f6:	f025 0503 	bic.w	r5, r5, #3
 801b4fa:	3508      	adds	r5, #8
 801b4fc:	2d0c      	cmp	r5, #12
 801b4fe:	bf38      	it	cc
 801b500:	250c      	movcc	r5, #12
 801b502:	4629      	mov	r1, r5
 801b504:	4638      	mov	r0, r7
 801b506:	f7ff ffa5 	bl	801b454 <sbrk_aligned>
 801b50a:	3001      	adds	r0, #1
 801b50c:	d02b      	beq.n	801b566 <_malloc_r+0xd2>
 801b50e:	6823      	ldr	r3, [r4, #0]
 801b510:	442b      	add	r3, r5
 801b512:	6023      	str	r3, [r4, #0]
 801b514:	e00e      	b.n	801b534 <_malloc_r+0xa0>
 801b516:	6822      	ldr	r2, [r4, #0]
 801b518:	1b52      	subs	r2, r2, r5
 801b51a:	d41e      	bmi.n	801b55a <_malloc_r+0xc6>
 801b51c:	2a0b      	cmp	r2, #11
 801b51e:	d916      	bls.n	801b54e <_malloc_r+0xba>
 801b520:	1961      	adds	r1, r4, r5
 801b522:	42a3      	cmp	r3, r4
 801b524:	6025      	str	r5, [r4, #0]
 801b526:	bf18      	it	ne
 801b528:	6059      	strne	r1, [r3, #4]
 801b52a:	6863      	ldr	r3, [r4, #4]
 801b52c:	bf08      	it	eq
 801b52e:	6031      	streq	r1, [r6, #0]
 801b530:	5162      	str	r2, [r4, r5]
 801b532:	604b      	str	r3, [r1, #4]
 801b534:	4638      	mov	r0, r7
 801b536:	f104 060b 	add.w	r6, r4, #11
 801b53a:	f000 fa7f 	bl	801ba3c <__malloc_unlock>
 801b53e:	f026 0607 	bic.w	r6, r6, #7
 801b542:	1d23      	adds	r3, r4, #4
 801b544:	1af2      	subs	r2, r6, r3
 801b546:	d0b6      	beq.n	801b4b6 <_malloc_r+0x22>
 801b548:	1b9b      	subs	r3, r3, r6
 801b54a:	50a3      	str	r3, [r4, r2]
 801b54c:	e7b3      	b.n	801b4b6 <_malloc_r+0x22>
 801b54e:	6862      	ldr	r2, [r4, #4]
 801b550:	42a3      	cmp	r3, r4
 801b552:	bf0c      	ite	eq
 801b554:	6032      	streq	r2, [r6, #0]
 801b556:	605a      	strne	r2, [r3, #4]
 801b558:	e7ec      	b.n	801b534 <_malloc_r+0xa0>
 801b55a:	4623      	mov	r3, r4
 801b55c:	6864      	ldr	r4, [r4, #4]
 801b55e:	e7b2      	b.n	801b4c6 <_malloc_r+0x32>
 801b560:	4634      	mov	r4, r6
 801b562:	6876      	ldr	r6, [r6, #4]
 801b564:	e7b9      	b.n	801b4da <_malloc_r+0x46>
 801b566:	230c      	movs	r3, #12
 801b568:	603b      	str	r3, [r7, #0]
 801b56a:	4638      	mov	r0, r7
 801b56c:	f000 fa66 	bl	801ba3c <__malloc_unlock>
 801b570:	e7a1      	b.n	801b4b6 <_malloc_r+0x22>
 801b572:	6025      	str	r5, [r4, #0]
 801b574:	e7de      	b.n	801b534 <_malloc_r+0xa0>
 801b576:	bf00      	nop
 801b578:	2000e6ec 	.word	0x2000e6ec

0801b57c <iprintf>:
 801b57c:	b40f      	push	{r0, r1, r2, r3}
 801b57e:	4b0a      	ldr	r3, [pc, #40]	; (801b5a8 <iprintf+0x2c>)
 801b580:	b513      	push	{r0, r1, r4, lr}
 801b582:	681c      	ldr	r4, [r3, #0]
 801b584:	b124      	cbz	r4, 801b590 <iprintf+0x14>
 801b586:	69a3      	ldr	r3, [r4, #24]
 801b588:	b913      	cbnz	r3, 801b590 <iprintf+0x14>
 801b58a:	4620      	mov	r0, r4
 801b58c:	f7ff fdc0 	bl	801b110 <__sinit>
 801b590:	ab05      	add	r3, sp, #20
 801b592:	9a04      	ldr	r2, [sp, #16]
 801b594:	68a1      	ldr	r1, [r4, #8]
 801b596:	9301      	str	r3, [sp, #4]
 801b598:	4620      	mov	r0, r4
 801b59a:	f000 fa7d 	bl	801ba98 <_vfiprintf_r>
 801b59e:	b002      	add	sp, #8
 801b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5a4:	b004      	add	sp, #16
 801b5a6:	4770      	bx	lr
 801b5a8:	20000110 	.word	0x20000110

0801b5ac <rand>:
 801b5ac:	4b16      	ldr	r3, [pc, #88]	; (801b608 <rand+0x5c>)
 801b5ae:	b510      	push	{r4, lr}
 801b5b0:	681c      	ldr	r4, [r3, #0]
 801b5b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b5b4:	b9b3      	cbnz	r3, 801b5e4 <rand+0x38>
 801b5b6:	2018      	movs	r0, #24
 801b5b8:	f7ff fed4 	bl	801b364 <malloc>
 801b5bc:	4602      	mov	r2, r0
 801b5be:	63a0      	str	r0, [r4, #56]	; 0x38
 801b5c0:	b920      	cbnz	r0, 801b5cc <rand+0x20>
 801b5c2:	4b12      	ldr	r3, [pc, #72]	; (801b60c <rand+0x60>)
 801b5c4:	4812      	ldr	r0, [pc, #72]	; (801b610 <rand+0x64>)
 801b5c6:	214e      	movs	r1, #78	; 0x4e
 801b5c8:	f000 f9be 	bl	801b948 <__assert_func>
 801b5cc:	4911      	ldr	r1, [pc, #68]	; (801b614 <rand+0x68>)
 801b5ce:	4b12      	ldr	r3, [pc, #72]	; (801b618 <rand+0x6c>)
 801b5d0:	e9c0 1300 	strd	r1, r3, [r0]
 801b5d4:	4b11      	ldr	r3, [pc, #68]	; (801b61c <rand+0x70>)
 801b5d6:	6083      	str	r3, [r0, #8]
 801b5d8:	230b      	movs	r3, #11
 801b5da:	8183      	strh	r3, [r0, #12]
 801b5dc:	2100      	movs	r1, #0
 801b5de:	2001      	movs	r0, #1
 801b5e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b5e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801b5e6:	4a0e      	ldr	r2, [pc, #56]	; (801b620 <rand+0x74>)
 801b5e8:	6920      	ldr	r0, [r4, #16]
 801b5ea:	6963      	ldr	r3, [r4, #20]
 801b5ec:	490d      	ldr	r1, [pc, #52]	; (801b624 <rand+0x78>)
 801b5ee:	4342      	muls	r2, r0
 801b5f0:	fb01 2203 	mla	r2, r1, r3, r2
 801b5f4:	fba0 0101 	umull	r0, r1, r0, r1
 801b5f8:	1c43      	adds	r3, r0, #1
 801b5fa:	eb42 0001 	adc.w	r0, r2, r1
 801b5fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801b602:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b606:	bd10      	pop	{r4, pc}
 801b608:	20000110 	.word	0x20000110
 801b60c:	0801f9b0 	.word	0x0801f9b0
 801b610:	0801f9c7 	.word	0x0801f9c7
 801b614:	abcd330e 	.word	0xabcd330e
 801b618:	e66d1234 	.word	0xe66d1234
 801b61c:	0005deec 	.word	0x0005deec
 801b620:	5851f42d 	.word	0x5851f42d
 801b624:	4c957f2d 	.word	0x4c957f2d

0801b628 <cleanup_glue>:
 801b628:	b538      	push	{r3, r4, r5, lr}
 801b62a:	460c      	mov	r4, r1
 801b62c:	6809      	ldr	r1, [r1, #0]
 801b62e:	4605      	mov	r5, r0
 801b630:	b109      	cbz	r1, 801b636 <cleanup_glue+0xe>
 801b632:	f7ff fff9 	bl	801b628 <cleanup_glue>
 801b636:	4621      	mov	r1, r4
 801b638:	4628      	mov	r0, r5
 801b63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b63e:	f7ff bebf 	b.w	801b3c0 <_free_r>
	...

0801b644 <_reclaim_reent>:
 801b644:	4b2c      	ldr	r3, [pc, #176]	; (801b6f8 <_reclaim_reent+0xb4>)
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	4283      	cmp	r3, r0
 801b64a:	b570      	push	{r4, r5, r6, lr}
 801b64c:	4604      	mov	r4, r0
 801b64e:	d051      	beq.n	801b6f4 <_reclaim_reent+0xb0>
 801b650:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b652:	b143      	cbz	r3, 801b666 <_reclaim_reent+0x22>
 801b654:	68db      	ldr	r3, [r3, #12]
 801b656:	2b00      	cmp	r3, #0
 801b658:	d14a      	bne.n	801b6f0 <_reclaim_reent+0xac>
 801b65a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b65c:	6819      	ldr	r1, [r3, #0]
 801b65e:	b111      	cbz	r1, 801b666 <_reclaim_reent+0x22>
 801b660:	4620      	mov	r0, r4
 801b662:	f7ff fead 	bl	801b3c0 <_free_r>
 801b666:	6961      	ldr	r1, [r4, #20]
 801b668:	b111      	cbz	r1, 801b670 <_reclaim_reent+0x2c>
 801b66a:	4620      	mov	r0, r4
 801b66c:	f7ff fea8 	bl	801b3c0 <_free_r>
 801b670:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b672:	b111      	cbz	r1, 801b67a <_reclaim_reent+0x36>
 801b674:	4620      	mov	r0, r4
 801b676:	f7ff fea3 	bl	801b3c0 <_free_r>
 801b67a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b67c:	b111      	cbz	r1, 801b684 <_reclaim_reent+0x40>
 801b67e:	4620      	mov	r0, r4
 801b680:	f7ff fe9e 	bl	801b3c0 <_free_r>
 801b684:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b686:	b111      	cbz	r1, 801b68e <_reclaim_reent+0x4a>
 801b688:	4620      	mov	r0, r4
 801b68a:	f7ff fe99 	bl	801b3c0 <_free_r>
 801b68e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b690:	b111      	cbz	r1, 801b698 <_reclaim_reent+0x54>
 801b692:	4620      	mov	r0, r4
 801b694:	f7ff fe94 	bl	801b3c0 <_free_r>
 801b698:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b69a:	b111      	cbz	r1, 801b6a2 <_reclaim_reent+0x5e>
 801b69c:	4620      	mov	r0, r4
 801b69e:	f7ff fe8f 	bl	801b3c0 <_free_r>
 801b6a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b6a4:	b111      	cbz	r1, 801b6ac <_reclaim_reent+0x68>
 801b6a6:	4620      	mov	r0, r4
 801b6a8:	f7ff fe8a 	bl	801b3c0 <_free_r>
 801b6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b6ae:	b111      	cbz	r1, 801b6b6 <_reclaim_reent+0x72>
 801b6b0:	4620      	mov	r0, r4
 801b6b2:	f7ff fe85 	bl	801b3c0 <_free_r>
 801b6b6:	69a3      	ldr	r3, [r4, #24]
 801b6b8:	b1e3      	cbz	r3, 801b6f4 <_reclaim_reent+0xb0>
 801b6ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b6bc:	4620      	mov	r0, r4
 801b6be:	4798      	blx	r3
 801b6c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b6c2:	b1b9      	cbz	r1, 801b6f4 <_reclaim_reent+0xb0>
 801b6c4:	4620      	mov	r0, r4
 801b6c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b6ca:	f7ff bfad 	b.w	801b628 <cleanup_glue>
 801b6ce:	5949      	ldr	r1, [r1, r5]
 801b6d0:	b941      	cbnz	r1, 801b6e4 <_reclaim_reent+0xa0>
 801b6d2:	3504      	adds	r5, #4
 801b6d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b6d6:	2d80      	cmp	r5, #128	; 0x80
 801b6d8:	68d9      	ldr	r1, [r3, #12]
 801b6da:	d1f8      	bne.n	801b6ce <_reclaim_reent+0x8a>
 801b6dc:	4620      	mov	r0, r4
 801b6de:	f7ff fe6f 	bl	801b3c0 <_free_r>
 801b6e2:	e7ba      	b.n	801b65a <_reclaim_reent+0x16>
 801b6e4:	680e      	ldr	r6, [r1, #0]
 801b6e6:	4620      	mov	r0, r4
 801b6e8:	f7ff fe6a 	bl	801b3c0 <_free_r>
 801b6ec:	4631      	mov	r1, r6
 801b6ee:	e7ef      	b.n	801b6d0 <_reclaim_reent+0x8c>
 801b6f0:	2500      	movs	r5, #0
 801b6f2:	e7ef      	b.n	801b6d4 <_reclaim_reent+0x90>
 801b6f4:	bd70      	pop	{r4, r5, r6, pc}
 801b6f6:	bf00      	nop
 801b6f8:	20000110 	.word	0x20000110

0801b6fc <_sbrk_r>:
 801b6fc:	b538      	push	{r3, r4, r5, lr}
 801b6fe:	4d06      	ldr	r5, [pc, #24]	; (801b718 <_sbrk_r+0x1c>)
 801b700:	2300      	movs	r3, #0
 801b702:	4604      	mov	r4, r0
 801b704:	4608      	mov	r0, r1
 801b706:	602b      	str	r3, [r5, #0]
 801b708:	f7e5 f9b2 	bl	8000a70 <_sbrk>
 801b70c:	1c43      	adds	r3, r0, #1
 801b70e:	d102      	bne.n	801b716 <_sbrk_r+0x1a>
 801b710:	682b      	ldr	r3, [r5, #0]
 801b712:	b103      	cbz	r3, 801b716 <_sbrk_r+0x1a>
 801b714:	6023      	str	r3, [r4, #0]
 801b716:	bd38      	pop	{r3, r4, r5, pc}
 801b718:	2000e6f4 	.word	0x2000e6f4

0801b71c <__sread>:
 801b71c:	b510      	push	{r4, lr}
 801b71e:	460c      	mov	r4, r1
 801b720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b724:	f000 fc7c 	bl	801c020 <_read_r>
 801b728:	2800      	cmp	r0, #0
 801b72a:	bfab      	itete	ge
 801b72c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b72e:	89a3      	ldrhlt	r3, [r4, #12]
 801b730:	181b      	addge	r3, r3, r0
 801b732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b736:	bfac      	ite	ge
 801b738:	6563      	strge	r3, [r4, #84]	; 0x54
 801b73a:	81a3      	strhlt	r3, [r4, #12]
 801b73c:	bd10      	pop	{r4, pc}

0801b73e <__swrite>:
 801b73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b742:	461f      	mov	r7, r3
 801b744:	898b      	ldrh	r3, [r1, #12]
 801b746:	05db      	lsls	r3, r3, #23
 801b748:	4605      	mov	r5, r0
 801b74a:	460c      	mov	r4, r1
 801b74c:	4616      	mov	r6, r2
 801b74e:	d505      	bpl.n	801b75c <__swrite+0x1e>
 801b750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b754:	2302      	movs	r3, #2
 801b756:	2200      	movs	r2, #0
 801b758:	f000 f958 	bl	801ba0c <_lseek_r>
 801b75c:	89a3      	ldrh	r3, [r4, #12]
 801b75e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b766:	81a3      	strh	r3, [r4, #12]
 801b768:	4632      	mov	r2, r6
 801b76a:	463b      	mov	r3, r7
 801b76c:	4628      	mov	r0, r5
 801b76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b772:	f000 b869 	b.w	801b848 <_write_r>

0801b776 <__sseek>:
 801b776:	b510      	push	{r4, lr}
 801b778:	460c      	mov	r4, r1
 801b77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b77e:	f000 f945 	bl	801ba0c <_lseek_r>
 801b782:	1c43      	adds	r3, r0, #1
 801b784:	89a3      	ldrh	r3, [r4, #12]
 801b786:	bf15      	itete	ne
 801b788:	6560      	strne	r0, [r4, #84]	; 0x54
 801b78a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b78e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b792:	81a3      	strheq	r3, [r4, #12]
 801b794:	bf18      	it	ne
 801b796:	81a3      	strhne	r3, [r4, #12]
 801b798:	bd10      	pop	{r4, pc}

0801b79a <__sclose>:
 801b79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b79e:	f000 b8f1 	b.w	801b984 <_close_r>
	...

0801b7a4 <__swbuf_r>:
 801b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7a6:	460e      	mov	r6, r1
 801b7a8:	4614      	mov	r4, r2
 801b7aa:	4605      	mov	r5, r0
 801b7ac:	b118      	cbz	r0, 801b7b6 <__swbuf_r+0x12>
 801b7ae:	6983      	ldr	r3, [r0, #24]
 801b7b0:	b90b      	cbnz	r3, 801b7b6 <__swbuf_r+0x12>
 801b7b2:	f7ff fcad 	bl	801b110 <__sinit>
 801b7b6:	4b21      	ldr	r3, [pc, #132]	; (801b83c <__swbuf_r+0x98>)
 801b7b8:	429c      	cmp	r4, r3
 801b7ba:	d12b      	bne.n	801b814 <__swbuf_r+0x70>
 801b7bc:	686c      	ldr	r4, [r5, #4]
 801b7be:	69a3      	ldr	r3, [r4, #24]
 801b7c0:	60a3      	str	r3, [r4, #8]
 801b7c2:	89a3      	ldrh	r3, [r4, #12]
 801b7c4:	071a      	lsls	r2, r3, #28
 801b7c6:	d52f      	bpl.n	801b828 <__swbuf_r+0x84>
 801b7c8:	6923      	ldr	r3, [r4, #16]
 801b7ca:	b36b      	cbz	r3, 801b828 <__swbuf_r+0x84>
 801b7cc:	6923      	ldr	r3, [r4, #16]
 801b7ce:	6820      	ldr	r0, [r4, #0]
 801b7d0:	1ac0      	subs	r0, r0, r3
 801b7d2:	6963      	ldr	r3, [r4, #20]
 801b7d4:	b2f6      	uxtb	r6, r6
 801b7d6:	4283      	cmp	r3, r0
 801b7d8:	4637      	mov	r7, r6
 801b7da:	dc04      	bgt.n	801b7e6 <__swbuf_r+0x42>
 801b7dc:	4621      	mov	r1, r4
 801b7de:	4628      	mov	r0, r5
 801b7e0:	f7ff fc02 	bl	801afe8 <_fflush_r>
 801b7e4:	bb30      	cbnz	r0, 801b834 <__swbuf_r+0x90>
 801b7e6:	68a3      	ldr	r3, [r4, #8]
 801b7e8:	3b01      	subs	r3, #1
 801b7ea:	60a3      	str	r3, [r4, #8]
 801b7ec:	6823      	ldr	r3, [r4, #0]
 801b7ee:	1c5a      	adds	r2, r3, #1
 801b7f0:	6022      	str	r2, [r4, #0]
 801b7f2:	701e      	strb	r6, [r3, #0]
 801b7f4:	6963      	ldr	r3, [r4, #20]
 801b7f6:	3001      	adds	r0, #1
 801b7f8:	4283      	cmp	r3, r0
 801b7fa:	d004      	beq.n	801b806 <__swbuf_r+0x62>
 801b7fc:	89a3      	ldrh	r3, [r4, #12]
 801b7fe:	07db      	lsls	r3, r3, #31
 801b800:	d506      	bpl.n	801b810 <__swbuf_r+0x6c>
 801b802:	2e0a      	cmp	r6, #10
 801b804:	d104      	bne.n	801b810 <__swbuf_r+0x6c>
 801b806:	4621      	mov	r1, r4
 801b808:	4628      	mov	r0, r5
 801b80a:	f7ff fbed 	bl	801afe8 <_fflush_r>
 801b80e:	b988      	cbnz	r0, 801b834 <__swbuf_r+0x90>
 801b810:	4638      	mov	r0, r7
 801b812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b814:	4b0a      	ldr	r3, [pc, #40]	; (801b840 <__swbuf_r+0x9c>)
 801b816:	429c      	cmp	r4, r3
 801b818:	d101      	bne.n	801b81e <__swbuf_r+0x7a>
 801b81a:	68ac      	ldr	r4, [r5, #8]
 801b81c:	e7cf      	b.n	801b7be <__swbuf_r+0x1a>
 801b81e:	4b09      	ldr	r3, [pc, #36]	; (801b844 <__swbuf_r+0xa0>)
 801b820:	429c      	cmp	r4, r3
 801b822:	bf08      	it	eq
 801b824:	68ec      	ldreq	r4, [r5, #12]
 801b826:	e7ca      	b.n	801b7be <__swbuf_r+0x1a>
 801b828:	4621      	mov	r1, r4
 801b82a:	4628      	mov	r0, r5
 801b82c:	f000 f81e 	bl	801b86c <__swsetup_r>
 801b830:	2800      	cmp	r0, #0
 801b832:	d0cb      	beq.n	801b7cc <__swbuf_r+0x28>
 801b834:	f04f 37ff 	mov.w	r7, #4294967295
 801b838:	e7ea      	b.n	801b810 <__swbuf_r+0x6c>
 801b83a:	bf00      	nop
 801b83c:	0801f96c 	.word	0x0801f96c
 801b840:	0801f98c 	.word	0x0801f98c
 801b844:	0801f94c 	.word	0x0801f94c

0801b848 <_write_r>:
 801b848:	b538      	push	{r3, r4, r5, lr}
 801b84a:	4d07      	ldr	r5, [pc, #28]	; (801b868 <_write_r+0x20>)
 801b84c:	4604      	mov	r4, r0
 801b84e:	4608      	mov	r0, r1
 801b850:	4611      	mov	r1, r2
 801b852:	2200      	movs	r2, #0
 801b854:	602a      	str	r2, [r5, #0]
 801b856:	461a      	mov	r2, r3
 801b858:	f7e5 f8bd 	bl	80009d6 <_write>
 801b85c:	1c43      	adds	r3, r0, #1
 801b85e:	d102      	bne.n	801b866 <_write_r+0x1e>
 801b860:	682b      	ldr	r3, [r5, #0]
 801b862:	b103      	cbz	r3, 801b866 <_write_r+0x1e>
 801b864:	6023      	str	r3, [r4, #0]
 801b866:	bd38      	pop	{r3, r4, r5, pc}
 801b868:	2000e6f4 	.word	0x2000e6f4

0801b86c <__swsetup_r>:
 801b86c:	4b32      	ldr	r3, [pc, #200]	; (801b938 <__swsetup_r+0xcc>)
 801b86e:	b570      	push	{r4, r5, r6, lr}
 801b870:	681d      	ldr	r5, [r3, #0]
 801b872:	4606      	mov	r6, r0
 801b874:	460c      	mov	r4, r1
 801b876:	b125      	cbz	r5, 801b882 <__swsetup_r+0x16>
 801b878:	69ab      	ldr	r3, [r5, #24]
 801b87a:	b913      	cbnz	r3, 801b882 <__swsetup_r+0x16>
 801b87c:	4628      	mov	r0, r5
 801b87e:	f7ff fc47 	bl	801b110 <__sinit>
 801b882:	4b2e      	ldr	r3, [pc, #184]	; (801b93c <__swsetup_r+0xd0>)
 801b884:	429c      	cmp	r4, r3
 801b886:	d10f      	bne.n	801b8a8 <__swsetup_r+0x3c>
 801b888:	686c      	ldr	r4, [r5, #4]
 801b88a:	89a3      	ldrh	r3, [r4, #12]
 801b88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b890:	0719      	lsls	r1, r3, #28
 801b892:	d42c      	bmi.n	801b8ee <__swsetup_r+0x82>
 801b894:	06dd      	lsls	r5, r3, #27
 801b896:	d411      	bmi.n	801b8bc <__swsetup_r+0x50>
 801b898:	2309      	movs	r3, #9
 801b89a:	6033      	str	r3, [r6, #0]
 801b89c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b8a0:	81a3      	strh	r3, [r4, #12]
 801b8a2:	f04f 30ff 	mov.w	r0, #4294967295
 801b8a6:	e03e      	b.n	801b926 <__swsetup_r+0xba>
 801b8a8:	4b25      	ldr	r3, [pc, #148]	; (801b940 <__swsetup_r+0xd4>)
 801b8aa:	429c      	cmp	r4, r3
 801b8ac:	d101      	bne.n	801b8b2 <__swsetup_r+0x46>
 801b8ae:	68ac      	ldr	r4, [r5, #8]
 801b8b0:	e7eb      	b.n	801b88a <__swsetup_r+0x1e>
 801b8b2:	4b24      	ldr	r3, [pc, #144]	; (801b944 <__swsetup_r+0xd8>)
 801b8b4:	429c      	cmp	r4, r3
 801b8b6:	bf08      	it	eq
 801b8b8:	68ec      	ldreq	r4, [r5, #12]
 801b8ba:	e7e6      	b.n	801b88a <__swsetup_r+0x1e>
 801b8bc:	0758      	lsls	r0, r3, #29
 801b8be:	d512      	bpl.n	801b8e6 <__swsetup_r+0x7a>
 801b8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b8c2:	b141      	cbz	r1, 801b8d6 <__swsetup_r+0x6a>
 801b8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b8c8:	4299      	cmp	r1, r3
 801b8ca:	d002      	beq.n	801b8d2 <__swsetup_r+0x66>
 801b8cc:	4630      	mov	r0, r6
 801b8ce:	f7ff fd77 	bl	801b3c0 <_free_r>
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	6363      	str	r3, [r4, #52]	; 0x34
 801b8d6:	89a3      	ldrh	r3, [r4, #12]
 801b8d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b8dc:	81a3      	strh	r3, [r4, #12]
 801b8de:	2300      	movs	r3, #0
 801b8e0:	6063      	str	r3, [r4, #4]
 801b8e2:	6923      	ldr	r3, [r4, #16]
 801b8e4:	6023      	str	r3, [r4, #0]
 801b8e6:	89a3      	ldrh	r3, [r4, #12]
 801b8e8:	f043 0308 	orr.w	r3, r3, #8
 801b8ec:	81a3      	strh	r3, [r4, #12]
 801b8ee:	6923      	ldr	r3, [r4, #16]
 801b8f0:	b94b      	cbnz	r3, 801b906 <__swsetup_r+0x9a>
 801b8f2:	89a3      	ldrh	r3, [r4, #12]
 801b8f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b8fc:	d003      	beq.n	801b906 <__swsetup_r+0x9a>
 801b8fe:	4621      	mov	r1, r4
 801b900:	4630      	mov	r0, r6
 801b902:	f7ff fcef 	bl	801b2e4 <__smakebuf_r>
 801b906:	89a0      	ldrh	r0, [r4, #12]
 801b908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b90c:	f010 0301 	ands.w	r3, r0, #1
 801b910:	d00a      	beq.n	801b928 <__swsetup_r+0xbc>
 801b912:	2300      	movs	r3, #0
 801b914:	60a3      	str	r3, [r4, #8]
 801b916:	6963      	ldr	r3, [r4, #20]
 801b918:	425b      	negs	r3, r3
 801b91a:	61a3      	str	r3, [r4, #24]
 801b91c:	6923      	ldr	r3, [r4, #16]
 801b91e:	b943      	cbnz	r3, 801b932 <__swsetup_r+0xc6>
 801b920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b924:	d1ba      	bne.n	801b89c <__swsetup_r+0x30>
 801b926:	bd70      	pop	{r4, r5, r6, pc}
 801b928:	0781      	lsls	r1, r0, #30
 801b92a:	bf58      	it	pl
 801b92c:	6963      	ldrpl	r3, [r4, #20]
 801b92e:	60a3      	str	r3, [r4, #8]
 801b930:	e7f4      	b.n	801b91c <__swsetup_r+0xb0>
 801b932:	2000      	movs	r0, #0
 801b934:	e7f7      	b.n	801b926 <__swsetup_r+0xba>
 801b936:	bf00      	nop
 801b938:	20000110 	.word	0x20000110
 801b93c:	0801f96c 	.word	0x0801f96c
 801b940:	0801f98c 	.word	0x0801f98c
 801b944:	0801f94c 	.word	0x0801f94c

0801b948 <__assert_func>:
 801b948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b94a:	4614      	mov	r4, r2
 801b94c:	461a      	mov	r2, r3
 801b94e:	4b09      	ldr	r3, [pc, #36]	; (801b974 <__assert_func+0x2c>)
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	4605      	mov	r5, r0
 801b954:	68d8      	ldr	r0, [r3, #12]
 801b956:	b14c      	cbz	r4, 801b96c <__assert_func+0x24>
 801b958:	4b07      	ldr	r3, [pc, #28]	; (801b978 <__assert_func+0x30>)
 801b95a:	9100      	str	r1, [sp, #0]
 801b95c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b960:	4906      	ldr	r1, [pc, #24]	; (801b97c <__assert_func+0x34>)
 801b962:	462b      	mov	r3, r5
 801b964:	f000 f81e 	bl	801b9a4 <fiprintf>
 801b968:	f000 fb6c 	bl	801c044 <abort>
 801b96c:	4b04      	ldr	r3, [pc, #16]	; (801b980 <__assert_func+0x38>)
 801b96e:	461c      	mov	r4, r3
 801b970:	e7f3      	b.n	801b95a <__assert_func+0x12>
 801b972:	bf00      	nop
 801b974:	20000110 	.word	0x20000110
 801b978:	0801fa22 	.word	0x0801fa22
 801b97c:	0801fa2f 	.word	0x0801fa2f
 801b980:	0801fa5d 	.word	0x0801fa5d

0801b984 <_close_r>:
 801b984:	b538      	push	{r3, r4, r5, lr}
 801b986:	4d06      	ldr	r5, [pc, #24]	; (801b9a0 <_close_r+0x1c>)
 801b988:	2300      	movs	r3, #0
 801b98a:	4604      	mov	r4, r0
 801b98c:	4608      	mov	r0, r1
 801b98e:	602b      	str	r3, [r5, #0]
 801b990:	f7e5 f83d 	bl	8000a0e <_close>
 801b994:	1c43      	adds	r3, r0, #1
 801b996:	d102      	bne.n	801b99e <_close_r+0x1a>
 801b998:	682b      	ldr	r3, [r5, #0]
 801b99a:	b103      	cbz	r3, 801b99e <_close_r+0x1a>
 801b99c:	6023      	str	r3, [r4, #0]
 801b99e:	bd38      	pop	{r3, r4, r5, pc}
 801b9a0:	2000e6f4 	.word	0x2000e6f4

0801b9a4 <fiprintf>:
 801b9a4:	b40e      	push	{r1, r2, r3}
 801b9a6:	b503      	push	{r0, r1, lr}
 801b9a8:	4601      	mov	r1, r0
 801b9aa:	ab03      	add	r3, sp, #12
 801b9ac:	4805      	ldr	r0, [pc, #20]	; (801b9c4 <fiprintf+0x20>)
 801b9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9b2:	6800      	ldr	r0, [r0, #0]
 801b9b4:	9301      	str	r3, [sp, #4]
 801b9b6:	f000 f86f 	bl	801ba98 <_vfiprintf_r>
 801b9ba:	b002      	add	sp, #8
 801b9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b9c0:	b003      	add	sp, #12
 801b9c2:	4770      	bx	lr
 801b9c4:	20000110 	.word	0x20000110

0801b9c8 <_fstat_r>:
 801b9c8:	b538      	push	{r3, r4, r5, lr}
 801b9ca:	4d07      	ldr	r5, [pc, #28]	; (801b9e8 <_fstat_r+0x20>)
 801b9cc:	2300      	movs	r3, #0
 801b9ce:	4604      	mov	r4, r0
 801b9d0:	4608      	mov	r0, r1
 801b9d2:	4611      	mov	r1, r2
 801b9d4:	602b      	str	r3, [r5, #0]
 801b9d6:	f7e5 f825 	bl	8000a24 <_fstat>
 801b9da:	1c43      	adds	r3, r0, #1
 801b9dc:	d102      	bne.n	801b9e4 <_fstat_r+0x1c>
 801b9de:	682b      	ldr	r3, [r5, #0]
 801b9e0:	b103      	cbz	r3, 801b9e4 <_fstat_r+0x1c>
 801b9e2:	6023      	str	r3, [r4, #0]
 801b9e4:	bd38      	pop	{r3, r4, r5, pc}
 801b9e6:	bf00      	nop
 801b9e8:	2000e6f4 	.word	0x2000e6f4

0801b9ec <_isatty_r>:
 801b9ec:	b538      	push	{r3, r4, r5, lr}
 801b9ee:	4d06      	ldr	r5, [pc, #24]	; (801ba08 <_isatty_r+0x1c>)
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	4604      	mov	r4, r0
 801b9f4:	4608      	mov	r0, r1
 801b9f6:	602b      	str	r3, [r5, #0]
 801b9f8:	f7e5 f823 	bl	8000a42 <_isatty>
 801b9fc:	1c43      	adds	r3, r0, #1
 801b9fe:	d102      	bne.n	801ba06 <_isatty_r+0x1a>
 801ba00:	682b      	ldr	r3, [r5, #0]
 801ba02:	b103      	cbz	r3, 801ba06 <_isatty_r+0x1a>
 801ba04:	6023      	str	r3, [r4, #0]
 801ba06:	bd38      	pop	{r3, r4, r5, pc}
 801ba08:	2000e6f4 	.word	0x2000e6f4

0801ba0c <_lseek_r>:
 801ba0c:	b538      	push	{r3, r4, r5, lr}
 801ba0e:	4d07      	ldr	r5, [pc, #28]	; (801ba2c <_lseek_r+0x20>)
 801ba10:	4604      	mov	r4, r0
 801ba12:	4608      	mov	r0, r1
 801ba14:	4611      	mov	r1, r2
 801ba16:	2200      	movs	r2, #0
 801ba18:	602a      	str	r2, [r5, #0]
 801ba1a:	461a      	mov	r2, r3
 801ba1c:	f7e5 f81b 	bl	8000a56 <_lseek>
 801ba20:	1c43      	adds	r3, r0, #1
 801ba22:	d102      	bne.n	801ba2a <_lseek_r+0x1e>
 801ba24:	682b      	ldr	r3, [r5, #0]
 801ba26:	b103      	cbz	r3, 801ba2a <_lseek_r+0x1e>
 801ba28:	6023      	str	r3, [r4, #0]
 801ba2a:	bd38      	pop	{r3, r4, r5, pc}
 801ba2c:	2000e6f4 	.word	0x2000e6f4

0801ba30 <__malloc_lock>:
 801ba30:	4801      	ldr	r0, [pc, #4]	; (801ba38 <__malloc_lock+0x8>)
 801ba32:	f7ff bc30 	b.w	801b296 <__retarget_lock_acquire_recursive>
 801ba36:	bf00      	nop
 801ba38:	2000e6e8 	.word	0x2000e6e8

0801ba3c <__malloc_unlock>:
 801ba3c:	4801      	ldr	r0, [pc, #4]	; (801ba44 <__malloc_unlock+0x8>)
 801ba3e:	f7ff bc2b 	b.w	801b298 <__retarget_lock_release_recursive>
 801ba42:	bf00      	nop
 801ba44:	2000e6e8 	.word	0x2000e6e8

0801ba48 <__sfputc_r>:
 801ba48:	6893      	ldr	r3, [r2, #8]
 801ba4a:	3b01      	subs	r3, #1
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	b410      	push	{r4}
 801ba50:	6093      	str	r3, [r2, #8]
 801ba52:	da07      	bge.n	801ba64 <__sfputc_r+0x1c>
 801ba54:	6994      	ldr	r4, [r2, #24]
 801ba56:	42a3      	cmp	r3, r4
 801ba58:	db01      	blt.n	801ba5e <__sfputc_r+0x16>
 801ba5a:	290a      	cmp	r1, #10
 801ba5c:	d102      	bne.n	801ba64 <__sfputc_r+0x1c>
 801ba5e:	bc10      	pop	{r4}
 801ba60:	f7ff bea0 	b.w	801b7a4 <__swbuf_r>
 801ba64:	6813      	ldr	r3, [r2, #0]
 801ba66:	1c58      	adds	r0, r3, #1
 801ba68:	6010      	str	r0, [r2, #0]
 801ba6a:	7019      	strb	r1, [r3, #0]
 801ba6c:	4608      	mov	r0, r1
 801ba6e:	bc10      	pop	{r4}
 801ba70:	4770      	bx	lr

0801ba72 <__sfputs_r>:
 801ba72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba74:	4606      	mov	r6, r0
 801ba76:	460f      	mov	r7, r1
 801ba78:	4614      	mov	r4, r2
 801ba7a:	18d5      	adds	r5, r2, r3
 801ba7c:	42ac      	cmp	r4, r5
 801ba7e:	d101      	bne.n	801ba84 <__sfputs_r+0x12>
 801ba80:	2000      	movs	r0, #0
 801ba82:	e007      	b.n	801ba94 <__sfputs_r+0x22>
 801ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba88:	463a      	mov	r2, r7
 801ba8a:	4630      	mov	r0, r6
 801ba8c:	f7ff ffdc 	bl	801ba48 <__sfputc_r>
 801ba90:	1c43      	adds	r3, r0, #1
 801ba92:	d1f3      	bne.n	801ba7c <__sfputs_r+0xa>
 801ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ba98 <_vfiprintf_r>:
 801ba98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba9c:	460d      	mov	r5, r1
 801ba9e:	b09d      	sub	sp, #116	; 0x74
 801baa0:	4614      	mov	r4, r2
 801baa2:	4698      	mov	r8, r3
 801baa4:	4606      	mov	r6, r0
 801baa6:	b118      	cbz	r0, 801bab0 <_vfiprintf_r+0x18>
 801baa8:	6983      	ldr	r3, [r0, #24]
 801baaa:	b90b      	cbnz	r3, 801bab0 <_vfiprintf_r+0x18>
 801baac:	f7ff fb30 	bl	801b110 <__sinit>
 801bab0:	4b89      	ldr	r3, [pc, #548]	; (801bcd8 <_vfiprintf_r+0x240>)
 801bab2:	429d      	cmp	r5, r3
 801bab4:	d11b      	bne.n	801baee <_vfiprintf_r+0x56>
 801bab6:	6875      	ldr	r5, [r6, #4]
 801bab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801baba:	07d9      	lsls	r1, r3, #31
 801babc:	d405      	bmi.n	801baca <_vfiprintf_r+0x32>
 801babe:	89ab      	ldrh	r3, [r5, #12]
 801bac0:	059a      	lsls	r2, r3, #22
 801bac2:	d402      	bmi.n	801baca <_vfiprintf_r+0x32>
 801bac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bac6:	f7ff fbe6 	bl	801b296 <__retarget_lock_acquire_recursive>
 801baca:	89ab      	ldrh	r3, [r5, #12]
 801bacc:	071b      	lsls	r3, r3, #28
 801bace:	d501      	bpl.n	801bad4 <_vfiprintf_r+0x3c>
 801bad0:	692b      	ldr	r3, [r5, #16]
 801bad2:	b9eb      	cbnz	r3, 801bb10 <_vfiprintf_r+0x78>
 801bad4:	4629      	mov	r1, r5
 801bad6:	4630      	mov	r0, r6
 801bad8:	f7ff fec8 	bl	801b86c <__swsetup_r>
 801badc:	b1c0      	cbz	r0, 801bb10 <_vfiprintf_r+0x78>
 801bade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bae0:	07dc      	lsls	r4, r3, #31
 801bae2:	d50e      	bpl.n	801bb02 <_vfiprintf_r+0x6a>
 801bae4:	f04f 30ff 	mov.w	r0, #4294967295
 801bae8:	b01d      	add	sp, #116	; 0x74
 801baea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baee:	4b7b      	ldr	r3, [pc, #492]	; (801bcdc <_vfiprintf_r+0x244>)
 801baf0:	429d      	cmp	r5, r3
 801baf2:	d101      	bne.n	801baf8 <_vfiprintf_r+0x60>
 801baf4:	68b5      	ldr	r5, [r6, #8]
 801baf6:	e7df      	b.n	801bab8 <_vfiprintf_r+0x20>
 801baf8:	4b79      	ldr	r3, [pc, #484]	; (801bce0 <_vfiprintf_r+0x248>)
 801bafa:	429d      	cmp	r5, r3
 801bafc:	bf08      	it	eq
 801bafe:	68f5      	ldreq	r5, [r6, #12]
 801bb00:	e7da      	b.n	801bab8 <_vfiprintf_r+0x20>
 801bb02:	89ab      	ldrh	r3, [r5, #12]
 801bb04:	0598      	lsls	r0, r3, #22
 801bb06:	d4ed      	bmi.n	801bae4 <_vfiprintf_r+0x4c>
 801bb08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb0a:	f7ff fbc5 	bl	801b298 <__retarget_lock_release_recursive>
 801bb0e:	e7e9      	b.n	801bae4 <_vfiprintf_r+0x4c>
 801bb10:	2300      	movs	r3, #0
 801bb12:	9309      	str	r3, [sp, #36]	; 0x24
 801bb14:	2320      	movs	r3, #32
 801bb16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bb1a:	f8cd 800c 	str.w	r8, [sp, #12]
 801bb1e:	2330      	movs	r3, #48	; 0x30
 801bb20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bce4 <_vfiprintf_r+0x24c>
 801bb24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bb28:	f04f 0901 	mov.w	r9, #1
 801bb2c:	4623      	mov	r3, r4
 801bb2e:	469a      	mov	sl, r3
 801bb30:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb34:	b10a      	cbz	r2, 801bb3a <_vfiprintf_r+0xa2>
 801bb36:	2a25      	cmp	r2, #37	; 0x25
 801bb38:	d1f9      	bne.n	801bb2e <_vfiprintf_r+0x96>
 801bb3a:	ebba 0b04 	subs.w	fp, sl, r4
 801bb3e:	d00b      	beq.n	801bb58 <_vfiprintf_r+0xc0>
 801bb40:	465b      	mov	r3, fp
 801bb42:	4622      	mov	r2, r4
 801bb44:	4629      	mov	r1, r5
 801bb46:	4630      	mov	r0, r6
 801bb48:	f7ff ff93 	bl	801ba72 <__sfputs_r>
 801bb4c:	3001      	adds	r0, #1
 801bb4e:	f000 80aa 	beq.w	801bca6 <_vfiprintf_r+0x20e>
 801bb52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb54:	445a      	add	r2, fp
 801bb56:	9209      	str	r2, [sp, #36]	; 0x24
 801bb58:	f89a 3000 	ldrb.w	r3, [sl]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	f000 80a2 	beq.w	801bca6 <_vfiprintf_r+0x20e>
 801bb62:	2300      	movs	r3, #0
 801bb64:	f04f 32ff 	mov.w	r2, #4294967295
 801bb68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb6c:	f10a 0a01 	add.w	sl, sl, #1
 801bb70:	9304      	str	r3, [sp, #16]
 801bb72:	9307      	str	r3, [sp, #28]
 801bb74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bb78:	931a      	str	r3, [sp, #104]	; 0x68
 801bb7a:	4654      	mov	r4, sl
 801bb7c:	2205      	movs	r2, #5
 801bb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb82:	4858      	ldr	r0, [pc, #352]	; (801bce4 <_vfiprintf_r+0x24c>)
 801bb84:	f7e4 fb24 	bl	80001d0 <memchr>
 801bb88:	9a04      	ldr	r2, [sp, #16]
 801bb8a:	b9d8      	cbnz	r0, 801bbc4 <_vfiprintf_r+0x12c>
 801bb8c:	06d1      	lsls	r1, r2, #27
 801bb8e:	bf44      	itt	mi
 801bb90:	2320      	movmi	r3, #32
 801bb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bb96:	0713      	lsls	r3, r2, #28
 801bb98:	bf44      	itt	mi
 801bb9a:	232b      	movmi	r3, #43	; 0x2b
 801bb9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bba0:	f89a 3000 	ldrb.w	r3, [sl]
 801bba4:	2b2a      	cmp	r3, #42	; 0x2a
 801bba6:	d015      	beq.n	801bbd4 <_vfiprintf_r+0x13c>
 801bba8:	9a07      	ldr	r2, [sp, #28]
 801bbaa:	4654      	mov	r4, sl
 801bbac:	2000      	movs	r0, #0
 801bbae:	f04f 0c0a 	mov.w	ip, #10
 801bbb2:	4621      	mov	r1, r4
 801bbb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bbb8:	3b30      	subs	r3, #48	; 0x30
 801bbba:	2b09      	cmp	r3, #9
 801bbbc:	d94e      	bls.n	801bc5c <_vfiprintf_r+0x1c4>
 801bbbe:	b1b0      	cbz	r0, 801bbee <_vfiprintf_r+0x156>
 801bbc0:	9207      	str	r2, [sp, #28]
 801bbc2:	e014      	b.n	801bbee <_vfiprintf_r+0x156>
 801bbc4:	eba0 0308 	sub.w	r3, r0, r8
 801bbc8:	fa09 f303 	lsl.w	r3, r9, r3
 801bbcc:	4313      	orrs	r3, r2
 801bbce:	9304      	str	r3, [sp, #16]
 801bbd0:	46a2      	mov	sl, r4
 801bbd2:	e7d2      	b.n	801bb7a <_vfiprintf_r+0xe2>
 801bbd4:	9b03      	ldr	r3, [sp, #12]
 801bbd6:	1d19      	adds	r1, r3, #4
 801bbd8:	681b      	ldr	r3, [r3, #0]
 801bbda:	9103      	str	r1, [sp, #12]
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	bfbb      	ittet	lt
 801bbe0:	425b      	neglt	r3, r3
 801bbe2:	f042 0202 	orrlt.w	r2, r2, #2
 801bbe6:	9307      	strge	r3, [sp, #28]
 801bbe8:	9307      	strlt	r3, [sp, #28]
 801bbea:	bfb8      	it	lt
 801bbec:	9204      	strlt	r2, [sp, #16]
 801bbee:	7823      	ldrb	r3, [r4, #0]
 801bbf0:	2b2e      	cmp	r3, #46	; 0x2e
 801bbf2:	d10c      	bne.n	801bc0e <_vfiprintf_r+0x176>
 801bbf4:	7863      	ldrb	r3, [r4, #1]
 801bbf6:	2b2a      	cmp	r3, #42	; 0x2a
 801bbf8:	d135      	bne.n	801bc66 <_vfiprintf_r+0x1ce>
 801bbfa:	9b03      	ldr	r3, [sp, #12]
 801bbfc:	1d1a      	adds	r2, r3, #4
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	9203      	str	r2, [sp, #12]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	bfb8      	it	lt
 801bc06:	f04f 33ff 	movlt.w	r3, #4294967295
 801bc0a:	3402      	adds	r4, #2
 801bc0c:	9305      	str	r3, [sp, #20]
 801bc0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801bce8 <_vfiprintf_r+0x250>
 801bc12:	7821      	ldrb	r1, [r4, #0]
 801bc14:	2203      	movs	r2, #3
 801bc16:	4650      	mov	r0, sl
 801bc18:	f7e4 fada 	bl	80001d0 <memchr>
 801bc1c:	b140      	cbz	r0, 801bc30 <_vfiprintf_r+0x198>
 801bc1e:	2340      	movs	r3, #64	; 0x40
 801bc20:	eba0 000a 	sub.w	r0, r0, sl
 801bc24:	fa03 f000 	lsl.w	r0, r3, r0
 801bc28:	9b04      	ldr	r3, [sp, #16]
 801bc2a:	4303      	orrs	r3, r0
 801bc2c:	3401      	adds	r4, #1
 801bc2e:	9304      	str	r3, [sp, #16]
 801bc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc34:	482d      	ldr	r0, [pc, #180]	; (801bcec <_vfiprintf_r+0x254>)
 801bc36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bc3a:	2206      	movs	r2, #6
 801bc3c:	f7e4 fac8 	bl	80001d0 <memchr>
 801bc40:	2800      	cmp	r0, #0
 801bc42:	d03f      	beq.n	801bcc4 <_vfiprintf_r+0x22c>
 801bc44:	4b2a      	ldr	r3, [pc, #168]	; (801bcf0 <_vfiprintf_r+0x258>)
 801bc46:	bb1b      	cbnz	r3, 801bc90 <_vfiprintf_r+0x1f8>
 801bc48:	9b03      	ldr	r3, [sp, #12]
 801bc4a:	3307      	adds	r3, #7
 801bc4c:	f023 0307 	bic.w	r3, r3, #7
 801bc50:	3308      	adds	r3, #8
 801bc52:	9303      	str	r3, [sp, #12]
 801bc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc56:	443b      	add	r3, r7
 801bc58:	9309      	str	r3, [sp, #36]	; 0x24
 801bc5a:	e767      	b.n	801bb2c <_vfiprintf_r+0x94>
 801bc5c:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc60:	460c      	mov	r4, r1
 801bc62:	2001      	movs	r0, #1
 801bc64:	e7a5      	b.n	801bbb2 <_vfiprintf_r+0x11a>
 801bc66:	2300      	movs	r3, #0
 801bc68:	3401      	adds	r4, #1
 801bc6a:	9305      	str	r3, [sp, #20]
 801bc6c:	4619      	mov	r1, r3
 801bc6e:	f04f 0c0a 	mov.w	ip, #10
 801bc72:	4620      	mov	r0, r4
 801bc74:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc78:	3a30      	subs	r2, #48	; 0x30
 801bc7a:	2a09      	cmp	r2, #9
 801bc7c:	d903      	bls.n	801bc86 <_vfiprintf_r+0x1ee>
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d0c5      	beq.n	801bc0e <_vfiprintf_r+0x176>
 801bc82:	9105      	str	r1, [sp, #20]
 801bc84:	e7c3      	b.n	801bc0e <_vfiprintf_r+0x176>
 801bc86:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc8a:	4604      	mov	r4, r0
 801bc8c:	2301      	movs	r3, #1
 801bc8e:	e7f0      	b.n	801bc72 <_vfiprintf_r+0x1da>
 801bc90:	ab03      	add	r3, sp, #12
 801bc92:	9300      	str	r3, [sp, #0]
 801bc94:	462a      	mov	r2, r5
 801bc96:	4b17      	ldr	r3, [pc, #92]	; (801bcf4 <_vfiprintf_r+0x25c>)
 801bc98:	a904      	add	r1, sp, #16
 801bc9a:	4630      	mov	r0, r6
 801bc9c:	f3af 8000 	nop.w
 801bca0:	4607      	mov	r7, r0
 801bca2:	1c78      	adds	r0, r7, #1
 801bca4:	d1d6      	bne.n	801bc54 <_vfiprintf_r+0x1bc>
 801bca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bca8:	07d9      	lsls	r1, r3, #31
 801bcaa:	d405      	bmi.n	801bcb8 <_vfiprintf_r+0x220>
 801bcac:	89ab      	ldrh	r3, [r5, #12]
 801bcae:	059a      	lsls	r2, r3, #22
 801bcb0:	d402      	bmi.n	801bcb8 <_vfiprintf_r+0x220>
 801bcb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcb4:	f7ff faf0 	bl	801b298 <__retarget_lock_release_recursive>
 801bcb8:	89ab      	ldrh	r3, [r5, #12]
 801bcba:	065b      	lsls	r3, r3, #25
 801bcbc:	f53f af12 	bmi.w	801bae4 <_vfiprintf_r+0x4c>
 801bcc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bcc2:	e711      	b.n	801bae8 <_vfiprintf_r+0x50>
 801bcc4:	ab03      	add	r3, sp, #12
 801bcc6:	9300      	str	r3, [sp, #0]
 801bcc8:	462a      	mov	r2, r5
 801bcca:	4b0a      	ldr	r3, [pc, #40]	; (801bcf4 <_vfiprintf_r+0x25c>)
 801bccc:	a904      	add	r1, sp, #16
 801bcce:	4630      	mov	r0, r6
 801bcd0:	f000 f880 	bl	801bdd4 <_printf_i>
 801bcd4:	e7e4      	b.n	801bca0 <_vfiprintf_r+0x208>
 801bcd6:	bf00      	nop
 801bcd8:	0801f96c 	.word	0x0801f96c
 801bcdc:	0801f98c 	.word	0x0801f98c
 801bce0:	0801f94c 	.word	0x0801f94c
 801bce4:	0801fa5e 	.word	0x0801fa5e
 801bce8:	0801fa64 	.word	0x0801fa64
 801bcec:	0801fa68 	.word	0x0801fa68
 801bcf0:	00000000 	.word	0x00000000
 801bcf4:	0801ba73 	.word	0x0801ba73

0801bcf8 <_printf_common>:
 801bcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bcfc:	4616      	mov	r6, r2
 801bcfe:	4699      	mov	r9, r3
 801bd00:	688a      	ldr	r2, [r1, #8]
 801bd02:	690b      	ldr	r3, [r1, #16]
 801bd04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bd08:	4293      	cmp	r3, r2
 801bd0a:	bfb8      	it	lt
 801bd0c:	4613      	movlt	r3, r2
 801bd0e:	6033      	str	r3, [r6, #0]
 801bd10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bd14:	4607      	mov	r7, r0
 801bd16:	460c      	mov	r4, r1
 801bd18:	b10a      	cbz	r2, 801bd1e <_printf_common+0x26>
 801bd1a:	3301      	adds	r3, #1
 801bd1c:	6033      	str	r3, [r6, #0]
 801bd1e:	6823      	ldr	r3, [r4, #0]
 801bd20:	0699      	lsls	r1, r3, #26
 801bd22:	bf42      	ittt	mi
 801bd24:	6833      	ldrmi	r3, [r6, #0]
 801bd26:	3302      	addmi	r3, #2
 801bd28:	6033      	strmi	r3, [r6, #0]
 801bd2a:	6825      	ldr	r5, [r4, #0]
 801bd2c:	f015 0506 	ands.w	r5, r5, #6
 801bd30:	d106      	bne.n	801bd40 <_printf_common+0x48>
 801bd32:	f104 0a19 	add.w	sl, r4, #25
 801bd36:	68e3      	ldr	r3, [r4, #12]
 801bd38:	6832      	ldr	r2, [r6, #0]
 801bd3a:	1a9b      	subs	r3, r3, r2
 801bd3c:	42ab      	cmp	r3, r5
 801bd3e:	dc26      	bgt.n	801bd8e <_printf_common+0x96>
 801bd40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bd44:	1e13      	subs	r3, r2, #0
 801bd46:	6822      	ldr	r2, [r4, #0]
 801bd48:	bf18      	it	ne
 801bd4a:	2301      	movne	r3, #1
 801bd4c:	0692      	lsls	r2, r2, #26
 801bd4e:	d42b      	bmi.n	801bda8 <_printf_common+0xb0>
 801bd50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bd54:	4649      	mov	r1, r9
 801bd56:	4638      	mov	r0, r7
 801bd58:	47c0      	blx	r8
 801bd5a:	3001      	adds	r0, #1
 801bd5c:	d01e      	beq.n	801bd9c <_printf_common+0xa4>
 801bd5e:	6823      	ldr	r3, [r4, #0]
 801bd60:	68e5      	ldr	r5, [r4, #12]
 801bd62:	6832      	ldr	r2, [r6, #0]
 801bd64:	f003 0306 	and.w	r3, r3, #6
 801bd68:	2b04      	cmp	r3, #4
 801bd6a:	bf08      	it	eq
 801bd6c:	1aad      	subeq	r5, r5, r2
 801bd6e:	68a3      	ldr	r3, [r4, #8]
 801bd70:	6922      	ldr	r2, [r4, #16]
 801bd72:	bf0c      	ite	eq
 801bd74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bd78:	2500      	movne	r5, #0
 801bd7a:	4293      	cmp	r3, r2
 801bd7c:	bfc4      	itt	gt
 801bd7e:	1a9b      	subgt	r3, r3, r2
 801bd80:	18ed      	addgt	r5, r5, r3
 801bd82:	2600      	movs	r6, #0
 801bd84:	341a      	adds	r4, #26
 801bd86:	42b5      	cmp	r5, r6
 801bd88:	d11a      	bne.n	801bdc0 <_printf_common+0xc8>
 801bd8a:	2000      	movs	r0, #0
 801bd8c:	e008      	b.n	801bda0 <_printf_common+0xa8>
 801bd8e:	2301      	movs	r3, #1
 801bd90:	4652      	mov	r2, sl
 801bd92:	4649      	mov	r1, r9
 801bd94:	4638      	mov	r0, r7
 801bd96:	47c0      	blx	r8
 801bd98:	3001      	adds	r0, #1
 801bd9a:	d103      	bne.n	801bda4 <_printf_common+0xac>
 801bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 801bda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bda4:	3501      	adds	r5, #1
 801bda6:	e7c6      	b.n	801bd36 <_printf_common+0x3e>
 801bda8:	18e1      	adds	r1, r4, r3
 801bdaa:	1c5a      	adds	r2, r3, #1
 801bdac:	2030      	movs	r0, #48	; 0x30
 801bdae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bdb2:	4422      	add	r2, r4
 801bdb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bdb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bdbc:	3302      	adds	r3, #2
 801bdbe:	e7c7      	b.n	801bd50 <_printf_common+0x58>
 801bdc0:	2301      	movs	r3, #1
 801bdc2:	4622      	mov	r2, r4
 801bdc4:	4649      	mov	r1, r9
 801bdc6:	4638      	mov	r0, r7
 801bdc8:	47c0      	blx	r8
 801bdca:	3001      	adds	r0, #1
 801bdcc:	d0e6      	beq.n	801bd9c <_printf_common+0xa4>
 801bdce:	3601      	adds	r6, #1
 801bdd0:	e7d9      	b.n	801bd86 <_printf_common+0x8e>
	...

0801bdd4 <_printf_i>:
 801bdd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bdd8:	7e0f      	ldrb	r7, [r1, #24]
 801bdda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bddc:	2f78      	cmp	r7, #120	; 0x78
 801bdde:	4691      	mov	r9, r2
 801bde0:	4680      	mov	r8, r0
 801bde2:	460c      	mov	r4, r1
 801bde4:	469a      	mov	sl, r3
 801bde6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bdea:	d807      	bhi.n	801bdfc <_printf_i+0x28>
 801bdec:	2f62      	cmp	r7, #98	; 0x62
 801bdee:	d80a      	bhi.n	801be06 <_printf_i+0x32>
 801bdf0:	2f00      	cmp	r7, #0
 801bdf2:	f000 80d8 	beq.w	801bfa6 <_printf_i+0x1d2>
 801bdf6:	2f58      	cmp	r7, #88	; 0x58
 801bdf8:	f000 80a3 	beq.w	801bf42 <_printf_i+0x16e>
 801bdfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801be04:	e03a      	b.n	801be7c <_printf_i+0xa8>
 801be06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801be0a:	2b15      	cmp	r3, #21
 801be0c:	d8f6      	bhi.n	801bdfc <_printf_i+0x28>
 801be0e:	a101      	add	r1, pc, #4	; (adr r1, 801be14 <_printf_i+0x40>)
 801be10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801be14:	0801be6d 	.word	0x0801be6d
 801be18:	0801be81 	.word	0x0801be81
 801be1c:	0801bdfd 	.word	0x0801bdfd
 801be20:	0801bdfd 	.word	0x0801bdfd
 801be24:	0801bdfd 	.word	0x0801bdfd
 801be28:	0801bdfd 	.word	0x0801bdfd
 801be2c:	0801be81 	.word	0x0801be81
 801be30:	0801bdfd 	.word	0x0801bdfd
 801be34:	0801bdfd 	.word	0x0801bdfd
 801be38:	0801bdfd 	.word	0x0801bdfd
 801be3c:	0801bdfd 	.word	0x0801bdfd
 801be40:	0801bf8d 	.word	0x0801bf8d
 801be44:	0801beb1 	.word	0x0801beb1
 801be48:	0801bf6f 	.word	0x0801bf6f
 801be4c:	0801bdfd 	.word	0x0801bdfd
 801be50:	0801bdfd 	.word	0x0801bdfd
 801be54:	0801bfaf 	.word	0x0801bfaf
 801be58:	0801bdfd 	.word	0x0801bdfd
 801be5c:	0801beb1 	.word	0x0801beb1
 801be60:	0801bdfd 	.word	0x0801bdfd
 801be64:	0801bdfd 	.word	0x0801bdfd
 801be68:	0801bf77 	.word	0x0801bf77
 801be6c:	682b      	ldr	r3, [r5, #0]
 801be6e:	1d1a      	adds	r2, r3, #4
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	602a      	str	r2, [r5, #0]
 801be74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801be7c:	2301      	movs	r3, #1
 801be7e:	e0a3      	b.n	801bfc8 <_printf_i+0x1f4>
 801be80:	6820      	ldr	r0, [r4, #0]
 801be82:	6829      	ldr	r1, [r5, #0]
 801be84:	0606      	lsls	r6, r0, #24
 801be86:	f101 0304 	add.w	r3, r1, #4
 801be8a:	d50a      	bpl.n	801bea2 <_printf_i+0xce>
 801be8c:	680e      	ldr	r6, [r1, #0]
 801be8e:	602b      	str	r3, [r5, #0]
 801be90:	2e00      	cmp	r6, #0
 801be92:	da03      	bge.n	801be9c <_printf_i+0xc8>
 801be94:	232d      	movs	r3, #45	; 0x2d
 801be96:	4276      	negs	r6, r6
 801be98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801be9c:	485e      	ldr	r0, [pc, #376]	; (801c018 <_printf_i+0x244>)
 801be9e:	230a      	movs	r3, #10
 801bea0:	e019      	b.n	801bed6 <_printf_i+0x102>
 801bea2:	680e      	ldr	r6, [r1, #0]
 801bea4:	602b      	str	r3, [r5, #0]
 801bea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801beaa:	bf18      	it	ne
 801beac:	b236      	sxthne	r6, r6
 801beae:	e7ef      	b.n	801be90 <_printf_i+0xbc>
 801beb0:	682b      	ldr	r3, [r5, #0]
 801beb2:	6820      	ldr	r0, [r4, #0]
 801beb4:	1d19      	adds	r1, r3, #4
 801beb6:	6029      	str	r1, [r5, #0]
 801beb8:	0601      	lsls	r1, r0, #24
 801beba:	d501      	bpl.n	801bec0 <_printf_i+0xec>
 801bebc:	681e      	ldr	r6, [r3, #0]
 801bebe:	e002      	b.n	801bec6 <_printf_i+0xf2>
 801bec0:	0646      	lsls	r6, r0, #25
 801bec2:	d5fb      	bpl.n	801bebc <_printf_i+0xe8>
 801bec4:	881e      	ldrh	r6, [r3, #0]
 801bec6:	4854      	ldr	r0, [pc, #336]	; (801c018 <_printf_i+0x244>)
 801bec8:	2f6f      	cmp	r7, #111	; 0x6f
 801beca:	bf0c      	ite	eq
 801becc:	2308      	moveq	r3, #8
 801bece:	230a      	movne	r3, #10
 801bed0:	2100      	movs	r1, #0
 801bed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bed6:	6865      	ldr	r5, [r4, #4]
 801bed8:	60a5      	str	r5, [r4, #8]
 801beda:	2d00      	cmp	r5, #0
 801bedc:	bfa2      	ittt	ge
 801bede:	6821      	ldrge	r1, [r4, #0]
 801bee0:	f021 0104 	bicge.w	r1, r1, #4
 801bee4:	6021      	strge	r1, [r4, #0]
 801bee6:	b90e      	cbnz	r6, 801beec <_printf_i+0x118>
 801bee8:	2d00      	cmp	r5, #0
 801beea:	d04d      	beq.n	801bf88 <_printf_i+0x1b4>
 801beec:	4615      	mov	r5, r2
 801beee:	fbb6 f1f3 	udiv	r1, r6, r3
 801bef2:	fb03 6711 	mls	r7, r3, r1, r6
 801bef6:	5dc7      	ldrb	r7, [r0, r7]
 801bef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801befc:	4637      	mov	r7, r6
 801befe:	42bb      	cmp	r3, r7
 801bf00:	460e      	mov	r6, r1
 801bf02:	d9f4      	bls.n	801beee <_printf_i+0x11a>
 801bf04:	2b08      	cmp	r3, #8
 801bf06:	d10b      	bne.n	801bf20 <_printf_i+0x14c>
 801bf08:	6823      	ldr	r3, [r4, #0]
 801bf0a:	07de      	lsls	r6, r3, #31
 801bf0c:	d508      	bpl.n	801bf20 <_printf_i+0x14c>
 801bf0e:	6923      	ldr	r3, [r4, #16]
 801bf10:	6861      	ldr	r1, [r4, #4]
 801bf12:	4299      	cmp	r1, r3
 801bf14:	bfde      	ittt	le
 801bf16:	2330      	movle	r3, #48	; 0x30
 801bf18:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bf1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bf20:	1b52      	subs	r2, r2, r5
 801bf22:	6122      	str	r2, [r4, #16]
 801bf24:	f8cd a000 	str.w	sl, [sp]
 801bf28:	464b      	mov	r3, r9
 801bf2a:	aa03      	add	r2, sp, #12
 801bf2c:	4621      	mov	r1, r4
 801bf2e:	4640      	mov	r0, r8
 801bf30:	f7ff fee2 	bl	801bcf8 <_printf_common>
 801bf34:	3001      	adds	r0, #1
 801bf36:	d14c      	bne.n	801bfd2 <_printf_i+0x1fe>
 801bf38:	f04f 30ff 	mov.w	r0, #4294967295
 801bf3c:	b004      	add	sp, #16
 801bf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf42:	4835      	ldr	r0, [pc, #212]	; (801c018 <_printf_i+0x244>)
 801bf44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bf48:	6829      	ldr	r1, [r5, #0]
 801bf4a:	6823      	ldr	r3, [r4, #0]
 801bf4c:	f851 6b04 	ldr.w	r6, [r1], #4
 801bf50:	6029      	str	r1, [r5, #0]
 801bf52:	061d      	lsls	r5, r3, #24
 801bf54:	d514      	bpl.n	801bf80 <_printf_i+0x1ac>
 801bf56:	07df      	lsls	r7, r3, #31
 801bf58:	bf44      	itt	mi
 801bf5a:	f043 0320 	orrmi.w	r3, r3, #32
 801bf5e:	6023      	strmi	r3, [r4, #0]
 801bf60:	b91e      	cbnz	r6, 801bf6a <_printf_i+0x196>
 801bf62:	6823      	ldr	r3, [r4, #0]
 801bf64:	f023 0320 	bic.w	r3, r3, #32
 801bf68:	6023      	str	r3, [r4, #0]
 801bf6a:	2310      	movs	r3, #16
 801bf6c:	e7b0      	b.n	801bed0 <_printf_i+0xfc>
 801bf6e:	6823      	ldr	r3, [r4, #0]
 801bf70:	f043 0320 	orr.w	r3, r3, #32
 801bf74:	6023      	str	r3, [r4, #0]
 801bf76:	2378      	movs	r3, #120	; 0x78
 801bf78:	4828      	ldr	r0, [pc, #160]	; (801c01c <_printf_i+0x248>)
 801bf7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bf7e:	e7e3      	b.n	801bf48 <_printf_i+0x174>
 801bf80:	0659      	lsls	r1, r3, #25
 801bf82:	bf48      	it	mi
 801bf84:	b2b6      	uxthmi	r6, r6
 801bf86:	e7e6      	b.n	801bf56 <_printf_i+0x182>
 801bf88:	4615      	mov	r5, r2
 801bf8a:	e7bb      	b.n	801bf04 <_printf_i+0x130>
 801bf8c:	682b      	ldr	r3, [r5, #0]
 801bf8e:	6826      	ldr	r6, [r4, #0]
 801bf90:	6961      	ldr	r1, [r4, #20]
 801bf92:	1d18      	adds	r0, r3, #4
 801bf94:	6028      	str	r0, [r5, #0]
 801bf96:	0635      	lsls	r5, r6, #24
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	d501      	bpl.n	801bfa0 <_printf_i+0x1cc>
 801bf9c:	6019      	str	r1, [r3, #0]
 801bf9e:	e002      	b.n	801bfa6 <_printf_i+0x1d2>
 801bfa0:	0670      	lsls	r0, r6, #25
 801bfa2:	d5fb      	bpl.n	801bf9c <_printf_i+0x1c8>
 801bfa4:	8019      	strh	r1, [r3, #0]
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	6123      	str	r3, [r4, #16]
 801bfaa:	4615      	mov	r5, r2
 801bfac:	e7ba      	b.n	801bf24 <_printf_i+0x150>
 801bfae:	682b      	ldr	r3, [r5, #0]
 801bfb0:	1d1a      	adds	r2, r3, #4
 801bfb2:	602a      	str	r2, [r5, #0]
 801bfb4:	681d      	ldr	r5, [r3, #0]
 801bfb6:	6862      	ldr	r2, [r4, #4]
 801bfb8:	2100      	movs	r1, #0
 801bfba:	4628      	mov	r0, r5
 801bfbc:	f7e4 f908 	bl	80001d0 <memchr>
 801bfc0:	b108      	cbz	r0, 801bfc6 <_printf_i+0x1f2>
 801bfc2:	1b40      	subs	r0, r0, r5
 801bfc4:	6060      	str	r0, [r4, #4]
 801bfc6:	6863      	ldr	r3, [r4, #4]
 801bfc8:	6123      	str	r3, [r4, #16]
 801bfca:	2300      	movs	r3, #0
 801bfcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bfd0:	e7a8      	b.n	801bf24 <_printf_i+0x150>
 801bfd2:	6923      	ldr	r3, [r4, #16]
 801bfd4:	462a      	mov	r2, r5
 801bfd6:	4649      	mov	r1, r9
 801bfd8:	4640      	mov	r0, r8
 801bfda:	47d0      	blx	sl
 801bfdc:	3001      	adds	r0, #1
 801bfde:	d0ab      	beq.n	801bf38 <_printf_i+0x164>
 801bfe0:	6823      	ldr	r3, [r4, #0]
 801bfe2:	079b      	lsls	r3, r3, #30
 801bfe4:	d413      	bmi.n	801c00e <_printf_i+0x23a>
 801bfe6:	68e0      	ldr	r0, [r4, #12]
 801bfe8:	9b03      	ldr	r3, [sp, #12]
 801bfea:	4298      	cmp	r0, r3
 801bfec:	bfb8      	it	lt
 801bfee:	4618      	movlt	r0, r3
 801bff0:	e7a4      	b.n	801bf3c <_printf_i+0x168>
 801bff2:	2301      	movs	r3, #1
 801bff4:	4632      	mov	r2, r6
 801bff6:	4649      	mov	r1, r9
 801bff8:	4640      	mov	r0, r8
 801bffa:	47d0      	blx	sl
 801bffc:	3001      	adds	r0, #1
 801bffe:	d09b      	beq.n	801bf38 <_printf_i+0x164>
 801c000:	3501      	adds	r5, #1
 801c002:	68e3      	ldr	r3, [r4, #12]
 801c004:	9903      	ldr	r1, [sp, #12]
 801c006:	1a5b      	subs	r3, r3, r1
 801c008:	42ab      	cmp	r3, r5
 801c00a:	dcf2      	bgt.n	801bff2 <_printf_i+0x21e>
 801c00c:	e7eb      	b.n	801bfe6 <_printf_i+0x212>
 801c00e:	2500      	movs	r5, #0
 801c010:	f104 0619 	add.w	r6, r4, #25
 801c014:	e7f5      	b.n	801c002 <_printf_i+0x22e>
 801c016:	bf00      	nop
 801c018:	0801fa6f 	.word	0x0801fa6f
 801c01c:	0801fa80 	.word	0x0801fa80

0801c020 <_read_r>:
 801c020:	b538      	push	{r3, r4, r5, lr}
 801c022:	4d07      	ldr	r5, [pc, #28]	; (801c040 <_read_r+0x20>)
 801c024:	4604      	mov	r4, r0
 801c026:	4608      	mov	r0, r1
 801c028:	4611      	mov	r1, r2
 801c02a:	2200      	movs	r2, #0
 801c02c:	602a      	str	r2, [r5, #0]
 801c02e:	461a      	mov	r2, r3
 801c030:	f7e4 fcb4 	bl	800099c <_read>
 801c034:	1c43      	adds	r3, r0, #1
 801c036:	d102      	bne.n	801c03e <_read_r+0x1e>
 801c038:	682b      	ldr	r3, [r5, #0]
 801c03a:	b103      	cbz	r3, 801c03e <_read_r+0x1e>
 801c03c:	6023      	str	r3, [r4, #0]
 801c03e:	bd38      	pop	{r3, r4, r5, pc}
 801c040:	2000e6f4 	.word	0x2000e6f4

0801c044 <abort>:
 801c044:	b508      	push	{r3, lr}
 801c046:	2006      	movs	r0, #6
 801c048:	f000 f82c 	bl	801c0a4 <raise>
 801c04c:	2001      	movs	r0, #1
 801c04e:	f7e4 fc9b 	bl	8000988 <_exit>

0801c052 <_raise_r>:
 801c052:	291f      	cmp	r1, #31
 801c054:	b538      	push	{r3, r4, r5, lr}
 801c056:	4604      	mov	r4, r0
 801c058:	460d      	mov	r5, r1
 801c05a:	d904      	bls.n	801c066 <_raise_r+0x14>
 801c05c:	2316      	movs	r3, #22
 801c05e:	6003      	str	r3, [r0, #0]
 801c060:	f04f 30ff 	mov.w	r0, #4294967295
 801c064:	bd38      	pop	{r3, r4, r5, pc}
 801c066:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c068:	b112      	cbz	r2, 801c070 <_raise_r+0x1e>
 801c06a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c06e:	b94b      	cbnz	r3, 801c084 <_raise_r+0x32>
 801c070:	4620      	mov	r0, r4
 801c072:	f000 f831 	bl	801c0d8 <_getpid_r>
 801c076:	462a      	mov	r2, r5
 801c078:	4601      	mov	r1, r0
 801c07a:	4620      	mov	r0, r4
 801c07c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c080:	f000 b818 	b.w	801c0b4 <_kill_r>
 801c084:	2b01      	cmp	r3, #1
 801c086:	d00a      	beq.n	801c09e <_raise_r+0x4c>
 801c088:	1c59      	adds	r1, r3, #1
 801c08a:	d103      	bne.n	801c094 <_raise_r+0x42>
 801c08c:	2316      	movs	r3, #22
 801c08e:	6003      	str	r3, [r0, #0]
 801c090:	2001      	movs	r0, #1
 801c092:	e7e7      	b.n	801c064 <_raise_r+0x12>
 801c094:	2400      	movs	r4, #0
 801c096:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c09a:	4628      	mov	r0, r5
 801c09c:	4798      	blx	r3
 801c09e:	2000      	movs	r0, #0
 801c0a0:	e7e0      	b.n	801c064 <_raise_r+0x12>
	...

0801c0a4 <raise>:
 801c0a4:	4b02      	ldr	r3, [pc, #8]	; (801c0b0 <raise+0xc>)
 801c0a6:	4601      	mov	r1, r0
 801c0a8:	6818      	ldr	r0, [r3, #0]
 801c0aa:	f7ff bfd2 	b.w	801c052 <_raise_r>
 801c0ae:	bf00      	nop
 801c0b0:	20000110 	.word	0x20000110

0801c0b4 <_kill_r>:
 801c0b4:	b538      	push	{r3, r4, r5, lr}
 801c0b6:	4d07      	ldr	r5, [pc, #28]	; (801c0d4 <_kill_r+0x20>)
 801c0b8:	2300      	movs	r3, #0
 801c0ba:	4604      	mov	r4, r0
 801c0bc:	4608      	mov	r0, r1
 801c0be:	4611      	mov	r1, r2
 801c0c0:	602b      	str	r3, [r5, #0]
 801c0c2:	f7e4 fc4f 	bl	8000964 <_kill>
 801c0c6:	1c43      	adds	r3, r0, #1
 801c0c8:	d102      	bne.n	801c0d0 <_kill_r+0x1c>
 801c0ca:	682b      	ldr	r3, [r5, #0]
 801c0cc:	b103      	cbz	r3, 801c0d0 <_kill_r+0x1c>
 801c0ce:	6023      	str	r3, [r4, #0]
 801c0d0:	bd38      	pop	{r3, r4, r5, pc}
 801c0d2:	bf00      	nop
 801c0d4:	2000e6f4 	.word	0x2000e6f4

0801c0d8 <_getpid_r>:
 801c0d8:	f7e4 bc3c 	b.w	8000954 <_getpid>

0801c0dc <_init>:
 801c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0de:	bf00      	nop
 801c0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0e2:	bc08      	pop	{r3}
 801c0e4:	469e      	mov	lr, r3
 801c0e6:	4770      	bx	lr

0801c0e8 <_fini>:
 801c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0ea:	bf00      	nop
 801c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0ee:	bc08      	pop	{r3}
 801c0f0:	469e      	mov	lr, r3
 801c0f2:	4770      	bx	lr
